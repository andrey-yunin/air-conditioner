
air_conditioner.elf:     file format elf32-littlenios2
air_conditioner.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0400029c

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x00012e7c memsz 0x00012e7c flags r-x
    LOAD off    0x00013e9c vaddr 0x04012e9c paddr 0x040139a8 align 2**12
         filesz 0x00000b0c memsz 0x00000b0c flags rw-
    LOAD off    0x000154b4 vaddr 0x040144b4 paddr 0x040144b4 align 2**12
         filesz 0x00000000 memsz 0x0000198c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000027c  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00012378  0400029c  0400029c  0000129c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000888  04012614  04012614  00013614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000b0c  04012e9c  040139a8  00013e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000198c  040144b4  040144b4  000154b4  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_controller 00000000  04015e40  04015e40  000149a8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000149a8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001068  00000000  00000000  000149d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000263db  00000000  00000000  00015a38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009be2  00000000  00000000  0003be13  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c595  00000000  00000000  000459f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000291c  00000000  00000000  00051f8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003e38  00000000  00000000  000548a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000194aa  00000000  00000000  000586e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00071b8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001b28  00000000  00000000  00071ba0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00077292  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00077295  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00077298  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00077299  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0007729a  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0007729e  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000772a2  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000772a6  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000772af  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000772b8  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000018  00000000  00000000  000772c1  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002d  00000000  00000000  000772d9  2**0
                  CONTENTS, READONLY
 29 .jdi          00009e31  00000000  00000000  00077306  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0008d5e2  00000000  00000000  00081137  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
0400029c l    d  .text	00000000 .text
04012614 l    d  .rodata	00000000 .rodata
04012e9c l    d  .rwdata	00000000 .rwdata
040144b4 l    d  .bss	00000000 .bss
04015e40 l    d  .sdram_controller	00000000 .sdram_controller
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../air_conditioner_bsp//obj/HAL/src/crt0.o
040002d4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 adc.c
00000000 l    df *ABS*	00000000 global_variables.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 system_control.c
00000000 l    df *ABS*	00000000 system_monitoring.c
00000000 l    df *ABS*	00000000 temperature_average.c
00000000 l    df *ABS*	00000000 temperature_set.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0401297a l     O .rodata	00000010 zeroes.4404
04003fe8 l     F .text	000000bc __sbprintf
0401298a l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
040041f8 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
04005d50 l     F .text	00000008 __fp_unlock
04005d64 l     F .text	0000019c __sinit.part.1
04005f00 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
04012e9c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
040132e0 l     O .rwdata	00000020 lc_ctype_charset
040132c0 l     O .rwdata	00000020 lc_message_charset
04013300 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
040129bc l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
040093d4 l     F .text	000000fc __sprint_r.part.0
04012ae0 l     O .rodata	00000010 zeroes.4349
0400aa10 l     F .text	000000bc __sbprintf
04012af0 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0400e9cc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0400eae0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0400eb0c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0400ec00 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0400ece8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0400edd4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0400efb0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
04013998 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0400f224 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0400f360 l     F .text	00000034 alt_dev_reg
040138e8 l     O .rwdata	0000002c jtag_uart
04013914 l     O .rwdata	0000003c modular_adc_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_modular_adc.c
0400f658 l     F .text	000000a8 alt_adc_irq
00000000 l    df *ABS*	00000000 draw_vga.c
00000000 l    df *ABS*	00000000 sierra.c
040109d0 l     F .text	0000004c init_Sierra_interrupt
00000000 l    df *ABS*	00000000 sierra_task.c
00000000 l    df *ABS*	00000000 sierra_time.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0401154c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
04011a3c l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
04011d1c l     F .text	0000003c alt_get_errno
04011d58 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 char_map.c
00000000 l    df *ABS*	00000000 csw.o
04012050 l       .text	00000000 restore_context
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0401395c g     O .rwdata	00000004 SEM_4
040144ec g     O .bss	00000004 current_tcb
04008a18 g     F .text	00000074 _mprec_log10
0400f8f8 g     F .text	00000050 adc_stop
04008b04 g     F .text	0000008c __any_on
0400afc4 g     F .text	00000054 _isatty_r
040129c8 g     O .rodata	00000028 __mprec_tinytens
0400eeec g     F .text	0000007c alt_main
0401005c g     F .text	00000090 safe_write_pixel
04001b84 g     F .text	000000c0 _puts_r
04015d40 g     O .bss	00000100 alt_irq
0400b018 g     F .text	00000060 _lseek_r
00000000 g       .debug_aranges	00000000 alt_exception_trap
04011364 g     F .text	00000070 init_period_time
040139a8 g       *ABS*	00000000 __flash_rwdata_start
0400d408 g     F .text	00000088 .hidden __eqdf2
040158e0 g     O .bss	00000460 TCB_LIST
04010ae8 g     F .text	000000a4 Sierra_Initiation_HW_and_SW
04015e40 g       *ABS*	00000000 __alt_heap_start
04001b48 g     F .text	0000003c printf
0400b230 g     F .text	0000009c _wcrtomb_r
04009294 g     F .text	0000005c __sseek
040060b0 g     F .text	00000010 __sinit
0400b0d8 g     F .text	00000140 __swbuf_r
04006b84 g     F .text	0000007c _setlocale_r
04005f08 g     F .text	00000078 __sfmoreglue
0400ef8c g     F .text	00000024 __malloc_unlock
04014620 g     O .bss	00000320 task_adc_stack
04011fc4 g     F .text	00000040 upper_char_line
04000c00 g     F .text	00000440 .hidden __divsf3
04007854 g     F .text	0000015c memmove
04006098 g     F .text	00000018 _cleanup
04007ad8 g     F .text	000000a8 _Balloc
04001954 g     F .text	00000070 .hidden __fixsfsi
0400073c g     F .text	0000007c init_vga
040110d4 g     F .text	000000c4 task_block
0400d490 g     F .text	000000dc .hidden __gtdf2
04011fa0 g     F .text	00000024 altera_nios2_gen2_irq_init
04000000 g     F .entry	0000000c __reset
0400fabc g     F .text	00000048 adc_interrupt_disable
040108ac g     F .text	00000124 int_print
04010fa4 g     F .text	000000a4 task_getinfo
04000020 g       *ABS*	00000000 __flash_exceptions_start
0400af68 g     F .text	0000005c _fstat_r
040144d8 g     O .bss	00000004 errno
04009210 g     F .text	00000008 __seofread
0400016c g       .exceptions	00000000 .Ltrap_handler
04000000 g       *ABS*	00000000 __alt_mem_sdram_controller
0400f7ac g     F .text	00000074 altera_modular_adc_init
040144e0 g     O .bss	00000004 alt_argv
0401b950 g       *ABS*	00000000 _gp
04001470 g     F .text	000004e4 .hidden __subsf3
04013768 g     O .rwdata	00000180 alt_fd_list
04010a1c g     F .text	00000030 sierra_SW_driver_version
04012d20 g     O .rodata	0000017c font32lower
040116ec g     F .text	00000090 alt_find_dev
0400770c g     F .text	00000148 memcpy
040144b4 g     O .bss	00000004 temperature_medium
0400fd14 g     F .text	000000bc draw_vline
04005d58 g     F .text	0000000c _cleanup_r
0400e848 g     F .text	000000dc .hidden __floatsidf
0400f9c0 g     F .text	0000003c adc_set_mode_run_continuously
04011b20 g     F .text	0000007c alt_io_redirect
0400d56c g     F .text	000000f4 .hidden __ltdf2
04012614 g       *ABS*	00000000 __DTOR_END__
04001c44 g     F .text	00000014 puts
0400fdd0 g     F .text	00000050 swap
040090f4 g     F .text	00000074 __fpclassifyd
04008974 g     F .text	000000a4 __ratio
0400a9f4 g     F .text	0000001c __vfiprintf_internal
04010cb0 g     F .text	0000004c tsw_off
0400f4d8 g     F .text	000000ec altera_avalon_jtag_uart_read
04001b18 g     F .text	00000030 _printf_r
0400c0d0 g     F .text	00000064 .hidden __udivsi3
0400ec3c g     F .text	000000ac isatty
04012a18 g     O .rodata	000000c8 __mprec_tens
040112d0 g     F .text	00000094 task_yield
04006c00 g     F .text	0000000c __locale_charset
040144d4 g     O .bss	00000004 __malloc_top_pad
04010c60 g     F .text	00000050 tsw_on
04013970 g     O .rwdata	00000004 __mb_cur_max
04006c30 g     F .text	0000000c _localeconv_r
04013950 g     O .rwdata	00000004 SEM_1
04007f0c g     F .text	0000003c __i2b
04006534 g     F .text	000004c8 __sfvwrite_r
04009168 g     F .text	00000054 _sbrk_r
0400b078 g     F .text	00000060 _read_r
0401399c g     O .rwdata	00000008 altera_modular_adc_list
04013990 g     O .rwdata	00000004 alt_max_fd
0400ac5c g     F .text	000000f0 _fclose_r
04011214 g     F .text	000000bc task_change_prio
04010650 g     F .text	0000025c char_print
04005d20 g     F .text	00000030 fflush
040144d0 g     O .bss	00000004 __malloc_max_sbrked_mem
04011b9c g     F .text	00000180 alt_irq_register
0400c18c g     F .text	000008ac .hidden __adddf3
0400871c g     F .text	0000010c __b2d
0400ba14 g     F .text	000005c4 .hidden __umoddi3
0400ee10 g     F .text	000000dc lseek
04013968 g     O .rwdata	00000004 _global_impure_ptr
04008b90 g     F .text	00000564 _realloc_r
04015e40 g       *ABS*	00000000 __bss_end
0401194c g     F .text	000000f0 alt_iic_isr_register
0400b418 g     F .text	000005fc .hidden __udivdi3
0400aec4 g     F .text	00000024 _fputwc_r
0400fb88 g     F .text	0000003c adc_wait_for_interrupt
040129f0 g     O .rodata	00000028 __mprec_bigtens
04007cf0 g     F .text	00000104 __s2b
0400e924 g     F .text	000000a8 .hidden __floatunsidf
0400845c g     F .text	00000060 __mcmp
040000e4 g       .exceptions	00000000 sierra_irq_or_trap
040060d0 g     F .text	00000018 __fp_lock_all
04011900 g     F .text	0000004c alt_ic_irq_enabled
040144b8 g     O .bss	00000004 state
040144f4 g     O .bss	00000004 alt_irq_active
040001c8 g     F .exceptions	000000d4 alt_irq_handler
04013740 g     O .rwdata	00000028 alt_dev_null
0400f980 g     F .text	00000040 adc_set_mode_run_once
0401152c g     F .text	00000020 alt_dcache_flush_all
04007df4 g     F .text	00000068 __hi0bits
040120ac g       .text	00000000 SW_CTX_SWITCH
0400e7c8 g     F .text	00000080 .hidden __fixdfsi
040139a8 g       *ABS*	00000000 __ram_rwdata_end
04013988 g     O .rwdata	00000008 alt_dev_list
0400f260 g     F .text	00000100 write
040002d8 g     F .text	00000178 task_adc_code
04012e9c g       *ABS*	00000000 __ram_rodata_end
0400eb48 g     F .text	000000b8 fstat
040000b4 g       .exceptions	00000000 context_switch
0400d56c g     F .text	000000f4 .hidden __ledf2
04000888 g     F .text	000000c0 system_status_vga
040081d4 g     F .text	00000140 __pow5mult
0400f948 g     F .text	00000038 adc_start
040094e8 g     F .text	0000150c ___vfiprintf_internal_r
040144c8 g     O .bss	00000004 __nlocale_changed
0400c134 g     F .text	00000058 .hidden __umodsi3
04015e40 g       *ABS*	00000000 end
04012044 g       .text	00000000 HW_CTX_SWITCH
040144f0 g     O .bss	00000001 NEXT_TASKID
04012614 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
04001ab4 g     F .text	00000064 .hidden __clzsi2
0400f5c4 g     F .text	00000094 altera_avalon_jtag_uart_write
040060c0 g     F .text	00000004 __sfp_lock_acquire
04007628 g     F .text	000000e4 memchr
04000150 g       .exceptions	00000000 interrupt_testing
04001cf0 g     F .text	000022dc ___vfprintf_internal_r
04006224 g     F .text	00000310 _free_r
04006c0c g     F .text	00000010 __locale_mb_cur_max
04000b80 g     F .text	00000058 task_temperature_set_code
04012460 g     F .text	00000180 __call_exitprocs
040144c4 g     O .bss	00000004 __mlocale_changed
04013974 g     O .rwdata	00000004 __malloc_sbrk_base
0400029c g     F .text	0000003c _start
04014940 g     O .bss	00000320 task_temperature_average_stack
0400fc64 g     F .text	000000b0 draw_hline
04008314 g     F .text	00000148 __lshift
04013960 g     O .rwdata	00000004 SEM_5
0400efec g     F .text	00000104 read
0400f3cc g     F .text	0000004c alt_sys_init
04012348 g     F .text	00000118 __register_exitproc
040144bc g     O .bss	00000004 temperature_set
04007f48 g     F .text	0000028c __multiply
04000bd8 g     F .text	00000028 .hidden __mulsi3
04012e9c g       *ABS*	00000000 __ram_rwdata_start
04012614 g       *ABS*	00000000 __ram_rodata_start
040145f8 g     O .bss	00000028 __malloc_current_mallinfo
04008828 g     F .text	0000014c __d2b
0400f418 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
040121bc g     F .text	000000c4 alt_get_fd
0400ab2c g     F .text	00000054 _close_r
04014c60 g     O .bss	00000320 task_temperature_set_stack
04014f80 g     O .bss	00000320 task_system_monitoring_stack
040122cc g     F .text	0000007c memcmp
04010e18 g     F .text	0000018c task_create
04015e40 g       *ABS*	00000000 __alt_stack_base
040040a4 g     F .text	00000154 __swsetup_r
0400fa78 g     F .text	00000044 adc_interrupt_enable
0400ca38 g     F .text	000009d0 .hidden __divdf3
04005f80 g     F .text	00000118 __sfp
04008a8c g     F .text	00000078 __copybits
04013338 g     O .rwdata	00000408 __malloc_av_
040060cc g     F .text	00000004 __sinit_lock_release
0400d660 g     F .text	0000086c .hidden __muldf3
040113d4 g     F .text	000000ac wait_for_next_period
040091bc g     F .text	00000054 __sread
0400fe20 g     F .text	0000023c draw_angled_line
040120b4 g     F .text	00000108 alt_find_file
04011588 g     F .text	000000a4 alt_dev_llist_insert
0400ef68 g     F .text	00000024 __malloc_lock
0400f174 g     F .text	000000b0 sbrk
040007b8 g     F .text	00000068 temperature_set_vga
04005cc4 g     F .text	0000005c _fflush_r
0400ab80 g     F .text	000000dc _calloc_r
04010b8c g     F .text	000000d4 get_next_task
040144b4 g       *ABS*	00000000 __bss_start
040079b0 g     F .text	00000128 memset
040144f1 g     O .bss	00000001 RUNNING_TASKID
04000490 g     F .text	00000174 main
040144e8 g     O .bss	00000004 first_csw
040144e4 g     O .bss	00000004 alt_envp
040144cc g     O .bss	00000004 __malloc_max_total_mem
04013964 g     O .rwdata	00000004 SEM_6
0400f478 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0400b218 g     F .text	00000018 __swbuf
0400f700 g     F .text	000000ac alt_adc_word_read
04000604 g     F .text	00000138 task_system_control_code
040092f0 g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
0400ad4c g     F .text	00000014 fclose
04004420 g     F .text	00001688 _dtoa_r
04006e1c g     F .text	0000080c _malloc_r
0400b38c g     F .text	00000030 __ascii_wctomb
04013994 g     O .rwdata	00000004 alt_errno
040152a0 g     O .bss	00000320 task_IDLE_stack
040069fc g     F .text	000000c4 _fwalk
0400bfd8 g     F .text	00000084 .hidden __divsi3
04006100 g     F .text	00000124 _malloc_trim_r
04010a4c g     F .text	00000034 sierra_HW_version
04012614 g       *ABS*	00000000 __CTOR_END__
04001040 g     F .text	00000430 .hidden __mulsf3
040092f8 g     F .text	000000dc strcmp
04012614 g       *ABS*	00000000 __flash_rodata_start
04012614 g       *ABS*	00000000 __DTOR_LIST__
04010a80 g     F .text	00000034 SierraTime_base_reg
04013954 g     O .rwdata	00000004 SEM_2
04011480 g     F .text	000000ac delay
0400d408 g     F .text	00000088 .hidden __nedf2
04010cfc g     F .text	00000058 get_new_task
0400f394 g     F .text	00000038 alt_irq_init
0400f0f0 g     F .text	00000084 alt_release_fd
04012834 g     O .rodata	00000100 .hidden __clz_tab
040144c0 g     O .bss	00000004 _PathLocale
04012280 g     F .text	00000014 atexit
04012ba4 g     O .rodata	0000017c font32upper
0400aacc g     F .text	00000060 _write_r
04012048 g       .text	00000000 gettask
04006c3c g     F .text	00000018 setlocale
040155c0 g     O .bss	00000320 task_system_control_stack
04011198 g     F .text	0000007c task_delete
04012004 g     F .text	00000040 lower_char_line
0401396c g     O .rwdata	00000004 _impure_ptr
040144dc g     O .bss	00000004 alt_argc
04005aa8 g     F .text	0000021c __sflush_r
0401168c g     F .text	00000060 _do_dtors
04006c28 g     F .text	00000008 __locale_cjk_lang
04000948 g     F .text	000000a4 clear_screen_black
04000020 g       .exceptions	00000000 alt_irq_entry
040086b8 g     F .text	00000064 __ulp
040060e8 g     F .text	00000018 __fp_unlock_all
04013980 g     O .rwdata	00000008 alt_fs_list
04000450 g     F .text	00000040 task_IDLE_code
04000020 g       *ABS*	00000000 __ram_exceptions_start
04006c54 g     F .text	0000000c localeconv
0401179c g     F .text	00000050 alt_ic_isr_register
040139a8 g       *ABS*	00000000 _edata
040102f4 g     F .text	0000007c safey_write_pixel
04015e40 g       *ABS*	00000000 _end
040000e0 g       .exceptions	00000000 sierra_trap
0400fb48 g     F .text	00000040 adc_interrupt_asserted
0400ad60 g     F .text	00000164 __fputwc
0400029c g       *ABS*	00000000 __ram_exceptions_end
04010ab4 g     F .text	00000034 set_timebase
04013958 g     O .rwdata	00000004 SEM_3
04011048 g     F .text	0000008c task_start
04011874 g     F .text	0000008c alt_ic_irq_disable
04009218 g     F .text	0000007c __swrite
04013978 g     O .rwdata	00000004 __malloc_trim_threshold
0400fb04 g     F .text	00000044 adc_clear_interrupt_status
04006c1c g     F .text	0000000c __locale_msgcharset
04012294 g     F .text	00000038 exit
04006ac0 g     F .text	000000c4 _fwalk_reent
040019c4 g     F .text	000000f0 .hidden __floatunsisf
040084bc g     F .text	000001fc __mdiff
04000a48 g     F .text	00000138 task_temperature_average_code
0400c05c g     F .text	00000074 .hidden __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
040060c4 g     F .text	00000004 __sfp_lock_release
04000820 g     F .text	00000068 temperature_medium_vga
0400f8b8 g     F .text	00000040 altera_modular_adc_open
040125e0 g     F .text	00000034 _exit
040100ec g     F .text	00000208 draw_circle
04010370 g     F .text	00000234 draw_filled_circle
04006c60 g     F .text	000001bc __smakebuf_r
04010d54 g     F .text	000000c4 irq_wait
04001c58 g     F .text	00000098 strlen
04011e44 g     F .text	0000015c open
0400d490 g     F .text	000000dc .hidden __gedf2
0400f9fc g     F .text	0000007c adc_recalibrate
0401397c g     O .rwdata	00000004 __wctomb
040094d0 g     F .text	00000018 __sprint_r
0401177c g     F .text	00000020 alt_icache_flush_all
040139a4 g     O .rwdata	00000004 alt_priority_mask
040117ec g     F .text	00000088 alt_ic_irq_enable
04003fcc g     F .text	0000001c __vfprintf_internal
0400b3bc g     F .text	0000005c _wctomb_r
0400fbc4 g     F .text	000000a0 clear_screen
0400decc g     F .text	000008fc .hidden __subdf3
040105a4 g     F .text	000000ac tty_print
04007e5c g     F .text	000000b0 __lo0bits
0401162c g     F .text	00000060 _do_ctors
040009ec g     F .text	0000005c task_system_monitoring_code
0400b2cc g     F .text	000000c0 wcrtomb
0400ea08 g     F .text	000000d8 close
040144f8 g     O .bss	00000100 buffer_temperature
0400ed50 g     F .text	00000084 alt_load
0400aee8 g     F .text	00000080 fputwc
0400f820 g     F .text	00000098 alt_adc_register_callback
040060c8 g     F .text	00000004 __sinit_lock_acquire
04007ba8 g     F .text	00000148 __multadd
04007b80 g     F .text	00000028 _Bfree



Disassembly of section .entry:

04000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000000:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000004:	0840a714 	ori	at,at,668
    jmp r1
 4000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

04000020 <alt_exception>:
         */
         
        /*
         * !S Is the exception caused by a Sierra HW IRQ?
         */
        addi  	sp, sp, -8			 	# used registers to stack
 4000020:	defffe04 	addi	sp,sp,-8
        stwio  	r2, 0(sp) 
 4000024:	d8800035 	stwio	r2,0(sp)
        stwio  	at, 4(sp)
 4000028:	d8400135 	stwio	at,4(sp)
 400002c:	00420234 	movhi	at,2056
        
        movia 	at, CPUstatusB_reg
 4000030:	08440c04 	addi	at,at,4144
   	    ldwio 	at, 0(at)    			# Read Status-register B
 4000034:	08400037 	ldwio	at,0(at)
   	    andi  	at, at, 1               # Only lowest bit is interesting
 4000038:	0840004c 	andi	at,at,1
   	    bgtu  	at, r0, context_switch 	# If the bit is set (at>0), it is  
 400003c:	00401d36 	bltu	zero,at,40000b4 <context_switch>
   	    						      	# a Sierra HW irq (HW ctx swtich)

        /*
         * !S Is the exception caused by a Sierra trap?
         */
        ldwio r2, -4(ea)              	/* last instr. op-code is put in r2 */ 
 4000040:	e8bfff37 	ldwio	r2,-4(ea)
        movhi at, 0x003b              	/* upper half of trap opcode */
 4000044:	00400ef4 	movhi	at,59
        ori   at, at, 0x683a          	/* lower half of trap opcode */
 4000048:	085a0e94 	ori	at,at,26682
        beq   r2, at, sierra_trap 		# Sierra trap (SW ctx switch)
 400004c:	10402426 	beq	r2,at,40000e0 <sierra_trap>
           
        /*
         * !S Not Sierra irq or exception. Restore r2, at and stack
         */   

       ldwio r2, 0(sp)
 4000050:	d8800037 	ldwio	r2,0(sp)
       ldwio at, 4(sp)
 4000054:	d8400137 	ldwio	at,4(sp)
       addi sp, sp, 8 					# sp now in original position (1/3)
 4000058:	dec00204 	addi	sp,sp,8

# normal exception.entry starts here       
       addi  sp, sp, -76
 400005c:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 4000060:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 4000064:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 4000068:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 400006c:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000070:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000074:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 4000078:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 400007c:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 4000080:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 4000084:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 4000088:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 400008c:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000090:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000094:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 4000098:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 400009c:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 40000a0:	dbc01015 	stw	r15,64(sp)

        stw   r5,  68(sp) 		/* r5=estatus */ 
 40000a4:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4 		/* re-issue the interrupted instruction */
 40000a8:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40000ac:	dbc01215 	stw	r15,72(sp)
        
        br 	  interrupt_testing # !S Branch added to avoid sierra routines
 40000b0:	00002706 	br	4000150 <interrupt_testing>

040000b4 <context_switch>:
 40000b4:	00810074 	movhi	r2,1025
       /* 
        * Do not save context on first tsw interrupt 
        * (no task status needs to be saved) 
        */

   		movia 	r2, first_csw 
 40000b8:	10913a04 	addi	r2,r2,17640
   		ldwio   at, 0(r2)
 40000bc:	10400037 	ldwio	at,0(r2)
   		bgtu  	at, r0, sierra_irq_or_trap		# Jump to if first_csw != 0
 40000c0:	00400836 	bltu	zero,at,40000e4 <sierra_irq_or_trap>
   		
   		addi  	at, r0, 1            			# Set first_csw = 1
 40000c4:	00400044 	movi	at,1
   		stwio   at, 0(r2)						# first_csw(et) <- (at)
 40000c8:	10400035 	stwio	at,0(r2)
		
		ldwio	r2, 0(sp)					# restore r2, at and stack
 40000cc:	d8800037 	ldwio	r2,0(sp)
		ldwio 	at, 4(sp) 
 40000d0:	d8400137 	ldwio	at,4(sp)
   		addi 	sp, sp, 8					# sp now in original position (2/3)
 40000d4:	dec00204 	addi	sp,sp,8
   		rdctl 	r5, estatus
 40000d8:	000b307a 	rdctl	r5,estatus
 		br 		interrupt_testing			# results in jump to HW_CTX_SWITCH 
 40000dc:	00001c06 	br	4000150 <interrupt_testing>

040000e0 <sierra_trap>:
	 * !S Save content of registers into running tasks tcb 
	 * (hw irq or sw trap) 
	 */
sierra_trap: 

		addi ea, ea, 4		/* !S add ea temporary so save register can be used 
 40000e0:	ef400104 	addi	ea,ea,4

040000e4 <sierra_irq_or_trap>:
		                       by both hw irq and sw trap */
		
		
sierra_irq_or_trap:

		ldwio 	r2, 0(sp)
 40000e4:	d8800037 	ldwio	r2,0(sp)

		ldwio 	at, 4(sp) 				
 40000e8:	d8400137 	ldwio	at,4(sp)
    	stwio	at, TCB_REG_AT(at)
 40000ec:	08400235 	stwio	at,8(at)
       	
       	addi 	sp, sp, 8			  # sp now in original position (3/3)
 40000f0:	dec00204 	addi	sp,sp,8
 40000f4:	00410074 	movhi	at,1025
       	       	
       	movia	at, current_tcb		  # at = current_tcb
 40000f8:	08513b04 	addi	at,at,17644
	    ldwio   at, 0(at)			  # Get address to current_tcb variable
 40000fc:	08400037 	ldwio	at,0(at)
 
		stwio	r2, TCB_REG_RETURNVALUES+0(at)
 4000100:	08800335 	stwio	r2,12(at)
   		stwio	r3, TCB_REG_RETURNVALUES+4(at)
 4000104:	08c00435 	stwio	r3,16(at)
    
   		stwio	r4, TCB_REG_ARG+0(at)
 4000108:	09000535 	stwio	r4,20(at)
   		stwio	r5, TCB_REG_ARG+4(at)
 400010c:	09400635 	stwio	r5,24(at)
   		stwio	r6, TCB_REG_ARG+8(at)
 4000110:	09800735 	stwio	r6,28(at)
		stwio 	r7, TCB_REG_ARG+12(at)
 4000114:	09c00835 	stwio	r7,32(at)
	
		rdctl r5, estatus 
 4000118:	000b307a 	rdctl	r5,estatus
	
		stwio	r8,  TCB_REG_GPR+0(at)
 400011c:	0a000935 	stwio	r8,36(at)
		stwio	r9,  TCB_REG_GPR+4(at)
 4000120:	0a400a35 	stwio	r9,40(at)
		stwio	r10, TCB_REG_GPR+8(at)
 4000124:	0a800b35 	stwio	r10,44(at)
		stwio	r11, TCB_REG_GPR+12(at)
 4000128:	0ac00c35 	stwio	r11,48(at)
		stwio	r12, TCB_REG_GPR+16(at)
 400012c:	0b000d35 	stwio	r12,52(at)
		stwio	r13, TCB_REG_GPR+20(at)
 4000130:	0b400e35 	stwio	r13,56(at)
		stwio	r14, TCB_REG_GPR+24(at)
 4000134:	0b800f35 	stwio	r14,60(at)
		stwio	r15, TCB_REG_GPR+28(at)
 4000138:	0bc01035 	stwio	r15,64(at)
	
 		# r16-r23 is callee saved registers
		/* r24, r25 not affected */
		/* r26, GP not affected */
	
    	stwio	sp, TCB_STACKPTR(at) 	# r27
 400013c:	0ec01e35 	stwio	sp,120(at)
	
		stwio	r28, TCB_REG_FP(at)
 4000140:	0f001b35 	stwio	fp,108(at)

        addi  	r15, ea, -4 	        # s49 nios ref, hw isr must substract -4 from ea
 4000144:	ebffff04 	addi	r15,ea,-4
        								# trap case is handled later
        stwio   r15, TCB_REG_EA(at)		# r29 return address from interrupt
 4000148:	0bc01c35 	stwio	r15,112(at)

		/* r30 not affected */
		stwio	ra, TCB_REG_RA(at)		# r31 return address  to subrutine
 400014c:	0fc01d35 	stwio	ra,116(at)

04000150 <interrupt_testing>:
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000150:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000154:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 4000158:	10000326 	beq	r2,zero,4000168 <interrupt_testing+0x18>
        beq   r4, zero, .Lnot_irq
 400015c:	20000226 	beq	r4,zero,4000168 <interrupt_testing+0x18>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000160:	40001c80 	call	40001c8 <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000164:	00000306 	br	4000174 <.Ltrap_handler+0x8>
        /*
         * The other exception handling code goes here.
         */
         
         #/////////////////////////////////
         br .Ltrap_handler   # !S taskswitch trap 
 4000168:	00000006 	br	400016c <.Ltrap_handler>

0400016c <.Ltrap_handler>:
         */

        #break    #(SN)

	
		jmpi SW_CTX_SWITCH 
 400016c:	40120ac1 	jmpi	40120ac <SW_CTX_SWITCH>

        /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 4000170:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 4000174:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)
 4000178:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 400017c:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 4000180:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 4000184:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 4000188:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 400018c:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 4000190:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 4000194:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 4000198:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 400019c:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 40001a0:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40001a4:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40001a8:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40001ac:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40001b0:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40001b4:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40001b8:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40001bc:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 40001c0:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40001c4:	ef80083a 	eret

040001c8 <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40001c8:	defff904 	addi	sp,sp,-28
 40001cc:	dfc00615 	stw	ra,24(sp)
 40001d0:	df000515 	stw	fp,20(sp)
 40001d4:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 40001d8:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 40001dc:	0005313a 	rdctl	r2,ipending
 40001e0:	e0bffe15 	stw	r2,-8(fp)

  return active;
 40001e4:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 40001e8:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 40001ec:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 40001f0:	00800044 	movi	r2,1
 40001f4:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 40001f8:	e0fffb17 	ldw	r3,-20(fp)
 40001fc:	e0bffc17 	ldw	r2,-16(fp)
 4000200:	1884703a 	and	r2,r3,r2
 4000204:	10001426 	beq	r2,zero,4000258 <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 4000208:	00810074 	movhi	r2,1025
 400020c:	10975004 	addi	r2,r2,23872
 4000210:	e0fffd17 	ldw	r3,-12(fp)
 4000214:	180690fa 	slli	r3,r3,3
 4000218:	10c5883a 	add	r2,r2,r3
 400021c:	10c00017 	ldw	r3,0(r2)
 4000220:	00810074 	movhi	r2,1025
 4000224:	10975004 	addi	r2,r2,23872
 4000228:	e13ffd17 	ldw	r4,-12(fp)
 400022c:	200890fa 	slli	r4,r4,3
 4000230:	1105883a 	add	r2,r2,r4
 4000234:	10800104 	addi	r2,r2,4
 4000238:	10800017 	ldw	r2,0(r2)
 400023c:	1009883a 	mov	r4,r2
 4000240:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4000244:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000248:	0005313a 	rdctl	r2,ipending
 400024c:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4000250:	e0bfff17 	ldw	r2,-4(fp)
 4000254:	00000706 	br	4000274 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 4000258:	e0bffc17 	ldw	r2,-16(fp)
 400025c:	1085883a 	add	r2,r2,r2
 4000260:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4000264:	e0bffd17 	ldw	r2,-12(fp)
 4000268:	10800044 	addi	r2,r2,1
 400026c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 4000270:	003fe106 	br	40001f8 <__alt_data_end+0xfc0001f8>

    active = alt_irq_pending ();
 4000274:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 4000278:	e0bffb17 	ldw	r2,-20(fp)
 400027c:	103fdb1e 	bne	r2,zero,40001ec <__alt_data_end+0xfc0001ec>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 4000280:	0001883a 	nop
}
 4000284:	0001883a 	nop
 4000288:	e037883a 	mov	sp,fp
 400028c:	dfc00117 	ldw	ra,4(sp)
 4000290:	df000017 	ldw	fp,0(sp)
 4000294:	dec00204 	addi	sp,sp,8
 4000298:	f800283a 	ret

Disassembly of section .text:

0400029c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 400029c:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 40002a0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 40002a4:	06810074 	movhi	gp,1025
    ori gp, gp, %lo(_gp)
 40002a8:	d6ae5414 	ori	gp,gp,47440
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 40002ac:	00810074 	movhi	r2,1025
    ori r2, r2, %lo(__bss_start)
 40002b0:	10912d14 	ori	r2,r2,17588

    movhi r3, %hi(__bss_end)
 40002b4:	00c10074 	movhi	r3,1025
    ori r3, r3, %lo(__bss_end)
 40002b8:	18d79014 	ori	r3,r3,24128

    beq r2, r3, 1f
 40002bc:	10c00326 	beq	r2,r3,40002cc <_start+0x30>

0:
    stw zero, (r2)
 40002c0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 40002c4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 40002c8:	10fffd36 	bltu	r2,r3,40002c0 <__alt_data_end+0xfc0002c0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 40002cc:	400ed500 	call	400ed50 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 40002d0:	400eeec0 	call	400eeec <alt_main>

040002d4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 40002d4:	003fff06 	br	40002d4 <__alt_data_end+0xfc0002d4>

040002d8 <task_adc_code>:

#define ANALOG_VOLTAGE_REFERENCE 2.5f


void task_adc_code(void)
  {
 40002d8:	deffb804 	addi	sp,sp,-288
 40002dc:	dfc04715 	stw	ra,284(sp)
 40002e0:	df004615 	stw	fp,280(sp)
 40002e4:	df004604 	addi	fp,sp,280
	init_period_time(15);
 40002e8:	010003c4 	movi	r4,15
 40002ec:	40113640 	call	4011364 <init_period_time>
	task_periodic_start_union test;
	printf("adc task start...\n");
 40002f0:	01010074 	movhi	r4,1025
 40002f4:	21098504 	addi	r4,r4,9748
 40002f8:	4001c440 	call	4001c44 <puts>
	int k=0;
 40002fc:	e03fba15 	stw	zero,-280(fp)
	alt_u32 reading;
	float save_temperature[64];

	adc_interrupt_disable(MODULAR_ADC_0_SAMPLE_STORE_CSR_BASE); 									// Disable IRQ
 4000300:	01020234 	movhi	r4,2056
 4000304:	21050004 	addi	r4,r4,5120
 4000308:	400fabc0 	call	400fabc <adc_interrupt_disable>
	adc_stop(MODULAR_ADC_0_SEQUENCER_CSR_BASE);														// Stop the ADC before calling adc_set_mode_run_continuously
 400030c:	01020234 	movhi	r4,2056
 4000310:	2105d804 	addi	r4,r4,5984
 4000314:	400f8f80 	call	400f8f8 <adc_stop>
	adc_set_mode_run_continuously(MODULAR_ADC_0_SEQUENCER_CSR_BASE);								// Set adc to run continuously
 4000318:	01020234 	movhi	r4,2056
 400031c:	2105d804 	addi	r4,r4,5984
 4000320:	400f9c00 	call	400f9c0 <adc_set_mode_run_continuously>
	adc_start(MODULAR_ADC_0_SEQUENCER_CSR_BASE);										            // Start ADC again
 4000324:	01020234 	movhi	r4,2056
 4000328:	2105d804 	addi	r4,r4,5984
 400032c:	400f9480 	call	400f948 <adc_start>


  	while(1)
  	{
  		test = wait_for_next_period();
 4000330:	40113d40 	call	40113d4 <wait_for_next_period>
 4000334:	e0bfbe15 	stw	r2,-264(fp)

  	    if ((test.periodic_start_integer & 0x1) != 0)
 4000338:	e0bfbe17 	ldw	r2,-264(fp)
 400033c:	1080004c 	andi	r2,r2,1
 4000340:	10000326 	beq	r2,zero,4000350 <task_adc_code+0x78>
  		printf ("deadline miss, adc_code\n");
 4000344:	01010074 	movhi	r4,1025
 4000348:	21098a04 	addi	r4,r4,9768
 400034c:	4001c440 	call	4001c44 <puts>

// get temperature samples from ADC
        for (k = 0; k<64; k++){
 4000350:	e03fba15 	stw	zero,-280(fp)
 4000354:	00003a06 	br	4000440 <task_adc_code+0x168>
  		alt_adc_word_read(MODULAR_ADC_0_SAMPLE_STORE_CSR_BASE , &reading, 1);
 4000358:	e0bfbf04 	addi	r2,fp,-260
 400035c:	01800044 	movi	r6,1
 4000360:	100b883a 	mov	r5,r2
 4000364:	01020234 	movhi	r4,2056
 4000368:	21050004 	addi	r4,r4,5120
 400036c:	400f7000 	call	400f700 <alt_adc_word_read>
  		alt_u32 pin_a0 = reading;
 4000370:	e0bfbf17 	ldw	r2,-260(fp)
 4000374:	e0bfbb15 	stw	r2,-276(fp)
  		float voltage = ((pin_a0<<1) * ANALOG_VOLTAGE_REFERENCE) / 4096.0f;
 4000378:	e0bfbb17 	ldw	r2,-276(fp)
 400037c:	1085883a 	add	r2,r2,r2
 4000380:	1009883a 	mov	r4,r2
 4000384:	40019c40 	call	40019c4 <__floatunsisf>
 4000388:	1007883a 	mov	r3,r2
 400038c:	01500834 	movhi	r5,16416
 4000390:	1809883a 	mov	r4,r3
 4000394:	40010400 	call	4001040 <__mulsf3>
 4000398:	1007883a 	mov	r3,r2
 400039c:	1805883a 	mov	r2,r3
 40003a0:	01516034 	movhi	r5,17792
 40003a4:	1009883a 	mov	r4,r2
 40003a8:	4000c000 	call	4000c00 <__divsf3>
 40003ac:	1007883a 	mov	r3,r2
 40003b0:	e0ffbc15 	stw	r3,-272(fp)
  	    float temperature_c = (voltage - 0.5f) * 100.0f;
 40003b4:	014fc034 	movhi	r5,16128
 40003b8:	e13fbc17 	ldw	r4,-272(fp)
 40003bc:	40014700 	call	4001470 <__subsf3>
 40003c0:	1007883a 	mov	r3,r2
 40003c4:	1805883a 	mov	r2,r3
 40003c8:	0150b234 	movhi	r5,17096
 40003cc:	1009883a 	mov	r4,r2
 40003d0:	40010400 	call	4001040 <__mulsf3>
 40003d4:	1007883a 	mov	r3,r2
 40003d8:	e0ffbd15 	stw	r3,-268(fp)

// write temperature samples to temperature buffer

        save_temperature[k] = temperature_c;
 40003dc:	e0bfba17 	ldw	r2,-280(fp)
 40003e0:	1085883a 	add	r2,r2,r2
 40003e4:	1085883a 	add	r2,r2,r2
 40003e8:	e0ffba04 	addi	r3,fp,-280
 40003ec:	1885883a 	add	r2,r3,r2
 40003f0:	10800604 	addi	r2,r2,24
 40003f4:	e0ffbd17 	ldw	r3,-268(fp)
 40003f8:	10c00015 	stw	r3,0(r2)
        buffer_temperature[k] = save_temperature[k];
 40003fc:	e0bfba17 	ldw	r2,-280(fp)
 4000400:	1085883a 	add	r2,r2,r2
 4000404:	1085883a 	add	r2,r2,r2
 4000408:	e0ffba04 	addi	r3,fp,-280
 400040c:	1885883a 	add	r2,r3,r2
 4000410:	10800604 	addi	r2,r2,24
 4000414:	11000017 	ldw	r4,0(r2)
 4000418:	00810074 	movhi	r2,1025
 400041c:	10913e04 	addi	r2,r2,17656
 4000420:	e0ffba17 	ldw	r3,-280(fp)
 4000424:	18c7883a 	add	r3,r3,r3
 4000428:	18c7883a 	add	r3,r3,r3
 400042c:	10c5883a 	add	r2,r2,r3
 4000430:	11000015 	stw	r4,0(r2)

  	    if ((test.periodic_start_integer & 0x1) != 0)
  		printf ("deadline miss, adc_code\n");

// get temperature samples from ADC
        for (k = 0; k<64; k++){
 4000434:	e0bfba17 	ldw	r2,-280(fp)
 4000438:	10800044 	addi	r2,r2,1
 400043c:	e0bfba15 	stw	r2,-280(fp)
 4000440:	e0bfba17 	ldw	r2,-280(fp)
 4000444:	10801010 	cmplti	r2,r2,64
 4000448:	103fc31e 	bne	r2,zero,4000358 <__alt_data_end+0xfc000358>
// write temperature samples to temperature buffer

        save_temperature[k] = temperature_c;
        buffer_temperature[k] = save_temperature[k];
        }
   	}
 400044c:	003fb806 	br	4000330 <__alt_data_end+0xfc000330>

04000450 <task_IDLE_code>:
 char task_temperature_average_stack[STACK_SIZE];
 char task_system_control_stack[STACK_SIZE];
 char task_system_monitoring_stack[STACK_SIZE];


 void task_IDLE_code (void){
 4000450:	defffd04 	addi	sp,sp,-12
 4000454:	dfc00215 	stw	ra,8(sp)
 4000458:	df000115 	stw	fp,4(sp)
 400045c:	df000104 	addi	fp,sp,4

 	 while (1){
 		{
 		 	 for(int i=0; i<5000; i++); // You can do something ...
 4000460:	e03fff15 	stw	zero,-4(fp)
 4000464:	00000306 	br	4000474 <task_IDLE_code+0x24>
 4000468:	e0bfff17 	ldw	r2,-4(fp)
 400046c:	10800044 	addi	r2,r2,1
 4000470:	e0bfff15 	stw	r2,-4(fp)
 4000474:	e0bfff17 	ldw	r2,-4(fp)
 4000478:	1084e210 	cmplti	r2,r2,5000
 400047c:	103ffa1e 	bne	r2,zero,4000468 <__alt_data_end+0xfc000468>
 		 	 printf ("...\n");
 4000480:	01010074 	movhi	r4,1025
 4000484:	21099004 	addi	r4,r4,9792
 4000488:	4001c440 	call	4001c44 <puts>
 		   }
 	   }
 400048c:	003ff406 	br	4000460 <__alt_data_end+0xfc000460>

04000490 <main>:
 }

int main()
  {
 4000490:	defffc04 	addi	sp,sp,-16
 4000494:	dfc00315 	stw	ra,12(sp)
 4000498:	df000215 	stw	fp,8(sp)
 400049c:	df000204 	addi	fp,sp,8
       printf("Hello!");
 40004a0:	01010074 	movhi	r4,1025
 40004a4:	21099104 	addi	r4,r4,9796
 40004a8:	4001b480 	call	4001b48 <printf>
       Sierra_Initiation_HW_and_SW();
 40004ac:	4010ae80 	call	4010ae8 <Sierra_Initiation_HW_and_SW>
	   // Get HW Version
	   printf("  Sierra HW version = %d\n", sierra_HW_version());
 40004b0:	4010a4c0 	call	4010a4c <sierra_HW_version>
 40004b4:	100b883a 	mov	r5,r2
 40004b8:	01010074 	movhi	r4,1025
 40004bc:	21099304 	addi	r4,r4,9804
 40004c0:	4001b480 	call	4001b48 <printf>
	   printf("  Sierra SW driver version = %d\n", sierra_SW_driver_version());
 40004c4:	4010a1c0 	call	4010a1c <sierra_SW_driver_version>
 40004c8:	100b883a 	mov	r5,r2
 40004cc:	01010074 	movhi	r4,1025
 40004d0:	21099a04 	addi	r4,r4,9832
 40004d4:	4001b480 	call	4001b48 <printf>
	   clear_screen (0);
 40004d8:	0009883a 	mov	r4,zero
 40004dc:	400fbc40 	call	400fbc4 <clear_screen>
	    * Initialize time base register.
	    * This example     : 50 MHz system-clock
	    * Wanted tick time : 20 ms (50Hz)
	    * Formula gives    : 20 ms x 50 MHx / 1000 => 1000(dec)
	    * ******************************************************************/
	   set_timebase(1000);
 40004e0:	0100fa04 	movi	r4,1000
 40004e4:	4010ab40 	call	4010ab4 <set_timebase>

		 /* task_create()  */

	   task_create(task_adc, 2, READY_TASK_STATE, task_adc_code, task_adc_stack, STACK_SIZE);
 40004e8:	0080c804 	movi	r2,800
 40004ec:	d8800115 	stw	r2,4(sp)
 40004f0:	00810074 	movhi	r2,1025
 40004f4:	10918804 	addi	r2,r2,17952
 40004f8:	d8800015 	stw	r2,0(sp)
 40004fc:	01c10034 	movhi	r7,1024
 4000500:	39c0b604 	addi	r7,r7,728
 4000504:	01800044 	movi	r6,1
 4000508:	01400084 	movi	r5,2
 400050c:	01000084 	movi	r4,2
 4000510:	4010e180 	call	4010e18 <task_create>
	   task_create(task_IDLE, 0, READY_TASK_STATE, task_IDLE_code, task_IDLE_stack, STACK_SIZE);
 4000514:	0080c804 	movi	r2,800
 4000518:	d8800115 	stw	r2,4(sp)
 400051c:	00810074 	movhi	r2,1025
 4000520:	1094a804 	addi	r2,r2,21152
 4000524:	d8800015 	stw	r2,0(sp)
 4000528:	01c10034 	movhi	r7,1024
 400052c:	39c11404 	addi	r7,r7,1104
 4000530:	01800044 	movi	r6,1
 4000534:	000b883a 	mov	r5,zero
 4000538:	0009883a 	mov	r4,zero
 400053c:	4010e180 	call	4010e18 <task_create>
	   task_create(task_temperature_set, 1, READY_TASK_STATE, task_temperature_set_code, task_temperature_set_stack, STACK_SIZE);
 4000540:	0080c804 	movi	r2,800
 4000544:	d8800115 	stw	r2,4(sp)
 4000548:	00810074 	movhi	r2,1025
 400054c:	10931804 	addi	r2,r2,19552
 4000550:	d8800015 	stw	r2,0(sp)
 4000554:	01c10034 	movhi	r7,1024
 4000558:	39c2e004 	addi	r7,r7,2944
 400055c:	01800044 	movi	r6,1
 4000560:	01400044 	movi	r5,1
 4000564:	01000044 	movi	r4,1
 4000568:	4010e180 	call	4010e18 <task_create>
	   task_create(task_temperature_average, 3, READY_TASK_STATE, task_temperature_average_code, task_temperature_average_stack, STACK_SIZE);
 400056c:	0080c804 	movi	r2,800
 4000570:	d8800115 	stw	r2,4(sp)
 4000574:	00810074 	movhi	r2,1025
 4000578:	10925004 	addi	r2,r2,18752
 400057c:	d8800015 	stw	r2,0(sp)
 4000580:	01c10034 	movhi	r7,1024
 4000584:	39c29204 	addi	r7,r7,2632
 4000588:	01800044 	movi	r6,1
 400058c:	014000c4 	movi	r5,3
 4000590:	010000c4 	movi	r4,3
 4000594:	4010e180 	call	4010e18 <task_create>
	   task_create(task_system_control, 4, READY_TASK_STATE, task_system_control_code, task_system_control_stack, STACK_SIZE);
 4000598:	0080c804 	movi	r2,800
 400059c:	d8800115 	stw	r2,4(sp)
 40005a0:	00810074 	movhi	r2,1025
 40005a4:	10957004 	addi	r2,r2,21952
 40005a8:	d8800015 	stw	r2,0(sp)
 40005ac:	01c10034 	movhi	r7,1024
 40005b0:	39c18104 	addi	r7,r7,1540
 40005b4:	01800044 	movi	r6,1
 40005b8:	01400104 	movi	r5,4
 40005bc:	01000104 	movi	r4,4
 40005c0:	4010e180 	call	4010e18 <task_create>
	   task_create(task_system_monitoring, 5, READY_TASK_STATE, task_system_monitoring_code, task_system_monitoring_stack, STACK_SIZE);
 40005c4:	0080c804 	movi	r2,800
 40005c8:	d8800115 	stw	r2,4(sp)
 40005cc:	00810074 	movhi	r2,1025
 40005d0:	1093e004 	addi	r2,r2,20352
 40005d4:	d8800015 	stw	r2,0(sp)
 40005d8:	01c10034 	movhi	r7,1024
 40005dc:	39c27b04 	addi	r7,r7,2540
 40005e0:	01800044 	movi	r6,1
 40005e4:	01400144 	movi	r5,5
 40005e8:	01000144 	movi	r4,5
 40005ec:	4010e180 	call	4010e18 <task_create>

	   tsw_on(); // enable CPU irq from Sierran and now at least idle will give a irq.
 40005f0:	4010c600 	call	4010c60 <tsw_on>

	   while(1) {
	       		    // Should never end up here...!
	       		    printf ("* ERROR! SYSTEM FAILED *\n ");
 40005f4:	01010074 	movhi	r4,1025
 40005f8:	2109a304 	addi	r4,r4,9868
 40005fc:	4001b480 	call	4001b48 <printf>
	       		  }
 4000600:	003ffc06 	br	40005f4 <__alt_data_end+0xfc0005f4>

04000604 <task_system_control_code>:
#include <alt_types.h>
#include "globals.h"
#include "tasks.h"

void task_system_control_code(void)
{
 4000604:	defffd04 	addi	sp,sp,-12
 4000608:	dfc00215 	stw	ra,8(sp)
 400060c:	df000115 	stw	fp,4(sp)
 4000610:	df000104 	addi	fp,sp,4

    init_period_time(30);
 4000614:	01000784 	movi	r4,30
 4000618:	40113640 	call	4011364 <init_period_time>
	task_periodic_start_union test;
	printf("system_control start...\n");
 400061c:	01010074 	movhi	r4,1025
 4000620:	2109aa04 	addi	r4,r4,9896
 4000624:	4001c440 	call	4001c44 <puts>
	};
	//state = temperature_balance;

	while(1)
	{
	test = wait_for_next_period();
 4000628:	40113d40 	call	40113d4 <wait_for_next_period>
 400062c:	e0bfff15 	stw	r2,-4(fp)
	if ((test.periodic_start_integer & 0x1) != 0)
 4000630:	e0bfff17 	ldw	r2,-4(fp)
 4000634:	1080004c 	andi	r2,r2,1
 4000638:	10000326 	beq	r2,zero,4000648 <task_system_control_code+0x44>
	printf ("deadline miss, system_monitoring\n");
 400063c:	01010074 	movhi	r4,1025
 4000640:	2109b004 	addi	r4,r4,9920
 4000644:	4001c440 	call	4001c44 <puts>

	switch (state)
 4000648:	d0a2da17 	ldw	r2,-29848(gp)
 400064c:	10c00060 	cmpeqi	r3,r2,1
 4000650:	1800151e 	bne	r3,zero,40006a8 <task_system_control_code+0xa4>
 4000654:	10c000a0 	cmpeqi	r3,r2,2
 4000658:	1800251e 	bne	r3,zero,40006f0 <task_system_control_code+0xec>
 400065c:	1000361e 	bne	r2,zero,4000738 <task_system_control_code+0x134>
	{
	case temperature_balance:
		stop_machines(0, machines_off);
 4000660:	0007883a 	mov	r3,zero
 4000664:	00820234 	movhi	r2,2056
 4000668:	1085d004 	addi	r2,r2,5952
 400066c:	10c00035 	stwio	r3,0(r2)
		if (temperature_medium < temperature_set)
 4000670:	d0e2d917 	ldw	r3,-29852(gp)
 4000674:	d0a2db17 	ldw	r2,-29844(gp)
 4000678:	1880030e 	bge	r3,r2,4000688 <task_system_control_code+0x84>
			state = heating;
 400067c:	00800044 	movi	r2,1
 4000680:	d0a2da15 	stw	r2,-29848(gp)
		else
			if (temperature_medium > temperature_set)
			state = cooling;
			else
				state = temperature_balance;
				break;
 4000684:	00002c06 	br	4000738 <task_system_control_code+0x134>
	case temperature_balance:
		stop_machines(0, machines_off);
		if (temperature_medium < temperature_set)
			state = heating;
		else
			if (temperature_medium > temperature_set)
 4000688:	d0a2d917 	ldw	r2,-29852(gp)
 400068c:	d0e2db17 	ldw	r3,-29844(gp)
 4000690:	1880030e 	bge	r3,r2,40006a0 <task_system_control_code+0x9c>
			state = cooling;
 4000694:	00800084 	movi	r2,2
 4000698:	d0a2da15 	stw	r2,-29848(gp)
			else
				state = temperature_balance;
				break;
 400069c:	00002606 	br	4000738 <task_system_control_code+0x134>
			state = heating;
		else
			if (temperature_medium > temperature_set)
			state = cooling;
			else
				state = temperature_balance;
 40006a0:	d022da15 	stw	zero,-29848(gp)
				break;
 40006a4:	00002406 	br	4000738 <task_system_control_code+0x134>
	case heating:
		start_machine_heating(0, machine_heating_on);
 40006a8:	00c00104 	movi	r3,4
 40006ac:	00820234 	movhi	r2,2056
 40006b0:	1085d004 	addi	r2,r2,5952
 40006b4:	10c00035 	stwio	r3,0(r2)
		if (temperature_medium == temperature_set)
 40006b8:	d0e2d917 	ldw	r3,-29852(gp)
 40006bc:	d0a2db17 	ldw	r2,-29844(gp)
 40006c0:	1880021e 	bne	r3,r2,40006cc <task_system_control_code+0xc8>
			state = temperature_balance;
 40006c4:	d022da15 	stw	zero,-29848(gp)
		else
			if (temperature_medium > temperature_set)
			state = cooling;
			else
				state = heating;
				break;
 40006c8:	00001b06 	br	4000738 <task_system_control_code+0x134>
	case heating:
		start_machine_heating(0, machine_heating_on);
		if (temperature_medium == temperature_set)
			state = temperature_balance;
		else
			if (temperature_medium > temperature_set)
 40006cc:	d0a2d917 	ldw	r2,-29852(gp)
 40006d0:	d0e2db17 	ldw	r3,-29844(gp)
 40006d4:	1880030e 	bge	r3,r2,40006e4 <task_system_control_code+0xe0>
			state = cooling;
 40006d8:	00800084 	movi	r2,2
 40006dc:	d0a2da15 	stw	r2,-29848(gp)
			else
				state = heating;
				break;
 40006e0:	00001506 	br	4000738 <task_system_control_code+0x134>
			state = temperature_balance;
		else
			if (temperature_medium > temperature_set)
			state = cooling;
			else
				state = heating;
 40006e4:	00800044 	movi	r2,1
 40006e8:	d0a2da15 	stw	r2,-29848(gp)
				break;
 40006ec:	00001206 	br	4000738 <task_system_control_code+0x134>
	case cooling:
		start_machine_cooling(0, machine_cooling_on);
 40006f0:	00c00204 	movi	r3,8
 40006f4:	00820234 	movhi	r2,2056
 40006f8:	1085d004 	addi	r2,r2,5952
 40006fc:	10c00035 	stwio	r3,0(r2)
		if (temperature_medium == temperature_set)
 4000700:	d0e2d917 	ldw	r3,-29852(gp)
 4000704:	d0a2db17 	ldw	r2,-29844(gp)
 4000708:	1880021e 	bne	r3,r2,4000714 <task_system_control_code+0x110>
			state = temperature_balance;
 400070c:	d022da15 	stw	zero,-29848(gp)
			else
				if (temperature_medium < temperature_set)
				state = heating;
				else
					state = cooling;
					break;
 4000710:	00000806 	br	4000734 <task_system_control_code+0x130>
	case cooling:
		start_machine_cooling(0, machine_cooling_on);
		if (temperature_medium == temperature_set)
			state = temperature_balance;
			else
				if (temperature_medium < temperature_set)
 4000714:	d0e2d917 	ldw	r3,-29852(gp)
 4000718:	d0a2db17 	ldw	r2,-29844(gp)
 400071c:	1880030e 	bge	r3,r2,400072c <task_system_control_code+0x128>
				state = heating;
 4000720:	00800044 	movi	r2,1
 4000724:	d0a2da15 	stw	r2,-29848(gp)
				else
					state = cooling;
					break;
 4000728:	00000206 	br	4000734 <task_system_control_code+0x130>
			state = temperature_balance;
			else
				if (temperature_medium < temperature_set)
				state = heating;
				else
					state = cooling;
 400072c:	00800084 	movi	r2,2
 4000730:	d0a2da15 	stw	r2,-29848(gp)
					break;
 4000734:	0001883a 	nop
	}
	}
 4000738:	003fbb06 	br	4000628 <__alt_data_end+0xfc000628>

0400073c <init_vga>:
#define temperature_balance tty_print(200, 100, "balance", 7,0)
#define heating tty_print(200, 100, "heating", 7,0)
#define cooling tty_print(200, 100, "cooling", 7,0)

void init_vga (void)
{
 400073c:	defffd04 	addi	sp,sp,-12
 4000740:	dfc00215 	stw	ra,8(sp)
 4000744:	df000115 	stw	fp,4(sp)
 4000748:	df000104 	addi	fp,sp,4
	tty_print(150, 10, "AGSTU", 1, 0);
 400074c:	d8000015 	stw	zero,0(sp)
 4000750:	01c00044 	movi	r7,1
 4000754:	01810074 	movhi	r6,1025
 4000758:	3189b904 	addi	r6,r6,9956
 400075c:	01400284 	movi	r5,10
 4000760:	01002584 	movi	r4,150
 4000764:	40105a40 	call	40105a4 <tty_print>
	tty_print(80, 20, "AIR CONDITIONER PROTOTYPE", 2, 0);
 4000768:	d8000015 	stw	zero,0(sp)
 400076c:	01c00084 	movi	r7,2
 4000770:	01810074 	movhi	r6,1025
 4000774:	3189bb04 	addi	r6,r6,9964
 4000778:	01400504 	movi	r5,20
 400077c:	01001404 	movi	r4,80
 4000780:	40105a40 	call	40105a4 <tty_print>
	tty_print(90, 30, "CREATED BY ANDREY YUNIN", 3, 0);
 4000784:	d8000015 	stw	zero,0(sp)
 4000788:	01c000c4 	movi	r7,3
 400078c:	01810074 	movhi	r6,1025
 4000790:	3189c204 	addi	r6,r6,9992
 4000794:	01400784 	movi	r5,30
 4000798:	01001684 	movi	r4,90
 400079c:	40105a40 	call	40105a4 <tty_print>
}
 40007a0:	0001883a 	nop
 40007a4:	e037883a 	mov	sp,fp
 40007a8:	dfc00117 	ldw	ra,4(sp)
 40007ac:	df000017 	ldw	fp,0(sp)
 40007b0:	dec00204 	addi	sp,sp,8
 40007b4:	f800283a 	ret

040007b8 <temperature_set_vga>:

void temperature_set_vga(void)
{
 40007b8:	defffc04 	addi	sp,sp,-16
 40007bc:	dfc00315 	stw	ra,12(sp)
 40007c0:	df000215 	stw	fp,8(sp)
 40007c4:	df000204 	addi	fp,sp,8
	tty_print(50, 60, "Temperature set", 1, 0);
 40007c8:	d8000015 	stw	zero,0(sp)
 40007cc:	01c00044 	movi	r7,1
 40007d0:	01810074 	movhi	r6,1025
 40007d4:	3189c804 	addi	r6,r6,10016
 40007d8:	01400f04 	movi	r5,60
 40007dc:	01000c84 	movi	r4,50
 40007e0:	40105a40 	call	40105a4 <tty_print>
	int_print(200, 60, temperature_set, 2,0,2);
 40007e4:	d0e2db17 	ldw	r3,-29844(gp)
 40007e8:	00800084 	movi	r2,2
 40007ec:	d8800115 	stw	r2,4(sp)
 40007f0:	d8000015 	stw	zero,0(sp)
 40007f4:	01c00084 	movi	r7,2
 40007f8:	180d883a 	mov	r6,r3
 40007fc:	01400f04 	movi	r5,60
 4000800:	01003204 	movi	r4,200
 4000804:	40108ac0 	call	40108ac <int_print>
}
 4000808:	0001883a 	nop
 400080c:	e037883a 	mov	sp,fp
 4000810:	dfc00117 	ldw	ra,4(sp)
 4000814:	df000017 	ldw	fp,0(sp)
 4000818:	dec00204 	addi	sp,sp,8
 400081c:	f800283a 	ret

04000820 <temperature_medium_vga>:

void temperature_medium_vga(void)
{
 4000820:	defffc04 	addi	sp,sp,-16
 4000824:	dfc00315 	stw	ra,12(sp)
 4000828:	df000215 	stw	fp,8(sp)
 400082c:	df000204 	addi	fp,sp,8
    tty_print(50, 70, "Temperature medium", 1, 0);
 4000830:	d8000015 	stw	zero,0(sp)
 4000834:	01c00044 	movi	r7,1
 4000838:	01810074 	movhi	r6,1025
 400083c:	3189cc04 	addi	r6,r6,10032
 4000840:	01401184 	movi	r5,70
 4000844:	01000c84 	movi	r4,50
 4000848:	40105a40 	call	40105a4 <tty_print>
    int_print(200, 70, temperature_medium, 2,0,2);
 400084c:	d0e2d917 	ldw	r3,-29852(gp)
 4000850:	00800084 	movi	r2,2
 4000854:	d8800115 	stw	r2,4(sp)
 4000858:	d8000015 	stw	zero,0(sp)
 400085c:	01c00084 	movi	r7,2
 4000860:	180d883a 	mov	r6,r3
 4000864:	01401184 	movi	r5,70
 4000868:	01003204 	movi	r4,200
 400086c:	40108ac0 	call	40108ac <int_print>
 }
 4000870:	0001883a 	nop
 4000874:	e037883a 	mov	sp,fp
 4000878:	dfc00117 	ldw	ra,4(sp)
 400087c:	df000017 	ldw	fp,0(sp)
 4000880:	dec00204 	addi	sp,sp,8
 4000884:	f800283a 	ret

04000888 <system_status_vga>:

void system_status_vga(void)
{
 4000888:	defffd04 	addi	sp,sp,-12
 400088c:	dfc00215 	stw	ra,8(sp)
 4000890:	df000115 	stw	fp,4(sp)
 4000894:	df000104 	addi	fp,sp,4
	tty_print(50, 100, "System status:", 1, 0);
 4000898:	d8000015 	stw	zero,0(sp)
 400089c:	01c00044 	movi	r7,1
 40008a0:	01810074 	movhi	r6,1025
 40008a4:	3189d104 	addi	r6,r6,10052
 40008a8:	01401904 	movi	r5,100
 40008ac:	01000c84 	movi	r4,50
 40008b0:	40105a40 	call	40105a4 <tty_print>
	if (state == 0)
 40008b4:	d0a2da17 	ldw	r2,-29848(gp)
 40008b8:	1000081e 	bne	r2,zero,40008dc <system_status_vga+0x54>
		temperature_balance;
 40008bc:	d8000015 	stw	zero,0(sp)
 40008c0:	01c001c4 	movi	r7,7
 40008c4:	01810074 	movhi	r6,1025
 40008c8:	3189d504 	addi	r6,r6,10068
 40008cc:	01401904 	movi	r5,100
 40008d0:	01003204 	movi	r4,200
 40008d4:	40105a40 	call	40105a4 <tty_print>
	if (state == 1)
		heating;
	else
	if (state == 2)
	    cooling;
}
 40008d8:	00001506 	br	4000930 <system_status_vga+0xa8>
{
	tty_print(50, 100, "System status:", 1, 0);
	if (state == 0)
		temperature_balance;
	else
	if (state == 1)
 40008dc:	d0a2da17 	ldw	r2,-29848(gp)
 40008e0:	10800058 	cmpnei	r2,r2,1
 40008e4:	1000081e 	bne	r2,zero,4000908 <system_status_vga+0x80>
		heating;
 40008e8:	d8000015 	stw	zero,0(sp)
 40008ec:	01c001c4 	movi	r7,7
 40008f0:	01810074 	movhi	r6,1025
 40008f4:	3189d704 	addi	r6,r6,10076
 40008f8:	01401904 	movi	r5,100
 40008fc:	01003204 	movi	r4,200
 4000900:	40105a40 	call	40105a4 <tty_print>
	else
	if (state == 2)
	    cooling;
}
 4000904:	00000a06 	br	4000930 <system_status_vga+0xa8>
		temperature_balance;
	else
	if (state == 1)
		heating;
	else
	if (state == 2)
 4000908:	d0a2da17 	ldw	r2,-29848(gp)
 400090c:	10800098 	cmpnei	r2,r2,2
 4000910:	1000071e 	bne	r2,zero,4000930 <system_status_vga+0xa8>
	    cooling;
 4000914:	d8000015 	stw	zero,0(sp)
 4000918:	01c001c4 	movi	r7,7
 400091c:	01810074 	movhi	r6,1025
 4000920:	3189d904 	addi	r6,r6,10084
 4000924:	01401904 	movi	r5,100
 4000928:	01003204 	movi	r4,200
 400092c:	40105a40 	call	40105a4 <tty_print>
}
 4000930:	0001883a 	nop
 4000934:	e037883a 	mov	sp,fp
 4000938:	dfc00117 	ldw	ra,4(sp)
 400093c:	df000017 	ldw	fp,0(sp)
 4000940:	dec00204 	addi	sp,sp,8
 4000944:	f800283a 	ret

04000948 <clear_screen_black>:

void clear_screen_black(void)
{
 4000948:	defffc04 	addi	sp,sp,-16
 400094c:	dfc00315 	stw	ra,12(sp)
 4000950:	df000215 	stw	fp,8(sp)
 4000954:	df000204 	addi	fp,sp,8
	alt_u32 x,y;
	for ( y = 100; y<110; ++y )
 4000958:	00801904 	movi	r2,100
 400095c:	e0bfff15 	stw	r2,-4(fp)
 4000960:	00001906 	br	40009c8 <clear_screen_black+0x80>
	{
		for (x = 200; x < 250; ++x)
 4000964:	00803204 	movi	r2,200
 4000968:	e0bffe15 	stw	r2,-8(fp)
 400096c:	00001006 	br	40009b0 <clear_screen_black+0x68>
		{
			write_pixel(x,y,0);
 4000970:	01405004 	movi	r5,320
 4000974:	e13fff17 	ldw	r4,-4(fp)
 4000978:	4000bd80 	call	4000bd8 <__mulsi3>
 400097c:	1007883a 	mov	r3,r2
 4000980:	e0bffe17 	ldw	r2,-8(fp)
 4000984:	1885883a 	add	r2,r3,r2
 4000988:	1085883a 	add	r2,r2,r2
 400098c:	1085883a 	add	r2,r2,r2
 4000990:	1007883a 	mov	r3,r2
 4000994:	00820034 	movhi	r2,2048
 4000998:	1885883a 	add	r2,r3,r2
 400099c:	0007883a 	mov	r3,zero
 40009a0:	10c00035 	stwio	r3,0(r2)
void clear_screen_black(void)
{
	alt_u32 x,y;
	for ( y = 100; y<110; ++y )
	{
		for (x = 200; x < 250; ++x)
 40009a4:	e0bffe17 	ldw	r2,-8(fp)
 40009a8:	10800044 	addi	r2,r2,1
 40009ac:	e0bffe15 	stw	r2,-8(fp)
 40009b0:	e0bffe17 	ldw	r2,-8(fp)
 40009b4:	10803eb0 	cmpltui	r2,r2,250
 40009b8:	103fed1e 	bne	r2,zero,4000970 <__alt_data_end+0xfc000970>
}

void clear_screen_black(void)
{
	alt_u32 x,y;
	for ( y = 100; y<110; ++y )
 40009bc:	e0bfff17 	ldw	r2,-4(fp)
 40009c0:	10800044 	addi	r2,r2,1
 40009c4:	e0bfff15 	stw	r2,-4(fp)
 40009c8:	e0bfff17 	ldw	r2,-4(fp)
 40009cc:	10801bb0 	cmpltui	r2,r2,110
 40009d0:	103fe41e 	bne	r2,zero,4000964 <__alt_data_end+0xfc000964>
		for (x = 200; x < 250; ++x)
		{
			write_pixel(x,y,0);
		}
	}
}
 40009d4:	0001883a 	nop
 40009d8:	e037883a 	mov	sp,fp
 40009dc:	dfc00117 	ldw	ra,4(sp)
 40009e0:	df000017 	ldw	fp,0(sp)
 40009e4:	dec00204 	addi	sp,sp,8
 40009e8:	f800283a 	ret

040009ec <task_system_monitoring_code>:

void task_system_monitoring_code(void)
{
 40009ec:	defffd04 	addi	sp,sp,-12
 40009f0:	dfc00215 	stw	ra,8(sp)
 40009f4:	df000115 	stw	fp,4(sp)
 40009f8:	df000104 	addi	fp,sp,4

    init_period_time(30);
 40009fc:	01000784 	movi	r4,30
 4000a00:	40113640 	call	4011364 <init_period_time>
	task_periodic_start_union test;
	printf("system_monitoring start...\n");
 4000a04:	01010074 	movhi	r4,1025
 4000a08:	2109db04 	addi	r4,r4,10092
 4000a0c:	4001c440 	call	4001c44 <puts>
    
    while(1)
         
  {

	  test = wait_for_next_period();
 4000a10:	40113d40 	call	40113d4 <wait_for_next_period>
 4000a14:	e0bfff15 	stw	r2,-4(fp)
	  if ((test.periodic_start_integer & 0x1) != 0)
 4000a18:	e0bfff17 	ldw	r2,-4(fp)
 4000a1c:	1080004c 	andi	r2,r2,1
 4000a20:	10000326 	beq	r2,zero,4000a30 <task_system_monitoring_code+0x44>
	  printf ("deadline miss, system_monitoring\n");
 4000a24:	01010074 	movhi	r4,1025
 4000a28:	2109e204 	addi	r4,r4,10120
 4000a2c:	4001c440 	call	4001c44 <puts>
  
      init_vga();
 4000a30:	400073c0 	call	400073c <init_vga>
      temperature_set_vga();
 4000a34:	40007b80 	call	40007b8 <temperature_set_vga>
      temperature_medium_vga();
 4000a38:	40008200 	call	4000820 <temperature_medium_vga>
      clear_screen_black();
 4000a3c:	40009480 	call	4000948 <clear_screen_black>
      system_status_vga();
 4000a40:	40008880 	call	4000888 <system_status_vga>
      
     }
 4000a44:	003ff206 	br	4000a10 <__alt_data_end+0xfc000a10>

04000a48 <task_temperature_average_code>:
#include <alt_types.h>
#include "globals.h"
#include "tasks.h"

void task_temperature_average_code(void)
{
 4000a48:	defffb04 	addi	sp,sp,-20
 4000a4c:	dfc00415 	stw	ra,16(sp)
 4000a50:	df000315 	stw	fp,12(sp)
 4000a54:	df000304 	addi	fp,sp,12

    init_period_time(50);
 4000a58:	01000c84 	movi	r4,50
 4000a5c:	40113640 	call	4011364 <init_period_time>
	task_periodic_start_union test;
	printf("temperature_avarege start...\n");
 4000a60:	01010074 	movhi	r4,1025
 4000a64:	2109eb04 	addi	r4,r4,10156
 4000a68:	4001c440 	call	4001c44 <puts>

    float average_result;


    average_disable_interrupt();
 4000a6c:	0007883a 	mov	r3,zero
 4000a70:	00820234 	movhi	r2,2056
 4000a74:	1085c404 	addi	r2,r2,5904
 4000a78:	10c00035 	stwio	r3,0(r2)
    average_clear_done_status();
 4000a7c:	00c00044 	movi	r3,1
 4000a80:	00820234 	movhi	r2,2056
 4000a84:	1085c604 	addi	r2,r2,5912
 4000a88:	10c00035 	stwio	r3,0(r2)


  while(1)
  {

	  test = wait_for_next_period();
 4000a8c:	40113d40 	call	40113d4 <wait_for_next_period>
 4000a90:	e0bffe15 	stw	r2,-8(fp)
	  if ((test.periodic_start_integer & 0x1) != 0)
 4000a94:	e0bffe17 	ldw	r2,-8(fp)
 4000a98:	1080004c 	andi	r2,r2,1
 4000a9c:	10000326 	beq	r2,zero,4000aac <task_temperature_average_code+0x64>
	  printf ("deadline miss, temperature_average_code\n");
 4000aa0:	01010074 	movhi	r4,1025
 4000aa4:	2109f304 	addi	r4,r4,10188
 4000aa8:	4001c440 	call	4001c44 <puts>



  //load massive to component memory
  for (int k=0;k<64;k++){
 4000aac:	e03ffd15 	stw	zero,-12(fp)
 4000ab0:	00001206 	br	4000afc <task_temperature_average_code+0xb4>
	  component_memory_write((k*sizeof(alt_32)), *(alt_32 *) (&buffer_temperature[k]));
 4000ab4:	e0bffd17 	ldw	r2,-12(fp)
 4000ab8:	1085883a 	add	r2,r2,r2
 4000abc:	1085883a 	add	r2,r2,r2
 4000ac0:	1007883a 	mov	r3,r2
 4000ac4:	00820234 	movhi	r2,2056
 4000ac8:	10858004 	addi	r2,r2,5632
 4000acc:	1887883a 	add	r3,r3,r2
 4000ad0:	e0bffd17 	ldw	r2,-12(fp)
 4000ad4:	1085883a 	add	r2,r2,r2
 4000ad8:	1089883a 	add	r4,r2,r2
 4000adc:	00810074 	movhi	r2,1025
 4000ae0:	10913e04 	addi	r2,r2,17656
 4000ae4:	2085883a 	add	r2,r4,r2
 4000ae8:	10800017 	ldw	r2,0(r2)
 4000aec:	18800035 	stwio	r2,0(r3)
	  printf ("deadline miss, temperature_average_code\n");



  //load massive to component memory
  for (int k=0;k<64;k++){
 4000af0:	e0bffd17 	ldw	r2,-12(fp)
 4000af4:	10800044 	addi	r2,r2,1
 4000af8:	e0bffd15 	stw	r2,-12(fp)
 4000afc:	e0bffd17 	ldw	r2,-12(fp)
 4000b00:	10801010 	cmplti	r2,r2,64
 4000b04:	103feb1e 	bne	r2,zero,4000ab4 <__alt_data_end+0xfc000ab4>
	  component_memory_write((k*sizeof(alt_32)), *(alt_32 *) (&buffer_temperature[k]));
  }

   		   // Call sample buffer
   while (average_busy()){}
 4000b08:	0001883a 	nop
 4000b0c:	00820234 	movhi	r2,2056
 4000b10:	1085c004 	addi	r2,r2,5888
 4000b14:	10800037 	ldwio	r2,0(r2)
 4000b18:	1080004c 	andi	r2,r2,1
 4000b1c:	103ffb1e 	bne	r2,zero,4000b0c <__alt_data_end+0xfc000b0c>
   average_start();
 4000b20:	00c00044 	movi	r3,1
 4000b24:	00820234 	movhi	r2,2056
 4000b28:	1085c204 	addi	r2,r2,5896
 4000b2c:	10c00035 	stwio	r3,0(r2)
   while(!(average_done())){}
 4000b30:	0001883a 	nop
 4000b34:	00820234 	movhi	r2,2056
 4000b38:	1085c604 	addi	r2,r2,5912
 4000b3c:	10800037 	ldwio	r2,0(r2)
 4000b40:	1080004c 	andi	r2,r2,1
 4000b44:	103ffb26 	beq	r2,zero,4000b34 <__alt_data_end+0xfc000b34>
   average_arg_N(64);
 4000b48:	00c01004 	movi	r3,64
 4000b4c:	00820234 	movhi	r2,2056
 4000b50:	1085ca04 	addi	r2,r2,5928
 4000b54:	10c00035 	stwio	r3,0(r2)

   *(alt_32*) (&average_result) = average_returndata();
 4000b58:	e0ffff04 	addi	r3,fp,-4
 4000b5c:	00820234 	movhi	r2,2056
 4000b60:	1085c804 	addi	r2,r2,5920
 4000b64:	10800037 	ldwio	r2,0(r2)
 4000b68:	18800015 	stw	r2,0(r3)

   temperature_medium = average_result;
 4000b6c:	e0bfff17 	ldw	r2,-4(fp)
 4000b70:	1009883a 	mov	r4,r2
 4000b74:	40019540 	call	4001954 <__fixsfsi>
 4000b78:	d0a2d915 	stw	r2,-29852(gp)

  }
 4000b7c:	003fc306 	br	4000a8c <__alt_data_end+0xfc000a8c>

04000b80 <task_temperature_set_code>:
#include "globals.h"
#include "tasks.h"
#include "average_value_driver.h"

void task_temperature_set_code(void)
  {
 4000b80:	defffd04 	addi	sp,sp,-12
 4000b84:	dfc00215 	stw	ra,8(sp)
 4000b88:	df000115 	stw	fp,4(sp)
 4000b8c:	df000104 	addi	fp,sp,4
	init_period_time(50);
 4000b90:	01000c84 	movi	r4,50
 4000b94:	40113640 	call	4011364 <init_period_time>
	task_periodic_start_union test;
	printf("temperature_set start...\n");
 4000b98:	01010074 	movhi	r4,1025
 4000b9c:	2109fd04 	addi	r4,r4,10228
 4000ba0:	4001c440 	call	4001c44 <puts>

	while(1)
	  	{
		test = wait_for_next_period();
 4000ba4:	40113d40 	call	40113d4 <wait_for_next_period>
 4000ba8:	e0bfff15 	stw	r2,-4(fp)
	  	if ((test.periodic_start_integer & 0x1) != 0)
 4000bac:	e0bfff17 	ldw	r2,-4(fp)
 4000bb0:	1080004c 	andi	r2,r2,1
 4000bb4:	10000326 	beq	r2,zero,4000bc4 <task_temperature_set_code+0x44>
	    printf ("deadline miss, temperature_set_code\n");
 4000bb8:	01010074 	movhi	r4,1025
 4000bbc:	210a0404 	addi	r4,r4,10256
 4000bc0:	4001c440 	call	4001c44 <puts>

	    temperature_set = read_temperature_set(0);
 4000bc4:	00820234 	movhi	r2,2056
 4000bc8:	1085de04 	addi	r2,r2,6008
 4000bcc:	10800037 	ldwio	r2,0(r2)
 4000bd0:	d0a2db15 	stw	r2,-29844(gp)

	  	//printf("temperature_set: %d\n", temperature_set);

	  	}
 4000bd4:	003ff306 	br	4000ba4 <__alt_data_end+0xfc000ba4>

04000bd8 <__mulsi3>:
 4000bd8:	0005883a 	mov	r2,zero
 4000bdc:	20000726 	beq	r4,zero,4000bfc <__mulsi3+0x24>
 4000be0:	20c0004c 	andi	r3,r4,1
 4000be4:	2008d07a 	srli	r4,r4,1
 4000be8:	18000126 	beq	r3,zero,4000bf0 <__mulsi3+0x18>
 4000bec:	1145883a 	add	r2,r2,r5
 4000bf0:	294b883a 	add	r5,r5,r5
 4000bf4:	203ffa1e 	bne	r4,zero,4000be0 <__alt_data_end+0xfc000be0>
 4000bf8:	f800283a 	ret
 4000bfc:	f800283a 	ret

04000c00 <__divsf3>:
 4000c00:	defff504 	addi	sp,sp,-44
 4000c04:	200cd5fa 	srli	r6,r4,23
 4000c08:	dcc00415 	stw	r19,16(sp)
 4000c0c:	2026d7fa 	srli	r19,r4,31
 4000c10:	00c02034 	movhi	r3,128
 4000c14:	dd800715 	stw	r22,28(sp)
 4000c18:	dd000515 	stw	r20,20(sp)
 4000c1c:	dc800315 	stw	r18,12(sp)
 4000c20:	18ffffc4 	addi	r3,r3,-1
 4000c24:	dfc00a15 	stw	ra,40(sp)
 4000c28:	df000915 	stw	fp,36(sp)
 4000c2c:	ddc00815 	stw	r23,32(sp)
 4000c30:	dd400615 	stw	r21,24(sp)
 4000c34:	dc400215 	stw	r17,8(sp)
 4000c38:	dc000115 	stw	r16,4(sp)
 4000c3c:	35003fcc 	andi	r20,r6,255
 4000c40:	1924703a 	and	r18,r3,r4
 4000c44:	9d803fcc 	andi	r22,r19,255
 4000c48:	a0005226 	beq	r20,zero,4000d94 <__divsf3+0x194>
 4000c4c:	00803fc4 	movi	r2,255
 4000c50:	a0802e26 	beq	r20,r2,4000d0c <__divsf3+0x10c>
 4000c54:	91002034 	orhi	r4,r18,128
 4000c58:	202490fa 	slli	r18,r4,3
 4000c5c:	a53fe044 	addi	r20,r20,-127
 4000c60:	0021883a 	mov	r16,zero
 4000c64:	002f883a 	mov	r23,zero
 4000c68:	280cd5fa 	srli	r6,r5,23
 4000c6c:	282ad7fa 	srli	r21,r5,31
 4000c70:	00c02034 	movhi	r3,128
 4000c74:	18ffffc4 	addi	r3,r3,-1
 4000c78:	31803fcc 	andi	r6,r6,255
 4000c7c:	1962703a 	and	r17,r3,r5
 4000c80:	af003fcc 	andi	fp,r21,255
 4000c84:	30004a26 	beq	r6,zero,4000db0 <__divsf3+0x1b0>
 4000c88:	00803fc4 	movi	r2,255
 4000c8c:	30804526 	beq	r6,r2,4000da4 <__divsf3+0x1a4>
 4000c90:	89402034 	orhi	r5,r17,128
 4000c94:	282290fa 	slli	r17,r5,3
 4000c98:	31bfe044 	addi	r6,r6,-127
 4000c9c:	000b883a 	mov	r5,zero
 4000ca0:	2c20b03a 	or	r16,r5,r16
 4000ca4:	802090ba 	slli	r16,r16,2
 4000ca8:	00810034 	movhi	r2,1024
 4000cac:	10833304 	addi	r2,r2,3276
 4000cb0:	80a1883a 	add	r16,r16,r2
 4000cb4:	81000017 	ldw	r4,0(r16)
 4000cb8:	9d46f03a 	xor	r3,r19,r21
 4000cbc:	180f883a 	mov	r7,r3
 4000cc0:	18803fcc 	andi	r2,r3,255
 4000cc4:	a18dc83a 	sub	r6,r20,r6
 4000cc8:	2000683a 	jmp	r4
 4000ccc:	04000eb0 	cmpltui	r16,zero,58
 4000cd0:	04000d34 	movhi	r16,52
 4000cd4:	04000ea4 	muli	r16,zero,58
 4000cd8:	04000d20 	cmpeqi	r16,zero,52
 4000cdc:	04000ea4 	muli	r16,zero,58
 4000ce0:	04000e7c 	xorhi	r16,zero,57
 4000ce4:	04000ea4 	muli	r16,zero,58
 4000ce8:	04000d20 	cmpeqi	r16,zero,52
 4000cec:	04000d34 	movhi	r16,52
 4000cf0:	04000d34 	movhi	r16,52
 4000cf4:	04000e7c 	xorhi	r16,zero,57
 4000cf8:	04000d20 	cmpeqi	r16,zero,52
 4000cfc:	04000f90 	cmplti	r16,zero,62
 4000d00:	04000f90 	cmplti	r16,zero,62
 4000d04:	04000f90 	cmplti	r16,zero,62
 4000d08:	04000f44 	movi	r16,61
 4000d0c:	9000581e 	bne	r18,zero,4000e70 <__divsf3+0x270>
 4000d10:	04000204 	movi	r16,8
 4000d14:	05c00084 	movi	r23,2
 4000d18:	003fd306 	br	4000c68 <__alt_data_end+0xfc000c68>
 4000d1c:	0023883a 	mov	r17,zero
 4000d20:	e02d883a 	mov	r22,fp
 4000d24:	282f883a 	mov	r23,r5
 4000d28:	00800084 	movi	r2,2
 4000d2c:	b8808f1e 	bne	r23,r2,4000f6c <__divsf3+0x36c>
 4000d30:	b005883a 	mov	r2,r22
 4000d34:	11c0004c 	andi	r7,r2,1
 4000d38:	013fffc4 	movi	r4,-1
 4000d3c:	000d883a 	mov	r6,zero
 4000d40:	21003fcc 	andi	r4,r4,255
 4000d44:	200895fa 	slli	r4,r4,23
 4000d48:	38803fcc 	andi	r2,r7,255
 4000d4c:	00c02034 	movhi	r3,128
 4000d50:	100497fa 	slli	r2,r2,31
 4000d54:	18ffffc4 	addi	r3,r3,-1
 4000d58:	30c6703a 	and	r3,r6,r3
 4000d5c:	1906b03a 	or	r3,r3,r4
 4000d60:	1884b03a 	or	r2,r3,r2
 4000d64:	dfc00a17 	ldw	ra,40(sp)
 4000d68:	df000917 	ldw	fp,36(sp)
 4000d6c:	ddc00817 	ldw	r23,32(sp)
 4000d70:	dd800717 	ldw	r22,28(sp)
 4000d74:	dd400617 	ldw	r21,24(sp)
 4000d78:	dd000517 	ldw	r20,20(sp)
 4000d7c:	dcc00417 	ldw	r19,16(sp)
 4000d80:	dc800317 	ldw	r18,12(sp)
 4000d84:	dc400217 	ldw	r17,8(sp)
 4000d88:	dc000117 	ldw	r16,4(sp)
 4000d8c:	dec00b04 	addi	sp,sp,44
 4000d90:	f800283a 	ret
 4000d94:	90002b1e 	bne	r18,zero,4000e44 <__divsf3+0x244>
 4000d98:	04000104 	movi	r16,4
 4000d9c:	05c00044 	movi	r23,1
 4000da0:	003fb106 	br	4000c68 <__alt_data_end+0xfc000c68>
 4000da4:	8800251e 	bne	r17,zero,4000e3c <__divsf3+0x23c>
 4000da8:	01400084 	movi	r5,2
 4000dac:	00000206 	br	4000db8 <__divsf3+0x1b8>
 4000db0:	88001a1e 	bne	r17,zero,4000e1c <__divsf3+0x21c>
 4000db4:	01400044 	movi	r5,1
 4000db8:	8160b03a 	or	r16,r16,r5
 4000dbc:	802090ba 	slli	r16,r16,2
 4000dc0:	00c10034 	movhi	r3,1024
 4000dc4:	18c37704 	addi	r3,r3,3548
 4000dc8:	80e1883a 	add	r16,r16,r3
 4000dcc:	80c00017 	ldw	r3,0(r16)
 4000dd0:	9d44f03a 	xor	r2,r19,r21
 4000dd4:	a18dc83a 	sub	r6,r20,r6
 4000dd8:	1800683a 	jmp	r3
 4000ddc:	04000d34 	movhi	r16,52
 4000de0:	04000d34 	movhi	r16,52
 4000de4:	04000f80 	call	4000f8 <alt_exception_trap+0x4000f8>
 4000de8:	04000d1c 	xori	r16,zero,52
 4000dec:	04000f80 	call	4000f8 <alt_exception_trap+0x4000f8>
 4000df0:	04000e7c 	xorhi	r16,zero,57
 4000df4:	04000f80 	call	4000f8 <alt_exception_trap+0x4000f8>
 4000df8:	04000d1c 	xori	r16,zero,52
 4000dfc:	04000d34 	movhi	r16,52
 4000e00:	04000d34 	movhi	r16,52
 4000e04:	04000e7c 	xorhi	r16,zero,57
 4000e08:	04000d1c 	xori	r16,zero,52
 4000e0c:	04000f90 	cmplti	r16,zero,62
 4000e10:	04000f90 	cmplti	r16,zero,62
 4000e14:	04000f90 	cmplti	r16,zero,62
 4000e18:	04000fa8 	cmpgeui	r16,zero,62
 4000e1c:	8809883a 	mov	r4,r17
 4000e20:	4001ab40 	call	4001ab4 <__clzsi2>
 4000e24:	10fffec4 	addi	r3,r2,-5
 4000e28:	10801d84 	addi	r2,r2,118
 4000e2c:	88e2983a 	sll	r17,r17,r3
 4000e30:	008dc83a 	sub	r6,zero,r2
 4000e34:	000b883a 	mov	r5,zero
 4000e38:	003f9906 	br	4000ca0 <__alt_data_end+0xfc000ca0>
 4000e3c:	014000c4 	movi	r5,3
 4000e40:	003f9706 	br	4000ca0 <__alt_data_end+0xfc000ca0>
 4000e44:	9009883a 	mov	r4,r18
 4000e48:	d9400015 	stw	r5,0(sp)
 4000e4c:	4001ab40 	call	4001ab4 <__clzsi2>
 4000e50:	10fffec4 	addi	r3,r2,-5
 4000e54:	11801d84 	addi	r6,r2,118
 4000e58:	90e4983a 	sll	r18,r18,r3
 4000e5c:	01a9c83a 	sub	r20,zero,r6
 4000e60:	0021883a 	mov	r16,zero
 4000e64:	002f883a 	mov	r23,zero
 4000e68:	d9400017 	ldw	r5,0(sp)
 4000e6c:	003f7e06 	br	4000c68 <__alt_data_end+0xfc000c68>
 4000e70:	04000304 	movi	r16,12
 4000e74:	05c000c4 	movi	r23,3
 4000e78:	003f7b06 	br	4000c68 <__alt_data_end+0xfc000c68>
 4000e7c:	01802034 	movhi	r6,128
 4000e80:	000f883a 	mov	r7,zero
 4000e84:	31bfffc4 	addi	r6,r6,-1
 4000e88:	013fffc4 	movi	r4,-1
 4000e8c:	003fac06 	br	4000d40 <__alt_data_end+0xfc000d40>
 4000e90:	01400044 	movi	r5,1
 4000e94:	2909c83a 	sub	r4,r5,r4
 4000e98:	00c006c4 	movi	r3,27
 4000e9c:	19004b0e 	bge	r3,r4,4000fcc <__divsf3+0x3cc>
 4000ea0:	114e703a 	and	r7,r2,r5
 4000ea4:	0009883a 	mov	r4,zero
 4000ea8:	000d883a 	mov	r6,zero
 4000eac:	003fa406 	br	4000d40 <__alt_data_end+0xfc000d40>
 4000eb0:	9006917a 	slli	r3,r18,5
 4000eb4:	8822917a 	slli	r17,r17,5
 4000eb8:	1c40372e 	bgeu	r3,r17,4000f98 <__divsf3+0x398>
 4000ebc:	31bfffc4 	addi	r6,r6,-1
 4000ec0:	010006c4 	movi	r4,27
 4000ec4:	000b883a 	mov	r5,zero
 4000ec8:	180f883a 	mov	r7,r3
 4000ecc:	294b883a 	add	r5,r5,r5
 4000ed0:	18c7883a 	add	r3,r3,r3
 4000ed4:	38000116 	blt	r7,zero,4000edc <__divsf3+0x2dc>
 4000ed8:	1c400236 	bltu	r3,r17,4000ee4 <__divsf3+0x2e4>
 4000edc:	1c47c83a 	sub	r3,r3,r17
 4000ee0:	29400054 	ori	r5,r5,1
 4000ee4:	213fffc4 	addi	r4,r4,-1
 4000ee8:	203ff71e 	bne	r4,zero,4000ec8 <__alt_data_end+0xfc000ec8>
 4000eec:	1806c03a 	cmpne	r3,r3,zero
 4000ef0:	1962b03a 	or	r17,r3,r5
 4000ef4:	31001fc4 	addi	r4,r6,127
 4000ef8:	013fe50e 	bge	zero,r4,4000e90 <__alt_data_end+0xfc000e90>
 4000efc:	88c001cc 	andi	r3,r17,7
 4000f00:	18000426 	beq	r3,zero,4000f14 <__divsf3+0x314>
 4000f04:	88c003cc 	andi	r3,r17,15
 4000f08:	01400104 	movi	r5,4
 4000f0c:	19400126 	beq	r3,r5,4000f14 <__divsf3+0x314>
 4000f10:	8963883a 	add	r17,r17,r5
 4000f14:	88c2002c 	andhi	r3,r17,2048
 4000f18:	18000426 	beq	r3,zero,4000f2c <__divsf3+0x32c>
 4000f1c:	00fe0034 	movhi	r3,63488
 4000f20:	18ffffc4 	addi	r3,r3,-1
 4000f24:	31002004 	addi	r4,r6,128
 4000f28:	88e2703a 	and	r17,r17,r3
 4000f2c:	00c03f84 	movi	r3,254
 4000f30:	193f8016 	blt	r3,r4,4000d34 <__alt_data_end+0xfc000d34>
 4000f34:	880c91ba 	slli	r6,r17,6
 4000f38:	11c0004c 	andi	r7,r2,1
 4000f3c:	300cd27a 	srli	r6,r6,9
 4000f40:	003f7f06 	br	4000d40 <__alt_data_end+0xfc000d40>
 4000f44:	9080102c 	andhi	r2,r18,64
 4000f48:	10000226 	beq	r2,zero,4000f54 <__divsf3+0x354>
 4000f4c:	8880102c 	andhi	r2,r17,64
 4000f50:	10001826 	beq	r2,zero,4000fb4 <__divsf3+0x3b4>
 4000f54:	00802034 	movhi	r2,128
 4000f58:	91801034 	orhi	r6,r18,64
 4000f5c:	10bfffc4 	addi	r2,r2,-1
 4000f60:	980f883a 	mov	r7,r19
 4000f64:	308c703a 	and	r6,r6,r2
 4000f68:	003fc706 	br	4000e88 <__alt_data_end+0xfc000e88>
 4000f6c:	008000c4 	movi	r2,3
 4000f70:	b8802d26 	beq	r23,r2,4001028 <__divsf3+0x428>
 4000f74:	00c00044 	movi	r3,1
 4000f78:	b005883a 	mov	r2,r22
 4000f7c:	b8ffdd1e 	bne	r23,r3,4000ef4 <__alt_data_end+0xfc000ef4>
 4000f80:	11c0004c 	andi	r7,r2,1
 4000f84:	0009883a 	mov	r4,zero
 4000f88:	000d883a 	mov	r6,zero
 4000f8c:	003f6c06 	br	4000d40 <__alt_data_end+0xfc000d40>
 4000f90:	9023883a 	mov	r17,r18
 4000f94:	003f6406 	br	4000d28 <__alt_data_end+0xfc000d28>
 4000f98:	1c47c83a 	sub	r3,r3,r17
 4000f9c:	01000684 	movi	r4,26
 4000fa0:	01400044 	movi	r5,1
 4000fa4:	003fc806 	br	4000ec8 <__alt_data_end+0xfc000ec8>
 4000fa8:	9080102c 	andhi	r2,r18,64
 4000fac:	103fe926 	beq	r2,zero,4000f54 <__alt_data_end+0xfc000f54>
 4000fb0:	0023883a 	mov	r17,zero
 4000fb4:	00802034 	movhi	r2,128
 4000fb8:	89801034 	orhi	r6,r17,64
 4000fbc:	10bfffc4 	addi	r2,r2,-1
 4000fc0:	a80f883a 	mov	r7,r21
 4000fc4:	308c703a 	and	r6,r6,r2
 4000fc8:	003faf06 	br	4000e88 <__alt_data_end+0xfc000e88>
 4000fcc:	01c00804 	movi	r7,32
 4000fd0:	390fc83a 	sub	r7,r7,r4
 4000fd4:	89ce983a 	sll	r7,r17,r7
 4000fd8:	890ad83a 	srl	r5,r17,r4
 4000fdc:	380ec03a 	cmpne	r7,r7,zero
 4000fe0:	29cab03a 	or	r5,r5,r7
 4000fe4:	28c001cc 	andi	r3,r5,7
 4000fe8:	18000426 	beq	r3,zero,4000ffc <__divsf3+0x3fc>
 4000fec:	28c003cc 	andi	r3,r5,15
 4000ff0:	01000104 	movi	r4,4
 4000ff4:	19000126 	beq	r3,r4,4000ffc <__divsf3+0x3fc>
 4000ff8:	290b883a 	add	r5,r5,r4
 4000ffc:	28c1002c 	andhi	r3,r5,1024
 4001000:	18000426 	beq	r3,zero,4001014 <__divsf3+0x414>
 4001004:	11c0004c 	andi	r7,r2,1
 4001008:	01000044 	movi	r4,1
 400100c:	000d883a 	mov	r6,zero
 4001010:	003f4b06 	br	4000d40 <__alt_data_end+0xfc000d40>
 4001014:	280a91ba 	slli	r5,r5,6
 4001018:	11c0004c 	andi	r7,r2,1
 400101c:	0009883a 	mov	r4,zero
 4001020:	280cd27a 	srli	r6,r5,9
 4001024:	003f4606 	br	4000d40 <__alt_data_end+0xfc000d40>
 4001028:	00802034 	movhi	r2,128
 400102c:	89801034 	orhi	r6,r17,64
 4001030:	10bfffc4 	addi	r2,r2,-1
 4001034:	b00f883a 	mov	r7,r22
 4001038:	308c703a 	and	r6,r6,r2
 400103c:	003f9206 	br	4000e88 <__alt_data_end+0xfc000e88>

04001040 <__mulsf3>:
 4001040:	defff504 	addi	sp,sp,-44
 4001044:	dc000115 	stw	r16,4(sp)
 4001048:	2020d5fa 	srli	r16,r4,23
 400104c:	dd400615 	stw	r21,24(sp)
 4001050:	202ad7fa 	srli	r21,r4,31
 4001054:	dc800315 	stw	r18,12(sp)
 4001058:	04802034 	movhi	r18,128
 400105c:	df000915 	stw	fp,36(sp)
 4001060:	dd000515 	stw	r20,20(sp)
 4001064:	94bfffc4 	addi	r18,r18,-1
 4001068:	dfc00a15 	stw	ra,40(sp)
 400106c:	ddc00815 	stw	r23,32(sp)
 4001070:	dd800715 	stw	r22,28(sp)
 4001074:	dcc00415 	stw	r19,16(sp)
 4001078:	dc400215 	stw	r17,8(sp)
 400107c:	84003fcc 	andi	r16,r16,255
 4001080:	9124703a 	and	r18,r18,r4
 4001084:	a829883a 	mov	r20,r21
 4001088:	af003fcc 	andi	fp,r21,255
 400108c:	80005426 	beq	r16,zero,40011e0 <__mulsf3+0x1a0>
 4001090:	00803fc4 	movi	r2,255
 4001094:	80802f26 	beq	r16,r2,4001154 <__mulsf3+0x114>
 4001098:	91002034 	orhi	r4,r18,128
 400109c:	202490fa 	slli	r18,r4,3
 40010a0:	843fe044 	addi	r16,r16,-127
 40010a4:	0023883a 	mov	r17,zero
 40010a8:	002f883a 	mov	r23,zero
 40010ac:	2804d5fa 	srli	r2,r5,23
 40010b0:	282cd7fa 	srli	r22,r5,31
 40010b4:	01002034 	movhi	r4,128
 40010b8:	213fffc4 	addi	r4,r4,-1
 40010bc:	10803fcc 	andi	r2,r2,255
 40010c0:	2166703a 	and	r19,r4,r5
 40010c4:	b1803fcc 	andi	r6,r22,255
 40010c8:	10004c26 	beq	r2,zero,40011fc <__mulsf3+0x1bc>
 40010cc:	00c03fc4 	movi	r3,255
 40010d0:	10c04726 	beq	r2,r3,40011f0 <__mulsf3+0x1b0>
 40010d4:	99002034 	orhi	r4,r19,128
 40010d8:	202690fa 	slli	r19,r4,3
 40010dc:	10bfe044 	addi	r2,r2,-127
 40010e0:	0007883a 	mov	r3,zero
 40010e4:	80a1883a 	add	r16,r16,r2
 40010e8:	010003c4 	movi	r4,15
 40010ec:	1c44b03a 	or	r2,r3,r17
 40010f0:	b56af03a 	xor	r21,r22,r21
 40010f4:	81c00044 	addi	r7,r16,1
 40010f8:	20806b36 	bltu	r4,r2,40012a8 <__mulsf3+0x268>
 40010fc:	100490ba 	slli	r2,r2,2
 4001100:	01010034 	movhi	r4,1024
 4001104:	21044504 	addi	r4,r4,4372
 4001108:	1105883a 	add	r2,r2,r4
 400110c:	10800017 	ldw	r2,0(r2)
 4001110:	1000683a 	jmp	r2
 4001114:	040012a8 	cmpgeui	r16,zero,74
 4001118:	04001168 	cmpgeui	r16,zero,69
 400111c:	04001168 	cmpgeui	r16,zero,69
 4001120:	04001164 	muli	r16,zero,69
 4001124:	0400128c 	andi	r16,zero,74
 4001128:	0400128c 	andi	r16,zero,74
 400112c:	04001278 	rdprs	r16,zero,73
 4001130:	04001164 	muli	r16,zero,69
 4001134:	0400128c 	andi	r16,zero,74
 4001138:	04001278 	rdprs	r16,zero,73
 400113c:	0400128c 	andi	r16,zero,74
 4001140:	04001164 	muli	r16,zero,69
 4001144:	04001298 	cmpnei	r16,zero,74
 4001148:	04001298 	cmpnei	r16,zero,74
 400114c:	04001298 	cmpnei	r16,zero,74
 4001150:	040013a8 	cmpgeui	r16,zero,78
 4001154:	90003b1e 	bne	r18,zero,4001244 <__mulsf3+0x204>
 4001158:	04400204 	movi	r17,8
 400115c:	05c00084 	movi	r23,2
 4001160:	003fd206 	br	40010ac <__alt_data_end+0xfc0010ac>
 4001164:	302b883a 	mov	r21,r6
 4001168:	00800084 	movi	r2,2
 400116c:	18802626 	beq	r3,r2,4001208 <__mulsf3+0x1c8>
 4001170:	008000c4 	movi	r2,3
 4001174:	1880b826 	beq	r3,r2,4001458 <__mulsf3+0x418>
 4001178:	00800044 	movi	r2,1
 400117c:	1880af1e 	bne	r3,r2,400143c <__mulsf3+0x3fc>
 4001180:	a829883a 	mov	r20,r21
 4001184:	0007883a 	mov	r3,zero
 4001188:	0009883a 	mov	r4,zero
 400118c:	18803fcc 	andi	r2,r3,255
 4001190:	100695fa 	slli	r3,r2,23
 4001194:	a0803fcc 	andi	r2,r20,255
 4001198:	100a97fa 	slli	r5,r2,31
 400119c:	00802034 	movhi	r2,128
 40011a0:	10bfffc4 	addi	r2,r2,-1
 40011a4:	2084703a 	and	r2,r4,r2
 40011a8:	10c4b03a 	or	r2,r2,r3
 40011ac:	1144b03a 	or	r2,r2,r5
 40011b0:	dfc00a17 	ldw	ra,40(sp)
 40011b4:	df000917 	ldw	fp,36(sp)
 40011b8:	ddc00817 	ldw	r23,32(sp)
 40011bc:	dd800717 	ldw	r22,28(sp)
 40011c0:	dd400617 	ldw	r21,24(sp)
 40011c4:	dd000517 	ldw	r20,20(sp)
 40011c8:	dcc00417 	ldw	r19,16(sp)
 40011cc:	dc800317 	ldw	r18,12(sp)
 40011d0:	dc400217 	ldw	r17,8(sp)
 40011d4:	dc000117 	ldw	r16,4(sp)
 40011d8:	dec00b04 	addi	sp,sp,44
 40011dc:	f800283a 	ret
 40011e0:	90000d1e 	bne	r18,zero,4001218 <__mulsf3+0x1d8>
 40011e4:	04400104 	movi	r17,4
 40011e8:	05c00044 	movi	r23,1
 40011ec:	003faf06 	br	40010ac <__alt_data_end+0xfc0010ac>
 40011f0:	9806c03a 	cmpne	r3,r19,zero
 40011f4:	18c00084 	addi	r3,r3,2
 40011f8:	003fba06 	br	40010e4 <__alt_data_end+0xfc0010e4>
 40011fc:	9800141e 	bne	r19,zero,4001250 <__mulsf3+0x210>
 4001200:	00c00044 	movi	r3,1
 4001204:	003fb706 	br	40010e4 <__alt_data_end+0xfc0010e4>
 4001208:	a829883a 	mov	r20,r21
 400120c:	00ffffc4 	movi	r3,-1
 4001210:	0009883a 	mov	r4,zero
 4001214:	003fdd06 	br	400118c <__alt_data_end+0xfc00118c>
 4001218:	9009883a 	mov	r4,r18
 400121c:	d9400015 	stw	r5,0(sp)
 4001220:	4001ab40 	call	4001ab4 <__clzsi2>
 4001224:	10fffec4 	addi	r3,r2,-5
 4001228:	10801d84 	addi	r2,r2,118
 400122c:	90e4983a 	sll	r18,r18,r3
 4001230:	00a1c83a 	sub	r16,zero,r2
 4001234:	0023883a 	mov	r17,zero
 4001238:	002f883a 	mov	r23,zero
 400123c:	d9400017 	ldw	r5,0(sp)
 4001240:	003f9a06 	br	40010ac <__alt_data_end+0xfc0010ac>
 4001244:	04400304 	movi	r17,12
 4001248:	05c000c4 	movi	r23,3
 400124c:	003f9706 	br	40010ac <__alt_data_end+0xfc0010ac>
 4001250:	9809883a 	mov	r4,r19
 4001254:	d9800015 	stw	r6,0(sp)
 4001258:	4001ab40 	call	4001ab4 <__clzsi2>
 400125c:	10fffec4 	addi	r3,r2,-5
 4001260:	10801d84 	addi	r2,r2,118
 4001264:	98e6983a 	sll	r19,r19,r3
 4001268:	0085c83a 	sub	r2,zero,r2
 400126c:	0007883a 	mov	r3,zero
 4001270:	d9800017 	ldw	r6,0(sp)
 4001274:	003f9b06 	br	40010e4 <__alt_data_end+0xfc0010e4>
 4001278:	01002034 	movhi	r4,128
 400127c:	0029883a 	mov	r20,zero
 4001280:	213fffc4 	addi	r4,r4,-1
 4001284:	00ffffc4 	movi	r3,-1
 4001288:	003fc006 	br	400118c <__alt_data_end+0xfc00118c>
 400128c:	9027883a 	mov	r19,r18
 4001290:	b807883a 	mov	r3,r23
 4001294:	003fb406 	br	4001168 <__alt_data_end+0xfc001168>
 4001298:	9027883a 	mov	r19,r18
 400129c:	e02b883a 	mov	r21,fp
 40012a0:	b807883a 	mov	r3,r23
 40012a4:	003fb006 	br	4001168 <__alt_data_end+0xfc001168>
 40012a8:	9028d43a 	srli	r20,r18,16
 40012ac:	982cd43a 	srli	r22,r19,16
 40012b0:	94bfffcc 	andi	r18,r18,65535
 40012b4:	9cffffcc 	andi	r19,r19,65535
 40012b8:	980b883a 	mov	r5,r19
 40012bc:	9009883a 	mov	r4,r18
 40012c0:	d9c00015 	stw	r7,0(sp)
 40012c4:	4000bd80 	call	4000bd8 <__mulsi3>
 40012c8:	a00b883a 	mov	r5,r20
 40012cc:	9809883a 	mov	r4,r19
 40012d0:	1023883a 	mov	r17,r2
 40012d4:	4000bd80 	call	4000bd8 <__mulsi3>
 40012d8:	a009883a 	mov	r4,r20
 40012dc:	b00b883a 	mov	r5,r22
 40012e0:	1027883a 	mov	r19,r2
 40012e4:	4000bd80 	call	4000bd8 <__mulsi3>
 40012e8:	b00b883a 	mov	r5,r22
 40012ec:	9009883a 	mov	r4,r18
 40012f0:	1029883a 	mov	r20,r2
 40012f4:	4000bd80 	call	4000bd8 <__mulsi3>
 40012f8:	8806d43a 	srli	r3,r17,16
 40012fc:	14c5883a 	add	r2,r2,r19
 4001300:	d9c00017 	ldw	r7,0(sp)
 4001304:	1885883a 	add	r2,r3,r2
 4001308:	14c0022e 	bgeu	r2,r19,4001314 <__mulsf3+0x2d4>
 400130c:	00c00074 	movhi	r3,1
 4001310:	a0e9883a 	add	r20,r20,r3
 4001314:	1026943a 	slli	r19,r2,16
 4001318:	8c7fffcc 	andi	r17,r17,65535
 400131c:	1004d43a 	srli	r2,r2,16
 4001320:	9c63883a 	add	r17,r19,r17
 4001324:	882691ba 	slli	r19,r17,6
 4001328:	1505883a 	add	r2,r2,r20
 400132c:	8822d6ba 	srli	r17,r17,26
 4001330:	100891ba 	slli	r4,r2,6
 4001334:	9826c03a 	cmpne	r19,r19,zero
 4001338:	9c62b03a 	or	r17,r19,r17
 400133c:	8926b03a 	or	r19,r17,r4
 4001340:	9882002c 	andhi	r2,r19,2048
 4001344:	10000426 	beq	r2,zero,4001358 <__mulsf3+0x318>
 4001348:	9804d07a 	srli	r2,r19,1
 400134c:	9900004c 	andi	r4,r19,1
 4001350:	3821883a 	mov	r16,r7
 4001354:	1126b03a 	or	r19,r2,r4
 4001358:	80c01fc4 	addi	r3,r16,127
 400135c:	00c0210e 	bge	zero,r3,40013e4 <__mulsf3+0x3a4>
 4001360:	988001cc 	andi	r2,r19,7
 4001364:	10000426 	beq	r2,zero,4001378 <__mulsf3+0x338>
 4001368:	988003cc 	andi	r2,r19,15
 400136c:	01000104 	movi	r4,4
 4001370:	11000126 	beq	r2,r4,4001378 <__mulsf3+0x338>
 4001374:	9927883a 	add	r19,r19,r4
 4001378:	9882002c 	andhi	r2,r19,2048
 400137c:	10000426 	beq	r2,zero,4001390 <__mulsf3+0x350>
 4001380:	00be0034 	movhi	r2,63488
 4001384:	10bfffc4 	addi	r2,r2,-1
 4001388:	80c02004 	addi	r3,r16,128
 400138c:	98a6703a 	and	r19,r19,r2
 4001390:	00803f84 	movi	r2,254
 4001394:	10ff9c16 	blt	r2,r3,4001208 <__alt_data_end+0xfc001208>
 4001398:	980891ba 	slli	r4,r19,6
 400139c:	a829883a 	mov	r20,r21
 40013a0:	2008d27a 	srli	r4,r4,9
 40013a4:	003f7906 	br	400118c <__alt_data_end+0xfc00118c>
 40013a8:	9080102c 	andhi	r2,r18,64
 40013ac:	10000826 	beq	r2,zero,40013d0 <__mulsf3+0x390>
 40013b0:	9880102c 	andhi	r2,r19,64
 40013b4:	1000061e 	bne	r2,zero,40013d0 <__mulsf3+0x390>
 40013b8:	00802034 	movhi	r2,128
 40013bc:	99001034 	orhi	r4,r19,64
 40013c0:	10bfffc4 	addi	r2,r2,-1
 40013c4:	b029883a 	mov	r20,r22
 40013c8:	2088703a 	and	r4,r4,r2
 40013cc:	003fad06 	br	4001284 <__alt_data_end+0xfc001284>
 40013d0:	00802034 	movhi	r2,128
 40013d4:	91001034 	orhi	r4,r18,64
 40013d8:	10bfffc4 	addi	r2,r2,-1
 40013dc:	2088703a 	and	r4,r4,r2
 40013e0:	003fa806 	br	4001284 <__alt_data_end+0xfc001284>
 40013e4:	00800044 	movi	r2,1
 40013e8:	10c7c83a 	sub	r3,r2,r3
 40013ec:	008006c4 	movi	r2,27
 40013f0:	10ff6316 	blt	r2,r3,4001180 <__alt_data_end+0xfc001180>
 40013f4:	00800804 	movi	r2,32
 40013f8:	10c5c83a 	sub	r2,r2,r3
 40013fc:	9884983a 	sll	r2,r19,r2
 4001400:	98c6d83a 	srl	r3,r19,r3
 4001404:	1004c03a 	cmpne	r2,r2,zero
 4001408:	1884b03a 	or	r2,r3,r2
 400140c:	10c001cc 	andi	r3,r2,7
 4001410:	18000426 	beq	r3,zero,4001424 <__mulsf3+0x3e4>
 4001414:	10c003cc 	andi	r3,r2,15
 4001418:	01000104 	movi	r4,4
 400141c:	19000126 	beq	r3,r4,4001424 <__mulsf3+0x3e4>
 4001420:	1105883a 	add	r2,r2,r4
 4001424:	10c1002c 	andhi	r3,r2,1024
 4001428:	18000626 	beq	r3,zero,4001444 <__mulsf3+0x404>
 400142c:	a829883a 	mov	r20,r21
 4001430:	00c00044 	movi	r3,1
 4001434:	0009883a 	mov	r4,zero
 4001438:	003f5406 	br	400118c <__alt_data_end+0xfc00118c>
 400143c:	3821883a 	mov	r16,r7
 4001440:	003fc506 	br	4001358 <__alt_data_end+0xfc001358>
 4001444:	100491ba 	slli	r2,r2,6
 4001448:	a829883a 	mov	r20,r21
 400144c:	0007883a 	mov	r3,zero
 4001450:	1008d27a 	srli	r4,r2,9
 4001454:	003f4d06 	br	400118c <__alt_data_end+0xfc00118c>
 4001458:	00802034 	movhi	r2,128
 400145c:	99001034 	orhi	r4,r19,64
 4001460:	10bfffc4 	addi	r2,r2,-1
 4001464:	a829883a 	mov	r20,r21
 4001468:	2088703a 	and	r4,r4,r2
 400146c:	003f8506 	br	4001284 <__alt_data_end+0xfc001284>

04001470 <__subsf3>:
 4001470:	defffc04 	addi	sp,sp,-16
 4001474:	280cd5fa 	srli	r6,r5,23
 4001478:	dc000015 	stw	r16,0(sp)
 400147c:	01c02034 	movhi	r7,128
 4001480:	2020d5fa 	srli	r16,r4,23
 4001484:	39ffffc4 	addi	r7,r7,-1
 4001488:	3906703a 	and	r3,r7,r4
 400148c:	dc400115 	stw	r17,4(sp)
 4001490:	394e703a 	and	r7,r7,r5
 4001494:	2022d7fa 	srli	r17,r4,31
 4001498:	dfc00315 	stw	ra,12(sp)
 400149c:	dc800215 	stw	r18,8(sp)
 40014a0:	31803fcc 	andi	r6,r6,255
 40014a4:	01003fc4 	movi	r4,255
 40014a8:	84003fcc 	andi	r16,r16,255
 40014ac:	180690fa 	slli	r3,r3,3
 40014b0:	2804d7fa 	srli	r2,r5,31
 40014b4:	380e90fa 	slli	r7,r7,3
 40014b8:	31006d26 	beq	r6,r4,4001670 <__subsf3+0x200>
 40014bc:	1080005c 	xori	r2,r2,1
 40014c0:	8189c83a 	sub	r4,r16,r6
 40014c4:	14404f26 	beq	r2,r17,4001604 <__subsf3+0x194>
 40014c8:	0100770e 	bge	zero,r4,40016a8 <__subsf3+0x238>
 40014cc:	30001e1e 	bne	r6,zero,4001548 <__subsf3+0xd8>
 40014d0:	38006a1e 	bne	r7,zero,400167c <__subsf3+0x20c>
 40014d4:	188001cc 	andi	r2,r3,7
 40014d8:	10000426 	beq	r2,zero,40014ec <__subsf3+0x7c>
 40014dc:	188003cc 	andi	r2,r3,15
 40014e0:	01000104 	movi	r4,4
 40014e4:	11000126 	beq	r2,r4,40014ec <__subsf3+0x7c>
 40014e8:	1907883a 	add	r3,r3,r4
 40014ec:	1881002c 	andhi	r2,r3,1024
 40014f0:	10003926 	beq	r2,zero,40015d8 <__subsf3+0x168>
 40014f4:	84000044 	addi	r16,r16,1
 40014f8:	00803fc4 	movi	r2,255
 40014fc:	80807526 	beq	r16,r2,40016d4 <__subsf3+0x264>
 4001500:	180691ba 	slli	r3,r3,6
 4001504:	8880004c 	andi	r2,r17,1
 4001508:	180ad27a 	srli	r5,r3,9
 400150c:	84003fcc 	andi	r16,r16,255
 4001510:	800695fa 	slli	r3,r16,23
 4001514:	10803fcc 	andi	r2,r2,255
 4001518:	01002034 	movhi	r4,128
 400151c:	213fffc4 	addi	r4,r4,-1
 4001520:	100497fa 	slli	r2,r2,31
 4001524:	2920703a 	and	r16,r5,r4
 4001528:	80e0b03a 	or	r16,r16,r3
 400152c:	8084b03a 	or	r2,r16,r2
 4001530:	dfc00317 	ldw	ra,12(sp)
 4001534:	dc800217 	ldw	r18,8(sp)
 4001538:	dc400117 	ldw	r17,4(sp)
 400153c:	dc000017 	ldw	r16,0(sp)
 4001540:	dec00404 	addi	sp,sp,16
 4001544:	f800283a 	ret
 4001548:	00803fc4 	movi	r2,255
 400154c:	80bfe126 	beq	r16,r2,40014d4 <__alt_data_end+0xfc0014d4>
 4001550:	39c10034 	orhi	r7,r7,1024
 4001554:	008006c4 	movi	r2,27
 4001558:	11007416 	blt	r2,r4,400172c <__subsf3+0x2bc>
 400155c:	00800804 	movi	r2,32
 4001560:	1105c83a 	sub	r2,r2,r4
 4001564:	3884983a 	sll	r2,r7,r2
 4001568:	390ed83a 	srl	r7,r7,r4
 400156c:	1008c03a 	cmpne	r4,r2,zero
 4001570:	390eb03a 	or	r7,r7,r4
 4001574:	19c7c83a 	sub	r3,r3,r7
 4001578:	1881002c 	andhi	r2,r3,1024
 400157c:	10001426 	beq	r2,zero,40015d0 <__subsf3+0x160>
 4001580:	04810034 	movhi	r18,1024
 4001584:	94bfffc4 	addi	r18,r18,-1
 4001588:	1ca4703a 	and	r18,r3,r18
 400158c:	9009883a 	mov	r4,r18
 4001590:	4001ab40 	call	4001ab4 <__clzsi2>
 4001594:	10bffec4 	addi	r2,r2,-5
 4001598:	90a4983a 	sll	r18,r18,r2
 400159c:	14005116 	blt	r2,r16,40016e4 <__subsf3+0x274>
 40015a0:	1405c83a 	sub	r2,r2,r16
 40015a4:	10c00044 	addi	r3,r2,1
 40015a8:	00800804 	movi	r2,32
 40015ac:	10c5c83a 	sub	r2,r2,r3
 40015b0:	9084983a 	sll	r2,r18,r2
 40015b4:	90e4d83a 	srl	r18,r18,r3
 40015b8:	0021883a 	mov	r16,zero
 40015bc:	1006c03a 	cmpne	r3,r2,zero
 40015c0:	90c6b03a 	or	r3,r18,r3
 40015c4:	003fc306 	br	40014d4 <__alt_data_end+0xfc0014d4>
 40015c8:	2000e026 	beq	r4,zero,400194c <__subsf3+0x4dc>
 40015cc:	2007883a 	mov	r3,r4
 40015d0:	188001cc 	andi	r2,r3,7
 40015d4:	103fc11e 	bne	r2,zero,40014dc <__alt_data_end+0xfc0014dc>
 40015d8:	180ad0fa 	srli	r5,r3,3
 40015dc:	00c03fc4 	movi	r3,255
 40015e0:	8880004c 	andi	r2,r17,1
 40015e4:	80c0031e 	bne	r16,r3,40015f4 <__subsf3+0x184>
 40015e8:	28006d26 	beq	r5,zero,40017a0 <__subsf3+0x330>
 40015ec:	29401034 	orhi	r5,r5,64
 40015f0:	043fffc4 	movi	r16,-1
 40015f4:	00c02034 	movhi	r3,128
 40015f8:	18ffffc4 	addi	r3,r3,-1
 40015fc:	28ca703a 	and	r5,r5,r3
 4001600:	003fc206 	br	400150c <__alt_data_end+0xfc00150c>
 4001604:	01003c0e 	bge	zero,r4,40016f8 <__subsf3+0x288>
 4001608:	30002126 	beq	r6,zero,4001690 <__subsf3+0x220>
 400160c:	01403fc4 	movi	r5,255
 4001610:	817fb026 	beq	r16,r5,40014d4 <__alt_data_end+0xfc0014d4>
 4001614:	39c10034 	orhi	r7,r7,1024
 4001618:	014006c4 	movi	r5,27
 400161c:	29007416 	blt	r5,r4,40017f0 <__subsf3+0x380>
 4001620:	01400804 	movi	r5,32
 4001624:	290bc83a 	sub	r5,r5,r4
 4001628:	394a983a 	sll	r5,r7,r5
 400162c:	390ed83a 	srl	r7,r7,r4
 4001630:	2808c03a 	cmpne	r4,r5,zero
 4001634:	390eb03a 	or	r7,r7,r4
 4001638:	19c7883a 	add	r3,r3,r7
 400163c:	1901002c 	andhi	r4,r3,1024
 4001640:	20003826 	beq	r4,zero,4001724 <__subsf3+0x2b4>
 4001644:	84000044 	addi	r16,r16,1
 4001648:	01003fc4 	movi	r4,255
 400164c:	81005426 	beq	r16,r4,40017a0 <__subsf3+0x330>
 4001650:	1023883a 	mov	r17,r2
 4001654:	00bf0034 	movhi	r2,64512
 4001658:	10bfffc4 	addi	r2,r2,-1
 400165c:	1900004c 	andi	r4,r3,1
 4001660:	1886703a 	and	r3,r3,r2
 4001664:	1806d07a 	srli	r3,r3,1
 4001668:	1906b03a 	or	r3,r3,r4
 400166c:	003f9906 	br	40014d4 <__alt_data_end+0xfc0014d4>
 4001670:	383f9226 	beq	r7,zero,40014bc <__alt_data_end+0xfc0014bc>
 4001674:	10803fcc 	andi	r2,r2,255
 4001678:	003f9106 	br	40014c0 <__alt_data_end+0xfc0014c0>
 400167c:	213fffc4 	addi	r4,r4,-1
 4001680:	203fbc26 	beq	r4,zero,4001574 <__alt_data_end+0xfc001574>
 4001684:	00803fc4 	movi	r2,255
 4001688:	80bfb21e 	bne	r16,r2,4001554 <__alt_data_end+0xfc001554>
 400168c:	003f9106 	br	40014d4 <__alt_data_end+0xfc0014d4>
 4001690:	383f9026 	beq	r7,zero,40014d4 <__alt_data_end+0xfc0014d4>
 4001694:	213fffc4 	addi	r4,r4,-1
 4001698:	203fe726 	beq	r4,zero,4001638 <__alt_data_end+0xfc001638>
 400169c:	01403fc4 	movi	r5,255
 40016a0:	817fdd1e 	bne	r16,r5,4001618 <__alt_data_end+0xfc001618>
 40016a4:	003f8b06 	br	40014d4 <__alt_data_end+0xfc0014d4>
 40016a8:	2000221e 	bne	r4,zero,4001734 <__subsf3+0x2c4>
 40016ac:	81000044 	addi	r4,r16,1
 40016b0:	21003fcc 	andi	r4,r4,255
 40016b4:	01400044 	movi	r5,1
 40016b8:	2900470e 	bge	r5,r4,40017d8 <__subsf3+0x368>
 40016bc:	19e5c83a 	sub	r18,r3,r7
 40016c0:	9141002c 	andhi	r5,r18,1024
 40016c4:	28002d26 	beq	r5,zero,400177c <__subsf3+0x30c>
 40016c8:	38e5c83a 	sub	r18,r7,r3
 40016cc:	1023883a 	mov	r17,r2
 40016d0:	003fae06 	br	400158c <__alt_data_end+0xfc00158c>
 40016d4:	8880004c 	andi	r2,r17,1
 40016d8:	043fffc4 	movi	r16,-1
 40016dc:	000b883a 	mov	r5,zero
 40016e0:	003f8a06 	br	400150c <__alt_data_end+0xfc00150c>
 40016e4:	00ff0034 	movhi	r3,64512
 40016e8:	18ffffc4 	addi	r3,r3,-1
 40016ec:	80a1c83a 	sub	r16,r16,r2
 40016f0:	90c6703a 	and	r3,r18,r3
 40016f4:	003f7706 	br	40014d4 <__alt_data_end+0xfc0014d4>
 40016f8:	2000431e 	bne	r4,zero,4001808 <__subsf3+0x398>
 40016fc:	81000044 	addi	r4,r16,1
 4001700:	21803fcc 	andi	r6,r4,255
 4001704:	01400044 	movi	r5,1
 4001708:	2980280e 	bge	r5,r6,40017ac <__subsf3+0x33c>
 400170c:	01403fc4 	movi	r5,255
 4001710:	21402326 	beq	r4,r5,40017a0 <__subsf3+0x330>
 4001714:	19c7883a 	add	r3,r3,r7
 4001718:	1806d07a 	srli	r3,r3,1
 400171c:	2021883a 	mov	r16,r4
 4001720:	003f6c06 	br	40014d4 <__alt_data_end+0xfc0014d4>
 4001724:	1023883a 	mov	r17,r2
 4001728:	003fa906 	br	40015d0 <__alt_data_end+0xfc0015d0>
 400172c:	01c00044 	movi	r7,1
 4001730:	003f9006 	br	4001574 <__alt_data_end+0xfc001574>
 4001734:	8000151e 	bne	r16,zero,400178c <__subsf3+0x31c>
 4001738:	18002f26 	beq	r3,zero,40017f8 <__subsf3+0x388>
 400173c:	0108303a 	nor	r4,zero,r4
 4001740:	20000a26 	beq	r4,zero,400176c <__subsf3+0x2fc>
 4001744:	01403fc4 	movi	r5,255
 4001748:	31402b26 	beq	r6,r5,40017f8 <__subsf3+0x388>
 400174c:	014006c4 	movi	r5,27
 4001750:	29006e16 	blt	r5,r4,400190c <__subsf3+0x49c>
 4001754:	01400804 	movi	r5,32
 4001758:	290bc83a 	sub	r5,r5,r4
 400175c:	194a983a 	sll	r5,r3,r5
 4001760:	1908d83a 	srl	r4,r3,r4
 4001764:	2806c03a 	cmpne	r3,r5,zero
 4001768:	20c6b03a 	or	r3,r4,r3
 400176c:	38c7c83a 	sub	r3,r7,r3
 4001770:	3021883a 	mov	r16,r6
 4001774:	1023883a 	mov	r17,r2
 4001778:	003f7f06 	br	4001578 <__alt_data_end+0xfc001578>
 400177c:	903f831e 	bne	r18,zero,400158c <__alt_data_end+0xfc00158c>
 4001780:	0005883a 	mov	r2,zero
 4001784:	0021883a 	mov	r16,zero
 4001788:	003f9a06 	br	40015f4 <__alt_data_end+0xfc0015f4>
 400178c:	01403fc4 	movi	r5,255
 4001790:	31401926 	beq	r6,r5,40017f8 <__subsf3+0x388>
 4001794:	0109c83a 	sub	r4,zero,r4
 4001798:	18c10034 	orhi	r3,r3,1024
 400179c:	003feb06 	br	400174c <__alt_data_end+0xfc00174c>
 40017a0:	043fffc4 	movi	r16,-1
 40017a4:	000b883a 	mov	r5,zero
 40017a8:	003f5806 	br	400150c <__alt_data_end+0xfc00150c>
 40017ac:	8000481e 	bne	r16,zero,40018d0 <__subsf3+0x460>
 40017b0:	18006226 	beq	r3,zero,400193c <__subsf3+0x4cc>
 40017b4:	383f4726 	beq	r7,zero,40014d4 <__alt_data_end+0xfc0014d4>
 40017b8:	19c7883a 	add	r3,r3,r7
 40017bc:	1881002c 	andhi	r2,r3,1024
 40017c0:	103f8326 	beq	r2,zero,40015d0 <__alt_data_end+0xfc0015d0>
 40017c4:	00bf0034 	movhi	r2,64512
 40017c8:	10bfffc4 	addi	r2,r2,-1
 40017cc:	2821883a 	mov	r16,r5
 40017d0:	1886703a 	and	r3,r3,r2
 40017d4:	003f3f06 	br	40014d4 <__alt_data_end+0xfc0014d4>
 40017d8:	80001c1e 	bne	r16,zero,400184c <__subsf3+0x3dc>
 40017dc:	1800261e 	bne	r3,zero,4001878 <__subsf3+0x408>
 40017e0:	38004c26 	beq	r7,zero,4001914 <__subsf3+0x4a4>
 40017e4:	3807883a 	mov	r3,r7
 40017e8:	1023883a 	mov	r17,r2
 40017ec:	003f3906 	br	40014d4 <__alt_data_end+0xfc0014d4>
 40017f0:	01c00044 	movi	r7,1
 40017f4:	003f9006 	br	4001638 <__alt_data_end+0xfc001638>
 40017f8:	3807883a 	mov	r3,r7
 40017fc:	3021883a 	mov	r16,r6
 4001800:	1023883a 	mov	r17,r2
 4001804:	003f3306 	br	40014d4 <__alt_data_end+0xfc0014d4>
 4001808:	8000161e 	bne	r16,zero,4001864 <__subsf3+0x3f4>
 400180c:	18002d26 	beq	r3,zero,40018c4 <__subsf3+0x454>
 4001810:	0108303a 	nor	r4,zero,r4
 4001814:	20000a26 	beq	r4,zero,4001840 <__subsf3+0x3d0>
 4001818:	01403fc4 	movi	r5,255
 400181c:	31402926 	beq	r6,r5,40018c4 <__subsf3+0x454>
 4001820:	014006c4 	movi	r5,27
 4001824:	29004716 	blt	r5,r4,4001944 <__subsf3+0x4d4>
 4001828:	01400804 	movi	r5,32
 400182c:	290bc83a 	sub	r5,r5,r4
 4001830:	194a983a 	sll	r5,r3,r5
 4001834:	1908d83a 	srl	r4,r3,r4
 4001838:	2806c03a 	cmpne	r3,r5,zero
 400183c:	20c6b03a 	or	r3,r4,r3
 4001840:	19c7883a 	add	r3,r3,r7
 4001844:	3021883a 	mov	r16,r6
 4001848:	003f7c06 	br	400163c <__alt_data_end+0xfc00163c>
 400184c:	1800111e 	bne	r3,zero,4001894 <__subsf3+0x424>
 4001850:	38003326 	beq	r7,zero,4001920 <__subsf3+0x4b0>
 4001854:	3807883a 	mov	r3,r7
 4001858:	1023883a 	mov	r17,r2
 400185c:	04003fc4 	movi	r16,255
 4001860:	003f1c06 	br	40014d4 <__alt_data_end+0xfc0014d4>
 4001864:	01403fc4 	movi	r5,255
 4001868:	31401626 	beq	r6,r5,40018c4 <__subsf3+0x454>
 400186c:	0109c83a 	sub	r4,zero,r4
 4001870:	18c10034 	orhi	r3,r3,1024
 4001874:	003fea06 	br	4001820 <__alt_data_end+0xfc001820>
 4001878:	383f1626 	beq	r7,zero,40014d4 <__alt_data_end+0xfc0014d4>
 400187c:	19c9c83a 	sub	r4,r3,r7
 4001880:	2141002c 	andhi	r5,r4,1024
 4001884:	283f5026 	beq	r5,zero,40015c8 <__alt_data_end+0xfc0015c8>
 4001888:	38c7c83a 	sub	r3,r7,r3
 400188c:	1023883a 	mov	r17,r2
 4001890:	003f1006 	br	40014d4 <__alt_data_end+0xfc0014d4>
 4001894:	38001b26 	beq	r7,zero,4001904 <__subsf3+0x494>
 4001898:	1806d0fa 	srli	r3,r3,3
 400189c:	1900102c 	andhi	r4,r3,64
 40018a0:	20000526 	beq	r4,zero,40018b8 <__subsf3+0x448>
 40018a4:	380ed0fa 	srli	r7,r7,3
 40018a8:	3900102c 	andhi	r4,r7,64
 40018ac:	2000021e 	bne	r4,zero,40018b8 <__subsf3+0x448>
 40018b0:	3807883a 	mov	r3,r7
 40018b4:	1023883a 	mov	r17,r2
 40018b8:	180690fa 	slli	r3,r3,3
 40018bc:	04003fc4 	movi	r16,255
 40018c0:	003f0406 	br	40014d4 <__alt_data_end+0xfc0014d4>
 40018c4:	3807883a 	mov	r3,r7
 40018c8:	3021883a 	mov	r16,r6
 40018cc:	003f0106 	br	40014d4 <__alt_data_end+0xfc0014d4>
 40018d0:	18001726 	beq	r3,zero,4001930 <__subsf3+0x4c0>
 40018d4:	38000b26 	beq	r7,zero,4001904 <__subsf3+0x494>
 40018d8:	1806d0fa 	srli	r3,r3,3
 40018dc:	1900102c 	andhi	r4,r3,64
 40018e0:	20000426 	beq	r4,zero,40018f4 <__subsf3+0x484>
 40018e4:	380ed0fa 	srli	r7,r7,3
 40018e8:	3900102c 	andhi	r4,r7,64
 40018ec:	2000011e 	bne	r4,zero,40018f4 <__subsf3+0x484>
 40018f0:	3807883a 	mov	r3,r7
 40018f4:	180690fa 	slli	r3,r3,3
 40018f8:	1023883a 	mov	r17,r2
 40018fc:	04003fc4 	movi	r16,255
 4001900:	003ef406 	br	40014d4 <__alt_data_end+0xfc0014d4>
 4001904:	04003fc4 	movi	r16,255
 4001908:	003ef206 	br	40014d4 <__alt_data_end+0xfc0014d4>
 400190c:	00c00044 	movi	r3,1
 4001910:	003f9606 	br	400176c <__alt_data_end+0xfc00176c>
 4001914:	000b883a 	mov	r5,zero
 4001918:	0005883a 	mov	r2,zero
 400191c:	003f3506 	br	40015f4 <__alt_data_end+0xfc0015f4>
 4001920:	01402034 	movhi	r5,128
 4001924:	297fffc4 	addi	r5,r5,-1
 4001928:	0005883a 	mov	r2,zero
 400192c:	003f2f06 	br	40015ec <__alt_data_end+0xfc0015ec>
 4001930:	3807883a 	mov	r3,r7
 4001934:	04003fc4 	movi	r16,255
 4001938:	003ee606 	br	40014d4 <__alt_data_end+0xfc0014d4>
 400193c:	3807883a 	mov	r3,r7
 4001940:	003ee406 	br	40014d4 <__alt_data_end+0xfc0014d4>
 4001944:	00c00044 	movi	r3,1
 4001948:	003fbd06 	br	4001840 <__alt_data_end+0xfc001840>
 400194c:	0005883a 	mov	r2,zero
 4001950:	003f2806 	br	40015f4 <__alt_data_end+0xfc0015f4>

04001954 <__fixsfsi>:
 4001954:	200ad5fa 	srli	r5,r4,23
 4001958:	00c02034 	movhi	r3,128
 400195c:	18ffffc4 	addi	r3,r3,-1
 4001960:	29403fcc 	andi	r5,r5,255
 4001964:	00801f84 	movi	r2,126
 4001968:	1906703a 	and	r3,r3,r4
 400196c:	2008d7fa 	srli	r4,r4,31
 4001970:	11400e0e 	bge	r2,r5,40019ac <__fixsfsi+0x58>
 4001974:	00802744 	movi	r2,157
 4001978:	11400816 	blt	r2,r5,400199c <__fixsfsi+0x48>
 400197c:	00802544 	movi	r2,149
 4001980:	18c02034 	orhi	r3,r3,128
 4001984:	11400b0e 	bge	r2,r5,40019b4 <__fixsfsi+0x60>
 4001988:	28bfda84 	addi	r2,r5,-150
 400198c:	1884983a 	sll	r2,r3,r2
 4001990:	20000726 	beq	r4,zero,40019b0 <__fixsfsi+0x5c>
 4001994:	0085c83a 	sub	r2,zero,r2
 4001998:	f800283a 	ret
 400199c:	00a00034 	movhi	r2,32768
 40019a0:	10bfffc4 	addi	r2,r2,-1
 40019a4:	2085883a 	add	r2,r4,r2
 40019a8:	f800283a 	ret
 40019ac:	0005883a 	mov	r2,zero
 40019b0:	f800283a 	ret
 40019b4:	00802584 	movi	r2,150
 40019b8:	1145c83a 	sub	r2,r2,r5
 40019bc:	1884d83a 	srl	r2,r3,r2
 40019c0:	003ff306 	br	4001990 <__alt_data_end+0xfc001990>

040019c4 <__floatunsisf>:
 40019c4:	defffe04 	addi	sp,sp,-8
 40019c8:	dfc00115 	stw	ra,4(sp)
 40019cc:	dc000015 	stw	r16,0(sp)
 40019d0:	20002c26 	beq	r4,zero,4001a84 <__floatunsisf+0xc0>
 40019d4:	2021883a 	mov	r16,r4
 40019d8:	4001ab40 	call	4001ab4 <__clzsi2>
 40019dc:	00c02784 	movi	r3,158
 40019e0:	1887c83a 	sub	r3,r3,r2
 40019e4:	01002584 	movi	r4,150
 40019e8:	20c00f16 	blt	r4,r3,4001a28 <__floatunsisf+0x64>
 40019ec:	20c9c83a 	sub	r4,r4,r3
 40019f0:	8108983a 	sll	r4,r16,r4
 40019f4:	00802034 	movhi	r2,128
 40019f8:	10bfffc4 	addi	r2,r2,-1
 40019fc:	2088703a 	and	r4,r4,r2
 4001a00:	18803fcc 	andi	r2,r3,255
 4001a04:	100695fa 	slli	r3,r2,23
 4001a08:	00802034 	movhi	r2,128
 4001a0c:	10bfffc4 	addi	r2,r2,-1
 4001a10:	2084703a 	and	r2,r4,r2
 4001a14:	10c4b03a 	or	r2,r2,r3
 4001a18:	dfc00117 	ldw	ra,4(sp)
 4001a1c:	dc000017 	ldw	r16,0(sp)
 4001a20:	dec00204 	addi	sp,sp,8
 4001a24:	f800283a 	ret
 4001a28:	01002644 	movi	r4,153
 4001a2c:	20c01816 	blt	r4,r3,4001a90 <__floatunsisf+0xcc>
 4001a30:	20c9c83a 	sub	r4,r4,r3
 4001a34:	8108983a 	sll	r4,r16,r4
 4001a38:	017f0034 	movhi	r5,64512
 4001a3c:	297fffc4 	addi	r5,r5,-1
 4001a40:	218001cc 	andi	r6,r4,7
 4001a44:	214a703a 	and	r5,r4,r5
 4001a48:	30000426 	beq	r6,zero,4001a5c <__floatunsisf+0x98>
 4001a4c:	210003cc 	andi	r4,r4,15
 4001a50:	01800104 	movi	r6,4
 4001a54:	21800126 	beq	r4,r6,4001a5c <__floatunsisf+0x98>
 4001a58:	298b883a 	add	r5,r5,r6
 4001a5c:	2901002c 	andhi	r4,r5,1024
 4001a60:	20000526 	beq	r4,zero,4001a78 <__floatunsisf+0xb4>
 4001a64:	00c027c4 	movi	r3,159
 4001a68:	1887c83a 	sub	r3,r3,r2
 4001a6c:	00bf0034 	movhi	r2,64512
 4001a70:	10bfffc4 	addi	r2,r2,-1
 4001a74:	288a703a 	and	r5,r5,r2
 4001a78:	280891ba 	slli	r4,r5,6
 4001a7c:	2008d27a 	srli	r4,r4,9
 4001a80:	003fdf06 	br	4001a00 <__alt_data_end+0xfc001a00>
 4001a84:	0007883a 	mov	r3,zero
 4001a88:	0009883a 	mov	r4,zero
 4001a8c:	003fdc06 	br	4001a00 <__alt_data_end+0xfc001a00>
 4001a90:	01402e44 	movi	r5,185
 4001a94:	28cbc83a 	sub	r5,r5,r3
 4001a98:	01000144 	movi	r4,5
 4001a9c:	2089c83a 	sub	r4,r4,r2
 4001aa0:	814a983a 	sll	r5,r16,r5
 4001aa4:	8108d83a 	srl	r4,r16,r4
 4001aa8:	2820c03a 	cmpne	r16,r5,zero
 4001aac:	2408b03a 	or	r4,r4,r16
 4001ab0:	003fe106 	br	4001a38 <__alt_data_end+0xfc001a38>

04001ab4 <__clzsi2>:
 4001ab4:	00bfffd4 	movui	r2,65535
 4001ab8:	11000536 	bltu	r2,r4,4001ad0 <__clzsi2+0x1c>
 4001abc:	00803fc4 	movi	r2,255
 4001ac0:	11000f36 	bltu	r2,r4,4001b00 <__clzsi2+0x4c>
 4001ac4:	00800804 	movi	r2,32
 4001ac8:	0007883a 	mov	r3,zero
 4001acc:	00000506 	br	4001ae4 <__clzsi2+0x30>
 4001ad0:	00804034 	movhi	r2,256
 4001ad4:	10bfffc4 	addi	r2,r2,-1
 4001ad8:	11000c2e 	bgeu	r2,r4,4001b0c <__clzsi2+0x58>
 4001adc:	00800204 	movi	r2,8
 4001ae0:	00c00604 	movi	r3,24
 4001ae4:	20c8d83a 	srl	r4,r4,r3
 4001ae8:	00c10074 	movhi	r3,1025
 4001aec:	18ca0d04 	addi	r3,r3,10292
 4001af0:	1909883a 	add	r4,r3,r4
 4001af4:	20c00003 	ldbu	r3,0(r4)
 4001af8:	10c5c83a 	sub	r2,r2,r3
 4001afc:	f800283a 	ret
 4001b00:	00800604 	movi	r2,24
 4001b04:	00c00204 	movi	r3,8
 4001b08:	003ff606 	br	4001ae4 <__alt_data_end+0xfc001ae4>
 4001b0c:	00800404 	movi	r2,16
 4001b10:	1007883a 	mov	r3,r2
 4001b14:	003ff306 	br	4001ae4 <__alt_data_end+0xfc001ae4>

04001b18 <_printf_r>:
 4001b18:	defffd04 	addi	sp,sp,-12
 4001b1c:	2805883a 	mov	r2,r5
 4001b20:	dfc00015 	stw	ra,0(sp)
 4001b24:	d9800115 	stw	r6,4(sp)
 4001b28:	d9c00215 	stw	r7,8(sp)
 4001b2c:	21400217 	ldw	r5,8(r4)
 4001b30:	d9c00104 	addi	r7,sp,4
 4001b34:	100d883a 	mov	r6,r2
 4001b38:	4001cf00 	call	4001cf0 <___vfprintf_internal_r>
 4001b3c:	dfc00017 	ldw	ra,0(sp)
 4001b40:	dec00304 	addi	sp,sp,12
 4001b44:	f800283a 	ret

04001b48 <printf>:
 4001b48:	defffc04 	addi	sp,sp,-16
 4001b4c:	dfc00015 	stw	ra,0(sp)
 4001b50:	d9400115 	stw	r5,4(sp)
 4001b54:	d9800215 	stw	r6,8(sp)
 4001b58:	d9c00315 	stw	r7,12(sp)
 4001b5c:	00810074 	movhi	r2,1025
 4001b60:	108e5b04 	addi	r2,r2,14700
 4001b64:	10800017 	ldw	r2,0(r2)
 4001b68:	200b883a 	mov	r5,r4
 4001b6c:	d9800104 	addi	r6,sp,4
 4001b70:	11000217 	ldw	r4,8(r2)
 4001b74:	4003fcc0 	call	4003fcc <__vfprintf_internal>
 4001b78:	dfc00017 	ldw	ra,0(sp)
 4001b7c:	dec00404 	addi	sp,sp,16
 4001b80:	f800283a 	ret

04001b84 <_puts_r>:
 4001b84:	defff604 	addi	sp,sp,-40
 4001b88:	dc000715 	stw	r16,28(sp)
 4001b8c:	2021883a 	mov	r16,r4
 4001b90:	2809883a 	mov	r4,r5
 4001b94:	dc400815 	stw	r17,32(sp)
 4001b98:	dfc00915 	stw	ra,36(sp)
 4001b9c:	2823883a 	mov	r17,r5
 4001ba0:	4001c580 	call	4001c58 <strlen>
 4001ba4:	10c00044 	addi	r3,r2,1
 4001ba8:	d8800115 	stw	r2,4(sp)
 4001bac:	00810074 	movhi	r2,1025
 4001bb0:	108a4d04 	addi	r2,r2,10548
 4001bb4:	d8800215 	stw	r2,8(sp)
 4001bb8:	00800044 	movi	r2,1
 4001bbc:	d8800315 	stw	r2,12(sp)
 4001bc0:	00800084 	movi	r2,2
 4001bc4:	dc400015 	stw	r17,0(sp)
 4001bc8:	d8c00615 	stw	r3,24(sp)
 4001bcc:	dec00415 	stw	sp,16(sp)
 4001bd0:	d8800515 	stw	r2,20(sp)
 4001bd4:	80000226 	beq	r16,zero,4001be0 <_puts_r+0x5c>
 4001bd8:	80800e17 	ldw	r2,56(r16)
 4001bdc:	10001426 	beq	r2,zero,4001c30 <_puts_r+0xac>
 4001be0:	81400217 	ldw	r5,8(r16)
 4001be4:	2880030b 	ldhu	r2,12(r5)
 4001be8:	10c8000c 	andi	r3,r2,8192
 4001bec:	1800061e 	bne	r3,zero,4001c08 <_puts_r+0x84>
 4001bf0:	29001917 	ldw	r4,100(r5)
 4001bf4:	00f7ffc4 	movi	r3,-8193
 4001bf8:	10880014 	ori	r2,r2,8192
 4001bfc:	20c6703a 	and	r3,r4,r3
 4001c00:	2880030d 	sth	r2,12(r5)
 4001c04:	28c01915 	stw	r3,100(r5)
 4001c08:	d9800404 	addi	r6,sp,16
 4001c0c:	8009883a 	mov	r4,r16
 4001c10:	40065340 	call	4006534 <__sfvwrite_r>
 4001c14:	1000091e 	bne	r2,zero,4001c3c <_puts_r+0xb8>
 4001c18:	00800284 	movi	r2,10
 4001c1c:	dfc00917 	ldw	ra,36(sp)
 4001c20:	dc400817 	ldw	r17,32(sp)
 4001c24:	dc000717 	ldw	r16,28(sp)
 4001c28:	dec00a04 	addi	sp,sp,40
 4001c2c:	f800283a 	ret
 4001c30:	8009883a 	mov	r4,r16
 4001c34:	40060b00 	call	40060b0 <__sinit>
 4001c38:	003fe906 	br	4001be0 <__alt_data_end+0xfc001be0>
 4001c3c:	00bfffc4 	movi	r2,-1
 4001c40:	003ff606 	br	4001c1c <__alt_data_end+0xfc001c1c>

04001c44 <puts>:
 4001c44:	00810074 	movhi	r2,1025
 4001c48:	108e5b04 	addi	r2,r2,14700
 4001c4c:	200b883a 	mov	r5,r4
 4001c50:	11000017 	ldw	r4,0(r2)
 4001c54:	4001b841 	jmpi	4001b84 <_puts_r>

04001c58 <strlen>:
 4001c58:	208000cc 	andi	r2,r4,3
 4001c5c:	10002026 	beq	r2,zero,4001ce0 <strlen+0x88>
 4001c60:	20800007 	ldb	r2,0(r4)
 4001c64:	10002026 	beq	r2,zero,4001ce8 <strlen+0x90>
 4001c68:	2005883a 	mov	r2,r4
 4001c6c:	00000206 	br	4001c78 <strlen+0x20>
 4001c70:	10c00007 	ldb	r3,0(r2)
 4001c74:	18001826 	beq	r3,zero,4001cd8 <strlen+0x80>
 4001c78:	10800044 	addi	r2,r2,1
 4001c7c:	10c000cc 	andi	r3,r2,3
 4001c80:	183ffb1e 	bne	r3,zero,4001c70 <__alt_data_end+0xfc001c70>
 4001c84:	10c00017 	ldw	r3,0(r2)
 4001c88:	01ffbff4 	movhi	r7,65279
 4001c8c:	39ffbfc4 	addi	r7,r7,-257
 4001c90:	00ca303a 	nor	r5,zero,r3
 4001c94:	01a02074 	movhi	r6,32897
 4001c98:	19c7883a 	add	r3,r3,r7
 4001c9c:	31a02004 	addi	r6,r6,-32640
 4001ca0:	1946703a 	and	r3,r3,r5
 4001ca4:	1986703a 	and	r3,r3,r6
 4001ca8:	1800091e 	bne	r3,zero,4001cd0 <strlen+0x78>
 4001cac:	10800104 	addi	r2,r2,4
 4001cb0:	10c00017 	ldw	r3,0(r2)
 4001cb4:	19cb883a 	add	r5,r3,r7
 4001cb8:	00c6303a 	nor	r3,zero,r3
 4001cbc:	28c6703a 	and	r3,r5,r3
 4001cc0:	1986703a 	and	r3,r3,r6
 4001cc4:	183ff926 	beq	r3,zero,4001cac <__alt_data_end+0xfc001cac>
 4001cc8:	00000106 	br	4001cd0 <strlen+0x78>
 4001ccc:	10800044 	addi	r2,r2,1
 4001cd0:	10c00007 	ldb	r3,0(r2)
 4001cd4:	183ffd1e 	bne	r3,zero,4001ccc <__alt_data_end+0xfc001ccc>
 4001cd8:	1105c83a 	sub	r2,r2,r4
 4001cdc:	f800283a 	ret
 4001ce0:	2005883a 	mov	r2,r4
 4001ce4:	003fe706 	br	4001c84 <__alt_data_end+0xfc001c84>
 4001ce8:	0005883a 	mov	r2,zero
 4001cec:	f800283a 	ret

04001cf0 <___vfprintf_internal_r>:
 4001cf0:	deffb804 	addi	sp,sp,-288
 4001cf4:	dfc04715 	stw	ra,284(sp)
 4001cf8:	ddc04515 	stw	r23,276(sp)
 4001cfc:	dd404315 	stw	r21,268(sp)
 4001d00:	d9002d15 	stw	r4,180(sp)
 4001d04:	282f883a 	mov	r23,r5
 4001d08:	302b883a 	mov	r21,r6
 4001d0c:	d9c02e15 	stw	r7,184(sp)
 4001d10:	df004615 	stw	fp,280(sp)
 4001d14:	dd804415 	stw	r22,272(sp)
 4001d18:	dd004215 	stw	r20,264(sp)
 4001d1c:	dcc04115 	stw	r19,260(sp)
 4001d20:	dc804015 	stw	r18,256(sp)
 4001d24:	dc403f15 	stw	r17,252(sp)
 4001d28:	dc003e15 	stw	r16,248(sp)
 4001d2c:	4006c300 	call	4006c30 <_localeconv_r>
 4001d30:	10800017 	ldw	r2,0(r2)
 4001d34:	1009883a 	mov	r4,r2
 4001d38:	d8803415 	stw	r2,208(sp)
 4001d3c:	4001c580 	call	4001c58 <strlen>
 4001d40:	d8803715 	stw	r2,220(sp)
 4001d44:	d8802d17 	ldw	r2,180(sp)
 4001d48:	10000226 	beq	r2,zero,4001d54 <___vfprintf_internal_r+0x64>
 4001d4c:	10800e17 	ldw	r2,56(r2)
 4001d50:	1000fb26 	beq	r2,zero,4002140 <___vfprintf_internal_r+0x450>
 4001d54:	b880030b 	ldhu	r2,12(r23)
 4001d58:	10c8000c 	andi	r3,r2,8192
 4001d5c:	1800061e 	bne	r3,zero,4001d78 <___vfprintf_internal_r+0x88>
 4001d60:	b9001917 	ldw	r4,100(r23)
 4001d64:	00f7ffc4 	movi	r3,-8193
 4001d68:	10880014 	ori	r2,r2,8192
 4001d6c:	20c6703a 	and	r3,r4,r3
 4001d70:	b880030d 	sth	r2,12(r23)
 4001d74:	b8c01915 	stw	r3,100(r23)
 4001d78:	10c0020c 	andi	r3,r2,8
 4001d7c:	1800c326 	beq	r3,zero,400208c <___vfprintf_internal_r+0x39c>
 4001d80:	b8c00417 	ldw	r3,16(r23)
 4001d84:	1800c126 	beq	r3,zero,400208c <___vfprintf_internal_r+0x39c>
 4001d88:	1080068c 	andi	r2,r2,26
 4001d8c:	00c00284 	movi	r3,10
 4001d90:	10c0c626 	beq	r2,r3,40020ac <___vfprintf_internal_r+0x3bc>
 4001d94:	d8c00404 	addi	r3,sp,16
 4001d98:	05010074 	movhi	r20,1025
 4001d9c:	d9001e04 	addi	r4,sp,120
 4001da0:	a50a5e84 	addi	r20,r20,10618
 4001da4:	d8c01e15 	stw	r3,120(sp)
 4001da8:	d8002015 	stw	zero,128(sp)
 4001dac:	d8001f15 	stw	zero,124(sp)
 4001db0:	d8003315 	stw	zero,204(sp)
 4001db4:	d8003615 	stw	zero,216(sp)
 4001db8:	d8003815 	stw	zero,224(sp)
 4001dbc:	1811883a 	mov	r8,r3
 4001dc0:	d8003915 	stw	zero,228(sp)
 4001dc4:	d8003a15 	stw	zero,232(sp)
 4001dc8:	d8002f15 	stw	zero,188(sp)
 4001dcc:	d9002815 	stw	r4,160(sp)
 4001dd0:	a8800007 	ldb	r2,0(r21)
 4001dd4:	10028b26 	beq	r2,zero,4002804 <___vfprintf_internal_r+0xb14>
 4001dd8:	00c00944 	movi	r3,37
 4001ddc:	a823883a 	mov	r17,r21
 4001de0:	10c0021e 	bne	r2,r3,4001dec <___vfprintf_internal_r+0xfc>
 4001de4:	00001406 	br	4001e38 <___vfprintf_internal_r+0x148>
 4001de8:	10c00326 	beq	r2,r3,4001df8 <___vfprintf_internal_r+0x108>
 4001dec:	8c400044 	addi	r17,r17,1
 4001df0:	88800007 	ldb	r2,0(r17)
 4001df4:	103ffc1e 	bne	r2,zero,4001de8 <__alt_data_end+0xfc001de8>
 4001df8:	8d61c83a 	sub	r16,r17,r21
 4001dfc:	80000e26 	beq	r16,zero,4001e38 <___vfprintf_internal_r+0x148>
 4001e00:	d8c02017 	ldw	r3,128(sp)
 4001e04:	d8801f17 	ldw	r2,124(sp)
 4001e08:	45400015 	stw	r21,0(r8)
 4001e0c:	1c07883a 	add	r3,r3,r16
 4001e10:	10800044 	addi	r2,r2,1
 4001e14:	d8c02015 	stw	r3,128(sp)
 4001e18:	44000115 	stw	r16,4(r8)
 4001e1c:	d8801f15 	stw	r2,124(sp)
 4001e20:	00c001c4 	movi	r3,7
 4001e24:	1880a916 	blt	r3,r2,40020cc <___vfprintf_internal_r+0x3dc>
 4001e28:	42000204 	addi	r8,r8,8
 4001e2c:	d9402f17 	ldw	r5,188(sp)
 4001e30:	2c0b883a 	add	r5,r5,r16
 4001e34:	d9402f15 	stw	r5,188(sp)
 4001e38:	88800007 	ldb	r2,0(r17)
 4001e3c:	1000aa26 	beq	r2,zero,40020e8 <___vfprintf_internal_r+0x3f8>
 4001e40:	8d400044 	addi	r21,r17,1
 4001e44:	8c400047 	ldb	r17,1(r17)
 4001e48:	0021883a 	mov	r16,zero
 4001e4c:	00bfffc4 	movi	r2,-1
 4001e50:	0025883a 	mov	r18,zero
 4001e54:	dc002905 	stb	r16,164(sp)
 4001e58:	d8002785 	stb	zero,158(sp)
 4001e5c:	d8002b05 	stb	zero,172(sp)
 4001e60:	d8802a15 	stw	r2,168(sp)
 4001e64:	d8003115 	stw	zero,196(sp)
 4001e68:	04c01604 	movi	r19,88
 4001e6c:	05800244 	movi	r22,9
 4001e70:	9021883a 	mov	r16,r18
 4001e74:	4039883a 	mov	fp,r8
 4001e78:	ad400044 	addi	r21,r21,1
 4001e7c:	88bff804 	addi	r2,r17,-32
 4001e80:	98833236 	bltu	r19,r2,4002b4c <___vfprintf_internal_r+0xe5c>
 4001e84:	100490ba 	slli	r2,r2,2
 4001e88:	00c10034 	movhi	r3,1024
 4001e8c:	18c7a704 	addi	r3,r3,7836
 4001e90:	10c5883a 	add	r2,r2,r3
 4001e94:	10800017 	ldw	r2,0(r2)
 4001e98:	1000683a 	jmp	r2
 4001e9c:	04002a44 	movi	r16,169
 4001ea0:	04002b4c 	andi	r16,zero,173
 4001ea4:	04002b4c 	andi	r16,zero,173
 4001ea8:	04002a64 	muli	r16,zero,169
 4001eac:	04002b4c 	andi	r16,zero,173
 4001eb0:	04002b4c 	andi	r16,zero,173
 4001eb4:	04002b4c 	andi	r16,zero,173
 4001eb8:	04002b4c 	andi	r16,zero,173
 4001ebc:	04002b4c 	andi	r16,zero,173
 4001ec0:	04002b4c 	andi	r16,zero,173
 4001ec4:	0400214c 	andi	r16,zero,133
 4001ec8:	04002954 	movui	r16,165
 4001ecc:	04002b4c 	andi	r16,zero,173
 4001ed0:	04002010 	cmplti	r16,zero,128
 4001ed4:	04002170 	cmpltui	r16,zero,133
 4001ed8:	04002b4c 	andi	r16,zero,173
 4001edc:	040021c0 	call	40021c <alt_exception_trap+0x40021c>
 4001ee0:	040021cc 	andi	r16,zero,135
 4001ee4:	040021cc 	andi	r16,zero,135
 4001ee8:	040021cc 	andi	r16,zero,135
 4001eec:	040021cc 	andi	r16,zero,135
 4001ef0:	040021cc 	andi	r16,zero,135
 4001ef4:	040021cc 	andi	r16,zero,135
 4001ef8:	040021cc 	andi	r16,zero,135
 4001efc:	040021cc 	andi	r16,zero,135
 4001f00:	040021cc 	andi	r16,zero,135
 4001f04:	04002b4c 	andi	r16,zero,173
 4001f08:	04002b4c 	andi	r16,zero,173
 4001f0c:	04002b4c 	andi	r16,zero,173
 4001f10:	04002b4c 	andi	r16,zero,173
 4001f14:	04002b4c 	andi	r16,zero,173
 4001f18:	04002b4c 	andi	r16,zero,173
 4001f1c:	04002b4c 	andi	r16,zero,173
 4001f20:	04002b4c 	andi	r16,zero,173
 4001f24:	04002b4c 	andi	r16,zero,173
 4001f28:	04002b4c 	andi	r16,zero,173
 4001f2c:	04002208 	cmpgei	r16,zero,136
 4001f30:	040022d0 	cmplti	r16,zero,139
 4001f34:	04002b4c 	andi	r16,zero,173
 4001f38:	040022d0 	cmplti	r16,zero,139
 4001f3c:	04002b4c 	andi	r16,zero,173
 4001f40:	04002b4c 	andi	r16,zero,173
 4001f44:	04002b4c 	andi	r16,zero,173
 4001f48:	04002b4c 	andi	r16,zero,173
 4001f4c:	0400237c 	xorhi	r16,zero,141
 4001f50:	04002b4c 	andi	r16,zero,173
 4001f54:	04002b4c 	andi	r16,zero,173
 4001f58:	04002388 	cmpgei	r16,zero,142
 4001f5c:	04002b4c 	andi	r16,zero,173
 4001f60:	04002b4c 	andi	r16,zero,173
 4001f64:	04002b4c 	andi	r16,zero,173
 4001f68:	04002b4c 	andi	r16,zero,173
 4001f6c:	04002b4c 	andi	r16,zero,173
 4001f70:	0400280c 	andi	r16,zero,160
 4001f74:	04002b4c 	andi	r16,zero,173
 4001f78:	04002b4c 	andi	r16,zero,173
 4001f7c:	04002878 	rdprs	r16,zero,161
 4001f80:	04002b4c 	andi	r16,zero,173
 4001f84:	04002b4c 	andi	r16,zero,173
 4001f88:	04002b4c 	andi	r16,zero,173
 4001f8c:	04002b4c 	andi	r16,zero,173
 4001f90:	04002b4c 	andi	r16,zero,173
 4001f94:	04002b4c 	andi	r16,zero,173
 4001f98:	04002b4c 	andi	r16,zero,173
 4001f9c:	04002b4c 	andi	r16,zero,173
 4001fa0:	04002b4c 	andi	r16,zero,173
 4001fa4:	04002b4c 	andi	r16,zero,173
 4001fa8:	04002af0 	cmpltui	r16,zero,171
 4001fac:	04002a70 	cmpltui	r16,zero,169
 4001fb0:	040022d0 	cmplti	r16,zero,139
 4001fb4:	040022d0 	cmplti	r16,zero,139
 4001fb8:	040022d0 	cmplti	r16,zero,139
 4001fbc:	04002a90 	cmplti	r16,zero,170
 4001fc0:	04002a70 	cmpltui	r16,zero,169
 4001fc4:	04002b4c 	andi	r16,zero,173
 4001fc8:	04002b4c 	andi	r16,zero,173
 4001fcc:	04002a9c 	xori	r16,zero,170
 4001fd0:	04002b4c 	andi	r16,zero,173
 4001fd4:	04002ab0 	cmpltui	r16,zero,170
 4001fd8:	04002934 	movhi	r16,164
 4001fdc:	0400201c 	xori	r16,zero,128
 4001fe0:	0400296c 	andhi	r16,zero,165
 4001fe4:	04002b4c 	andi	r16,zero,173
 4001fe8:	04002978 	rdprs	r16,zero,165
 4001fec:	04002b4c 	andi	r16,zero,173
 4001ff0:	040029dc 	xori	r16,zero,167
 4001ff4:	04002b4c 	andi	r16,zero,173
 4001ff8:	04002b4c 	andi	r16,zero,173
 4001ffc:	040029fc 	xorhi	r16,zero,167
 4002000:	d8c03117 	ldw	r3,196(sp)
 4002004:	d8802e15 	stw	r2,184(sp)
 4002008:	00c7c83a 	sub	r3,zero,r3
 400200c:	d8c03115 	stw	r3,196(sp)
 4002010:	84000114 	ori	r16,r16,4
 4002014:	ac400007 	ldb	r17,0(r21)
 4002018:	003f9706 	br	4001e78 <__alt_data_end+0xfc001e78>
 400201c:	00800c04 	movi	r2,48
 4002020:	d8802705 	stb	r2,156(sp)
 4002024:	00801e04 	movi	r2,120
 4002028:	d8802745 	stb	r2,157(sp)
 400202c:	d9002a17 	ldw	r4,168(sp)
 4002030:	d8802e17 	ldw	r2,184(sp)
 4002034:	d8002785 	stb	zero,158(sp)
 4002038:	e011883a 	mov	r8,fp
 400203c:	10c00104 	addi	r3,r2,4
 4002040:	14c00017 	ldw	r19,0(r2)
 4002044:	002d883a 	mov	r22,zero
 4002048:	80800094 	ori	r2,r16,2
 400204c:	2002ca16 	blt	r4,zero,4002b78 <___vfprintf_internal_r+0xe88>
 4002050:	00bfdfc4 	movi	r2,-129
 4002054:	80a4703a 	and	r18,r16,r2
 4002058:	d8c02e15 	stw	r3,184(sp)
 400205c:	94800094 	ori	r18,r18,2
 4002060:	9802b41e 	bne	r19,zero,4002b34 <___vfprintf_internal_r+0xe44>
 4002064:	01410074 	movhi	r5,1025
 4002068:	294a5704 	addi	r5,r5,10588
 400206c:	d9403915 	stw	r5,228(sp)
 4002070:	04401e04 	movi	r17,120
 4002074:	d8802a17 	ldw	r2,168(sp)
 4002078:	0039883a 	mov	fp,zero
 400207c:	1001fa26 	beq	r2,zero,4002868 <___vfprintf_internal_r+0xb78>
 4002080:	0027883a 	mov	r19,zero
 4002084:	002d883a 	mov	r22,zero
 4002088:	00021906 	br	40028f0 <___vfprintf_internal_r+0xc00>
 400208c:	d9002d17 	ldw	r4,180(sp)
 4002090:	b80b883a 	mov	r5,r23
 4002094:	40040a40 	call	40040a4 <__swsetup_r>
 4002098:	1005dc1e 	bne	r2,zero,400380c <___vfprintf_internal_r+0x1b1c>
 400209c:	b880030b 	ldhu	r2,12(r23)
 40020a0:	00c00284 	movi	r3,10
 40020a4:	1080068c 	andi	r2,r2,26
 40020a8:	10ff3a1e 	bne	r2,r3,4001d94 <__alt_data_end+0xfc001d94>
 40020ac:	b880038f 	ldh	r2,14(r23)
 40020b0:	103f3816 	blt	r2,zero,4001d94 <__alt_data_end+0xfc001d94>
 40020b4:	d9c02e17 	ldw	r7,184(sp)
 40020b8:	d9002d17 	ldw	r4,180(sp)
 40020bc:	a80d883a 	mov	r6,r21
 40020c0:	b80b883a 	mov	r5,r23
 40020c4:	4003fe80 	call	4003fe8 <__sbprintf>
 40020c8:	00001106 	br	4002110 <___vfprintf_internal_r+0x420>
 40020cc:	d9002d17 	ldw	r4,180(sp)
 40020d0:	d9801e04 	addi	r6,sp,120
 40020d4:	b80b883a 	mov	r5,r23
 40020d8:	40094d00 	call	40094d0 <__sprint_r>
 40020dc:	1000081e 	bne	r2,zero,4002100 <___vfprintf_internal_r+0x410>
 40020e0:	da000404 	addi	r8,sp,16
 40020e4:	003f5106 	br	4001e2c <__alt_data_end+0xfc001e2c>
 40020e8:	d8802017 	ldw	r2,128(sp)
 40020ec:	10000426 	beq	r2,zero,4002100 <___vfprintf_internal_r+0x410>
 40020f0:	d9002d17 	ldw	r4,180(sp)
 40020f4:	d9801e04 	addi	r6,sp,120
 40020f8:	b80b883a 	mov	r5,r23
 40020fc:	40094d00 	call	40094d0 <__sprint_r>
 4002100:	b880030b 	ldhu	r2,12(r23)
 4002104:	1080100c 	andi	r2,r2,64
 4002108:	1005c01e 	bne	r2,zero,400380c <___vfprintf_internal_r+0x1b1c>
 400210c:	d8802f17 	ldw	r2,188(sp)
 4002110:	dfc04717 	ldw	ra,284(sp)
 4002114:	df004617 	ldw	fp,280(sp)
 4002118:	ddc04517 	ldw	r23,276(sp)
 400211c:	dd804417 	ldw	r22,272(sp)
 4002120:	dd404317 	ldw	r21,268(sp)
 4002124:	dd004217 	ldw	r20,264(sp)
 4002128:	dcc04117 	ldw	r19,260(sp)
 400212c:	dc804017 	ldw	r18,256(sp)
 4002130:	dc403f17 	ldw	r17,252(sp)
 4002134:	dc003e17 	ldw	r16,248(sp)
 4002138:	dec04804 	addi	sp,sp,288
 400213c:	f800283a 	ret
 4002140:	d9002d17 	ldw	r4,180(sp)
 4002144:	40060b00 	call	40060b0 <__sinit>
 4002148:	003f0206 	br	4001d54 <__alt_data_end+0xfc001d54>
 400214c:	d9002e17 	ldw	r4,184(sp)
 4002150:	d9402e17 	ldw	r5,184(sp)
 4002154:	21000017 	ldw	r4,0(r4)
 4002158:	28800104 	addi	r2,r5,4
 400215c:	d9003115 	stw	r4,196(sp)
 4002160:	203fa716 	blt	r4,zero,4002000 <__alt_data_end+0xfc002000>
 4002164:	d8802e15 	stw	r2,184(sp)
 4002168:	ac400007 	ldb	r17,0(r21)
 400216c:	003f4206 	br	4001e78 <__alt_data_end+0xfc001e78>
 4002170:	ac400007 	ldb	r17,0(r21)
 4002174:	01000a84 	movi	r4,42
 4002178:	a8c00044 	addi	r3,r21,1
 400217c:	89075826 	beq	r17,r4,4003ee0 <___vfprintf_internal_r+0x21f0>
 4002180:	8cbff404 	addi	r18,r17,-48
 4002184:	b486ae36 	bltu	r22,r18,4003c40 <___vfprintf_internal_r+0x1f50>
 4002188:	0009883a 	mov	r4,zero
 400218c:	1823883a 	mov	r17,r3
 4002190:	01400284 	movi	r5,10
 4002194:	4000bd80 	call	4000bd8 <__mulsi3>
 4002198:	88c00007 	ldb	r3,0(r17)
 400219c:	1489883a 	add	r4,r2,r18
 40021a0:	8d400044 	addi	r21,r17,1
 40021a4:	1cbff404 	addi	r18,r3,-48
 40021a8:	a823883a 	mov	r17,r21
 40021ac:	b4bff82e 	bgeu	r22,r18,4002190 <__alt_data_end+0xfc002190>
 40021b0:	1823883a 	mov	r17,r3
 40021b4:	2005f616 	blt	r4,zero,4003990 <___vfprintf_internal_r+0x1ca0>
 40021b8:	d9002a15 	stw	r4,168(sp)
 40021bc:	003f2f06 	br	4001e7c <__alt_data_end+0xfc001e7c>
 40021c0:	84002014 	ori	r16,r16,128
 40021c4:	ac400007 	ldb	r17,0(r21)
 40021c8:	003f2b06 	br	4001e78 <__alt_data_end+0xfc001e78>
 40021cc:	8cbff404 	addi	r18,r17,-48
 40021d0:	d8003115 	stw	zero,196(sp)
 40021d4:	0009883a 	mov	r4,zero
 40021d8:	a823883a 	mov	r17,r21
 40021dc:	01400284 	movi	r5,10
 40021e0:	4000bd80 	call	4000bd8 <__mulsi3>
 40021e4:	88c00007 	ldb	r3,0(r17)
 40021e8:	9089883a 	add	r4,r18,r2
 40021ec:	ad400044 	addi	r21,r21,1
 40021f0:	1cbff404 	addi	r18,r3,-48
 40021f4:	a823883a 	mov	r17,r21
 40021f8:	b4bff82e 	bgeu	r22,r18,40021dc <__alt_data_end+0xfc0021dc>
 40021fc:	1823883a 	mov	r17,r3
 4002200:	d9003115 	stw	r4,196(sp)
 4002204:	003f1d06 	br	4001e7c <__alt_data_end+0xfc001e7c>
 4002208:	8025883a 	mov	r18,r16
 400220c:	dc002903 	ldbu	r16,164(sp)
 4002210:	e011883a 	mov	r8,fp
 4002214:	84003fcc 	andi	r16,r16,255
 4002218:	8007531e 	bne	r16,zero,4003f68 <___vfprintf_internal_r+0x2278>
 400221c:	94800414 	ori	r18,r18,16
 4002220:	9080080c 	andi	r2,r18,32
 4002224:	1003a326 	beq	r2,zero,40030b4 <___vfprintf_internal_r+0x13c4>
 4002228:	d9002e17 	ldw	r4,184(sp)
 400222c:	20800117 	ldw	r2,4(r4)
 4002230:	24c00017 	ldw	r19,0(r4)
 4002234:	21000204 	addi	r4,r4,8
 4002238:	d9002e15 	stw	r4,184(sp)
 400223c:	102d883a 	mov	r22,r2
 4002240:	10047316 	blt	r2,zero,4003410 <___vfprintf_internal_r+0x1720>
 4002244:	d9002a17 	ldw	r4,168(sp)
 4002248:	df002783 	ldbu	fp,158(sp)
 400224c:	2003e416 	blt	r4,zero,40031e0 <___vfprintf_internal_r+0x14f0>
 4002250:	00ffdfc4 	movi	r3,-129
 4002254:	9d84b03a 	or	r2,r19,r22
 4002258:	90e4703a 	and	r18,r18,r3
 400225c:	10018026 	beq	r2,zero,4002860 <___vfprintf_internal_r+0xb70>
 4002260:	b003ab26 	beq	r22,zero,4003110 <___vfprintf_internal_r+0x1420>
 4002264:	dc402915 	stw	r17,164(sp)
 4002268:	dc001e04 	addi	r16,sp,120
 400226c:	b023883a 	mov	r17,r22
 4002270:	402d883a 	mov	r22,r8
 4002274:	9809883a 	mov	r4,r19
 4002278:	880b883a 	mov	r5,r17
 400227c:	01800284 	movi	r6,10
 4002280:	000f883a 	mov	r7,zero
 4002284:	400ba140 	call	400ba14 <__umoddi3>
 4002288:	10800c04 	addi	r2,r2,48
 400228c:	843fffc4 	addi	r16,r16,-1
 4002290:	9809883a 	mov	r4,r19
 4002294:	880b883a 	mov	r5,r17
 4002298:	80800005 	stb	r2,0(r16)
 400229c:	01800284 	movi	r6,10
 40022a0:	000f883a 	mov	r7,zero
 40022a4:	400b4180 	call	400b418 <__udivdi3>
 40022a8:	1027883a 	mov	r19,r2
 40022ac:	10c4b03a 	or	r2,r2,r3
 40022b0:	1823883a 	mov	r17,r3
 40022b4:	103fef1e 	bne	r2,zero,4002274 <__alt_data_end+0xfc002274>
 40022b8:	d8c02817 	ldw	r3,160(sp)
 40022bc:	dc402917 	ldw	r17,164(sp)
 40022c0:	b011883a 	mov	r8,r22
 40022c4:	1c07c83a 	sub	r3,r3,r16
 40022c8:	d8c02b15 	stw	r3,172(sp)
 40022cc:	00005f06 	br	400244c <___vfprintf_internal_r+0x75c>
 40022d0:	8025883a 	mov	r18,r16
 40022d4:	dc002903 	ldbu	r16,164(sp)
 40022d8:	e011883a 	mov	r8,fp
 40022dc:	84003fcc 	andi	r16,r16,255
 40022e0:	80071e1e 	bne	r16,zero,4003f5c <___vfprintf_internal_r+0x226c>
 40022e4:	9080020c 	andi	r2,r18,8
 40022e8:	1004af26 	beq	r2,zero,40035a8 <___vfprintf_internal_r+0x18b8>
 40022ec:	d9002e17 	ldw	r4,184(sp)
 40022f0:	d9402e17 	ldw	r5,184(sp)
 40022f4:	d8802e17 	ldw	r2,184(sp)
 40022f8:	21000017 	ldw	r4,0(r4)
 40022fc:	29400117 	ldw	r5,4(r5)
 4002300:	10800204 	addi	r2,r2,8
 4002304:	d9003615 	stw	r4,216(sp)
 4002308:	d9403815 	stw	r5,224(sp)
 400230c:	d8802e15 	stw	r2,184(sp)
 4002310:	d9003617 	ldw	r4,216(sp)
 4002314:	d9403817 	ldw	r5,224(sp)
 4002318:	da003d15 	stw	r8,244(sp)
 400231c:	04000044 	movi	r16,1
 4002320:	40090f40 	call	40090f4 <__fpclassifyd>
 4002324:	da003d17 	ldw	r8,244(sp)
 4002328:	1404441e 	bne	r2,r16,400343c <___vfprintf_internal_r+0x174c>
 400232c:	d9003617 	ldw	r4,216(sp)
 4002330:	d9403817 	ldw	r5,224(sp)
 4002334:	000d883a 	mov	r6,zero
 4002338:	000f883a 	mov	r7,zero
 400233c:	400d56c0 	call	400d56c <__ledf2>
 4002340:	da003d17 	ldw	r8,244(sp)
 4002344:	1005e316 	blt	r2,zero,4003ad4 <___vfprintf_internal_r+0x1de4>
 4002348:	df002783 	ldbu	fp,158(sp)
 400234c:	008011c4 	movi	r2,71
 4002350:	1445580e 	bge	r2,r17,40038b4 <___vfprintf_internal_r+0x1bc4>
 4002354:	04010074 	movhi	r16,1025
 4002358:	840a4f04 	addi	r16,r16,10556
 400235c:	00c000c4 	movi	r3,3
 4002360:	00bfdfc4 	movi	r2,-129
 4002364:	d8c02915 	stw	r3,164(sp)
 4002368:	90a4703a 	and	r18,r18,r2
 400236c:	d8c02b15 	stw	r3,172(sp)
 4002370:	d8002a15 	stw	zero,168(sp)
 4002374:	d8003215 	stw	zero,200(sp)
 4002378:	00003a06 	br	4002464 <___vfprintf_internal_r+0x774>
 400237c:	84000214 	ori	r16,r16,8
 4002380:	ac400007 	ldb	r17,0(r21)
 4002384:	003ebc06 	br	4001e78 <__alt_data_end+0xfc001e78>
 4002388:	8025883a 	mov	r18,r16
 400238c:	dc002903 	ldbu	r16,164(sp)
 4002390:	e011883a 	mov	r8,fp
 4002394:	84003fcc 	andi	r16,r16,255
 4002398:	8007001e 	bne	r16,zero,4003f9c <___vfprintf_internal_r+0x22ac>
 400239c:	94800414 	ori	r18,r18,16
 40023a0:	9080080c 	andi	r2,r18,32
 40023a4:	1002fa26 	beq	r2,zero,4002f90 <___vfprintf_internal_r+0x12a0>
 40023a8:	d9002e17 	ldw	r4,184(sp)
 40023ac:	d9402a17 	ldw	r5,168(sp)
 40023b0:	d8002785 	stb	zero,158(sp)
 40023b4:	20800204 	addi	r2,r4,8
 40023b8:	24c00017 	ldw	r19,0(r4)
 40023bc:	25800117 	ldw	r22,4(r4)
 40023c0:	2804b116 	blt	r5,zero,4003688 <___vfprintf_internal_r+0x1998>
 40023c4:	013fdfc4 	movi	r4,-129
 40023c8:	9d86b03a 	or	r3,r19,r22
 40023cc:	d8802e15 	stw	r2,184(sp)
 40023d0:	9124703a 	and	r18,r18,r4
 40023d4:	1802fb1e 	bne	r3,zero,4002fc4 <___vfprintf_internal_r+0x12d4>
 40023d8:	d8c02a17 	ldw	r3,168(sp)
 40023dc:	0039883a 	mov	fp,zero
 40023e0:	1805e526 	beq	r3,zero,4003b78 <___vfprintf_internal_r+0x1e88>
 40023e4:	0027883a 	mov	r19,zero
 40023e8:	002d883a 	mov	r22,zero
 40023ec:	dc001e04 	addi	r16,sp,120
 40023f0:	9806d0fa 	srli	r3,r19,3
 40023f4:	b008977a 	slli	r4,r22,29
 40023f8:	b02cd0fa 	srli	r22,r22,3
 40023fc:	9cc001cc 	andi	r19,r19,7
 4002400:	98800c04 	addi	r2,r19,48
 4002404:	843fffc4 	addi	r16,r16,-1
 4002408:	20e6b03a 	or	r19,r4,r3
 400240c:	80800005 	stb	r2,0(r16)
 4002410:	9d86b03a 	or	r3,r19,r22
 4002414:	183ff61e 	bne	r3,zero,40023f0 <__alt_data_end+0xfc0023f0>
 4002418:	90c0004c 	andi	r3,r18,1
 400241c:	18014126 	beq	r3,zero,4002924 <___vfprintf_internal_r+0xc34>
 4002420:	10803fcc 	andi	r2,r2,255
 4002424:	1080201c 	xori	r2,r2,128
 4002428:	10bfe004 	addi	r2,r2,-128
 400242c:	00c00c04 	movi	r3,48
 4002430:	10c13c26 	beq	r2,r3,4002924 <___vfprintf_internal_r+0xc34>
 4002434:	80ffffc5 	stb	r3,-1(r16)
 4002438:	d8c02817 	ldw	r3,160(sp)
 400243c:	80bfffc4 	addi	r2,r16,-1
 4002440:	1021883a 	mov	r16,r2
 4002444:	1887c83a 	sub	r3,r3,r2
 4002448:	d8c02b15 	stw	r3,172(sp)
 400244c:	d8802b17 	ldw	r2,172(sp)
 4002450:	d9002a17 	ldw	r4,168(sp)
 4002454:	1100010e 	bge	r2,r4,400245c <___vfprintf_internal_r+0x76c>
 4002458:	2005883a 	mov	r2,r4
 400245c:	d8802915 	stw	r2,164(sp)
 4002460:	d8003215 	stw	zero,200(sp)
 4002464:	e7003fcc 	andi	fp,fp,255
 4002468:	e700201c 	xori	fp,fp,128
 400246c:	e73fe004 	addi	fp,fp,-128
 4002470:	e0000326 	beq	fp,zero,4002480 <___vfprintf_internal_r+0x790>
 4002474:	d8c02917 	ldw	r3,164(sp)
 4002478:	18c00044 	addi	r3,r3,1
 400247c:	d8c02915 	stw	r3,164(sp)
 4002480:	90c0008c 	andi	r3,r18,2
 4002484:	d8c02c15 	stw	r3,176(sp)
 4002488:	18000326 	beq	r3,zero,4002498 <___vfprintf_internal_r+0x7a8>
 400248c:	d8c02917 	ldw	r3,164(sp)
 4002490:	18c00084 	addi	r3,r3,2
 4002494:	d8c02915 	stw	r3,164(sp)
 4002498:	90c0210c 	andi	r3,r18,132
 400249c:	d8c03015 	stw	r3,192(sp)
 40024a0:	1801c51e 	bne	r3,zero,4002bb8 <___vfprintf_internal_r+0xec8>
 40024a4:	d9003117 	ldw	r4,196(sp)
 40024a8:	d8c02917 	ldw	r3,164(sp)
 40024ac:	20e7c83a 	sub	r19,r4,r3
 40024b0:	04c1c10e 	bge	zero,r19,4002bb8 <___vfprintf_internal_r+0xec8>
 40024b4:	02400404 	movi	r9,16
 40024b8:	d8c02017 	ldw	r3,128(sp)
 40024bc:	d8801f17 	ldw	r2,124(sp)
 40024c0:	4cc52f0e 	bge	r9,r19,4003980 <___vfprintf_internal_r+0x1c90>
 40024c4:	01410074 	movhi	r5,1025
 40024c8:	294a6284 	addi	r5,r5,10634
 40024cc:	dc403b15 	stw	r17,236(sp)
 40024d0:	d9403515 	stw	r5,212(sp)
 40024d4:	9823883a 	mov	r17,r19
 40024d8:	482d883a 	mov	r22,r9
 40024dc:	9027883a 	mov	r19,r18
 40024e0:	070001c4 	movi	fp,7
 40024e4:	8025883a 	mov	r18,r16
 40024e8:	dc002d17 	ldw	r16,180(sp)
 40024ec:	00000306 	br	40024fc <___vfprintf_internal_r+0x80c>
 40024f0:	8c7ffc04 	addi	r17,r17,-16
 40024f4:	42000204 	addi	r8,r8,8
 40024f8:	b440130e 	bge	r22,r17,4002548 <___vfprintf_internal_r+0x858>
 40024fc:	01010074 	movhi	r4,1025
 4002500:	18c00404 	addi	r3,r3,16
 4002504:	10800044 	addi	r2,r2,1
 4002508:	210a6284 	addi	r4,r4,10634
 400250c:	41000015 	stw	r4,0(r8)
 4002510:	45800115 	stw	r22,4(r8)
 4002514:	d8c02015 	stw	r3,128(sp)
 4002518:	d8801f15 	stw	r2,124(sp)
 400251c:	e0bff40e 	bge	fp,r2,40024f0 <__alt_data_end+0xfc0024f0>
 4002520:	d9801e04 	addi	r6,sp,120
 4002524:	b80b883a 	mov	r5,r23
 4002528:	8009883a 	mov	r4,r16
 400252c:	40094d00 	call	40094d0 <__sprint_r>
 4002530:	103ef31e 	bne	r2,zero,4002100 <__alt_data_end+0xfc002100>
 4002534:	8c7ffc04 	addi	r17,r17,-16
 4002538:	d8c02017 	ldw	r3,128(sp)
 400253c:	d8801f17 	ldw	r2,124(sp)
 4002540:	da000404 	addi	r8,sp,16
 4002544:	b47fed16 	blt	r22,r17,40024fc <__alt_data_end+0xfc0024fc>
 4002548:	9021883a 	mov	r16,r18
 400254c:	9825883a 	mov	r18,r19
 4002550:	8827883a 	mov	r19,r17
 4002554:	dc403b17 	ldw	r17,236(sp)
 4002558:	d9403517 	ldw	r5,212(sp)
 400255c:	98c7883a 	add	r3,r19,r3
 4002560:	10800044 	addi	r2,r2,1
 4002564:	41400015 	stw	r5,0(r8)
 4002568:	44c00115 	stw	r19,4(r8)
 400256c:	d8c02015 	stw	r3,128(sp)
 4002570:	d8801f15 	stw	r2,124(sp)
 4002574:	010001c4 	movi	r4,7
 4002578:	2082c516 	blt	r4,r2,4003090 <___vfprintf_internal_r+0x13a0>
 400257c:	df002787 	ldb	fp,158(sp)
 4002580:	42000204 	addi	r8,r8,8
 4002584:	e0000c26 	beq	fp,zero,40025b8 <___vfprintf_internal_r+0x8c8>
 4002588:	d8801f17 	ldw	r2,124(sp)
 400258c:	d9002784 	addi	r4,sp,158
 4002590:	18c00044 	addi	r3,r3,1
 4002594:	10800044 	addi	r2,r2,1
 4002598:	41000015 	stw	r4,0(r8)
 400259c:	01000044 	movi	r4,1
 40025a0:	41000115 	stw	r4,4(r8)
 40025a4:	d8c02015 	stw	r3,128(sp)
 40025a8:	d8801f15 	stw	r2,124(sp)
 40025ac:	010001c4 	movi	r4,7
 40025b0:	20825e16 	blt	r4,r2,4002f2c <___vfprintf_internal_r+0x123c>
 40025b4:	42000204 	addi	r8,r8,8
 40025b8:	d8802c17 	ldw	r2,176(sp)
 40025bc:	10000c26 	beq	r2,zero,40025f0 <___vfprintf_internal_r+0x900>
 40025c0:	d8801f17 	ldw	r2,124(sp)
 40025c4:	d9002704 	addi	r4,sp,156
 40025c8:	18c00084 	addi	r3,r3,2
 40025cc:	10800044 	addi	r2,r2,1
 40025d0:	41000015 	stw	r4,0(r8)
 40025d4:	01000084 	movi	r4,2
 40025d8:	41000115 	stw	r4,4(r8)
 40025dc:	d8c02015 	stw	r3,128(sp)
 40025e0:	d8801f15 	stw	r2,124(sp)
 40025e4:	010001c4 	movi	r4,7
 40025e8:	20825816 	blt	r4,r2,4002f4c <___vfprintf_internal_r+0x125c>
 40025ec:	42000204 	addi	r8,r8,8
 40025f0:	d9003017 	ldw	r4,192(sp)
 40025f4:	00802004 	movi	r2,128
 40025f8:	2081bb26 	beq	r4,r2,4002ce8 <___vfprintf_internal_r+0xff8>
 40025fc:	d9402a17 	ldw	r5,168(sp)
 4002600:	d8802b17 	ldw	r2,172(sp)
 4002604:	28adc83a 	sub	r22,r5,r2
 4002608:	0580310e 	bge	zero,r22,40026d0 <___vfprintf_internal_r+0x9e0>
 400260c:	07000404 	movi	fp,16
 4002610:	d8801f17 	ldw	r2,124(sp)
 4002614:	e584360e 	bge	fp,r22,40036f0 <___vfprintf_internal_r+0x1a00>
 4002618:	01410074 	movhi	r5,1025
 400261c:	294a5e84 	addi	r5,r5,10618
 4002620:	dc402a15 	stw	r17,168(sp)
 4002624:	d9402c15 	stw	r5,176(sp)
 4002628:	b023883a 	mov	r17,r22
 400262c:	04c001c4 	movi	r19,7
 4002630:	a82d883a 	mov	r22,r21
 4002634:	902b883a 	mov	r21,r18
 4002638:	8025883a 	mov	r18,r16
 400263c:	dc002d17 	ldw	r16,180(sp)
 4002640:	00000306 	br	4002650 <___vfprintf_internal_r+0x960>
 4002644:	8c7ffc04 	addi	r17,r17,-16
 4002648:	42000204 	addi	r8,r8,8
 400264c:	e440110e 	bge	fp,r17,4002694 <___vfprintf_internal_r+0x9a4>
 4002650:	18c00404 	addi	r3,r3,16
 4002654:	10800044 	addi	r2,r2,1
 4002658:	45000015 	stw	r20,0(r8)
 400265c:	47000115 	stw	fp,4(r8)
 4002660:	d8c02015 	stw	r3,128(sp)
 4002664:	d8801f15 	stw	r2,124(sp)
 4002668:	98bff60e 	bge	r19,r2,4002644 <__alt_data_end+0xfc002644>
 400266c:	d9801e04 	addi	r6,sp,120
 4002670:	b80b883a 	mov	r5,r23
 4002674:	8009883a 	mov	r4,r16
 4002678:	40094d00 	call	40094d0 <__sprint_r>
 400267c:	103ea01e 	bne	r2,zero,4002100 <__alt_data_end+0xfc002100>
 4002680:	8c7ffc04 	addi	r17,r17,-16
 4002684:	d8c02017 	ldw	r3,128(sp)
 4002688:	d8801f17 	ldw	r2,124(sp)
 400268c:	da000404 	addi	r8,sp,16
 4002690:	e47fef16 	blt	fp,r17,4002650 <__alt_data_end+0xfc002650>
 4002694:	9021883a 	mov	r16,r18
 4002698:	a825883a 	mov	r18,r21
 400269c:	b02b883a 	mov	r21,r22
 40026a0:	882d883a 	mov	r22,r17
 40026a4:	dc402a17 	ldw	r17,168(sp)
 40026a8:	d9002c17 	ldw	r4,176(sp)
 40026ac:	1d87883a 	add	r3,r3,r22
 40026b0:	10800044 	addi	r2,r2,1
 40026b4:	41000015 	stw	r4,0(r8)
 40026b8:	45800115 	stw	r22,4(r8)
 40026bc:	d8c02015 	stw	r3,128(sp)
 40026c0:	d8801f15 	stw	r2,124(sp)
 40026c4:	010001c4 	movi	r4,7
 40026c8:	20821016 	blt	r4,r2,4002f0c <___vfprintf_internal_r+0x121c>
 40026cc:	42000204 	addi	r8,r8,8
 40026d0:	9080400c 	andi	r2,r18,256
 40026d4:	10013a1e 	bne	r2,zero,4002bc0 <___vfprintf_internal_r+0xed0>
 40026d8:	d9402b17 	ldw	r5,172(sp)
 40026dc:	d8801f17 	ldw	r2,124(sp)
 40026e0:	44000015 	stw	r16,0(r8)
 40026e4:	1947883a 	add	r3,r3,r5
 40026e8:	10800044 	addi	r2,r2,1
 40026ec:	41400115 	stw	r5,4(r8)
 40026f0:	d8c02015 	stw	r3,128(sp)
 40026f4:	d8801f15 	stw	r2,124(sp)
 40026f8:	010001c4 	movi	r4,7
 40026fc:	2081f516 	blt	r4,r2,4002ed4 <___vfprintf_internal_r+0x11e4>
 4002700:	42000204 	addi	r8,r8,8
 4002704:	9480010c 	andi	r18,r18,4
 4002708:	90003226 	beq	r18,zero,40027d4 <___vfprintf_internal_r+0xae4>
 400270c:	d9403117 	ldw	r5,196(sp)
 4002710:	d8802917 	ldw	r2,164(sp)
 4002714:	28a1c83a 	sub	r16,r5,r2
 4002718:	04002e0e 	bge	zero,r16,40027d4 <___vfprintf_internal_r+0xae4>
 400271c:	04400404 	movi	r17,16
 4002720:	d8801f17 	ldw	r2,124(sp)
 4002724:	8c04c40e 	bge	r17,r16,4003a38 <___vfprintf_internal_r+0x1d48>
 4002728:	01410074 	movhi	r5,1025
 400272c:	294a6284 	addi	r5,r5,10634
 4002730:	d9403515 	stw	r5,212(sp)
 4002734:	048001c4 	movi	r18,7
 4002738:	dcc02d17 	ldw	r19,180(sp)
 400273c:	00000306 	br	400274c <___vfprintf_internal_r+0xa5c>
 4002740:	843ffc04 	addi	r16,r16,-16
 4002744:	42000204 	addi	r8,r8,8
 4002748:	8c00130e 	bge	r17,r16,4002798 <___vfprintf_internal_r+0xaa8>
 400274c:	01010074 	movhi	r4,1025
 4002750:	18c00404 	addi	r3,r3,16
 4002754:	10800044 	addi	r2,r2,1
 4002758:	210a6284 	addi	r4,r4,10634
 400275c:	41000015 	stw	r4,0(r8)
 4002760:	44400115 	stw	r17,4(r8)
 4002764:	d8c02015 	stw	r3,128(sp)
 4002768:	d8801f15 	stw	r2,124(sp)
 400276c:	90bff40e 	bge	r18,r2,4002740 <__alt_data_end+0xfc002740>
 4002770:	d9801e04 	addi	r6,sp,120
 4002774:	b80b883a 	mov	r5,r23
 4002778:	9809883a 	mov	r4,r19
 400277c:	40094d00 	call	40094d0 <__sprint_r>
 4002780:	103e5f1e 	bne	r2,zero,4002100 <__alt_data_end+0xfc002100>
 4002784:	843ffc04 	addi	r16,r16,-16
 4002788:	d8c02017 	ldw	r3,128(sp)
 400278c:	d8801f17 	ldw	r2,124(sp)
 4002790:	da000404 	addi	r8,sp,16
 4002794:	8c3fed16 	blt	r17,r16,400274c <__alt_data_end+0xfc00274c>
 4002798:	d9403517 	ldw	r5,212(sp)
 400279c:	1c07883a 	add	r3,r3,r16
 40027a0:	10800044 	addi	r2,r2,1
 40027a4:	41400015 	stw	r5,0(r8)
 40027a8:	44000115 	stw	r16,4(r8)
 40027ac:	d8c02015 	stw	r3,128(sp)
 40027b0:	d8801f15 	stw	r2,124(sp)
 40027b4:	010001c4 	movi	r4,7
 40027b8:	2080060e 	bge	r4,r2,40027d4 <___vfprintf_internal_r+0xae4>
 40027bc:	d9002d17 	ldw	r4,180(sp)
 40027c0:	d9801e04 	addi	r6,sp,120
 40027c4:	b80b883a 	mov	r5,r23
 40027c8:	40094d00 	call	40094d0 <__sprint_r>
 40027cc:	103e4c1e 	bne	r2,zero,4002100 <__alt_data_end+0xfc002100>
 40027d0:	d8c02017 	ldw	r3,128(sp)
 40027d4:	d8803117 	ldw	r2,196(sp)
 40027d8:	d9002917 	ldw	r4,164(sp)
 40027dc:	1100010e 	bge	r2,r4,40027e4 <___vfprintf_internal_r+0xaf4>
 40027e0:	2005883a 	mov	r2,r4
 40027e4:	d9402f17 	ldw	r5,188(sp)
 40027e8:	288b883a 	add	r5,r5,r2
 40027ec:	d9402f15 	stw	r5,188(sp)
 40027f0:	1801c01e 	bne	r3,zero,4002ef4 <___vfprintf_internal_r+0x1204>
 40027f4:	a8800007 	ldb	r2,0(r21)
 40027f8:	d8001f15 	stw	zero,124(sp)
 40027fc:	da000404 	addi	r8,sp,16
 4002800:	103d751e 	bne	r2,zero,4001dd8 <__alt_data_end+0xfc001dd8>
 4002804:	a823883a 	mov	r17,r21
 4002808:	003d8b06 	br	4001e38 <__alt_data_end+0xfc001e38>
 400280c:	8025883a 	mov	r18,r16
 4002810:	dc002903 	ldbu	r16,164(sp)
 4002814:	e011883a 	mov	r8,fp
 4002818:	84003fcc 	andi	r16,r16,255
 400281c:	8005e51e 	bne	r16,zero,4003fb4 <___vfprintf_internal_r+0x22c4>
 4002820:	94800414 	ori	r18,r18,16
 4002824:	9080080c 	andi	r2,r18,32
 4002828:	10022b26 	beq	r2,zero,40030d8 <___vfprintf_internal_r+0x13e8>
 400282c:	d9002e17 	ldw	r4,184(sp)
 4002830:	d9402a17 	ldw	r5,168(sp)
 4002834:	d8002785 	stb	zero,158(sp)
 4002838:	20c00204 	addi	r3,r4,8
 400283c:	24c00017 	ldw	r19,0(r4)
 4002840:	25800117 	ldw	r22,4(r4)
 4002844:	28042e16 	blt	r5,zero,4003900 <___vfprintf_internal_r+0x1c10>
 4002848:	013fdfc4 	movi	r4,-129
 400284c:	9d84b03a 	or	r2,r19,r22
 4002850:	d8c02e15 	stw	r3,184(sp)
 4002854:	9124703a 	and	r18,r18,r4
 4002858:	0039883a 	mov	fp,zero
 400285c:	103e801e 	bne	r2,zero,4002260 <__alt_data_end+0xfc002260>
 4002860:	d9002a17 	ldw	r4,168(sp)
 4002864:	2002e01e 	bne	r4,zero,40033e8 <___vfprintf_internal_r+0x16f8>
 4002868:	d8002a15 	stw	zero,168(sp)
 400286c:	d8002b15 	stw	zero,172(sp)
 4002870:	dc001e04 	addi	r16,sp,120
 4002874:	003ef506 	br	400244c <__alt_data_end+0xfc00244c>
 4002878:	8025883a 	mov	r18,r16
 400287c:	dc002903 	ldbu	r16,164(sp)
 4002880:	e011883a 	mov	r8,fp
 4002884:	84003fcc 	andi	r16,r16,255
 4002888:	8005ba1e 	bne	r16,zero,4003f74 <___vfprintf_internal_r+0x2284>
 400288c:	01010074 	movhi	r4,1025
 4002890:	210a5204 	addi	r4,r4,10568
 4002894:	d9003915 	stw	r4,228(sp)
 4002898:	9080080c 	andi	r2,r18,32
 400289c:	10006126 	beq	r2,zero,4002a24 <___vfprintf_internal_r+0xd34>
 40028a0:	d9402e17 	ldw	r5,184(sp)
 40028a4:	2cc00017 	ldw	r19,0(r5)
 40028a8:	2d800117 	ldw	r22,4(r5)
 40028ac:	29400204 	addi	r5,r5,8
 40028b0:	d9402e15 	stw	r5,184(sp)
 40028b4:	9080004c 	andi	r2,r18,1
 40028b8:	1001ac26 	beq	r2,zero,4002f6c <___vfprintf_internal_r+0x127c>
 40028bc:	9d84b03a 	or	r2,r19,r22
 40028c0:	10038526 	beq	r2,zero,40036d8 <___vfprintf_internal_r+0x19e8>
 40028c4:	d8c02a17 	ldw	r3,168(sp)
 40028c8:	00800c04 	movi	r2,48
 40028cc:	d8802705 	stb	r2,156(sp)
 40028d0:	dc402745 	stb	r17,157(sp)
 40028d4:	d8002785 	stb	zero,158(sp)
 40028d8:	90800094 	ori	r2,r18,2
 40028dc:	18047916 	blt	r3,zero,4003ac4 <___vfprintf_internal_r+0x1dd4>
 40028e0:	00bfdfc4 	movi	r2,-129
 40028e4:	90a4703a 	and	r18,r18,r2
 40028e8:	94800094 	ori	r18,r18,2
 40028ec:	0039883a 	mov	fp,zero
 40028f0:	d9003917 	ldw	r4,228(sp)
 40028f4:	dc001e04 	addi	r16,sp,120
 40028f8:	988003cc 	andi	r2,r19,15
 40028fc:	b006973a 	slli	r3,r22,28
 4002900:	2085883a 	add	r2,r4,r2
 4002904:	9826d13a 	srli	r19,r19,4
 4002908:	10800003 	ldbu	r2,0(r2)
 400290c:	b02cd13a 	srli	r22,r22,4
 4002910:	843fffc4 	addi	r16,r16,-1
 4002914:	1ce6b03a 	or	r19,r3,r19
 4002918:	80800005 	stb	r2,0(r16)
 400291c:	9d84b03a 	or	r2,r19,r22
 4002920:	103ff51e 	bne	r2,zero,40028f8 <__alt_data_end+0xfc0028f8>
 4002924:	d8c02817 	ldw	r3,160(sp)
 4002928:	1c07c83a 	sub	r3,r3,r16
 400292c:	d8c02b15 	stw	r3,172(sp)
 4002930:	003ec606 	br	400244c <__alt_data_end+0xfc00244c>
 4002934:	8025883a 	mov	r18,r16
 4002938:	dc002903 	ldbu	r16,164(sp)
 400293c:	e011883a 	mov	r8,fp
 4002940:	84003fcc 	andi	r16,r16,255
 4002944:	803e9626 	beq	r16,zero,40023a0 <__alt_data_end+0xfc0023a0>
 4002948:	d8c02b03 	ldbu	r3,172(sp)
 400294c:	d8c02785 	stb	r3,158(sp)
 4002950:	003e9306 	br	40023a0 <__alt_data_end+0xfc0023a0>
 4002954:	00c00044 	movi	r3,1
 4002958:	d8c02905 	stb	r3,164(sp)
 400295c:	00c00ac4 	movi	r3,43
 4002960:	d8c02b05 	stb	r3,172(sp)
 4002964:	ac400007 	ldb	r17,0(r21)
 4002968:	003d4306 	br	4001e78 <__alt_data_end+0xfc001e78>
 400296c:	84000814 	ori	r16,r16,32
 4002970:	ac400007 	ldb	r17,0(r21)
 4002974:	003d4006 	br	4001e78 <__alt_data_end+0xfc001e78>
 4002978:	d8802e17 	ldw	r2,184(sp)
 400297c:	8025883a 	mov	r18,r16
 4002980:	d8002785 	stb	zero,158(sp)
 4002984:	14000017 	ldw	r16,0(r2)
 4002988:	e011883a 	mov	r8,fp
 400298c:	14c00104 	addi	r19,r2,4
 4002990:	80042d26 	beq	r16,zero,4003a48 <___vfprintf_internal_r+0x1d58>
 4002994:	d8c02a17 	ldw	r3,168(sp)
 4002998:	1803e416 	blt	r3,zero,400392c <___vfprintf_internal_r+0x1c3c>
 400299c:	180d883a 	mov	r6,r3
 40029a0:	000b883a 	mov	r5,zero
 40029a4:	8009883a 	mov	r4,r16
 40029a8:	df003d15 	stw	fp,244(sp)
 40029ac:	40076280 	call	4007628 <memchr>
 40029b0:	da003d17 	ldw	r8,244(sp)
 40029b4:	10046826 	beq	r2,zero,4003b58 <___vfprintf_internal_r+0x1e68>
 40029b8:	1405c83a 	sub	r2,r2,r16
 40029bc:	d8802b15 	stw	r2,172(sp)
 40029c0:	1003e016 	blt	r2,zero,4003944 <___vfprintf_internal_r+0x1c54>
 40029c4:	df002783 	ldbu	fp,158(sp)
 40029c8:	d8802915 	stw	r2,164(sp)
 40029cc:	dcc02e15 	stw	r19,184(sp)
 40029d0:	d8002a15 	stw	zero,168(sp)
 40029d4:	d8003215 	stw	zero,200(sp)
 40029d8:	003ea206 	br	4002464 <__alt_data_end+0xfc002464>
 40029dc:	8025883a 	mov	r18,r16
 40029e0:	dc002903 	ldbu	r16,164(sp)
 40029e4:	e011883a 	mov	r8,fp
 40029e8:	84003fcc 	andi	r16,r16,255
 40029ec:	803f8d26 	beq	r16,zero,4002824 <__alt_data_end+0xfc002824>
 40029f0:	d8c02b03 	ldbu	r3,172(sp)
 40029f4:	d8c02785 	stb	r3,158(sp)
 40029f8:	003f8a06 	br	4002824 <__alt_data_end+0xfc002824>
 40029fc:	8025883a 	mov	r18,r16
 4002a00:	dc002903 	ldbu	r16,164(sp)
 4002a04:	e011883a 	mov	r8,fp
 4002a08:	84003fcc 	andi	r16,r16,255
 4002a0c:	8005661e 	bne	r16,zero,4003fa8 <___vfprintf_internal_r+0x22b8>
 4002a10:	01010074 	movhi	r4,1025
 4002a14:	210a5704 	addi	r4,r4,10588
 4002a18:	d9003915 	stw	r4,228(sp)
 4002a1c:	9080080c 	andi	r2,r18,32
 4002a20:	103f9f1e 	bne	r2,zero,40028a0 <__alt_data_end+0xfc0028a0>
 4002a24:	9080040c 	andi	r2,r18,16
 4002a28:	1002eb26 	beq	r2,zero,40035d8 <___vfprintf_internal_r+0x18e8>
 4002a2c:	d8802e17 	ldw	r2,184(sp)
 4002a30:	002d883a 	mov	r22,zero
 4002a34:	14c00017 	ldw	r19,0(r2)
 4002a38:	10800104 	addi	r2,r2,4
 4002a3c:	d8802e15 	stw	r2,184(sp)
 4002a40:	003f9c06 	br	40028b4 <__alt_data_end+0xfc0028b4>
 4002a44:	d8802b07 	ldb	r2,172(sp)
 4002a48:	1002e11e 	bne	r2,zero,40035d0 <___vfprintf_internal_r+0x18e0>
 4002a4c:	00c00044 	movi	r3,1
 4002a50:	d8c02905 	stb	r3,164(sp)
 4002a54:	00c00804 	movi	r3,32
 4002a58:	d8c02b05 	stb	r3,172(sp)
 4002a5c:	ac400007 	ldb	r17,0(r21)
 4002a60:	003d0506 	br	4001e78 <__alt_data_end+0xfc001e78>
 4002a64:	84000054 	ori	r16,r16,1
 4002a68:	ac400007 	ldb	r17,0(r21)
 4002a6c:	003d0206 	br	4001e78 <__alt_data_end+0xfc001e78>
 4002a70:	8025883a 	mov	r18,r16
 4002a74:	dc002903 	ldbu	r16,164(sp)
 4002a78:	e011883a 	mov	r8,fp
 4002a7c:	84003fcc 	andi	r16,r16,255
 4002a80:	803de726 	beq	r16,zero,4002220 <__alt_data_end+0xfc002220>
 4002a84:	d8c02b03 	ldbu	r3,172(sp)
 4002a88:	d8c02785 	stb	r3,158(sp)
 4002a8c:	003de406 	br	4002220 <__alt_data_end+0xfc002220>
 4002a90:	84001014 	ori	r16,r16,64
 4002a94:	ac400007 	ldb	r17,0(r21)
 4002a98:	003cf706 	br	4001e78 <__alt_data_end+0xfc001e78>
 4002a9c:	ac400007 	ldb	r17,0(r21)
 4002aa0:	00801b04 	movi	r2,108
 4002aa4:	88838f26 	beq	r17,r2,40038e4 <___vfprintf_internal_r+0x1bf4>
 4002aa8:	84000414 	ori	r16,r16,16
 4002aac:	003cf206 	br	4001e78 <__alt_data_end+0xfc001e78>
 4002ab0:	8025883a 	mov	r18,r16
 4002ab4:	dc002903 	ldbu	r16,164(sp)
 4002ab8:	e011883a 	mov	r8,fp
 4002abc:	84003fcc 	andi	r16,r16,255
 4002ac0:	80053f1e 	bne	r16,zero,4003fc0 <___vfprintf_internal_r+0x22d0>
 4002ac4:	9080080c 	andi	r2,r18,32
 4002ac8:	1002d226 	beq	r2,zero,4003614 <___vfprintf_internal_r+0x1924>
 4002acc:	d9002e17 	ldw	r4,184(sp)
 4002ad0:	d9402f17 	ldw	r5,188(sp)
 4002ad4:	20800017 	ldw	r2,0(r4)
 4002ad8:	2807d7fa 	srai	r3,r5,31
 4002adc:	21000104 	addi	r4,r4,4
 4002ae0:	d9002e15 	stw	r4,184(sp)
 4002ae4:	11400015 	stw	r5,0(r2)
 4002ae8:	10c00115 	stw	r3,4(r2)
 4002aec:	003cb806 	br	4001dd0 <__alt_data_end+0xfc001dd0>
 4002af0:	d8c02e17 	ldw	r3,184(sp)
 4002af4:	d9002e17 	ldw	r4,184(sp)
 4002af8:	8025883a 	mov	r18,r16
 4002afc:	18800017 	ldw	r2,0(r3)
 4002b00:	21000104 	addi	r4,r4,4
 4002b04:	00c00044 	movi	r3,1
 4002b08:	e011883a 	mov	r8,fp
 4002b0c:	d8c02915 	stw	r3,164(sp)
 4002b10:	d8002785 	stb	zero,158(sp)
 4002b14:	d8801405 	stb	r2,80(sp)
 4002b18:	d9002e15 	stw	r4,184(sp)
 4002b1c:	d8c02b15 	stw	r3,172(sp)
 4002b20:	d8002a15 	stw	zero,168(sp)
 4002b24:	d8003215 	stw	zero,200(sp)
 4002b28:	dc001404 	addi	r16,sp,80
 4002b2c:	0039883a 	mov	fp,zero
 4002b30:	003e5306 	br	4002480 <__alt_data_end+0xfc002480>
 4002b34:	01010074 	movhi	r4,1025
 4002b38:	210a5704 	addi	r4,r4,10588
 4002b3c:	0039883a 	mov	fp,zero
 4002b40:	d9003915 	stw	r4,228(sp)
 4002b44:	04401e04 	movi	r17,120
 4002b48:	003f6906 	br	40028f0 <__alt_data_end+0xfc0028f0>
 4002b4c:	8025883a 	mov	r18,r16
 4002b50:	dc002903 	ldbu	r16,164(sp)
 4002b54:	e011883a 	mov	r8,fp
 4002b58:	84003fcc 	andi	r16,r16,255
 4002b5c:	8005081e 	bne	r16,zero,4003f80 <___vfprintf_internal_r+0x2290>
 4002b60:	883d6126 	beq	r17,zero,40020e8 <__alt_data_end+0xfc0020e8>
 4002b64:	00c00044 	movi	r3,1
 4002b68:	d8c02915 	stw	r3,164(sp)
 4002b6c:	dc401405 	stb	r17,80(sp)
 4002b70:	d8002785 	stb	zero,158(sp)
 4002b74:	003fe906 	br	4002b1c <__alt_data_end+0xfc002b1c>
 4002b78:	01410074 	movhi	r5,1025
 4002b7c:	294a5704 	addi	r5,r5,10588
 4002b80:	d9403915 	stw	r5,228(sp)
 4002b84:	d8c02e15 	stw	r3,184(sp)
 4002b88:	1025883a 	mov	r18,r2
 4002b8c:	04401e04 	movi	r17,120
 4002b90:	9d84b03a 	or	r2,r19,r22
 4002b94:	1000fc1e 	bne	r2,zero,4002f88 <___vfprintf_internal_r+0x1298>
 4002b98:	0039883a 	mov	fp,zero
 4002b9c:	00800084 	movi	r2,2
 4002ba0:	10803fcc 	andi	r2,r2,255
 4002ba4:	00c00044 	movi	r3,1
 4002ba8:	10c20f26 	beq	r2,r3,40033e8 <___vfprintf_internal_r+0x16f8>
 4002bac:	00c00084 	movi	r3,2
 4002bb0:	10fd3326 	beq	r2,r3,4002080 <__alt_data_end+0xfc002080>
 4002bb4:	003e0b06 	br	40023e4 <__alt_data_end+0xfc0023e4>
 4002bb8:	d8c02017 	ldw	r3,128(sp)
 4002bbc:	003e7106 	br	4002584 <__alt_data_end+0xfc002584>
 4002bc0:	00801944 	movi	r2,101
 4002bc4:	14407e0e 	bge	r2,r17,4002dc0 <___vfprintf_internal_r+0x10d0>
 4002bc8:	d9003617 	ldw	r4,216(sp)
 4002bcc:	d9403817 	ldw	r5,224(sp)
 4002bd0:	000d883a 	mov	r6,zero
 4002bd4:	000f883a 	mov	r7,zero
 4002bd8:	d8c03c15 	stw	r3,240(sp)
 4002bdc:	da003d15 	stw	r8,244(sp)
 4002be0:	400d4080 	call	400d408 <__eqdf2>
 4002be4:	d8c03c17 	ldw	r3,240(sp)
 4002be8:	da003d17 	ldw	r8,244(sp)
 4002bec:	1000f71e 	bne	r2,zero,4002fcc <___vfprintf_internal_r+0x12dc>
 4002bf0:	d8801f17 	ldw	r2,124(sp)
 4002bf4:	01010074 	movhi	r4,1025
 4002bf8:	210a5e04 	addi	r4,r4,10616
 4002bfc:	18c00044 	addi	r3,r3,1
 4002c00:	10800044 	addi	r2,r2,1
 4002c04:	41000015 	stw	r4,0(r8)
 4002c08:	01000044 	movi	r4,1
 4002c0c:	41000115 	stw	r4,4(r8)
 4002c10:	d8c02015 	stw	r3,128(sp)
 4002c14:	d8801f15 	stw	r2,124(sp)
 4002c18:	010001c4 	movi	r4,7
 4002c1c:	2082b816 	blt	r4,r2,4003700 <___vfprintf_internal_r+0x1a10>
 4002c20:	42000204 	addi	r8,r8,8
 4002c24:	d8802617 	ldw	r2,152(sp)
 4002c28:	d9403317 	ldw	r5,204(sp)
 4002c2c:	11400216 	blt	r2,r5,4002c38 <___vfprintf_internal_r+0xf48>
 4002c30:	9080004c 	andi	r2,r18,1
 4002c34:	103eb326 	beq	r2,zero,4002704 <__alt_data_end+0xfc002704>
 4002c38:	d8803717 	ldw	r2,220(sp)
 4002c3c:	d9003417 	ldw	r4,208(sp)
 4002c40:	d9403717 	ldw	r5,220(sp)
 4002c44:	1887883a 	add	r3,r3,r2
 4002c48:	d8801f17 	ldw	r2,124(sp)
 4002c4c:	41000015 	stw	r4,0(r8)
 4002c50:	41400115 	stw	r5,4(r8)
 4002c54:	10800044 	addi	r2,r2,1
 4002c58:	d8c02015 	stw	r3,128(sp)
 4002c5c:	d8801f15 	stw	r2,124(sp)
 4002c60:	010001c4 	movi	r4,7
 4002c64:	20832916 	blt	r4,r2,400390c <___vfprintf_internal_r+0x1c1c>
 4002c68:	42000204 	addi	r8,r8,8
 4002c6c:	d8803317 	ldw	r2,204(sp)
 4002c70:	143fffc4 	addi	r16,r2,-1
 4002c74:	043ea30e 	bge	zero,r16,4002704 <__alt_data_end+0xfc002704>
 4002c78:	04400404 	movi	r17,16
 4002c7c:	d8801f17 	ldw	r2,124(sp)
 4002c80:	8c00880e 	bge	r17,r16,4002ea4 <___vfprintf_internal_r+0x11b4>
 4002c84:	01410074 	movhi	r5,1025
 4002c88:	294a5e84 	addi	r5,r5,10618
 4002c8c:	d9402c15 	stw	r5,176(sp)
 4002c90:	058001c4 	movi	r22,7
 4002c94:	dcc02d17 	ldw	r19,180(sp)
 4002c98:	00000306 	br	4002ca8 <___vfprintf_internal_r+0xfb8>
 4002c9c:	42000204 	addi	r8,r8,8
 4002ca0:	843ffc04 	addi	r16,r16,-16
 4002ca4:	8c00820e 	bge	r17,r16,4002eb0 <___vfprintf_internal_r+0x11c0>
 4002ca8:	18c00404 	addi	r3,r3,16
 4002cac:	10800044 	addi	r2,r2,1
 4002cb0:	45000015 	stw	r20,0(r8)
 4002cb4:	44400115 	stw	r17,4(r8)
 4002cb8:	d8c02015 	stw	r3,128(sp)
 4002cbc:	d8801f15 	stw	r2,124(sp)
 4002cc0:	b0bff60e 	bge	r22,r2,4002c9c <__alt_data_end+0xfc002c9c>
 4002cc4:	d9801e04 	addi	r6,sp,120
 4002cc8:	b80b883a 	mov	r5,r23
 4002ccc:	9809883a 	mov	r4,r19
 4002cd0:	40094d00 	call	40094d0 <__sprint_r>
 4002cd4:	103d0a1e 	bne	r2,zero,4002100 <__alt_data_end+0xfc002100>
 4002cd8:	d8c02017 	ldw	r3,128(sp)
 4002cdc:	d8801f17 	ldw	r2,124(sp)
 4002ce0:	da000404 	addi	r8,sp,16
 4002ce4:	003fee06 	br	4002ca0 <__alt_data_end+0xfc002ca0>
 4002ce8:	d9403117 	ldw	r5,196(sp)
 4002cec:	d8802917 	ldw	r2,164(sp)
 4002cf0:	28adc83a 	sub	r22,r5,r2
 4002cf4:	05be410e 	bge	zero,r22,40025fc <__alt_data_end+0xfc0025fc>
 4002cf8:	07000404 	movi	fp,16
 4002cfc:	d8801f17 	ldw	r2,124(sp)
 4002d00:	e5838f0e 	bge	fp,r22,4003b40 <___vfprintf_internal_r+0x1e50>
 4002d04:	01410074 	movhi	r5,1025
 4002d08:	294a5e84 	addi	r5,r5,10618
 4002d0c:	dc403015 	stw	r17,192(sp)
 4002d10:	d9402c15 	stw	r5,176(sp)
 4002d14:	b023883a 	mov	r17,r22
 4002d18:	04c001c4 	movi	r19,7
 4002d1c:	a82d883a 	mov	r22,r21
 4002d20:	902b883a 	mov	r21,r18
 4002d24:	8025883a 	mov	r18,r16
 4002d28:	dc002d17 	ldw	r16,180(sp)
 4002d2c:	00000306 	br	4002d3c <___vfprintf_internal_r+0x104c>
 4002d30:	8c7ffc04 	addi	r17,r17,-16
 4002d34:	42000204 	addi	r8,r8,8
 4002d38:	e440110e 	bge	fp,r17,4002d80 <___vfprintf_internal_r+0x1090>
 4002d3c:	18c00404 	addi	r3,r3,16
 4002d40:	10800044 	addi	r2,r2,1
 4002d44:	45000015 	stw	r20,0(r8)
 4002d48:	47000115 	stw	fp,4(r8)
 4002d4c:	d8c02015 	stw	r3,128(sp)
 4002d50:	d8801f15 	stw	r2,124(sp)
 4002d54:	98bff60e 	bge	r19,r2,4002d30 <__alt_data_end+0xfc002d30>
 4002d58:	d9801e04 	addi	r6,sp,120
 4002d5c:	b80b883a 	mov	r5,r23
 4002d60:	8009883a 	mov	r4,r16
 4002d64:	40094d00 	call	40094d0 <__sprint_r>
 4002d68:	103ce51e 	bne	r2,zero,4002100 <__alt_data_end+0xfc002100>
 4002d6c:	8c7ffc04 	addi	r17,r17,-16
 4002d70:	d8c02017 	ldw	r3,128(sp)
 4002d74:	d8801f17 	ldw	r2,124(sp)
 4002d78:	da000404 	addi	r8,sp,16
 4002d7c:	e47fef16 	blt	fp,r17,4002d3c <__alt_data_end+0xfc002d3c>
 4002d80:	9021883a 	mov	r16,r18
 4002d84:	a825883a 	mov	r18,r21
 4002d88:	b02b883a 	mov	r21,r22
 4002d8c:	882d883a 	mov	r22,r17
 4002d90:	dc403017 	ldw	r17,192(sp)
 4002d94:	d9002c17 	ldw	r4,176(sp)
 4002d98:	1d87883a 	add	r3,r3,r22
 4002d9c:	10800044 	addi	r2,r2,1
 4002da0:	41000015 	stw	r4,0(r8)
 4002da4:	45800115 	stw	r22,4(r8)
 4002da8:	d8c02015 	stw	r3,128(sp)
 4002dac:	d8801f15 	stw	r2,124(sp)
 4002db0:	010001c4 	movi	r4,7
 4002db4:	20818e16 	blt	r4,r2,40033f0 <___vfprintf_internal_r+0x1700>
 4002db8:	42000204 	addi	r8,r8,8
 4002dbc:	003e0f06 	br	40025fc <__alt_data_end+0xfc0025fc>
 4002dc0:	d9403317 	ldw	r5,204(sp)
 4002dc4:	00800044 	movi	r2,1
 4002dc8:	18c00044 	addi	r3,r3,1
 4002dcc:	1141530e 	bge	r2,r5,400331c <___vfprintf_internal_r+0x162c>
 4002dd0:	dc401f17 	ldw	r17,124(sp)
 4002dd4:	00800044 	movi	r2,1
 4002dd8:	40800115 	stw	r2,4(r8)
 4002ddc:	8c400044 	addi	r17,r17,1
 4002de0:	44000015 	stw	r16,0(r8)
 4002de4:	d8c02015 	stw	r3,128(sp)
 4002de8:	dc401f15 	stw	r17,124(sp)
 4002dec:	008001c4 	movi	r2,7
 4002df0:	14416b16 	blt	r2,r17,40033a0 <___vfprintf_internal_r+0x16b0>
 4002df4:	42000204 	addi	r8,r8,8
 4002df8:	d8803717 	ldw	r2,220(sp)
 4002dfc:	d9003417 	ldw	r4,208(sp)
 4002e00:	8c400044 	addi	r17,r17,1
 4002e04:	10c7883a 	add	r3,r2,r3
 4002e08:	40800115 	stw	r2,4(r8)
 4002e0c:	41000015 	stw	r4,0(r8)
 4002e10:	d8c02015 	stw	r3,128(sp)
 4002e14:	dc401f15 	stw	r17,124(sp)
 4002e18:	008001c4 	movi	r2,7
 4002e1c:	14416916 	blt	r2,r17,40033c4 <___vfprintf_internal_r+0x16d4>
 4002e20:	45800204 	addi	r22,r8,8
 4002e24:	d9003617 	ldw	r4,216(sp)
 4002e28:	d9403817 	ldw	r5,224(sp)
 4002e2c:	000d883a 	mov	r6,zero
 4002e30:	000f883a 	mov	r7,zero
 4002e34:	d8c03c15 	stw	r3,240(sp)
 4002e38:	400d4080 	call	400d408 <__eqdf2>
 4002e3c:	d8c03c17 	ldw	r3,240(sp)
 4002e40:	1000bc26 	beq	r2,zero,4003134 <___vfprintf_internal_r+0x1444>
 4002e44:	d9403317 	ldw	r5,204(sp)
 4002e48:	84000044 	addi	r16,r16,1
 4002e4c:	8c400044 	addi	r17,r17,1
 4002e50:	28bfffc4 	addi	r2,r5,-1
 4002e54:	1887883a 	add	r3,r3,r2
 4002e58:	b0800115 	stw	r2,4(r22)
 4002e5c:	b4000015 	stw	r16,0(r22)
 4002e60:	d8c02015 	stw	r3,128(sp)
 4002e64:	dc401f15 	stw	r17,124(sp)
 4002e68:	008001c4 	movi	r2,7
 4002e6c:	14414316 	blt	r2,r17,400337c <___vfprintf_internal_r+0x168c>
 4002e70:	b5800204 	addi	r22,r22,8
 4002e74:	d9003a17 	ldw	r4,232(sp)
 4002e78:	df0022c4 	addi	fp,sp,139
 4002e7c:	8c400044 	addi	r17,r17,1
 4002e80:	20c7883a 	add	r3,r4,r3
 4002e84:	b7000015 	stw	fp,0(r22)
 4002e88:	b1000115 	stw	r4,4(r22)
 4002e8c:	d8c02015 	stw	r3,128(sp)
 4002e90:	dc401f15 	stw	r17,124(sp)
 4002e94:	008001c4 	movi	r2,7
 4002e98:	14400e16 	blt	r2,r17,4002ed4 <___vfprintf_internal_r+0x11e4>
 4002e9c:	b2000204 	addi	r8,r22,8
 4002ea0:	003e1806 	br	4002704 <__alt_data_end+0xfc002704>
 4002ea4:	01010074 	movhi	r4,1025
 4002ea8:	210a5e84 	addi	r4,r4,10618
 4002eac:	d9002c15 	stw	r4,176(sp)
 4002eb0:	d9002c17 	ldw	r4,176(sp)
 4002eb4:	1c07883a 	add	r3,r3,r16
 4002eb8:	44000115 	stw	r16,4(r8)
 4002ebc:	41000015 	stw	r4,0(r8)
 4002ec0:	10800044 	addi	r2,r2,1
 4002ec4:	d8c02015 	stw	r3,128(sp)
 4002ec8:	d8801f15 	stw	r2,124(sp)
 4002ecc:	010001c4 	movi	r4,7
 4002ed0:	20be0b0e 	bge	r4,r2,4002700 <__alt_data_end+0xfc002700>
 4002ed4:	d9002d17 	ldw	r4,180(sp)
 4002ed8:	d9801e04 	addi	r6,sp,120
 4002edc:	b80b883a 	mov	r5,r23
 4002ee0:	40094d00 	call	40094d0 <__sprint_r>
 4002ee4:	103c861e 	bne	r2,zero,4002100 <__alt_data_end+0xfc002100>
 4002ee8:	d8c02017 	ldw	r3,128(sp)
 4002eec:	da000404 	addi	r8,sp,16
 4002ef0:	003e0406 	br	4002704 <__alt_data_end+0xfc002704>
 4002ef4:	d9002d17 	ldw	r4,180(sp)
 4002ef8:	d9801e04 	addi	r6,sp,120
 4002efc:	b80b883a 	mov	r5,r23
 4002f00:	40094d00 	call	40094d0 <__sprint_r>
 4002f04:	103e3b26 	beq	r2,zero,40027f4 <__alt_data_end+0xfc0027f4>
 4002f08:	003c7d06 	br	4002100 <__alt_data_end+0xfc002100>
 4002f0c:	d9002d17 	ldw	r4,180(sp)
 4002f10:	d9801e04 	addi	r6,sp,120
 4002f14:	b80b883a 	mov	r5,r23
 4002f18:	40094d00 	call	40094d0 <__sprint_r>
 4002f1c:	103c781e 	bne	r2,zero,4002100 <__alt_data_end+0xfc002100>
 4002f20:	d8c02017 	ldw	r3,128(sp)
 4002f24:	da000404 	addi	r8,sp,16
 4002f28:	003de906 	br	40026d0 <__alt_data_end+0xfc0026d0>
 4002f2c:	d9002d17 	ldw	r4,180(sp)
 4002f30:	d9801e04 	addi	r6,sp,120
 4002f34:	b80b883a 	mov	r5,r23
 4002f38:	40094d00 	call	40094d0 <__sprint_r>
 4002f3c:	103c701e 	bne	r2,zero,4002100 <__alt_data_end+0xfc002100>
 4002f40:	d8c02017 	ldw	r3,128(sp)
 4002f44:	da000404 	addi	r8,sp,16
 4002f48:	003d9b06 	br	40025b8 <__alt_data_end+0xfc0025b8>
 4002f4c:	d9002d17 	ldw	r4,180(sp)
 4002f50:	d9801e04 	addi	r6,sp,120
 4002f54:	b80b883a 	mov	r5,r23
 4002f58:	40094d00 	call	40094d0 <__sprint_r>
 4002f5c:	103c681e 	bne	r2,zero,4002100 <__alt_data_end+0xfc002100>
 4002f60:	d8c02017 	ldw	r3,128(sp)
 4002f64:	da000404 	addi	r8,sp,16
 4002f68:	003da106 	br	40025f0 <__alt_data_end+0xfc0025f0>
 4002f6c:	d9402a17 	ldw	r5,168(sp)
 4002f70:	d8002785 	stb	zero,158(sp)
 4002f74:	283f0616 	blt	r5,zero,4002b90 <__alt_data_end+0xfc002b90>
 4002f78:	00ffdfc4 	movi	r3,-129
 4002f7c:	9d84b03a 	or	r2,r19,r22
 4002f80:	90e4703a 	and	r18,r18,r3
 4002f84:	103c3b26 	beq	r2,zero,4002074 <__alt_data_end+0xfc002074>
 4002f88:	0039883a 	mov	fp,zero
 4002f8c:	003e5806 	br	40028f0 <__alt_data_end+0xfc0028f0>
 4002f90:	9080040c 	andi	r2,r18,16
 4002f94:	1001b326 	beq	r2,zero,4003664 <___vfprintf_internal_r+0x1974>
 4002f98:	d8c02e17 	ldw	r3,184(sp)
 4002f9c:	d9002a17 	ldw	r4,168(sp)
 4002fa0:	d8002785 	stb	zero,158(sp)
 4002fa4:	18800104 	addi	r2,r3,4
 4002fa8:	1cc00017 	ldw	r19,0(r3)
 4002fac:	002d883a 	mov	r22,zero
 4002fb0:	2001b516 	blt	r4,zero,4003688 <___vfprintf_internal_r+0x1998>
 4002fb4:	00ffdfc4 	movi	r3,-129
 4002fb8:	d8802e15 	stw	r2,184(sp)
 4002fbc:	90e4703a 	and	r18,r18,r3
 4002fc0:	983d0526 	beq	r19,zero,40023d8 <__alt_data_end+0xfc0023d8>
 4002fc4:	0039883a 	mov	fp,zero
 4002fc8:	003d0806 	br	40023ec <__alt_data_end+0xfc0023ec>
 4002fcc:	dc402617 	ldw	r17,152(sp)
 4002fd0:	0441d30e 	bge	zero,r17,4003720 <___vfprintf_internal_r+0x1a30>
 4002fd4:	dc403217 	ldw	r17,200(sp)
 4002fd8:	d8803317 	ldw	r2,204(sp)
 4002fdc:	1440010e 	bge	r2,r17,4002fe4 <___vfprintf_internal_r+0x12f4>
 4002fe0:	1023883a 	mov	r17,r2
 4002fe4:	04400a0e 	bge	zero,r17,4003010 <___vfprintf_internal_r+0x1320>
 4002fe8:	d8801f17 	ldw	r2,124(sp)
 4002fec:	1c47883a 	add	r3,r3,r17
 4002ff0:	44000015 	stw	r16,0(r8)
 4002ff4:	10800044 	addi	r2,r2,1
 4002ff8:	44400115 	stw	r17,4(r8)
 4002ffc:	d8c02015 	stw	r3,128(sp)
 4003000:	d8801f15 	stw	r2,124(sp)
 4003004:	010001c4 	movi	r4,7
 4003008:	20826516 	blt	r4,r2,40039a0 <___vfprintf_internal_r+0x1cb0>
 400300c:	42000204 	addi	r8,r8,8
 4003010:	88026116 	blt	r17,zero,4003998 <___vfprintf_internal_r+0x1ca8>
 4003014:	d9003217 	ldw	r4,200(sp)
 4003018:	2463c83a 	sub	r17,r4,r17
 400301c:	04407b0e 	bge	zero,r17,400320c <___vfprintf_internal_r+0x151c>
 4003020:	05800404 	movi	r22,16
 4003024:	d8801f17 	ldw	r2,124(sp)
 4003028:	b4419d0e 	bge	r22,r17,40036a0 <___vfprintf_internal_r+0x19b0>
 400302c:	01010074 	movhi	r4,1025
 4003030:	210a5e84 	addi	r4,r4,10618
 4003034:	d9002c15 	stw	r4,176(sp)
 4003038:	070001c4 	movi	fp,7
 400303c:	dcc02d17 	ldw	r19,180(sp)
 4003040:	00000306 	br	4003050 <___vfprintf_internal_r+0x1360>
 4003044:	42000204 	addi	r8,r8,8
 4003048:	8c7ffc04 	addi	r17,r17,-16
 400304c:	b441970e 	bge	r22,r17,40036ac <___vfprintf_internal_r+0x19bc>
 4003050:	18c00404 	addi	r3,r3,16
 4003054:	10800044 	addi	r2,r2,1
 4003058:	45000015 	stw	r20,0(r8)
 400305c:	45800115 	stw	r22,4(r8)
 4003060:	d8c02015 	stw	r3,128(sp)
 4003064:	d8801f15 	stw	r2,124(sp)
 4003068:	e0bff60e 	bge	fp,r2,4003044 <__alt_data_end+0xfc003044>
 400306c:	d9801e04 	addi	r6,sp,120
 4003070:	b80b883a 	mov	r5,r23
 4003074:	9809883a 	mov	r4,r19
 4003078:	40094d00 	call	40094d0 <__sprint_r>
 400307c:	103c201e 	bne	r2,zero,4002100 <__alt_data_end+0xfc002100>
 4003080:	d8c02017 	ldw	r3,128(sp)
 4003084:	d8801f17 	ldw	r2,124(sp)
 4003088:	da000404 	addi	r8,sp,16
 400308c:	003fee06 	br	4003048 <__alt_data_end+0xfc003048>
 4003090:	d9002d17 	ldw	r4,180(sp)
 4003094:	d9801e04 	addi	r6,sp,120
 4003098:	b80b883a 	mov	r5,r23
 400309c:	40094d00 	call	40094d0 <__sprint_r>
 40030a0:	103c171e 	bne	r2,zero,4002100 <__alt_data_end+0xfc002100>
 40030a4:	d8c02017 	ldw	r3,128(sp)
 40030a8:	df002787 	ldb	fp,158(sp)
 40030ac:	da000404 	addi	r8,sp,16
 40030b0:	003d3406 	br	4002584 <__alt_data_end+0xfc002584>
 40030b4:	9080040c 	andi	r2,r18,16
 40030b8:	10016126 	beq	r2,zero,4003640 <___vfprintf_internal_r+0x1950>
 40030bc:	d9402e17 	ldw	r5,184(sp)
 40030c0:	2cc00017 	ldw	r19,0(r5)
 40030c4:	29400104 	addi	r5,r5,4
 40030c8:	d9402e15 	stw	r5,184(sp)
 40030cc:	982dd7fa 	srai	r22,r19,31
 40030d0:	b005883a 	mov	r2,r22
 40030d4:	003c5a06 	br	4002240 <__alt_data_end+0xfc002240>
 40030d8:	9080040c 	andi	r2,r18,16
 40030dc:	10003526 	beq	r2,zero,40031b4 <___vfprintf_internal_r+0x14c4>
 40030e0:	d8c02e17 	ldw	r3,184(sp)
 40030e4:	d9002a17 	ldw	r4,168(sp)
 40030e8:	d8002785 	stb	zero,158(sp)
 40030ec:	18800104 	addi	r2,r3,4
 40030f0:	1cc00017 	ldw	r19,0(r3)
 40030f4:	002d883a 	mov	r22,zero
 40030f8:	20003716 	blt	r4,zero,40031d8 <___vfprintf_internal_r+0x14e8>
 40030fc:	00ffdfc4 	movi	r3,-129
 4003100:	d8802e15 	stw	r2,184(sp)
 4003104:	90e4703a 	and	r18,r18,r3
 4003108:	0039883a 	mov	fp,zero
 400310c:	983dd426 	beq	r19,zero,4002860 <__alt_data_end+0xfc002860>
 4003110:	00800244 	movi	r2,9
 4003114:	14fc5336 	bltu	r2,r19,4002264 <__alt_data_end+0xfc002264>
 4003118:	d8c02817 	ldw	r3,160(sp)
 400311c:	dc001dc4 	addi	r16,sp,119
 4003120:	9cc00c04 	addi	r19,r19,48
 4003124:	1c07c83a 	sub	r3,r3,r16
 4003128:	dcc01dc5 	stb	r19,119(sp)
 400312c:	d8c02b15 	stw	r3,172(sp)
 4003130:	003cc606 	br	400244c <__alt_data_end+0xfc00244c>
 4003134:	d8803317 	ldw	r2,204(sp)
 4003138:	143fffc4 	addi	r16,r2,-1
 400313c:	043f4d0e 	bge	zero,r16,4002e74 <__alt_data_end+0xfc002e74>
 4003140:	07000404 	movi	fp,16
 4003144:	e400810e 	bge	fp,r16,400334c <___vfprintf_internal_r+0x165c>
 4003148:	01410074 	movhi	r5,1025
 400314c:	294a5e84 	addi	r5,r5,10618
 4003150:	d9402c15 	stw	r5,176(sp)
 4003154:	01c001c4 	movi	r7,7
 4003158:	dcc02d17 	ldw	r19,180(sp)
 400315c:	00000306 	br	400316c <___vfprintf_internal_r+0x147c>
 4003160:	b5800204 	addi	r22,r22,8
 4003164:	843ffc04 	addi	r16,r16,-16
 4003168:	e4007b0e 	bge	fp,r16,4003358 <___vfprintf_internal_r+0x1668>
 400316c:	18c00404 	addi	r3,r3,16
 4003170:	8c400044 	addi	r17,r17,1
 4003174:	b5000015 	stw	r20,0(r22)
 4003178:	b7000115 	stw	fp,4(r22)
 400317c:	d8c02015 	stw	r3,128(sp)
 4003180:	dc401f15 	stw	r17,124(sp)
 4003184:	3c7ff60e 	bge	r7,r17,4003160 <__alt_data_end+0xfc003160>
 4003188:	d9801e04 	addi	r6,sp,120
 400318c:	b80b883a 	mov	r5,r23
 4003190:	9809883a 	mov	r4,r19
 4003194:	d9c03c15 	stw	r7,240(sp)
 4003198:	40094d00 	call	40094d0 <__sprint_r>
 400319c:	d9c03c17 	ldw	r7,240(sp)
 40031a0:	103bd71e 	bne	r2,zero,4002100 <__alt_data_end+0xfc002100>
 40031a4:	d8c02017 	ldw	r3,128(sp)
 40031a8:	dc401f17 	ldw	r17,124(sp)
 40031ac:	dd800404 	addi	r22,sp,16
 40031b0:	003fec06 	br	4003164 <__alt_data_end+0xfc003164>
 40031b4:	9080100c 	andi	r2,r18,64
 40031b8:	d8002785 	stb	zero,158(sp)
 40031bc:	10010e26 	beq	r2,zero,40035f8 <___vfprintf_internal_r+0x1908>
 40031c0:	d9402e17 	ldw	r5,184(sp)
 40031c4:	d8c02a17 	ldw	r3,168(sp)
 40031c8:	002d883a 	mov	r22,zero
 40031cc:	28800104 	addi	r2,r5,4
 40031d0:	2cc0000b 	ldhu	r19,0(r5)
 40031d4:	183fc90e 	bge	r3,zero,40030fc <__alt_data_end+0xfc0030fc>
 40031d8:	d8802e15 	stw	r2,184(sp)
 40031dc:	0039883a 	mov	fp,zero
 40031e0:	9d84b03a 	or	r2,r19,r22
 40031e4:	103c1e1e 	bne	r2,zero,4002260 <__alt_data_end+0xfc002260>
 40031e8:	00800044 	movi	r2,1
 40031ec:	003e6c06 	br	4002ba0 <__alt_data_end+0xfc002ba0>
 40031f0:	d9002d17 	ldw	r4,180(sp)
 40031f4:	d9801e04 	addi	r6,sp,120
 40031f8:	b80b883a 	mov	r5,r23
 40031fc:	40094d00 	call	40094d0 <__sprint_r>
 4003200:	103bbf1e 	bne	r2,zero,4002100 <__alt_data_end+0xfc002100>
 4003204:	d8c02017 	ldw	r3,128(sp)
 4003208:	da000404 	addi	r8,sp,16
 400320c:	d9003217 	ldw	r4,200(sp)
 4003210:	d8802617 	ldw	r2,152(sp)
 4003214:	d9403317 	ldw	r5,204(sp)
 4003218:	8123883a 	add	r17,r16,r4
 400321c:	11400216 	blt	r2,r5,4003228 <___vfprintf_internal_r+0x1538>
 4003220:	9100004c 	andi	r4,r18,1
 4003224:	20000d26 	beq	r4,zero,400325c <___vfprintf_internal_r+0x156c>
 4003228:	d9003717 	ldw	r4,220(sp)
 400322c:	d9403417 	ldw	r5,208(sp)
 4003230:	1907883a 	add	r3,r3,r4
 4003234:	d9001f17 	ldw	r4,124(sp)
 4003238:	41400015 	stw	r5,0(r8)
 400323c:	d9403717 	ldw	r5,220(sp)
 4003240:	21000044 	addi	r4,r4,1
 4003244:	d8c02015 	stw	r3,128(sp)
 4003248:	41400115 	stw	r5,4(r8)
 400324c:	d9001f15 	stw	r4,124(sp)
 4003250:	014001c4 	movi	r5,7
 4003254:	2901e816 	blt	r5,r4,40039f8 <___vfprintf_internal_r+0x1d08>
 4003258:	42000204 	addi	r8,r8,8
 400325c:	d9003317 	ldw	r4,204(sp)
 4003260:	8121883a 	add	r16,r16,r4
 4003264:	2085c83a 	sub	r2,r4,r2
 4003268:	8461c83a 	sub	r16,r16,r17
 400326c:	1400010e 	bge	r2,r16,4003274 <___vfprintf_internal_r+0x1584>
 4003270:	1021883a 	mov	r16,r2
 4003274:	04000a0e 	bge	zero,r16,40032a0 <___vfprintf_internal_r+0x15b0>
 4003278:	d9001f17 	ldw	r4,124(sp)
 400327c:	1c07883a 	add	r3,r3,r16
 4003280:	44400015 	stw	r17,0(r8)
 4003284:	21000044 	addi	r4,r4,1
 4003288:	44000115 	stw	r16,4(r8)
 400328c:	d8c02015 	stw	r3,128(sp)
 4003290:	d9001f15 	stw	r4,124(sp)
 4003294:	014001c4 	movi	r5,7
 4003298:	2901fb16 	blt	r5,r4,4003a88 <___vfprintf_internal_r+0x1d98>
 400329c:	42000204 	addi	r8,r8,8
 40032a0:	8001f716 	blt	r16,zero,4003a80 <___vfprintf_internal_r+0x1d90>
 40032a4:	1421c83a 	sub	r16,r2,r16
 40032a8:	043d160e 	bge	zero,r16,4002704 <__alt_data_end+0xfc002704>
 40032ac:	04400404 	movi	r17,16
 40032b0:	d8801f17 	ldw	r2,124(sp)
 40032b4:	8c3efb0e 	bge	r17,r16,4002ea4 <__alt_data_end+0xfc002ea4>
 40032b8:	01410074 	movhi	r5,1025
 40032bc:	294a5e84 	addi	r5,r5,10618
 40032c0:	d9402c15 	stw	r5,176(sp)
 40032c4:	058001c4 	movi	r22,7
 40032c8:	dcc02d17 	ldw	r19,180(sp)
 40032cc:	00000306 	br	40032dc <___vfprintf_internal_r+0x15ec>
 40032d0:	42000204 	addi	r8,r8,8
 40032d4:	843ffc04 	addi	r16,r16,-16
 40032d8:	8c3ef50e 	bge	r17,r16,4002eb0 <__alt_data_end+0xfc002eb0>
 40032dc:	18c00404 	addi	r3,r3,16
 40032e0:	10800044 	addi	r2,r2,1
 40032e4:	45000015 	stw	r20,0(r8)
 40032e8:	44400115 	stw	r17,4(r8)
 40032ec:	d8c02015 	stw	r3,128(sp)
 40032f0:	d8801f15 	stw	r2,124(sp)
 40032f4:	b0bff60e 	bge	r22,r2,40032d0 <__alt_data_end+0xfc0032d0>
 40032f8:	d9801e04 	addi	r6,sp,120
 40032fc:	b80b883a 	mov	r5,r23
 4003300:	9809883a 	mov	r4,r19
 4003304:	40094d00 	call	40094d0 <__sprint_r>
 4003308:	103b7d1e 	bne	r2,zero,4002100 <__alt_data_end+0xfc002100>
 400330c:	d8c02017 	ldw	r3,128(sp)
 4003310:	d8801f17 	ldw	r2,124(sp)
 4003314:	da000404 	addi	r8,sp,16
 4003318:	003fee06 	br	40032d4 <__alt_data_end+0xfc0032d4>
 400331c:	9088703a 	and	r4,r18,r2
 4003320:	203eab1e 	bne	r4,zero,4002dd0 <__alt_data_end+0xfc002dd0>
 4003324:	dc401f17 	ldw	r17,124(sp)
 4003328:	40800115 	stw	r2,4(r8)
 400332c:	44000015 	stw	r16,0(r8)
 4003330:	8c400044 	addi	r17,r17,1
 4003334:	d8c02015 	stw	r3,128(sp)
 4003338:	dc401f15 	stw	r17,124(sp)
 400333c:	008001c4 	movi	r2,7
 4003340:	14400e16 	blt	r2,r17,400337c <___vfprintf_internal_r+0x168c>
 4003344:	45800204 	addi	r22,r8,8
 4003348:	003eca06 	br	4002e74 <__alt_data_end+0xfc002e74>
 400334c:	01010074 	movhi	r4,1025
 4003350:	210a5e84 	addi	r4,r4,10618
 4003354:	d9002c15 	stw	r4,176(sp)
 4003358:	d8802c17 	ldw	r2,176(sp)
 400335c:	1c07883a 	add	r3,r3,r16
 4003360:	8c400044 	addi	r17,r17,1
 4003364:	b0800015 	stw	r2,0(r22)
 4003368:	b4000115 	stw	r16,4(r22)
 400336c:	d8c02015 	stw	r3,128(sp)
 4003370:	dc401f15 	stw	r17,124(sp)
 4003374:	008001c4 	movi	r2,7
 4003378:	147ebd0e 	bge	r2,r17,4002e70 <__alt_data_end+0xfc002e70>
 400337c:	d9002d17 	ldw	r4,180(sp)
 4003380:	d9801e04 	addi	r6,sp,120
 4003384:	b80b883a 	mov	r5,r23
 4003388:	40094d00 	call	40094d0 <__sprint_r>
 400338c:	103b5c1e 	bne	r2,zero,4002100 <__alt_data_end+0xfc002100>
 4003390:	d8c02017 	ldw	r3,128(sp)
 4003394:	dc401f17 	ldw	r17,124(sp)
 4003398:	dd800404 	addi	r22,sp,16
 400339c:	003eb506 	br	4002e74 <__alt_data_end+0xfc002e74>
 40033a0:	d9002d17 	ldw	r4,180(sp)
 40033a4:	d9801e04 	addi	r6,sp,120
 40033a8:	b80b883a 	mov	r5,r23
 40033ac:	40094d00 	call	40094d0 <__sprint_r>
 40033b0:	103b531e 	bne	r2,zero,4002100 <__alt_data_end+0xfc002100>
 40033b4:	d8c02017 	ldw	r3,128(sp)
 40033b8:	dc401f17 	ldw	r17,124(sp)
 40033bc:	da000404 	addi	r8,sp,16
 40033c0:	003e8d06 	br	4002df8 <__alt_data_end+0xfc002df8>
 40033c4:	d9002d17 	ldw	r4,180(sp)
 40033c8:	d9801e04 	addi	r6,sp,120
 40033cc:	b80b883a 	mov	r5,r23
 40033d0:	40094d00 	call	40094d0 <__sprint_r>
 40033d4:	103b4a1e 	bne	r2,zero,4002100 <__alt_data_end+0xfc002100>
 40033d8:	d8c02017 	ldw	r3,128(sp)
 40033dc:	dc401f17 	ldw	r17,124(sp)
 40033e0:	dd800404 	addi	r22,sp,16
 40033e4:	003e8f06 	br	4002e24 <__alt_data_end+0xfc002e24>
 40033e8:	0027883a 	mov	r19,zero
 40033ec:	003f4a06 	br	4003118 <__alt_data_end+0xfc003118>
 40033f0:	d9002d17 	ldw	r4,180(sp)
 40033f4:	d9801e04 	addi	r6,sp,120
 40033f8:	b80b883a 	mov	r5,r23
 40033fc:	40094d00 	call	40094d0 <__sprint_r>
 4003400:	103b3f1e 	bne	r2,zero,4002100 <__alt_data_end+0xfc002100>
 4003404:	d8c02017 	ldw	r3,128(sp)
 4003408:	da000404 	addi	r8,sp,16
 400340c:	003c7b06 	br	40025fc <__alt_data_end+0xfc0025fc>
 4003410:	d9402a17 	ldw	r5,168(sp)
 4003414:	04e7c83a 	sub	r19,zero,r19
 4003418:	07000b44 	movi	fp,45
 400341c:	9804c03a 	cmpne	r2,r19,zero
 4003420:	05adc83a 	sub	r22,zero,r22
 4003424:	df002785 	stb	fp,158(sp)
 4003428:	b0adc83a 	sub	r22,r22,r2
 400342c:	28017b16 	blt	r5,zero,4003a1c <___vfprintf_internal_r+0x1d2c>
 4003430:	00bfdfc4 	movi	r2,-129
 4003434:	90a4703a 	and	r18,r18,r2
 4003438:	003b8906 	br	4002260 <__alt_data_end+0xfc002260>
 400343c:	d9003617 	ldw	r4,216(sp)
 4003440:	d9403817 	ldw	r5,224(sp)
 4003444:	da003d15 	stw	r8,244(sp)
 4003448:	40090f40 	call	40090f4 <__fpclassifyd>
 400344c:	da003d17 	ldw	r8,244(sp)
 4003450:	1000f026 	beq	r2,zero,4003814 <___vfprintf_internal_r+0x1b24>
 4003454:	d9002a17 	ldw	r4,168(sp)
 4003458:	05bff7c4 	movi	r22,-33
 400345c:	00bfffc4 	movi	r2,-1
 4003460:	8dac703a 	and	r22,r17,r22
 4003464:	20820026 	beq	r4,r2,4003c68 <___vfprintf_internal_r+0x1f78>
 4003468:	008011c4 	movi	r2,71
 400346c:	b081f726 	beq	r22,r2,4003c4c <___vfprintf_internal_r+0x1f5c>
 4003470:	d9003817 	ldw	r4,224(sp)
 4003474:	90c04014 	ori	r3,r18,256
 4003478:	d8c02c15 	stw	r3,176(sp)
 400347c:	20021516 	blt	r4,zero,4003cd4 <___vfprintf_internal_r+0x1fe4>
 4003480:	dcc03817 	ldw	r19,224(sp)
 4003484:	d8002905 	stb	zero,164(sp)
 4003488:	00801984 	movi	r2,102
 400348c:	8881f926 	beq	r17,r2,4003c74 <___vfprintf_internal_r+0x1f84>
 4003490:	00801184 	movi	r2,70
 4003494:	88821c26 	beq	r17,r2,4003d08 <___vfprintf_internal_r+0x2018>
 4003498:	00801144 	movi	r2,69
 400349c:	b081ef26 	beq	r22,r2,4003c5c <___vfprintf_internal_r+0x1f6c>
 40034a0:	d8c02a17 	ldw	r3,168(sp)
 40034a4:	d8802104 	addi	r2,sp,132
 40034a8:	d8800315 	stw	r2,12(sp)
 40034ac:	d9403617 	ldw	r5,216(sp)
 40034b0:	d8802504 	addi	r2,sp,148
 40034b4:	d9002d17 	ldw	r4,180(sp)
 40034b8:	d8800215 	stw	r2,8(sp)
 40034bc:	d8802604 	addi	r2,sp,152
 40034c0:	d8c00015 	stw	r3,0(sp)
 40034c4:	d8800115 	stw	r2,4(sp)
 40034c8:	01c00084 	movi	r7,2
 40034cc:	980d883a 	mov	r6,r19
 40034d0:	d8c03c15 	stw	r3,240(sp)
 40034d4:	da003d15 	stw	r8,244(sp)
 40034d8:	40044200 	call	4004420 <_dtoa_r>
 40034dc:	1021883a 	mov	r16,r2
 40034e0:	008019c4 	movi	r2,103
 40034e4:	d8c03c17 	ldw	r3,240(sp)
 40034e8:	da003d17 	ldw	r8,244(sp)
 40034ec:	88817126 	beq	r17,r2,4003ab4 <___vfprintf_internal_r+0x1dc4>
 40034f0:	008011c4 	movi	r2,71
 40034f4:	88829126 	beq	r17,r2,4003f3c <___vfprintf_internal_r+0x224c>
 40034f8:	80f9883a 	add	fp,r16,r3
 40034fc:	d9003617 	ldw	r4,216(sp)
 4003500:	000d883a 	mov	r6,zero
 4003504:	000f883a 	mov	r7,zero
 4003508:	980b883a 	mov	r5,r19
 400350c:	da003d15 	stw	r8,244(sp)
 4003510:	400d4080 	call	400d408 <__eqdf2>
 4003514:	da003d17 	ldw	r8,244(sp)
 4003518:	10018d26 	beq	r2,zero,4003b50 <___vfprintf_internal_r+0x1e60>
 400351c:	d8802117 	ldw	r2,132(sp)
 4003520:	1700062e 	bgeu	r2,fp,400353c <___vfprintf_internal_r+0x184c>
 4003524:	01000c04 	movi	r4,48
 4003528:	10c00044 	addi	r3,r2,1
 400352c:	d8c02115 	stw	r3,132(sp)
 4003530:	11000005 	stb	r4,0(r2)
 4003534:	d8802117 	ldw	r2,132(sp)
 4003538:	173ffb36 	bltu	r2,fp,4003528 <__alt_data_end+0xfc003528>
 400353c:	1405c83a 	sub	r2,r2,r16
 4003540:	d8803315 	stw	r2,204(sp)
 4003544:	008011c4 	movi	r2,71
 4003548:	b0817626 	beq	r22,r2,4003b24 <___vfprintf_internal_r+0x1e34>
 400354c:	00801944 	movi	r2,101
 4003550:	1442800e 	bge	r2,r17,4003f54 <___vfprintf_internal_r+0x2264>
 4003554:	d8c02617 	ldw	r3,152(sp)
 4003558:	00801984 	movi	r2,102
 400355c:	d8c03215 	stw	r3,200(sp)
 4003560:	8881fe26 	beq	r17,r2,4003d5c <___vfprintf_internal_r+0x206c>
 4003564:	d8c03217 	ldw	r3,200(sp)
 4003568:	d9003317 	ldw	r4,204(sp)
 400356c:	1901dd16 	blt	r3,r4,4003ce4 <___vfprintf_internal_r+0x1ff4>
 4003570:	9480004c 	andi	r18,r18,1
 4003574:	90022b1e 	bne	r18,zero,4003e24 <___vfprintf_internal_r+0x2134>
 4003578:	1805883a 	mov	r2,r3
 400357c:	18028316 	blt	r3,zero,4003f8c <___vfprintf_internal_r+0x229c>
 4003580:	d8c03217 	ldw	r3,200(sp)
 4003584:	044019c4 	movi	r17,103
 4003588:	d8c02b15 	stw	r3,172(sp)
 400358c:	df002907 	ldb	fp,164(sp)
 4003590:	e001531e 	bne	fp,zero,4003ae0 <___vfprintf_internal_r+0x1df0>
 4003594:	df002783 	ldbu	fp,158(sp)
 4003598:	d8802915 	stw	r2,164(sp)
 400359c:	dc802c17 	ldw	r18,176(sp)
 40035a0:	d8002a15 	stw	zero,168(sp)
 40035a4:	003baf06 	br	4002464 <__alt_data_end+0xfc002464>
 40035a8:	d8c02e17 	ldw	r3,184(sp)
 40035ac:	d9002e17 	ldw	r4,184(sp)
 40035b0:	d9402e17 	ldw	r5,184(sp)
 40035b4:	18c00017 	ldw	r3,0(r3)
 40035b8:	21000117 	ldw	r4,4(r4)
 40035bc:	29400204 	addi	r5,r5,8
 40035c0:	d8c03615 	stw	r3,216(sp)
 40035c4:	d9003815 	stw	r4,224(sp)
 40035c8:	d9402e15 	stw	r5,184(sp)
 40035cc:	003b5006 	br	4002310 <__alt_data_end+0xfc002310>
 40035d0:	ac400007 	ldb	r17,0(r21)
 40035d4:	003a2806 	br	4001e78 <__alt_data_end+0xfc001e78>
 40035d8:	9080100c 	andi	r2,r18,64
 40035dc:	1000a826 	beq	r2,zero,4003880 <___vfprintf_internal_r+0x1b90>
 40035e0:	d8c02e17 	ldw	r3,184(sp)
 40035e4:	002d883a 	mov	r22,zero
 40035e8:	1cc0000b 	ldhu	r19,0(r3)
 40035ec:	18c00104 	addi	r3,r3,4
 40035f0:	d8c02e15 	stw	r3,184(sp)
 40035f4:	003caf06 	br	40028b4 <__alt_data_end+0xfc0028b4>
 40035f8:	d9002e17 	ldw	r4,184(sp)
 40035fc:	d9402a17 	ldw	r5,168(sp)
 4003600:	002d883a 	mov	r22,zero
 4003604:	20800104 	addi	r2,r4,4
 4003608:	24c00017 	ldw	r19,0(r4)
 400360c:	283ebb0e 	bge	r5,zero,40030fc <__alt_data_end+0xfc0030fc>
 4003610:	003ef106 	br	40031d8 <__alt_data_end+0xfc0031d8>
 4003614:	9080040c 	andi	r2,r18,16
 4003618:	1000921e 	bne	r2,zero,4003864 <___vfprintf_internal_r+0x1b74>
 400361c:	9480100c 	andi	r18,r18,64
 4003620:	90013926 	beq	r18,zero,4003b08 <___vfprintf_internal_r+0x1e18>
 4003624:	d9402e17 	ldw	r5,184(sp)
 4003628:	d8c02f17 	ldw	r3,188(sp)
 400362c:	28800017 	ldw	r2,0(r5)
 4003630:	29400104 	addi	r5,r5,4
 4003634:	d9402e15 	stw	r5,184(sp)
 4003638:	10c0000d 	sth	r3,0(r2)
 400363c:	0039e406 	br	4001dd0 <__alt_data_end+0xfc001dd0>
 4003640:	9080100c 	andi	r2,r18,64
 4003644:	10008026 	beq	r2,zero,4003848 <___vfprintf_internal_r+0x1b58>
 4003648:	d8802e17 	ldw	r2,184(sp)
 400364c:	14c0000f 	ldh	r19,0(r2)
 4003650:	10800104 	addi	r2,r2,4
 4003654:	d8802e15 	stw	r2,184(sp)
 4003658:	982dd7fa 	srai	r22,r19,31
 400365c:	b005883a 	mov	r2,r22
 4003660:	003af706 	br	4002240 <__alt_data_end+0xfc002240>
 4003664:	9080100c 	andi	r2,r18,64
 4003668:	d8002785 	stb	zero,158(sp)
 400366c:	10008a1e 	bne	r2,zero,4003898 <___vfprintf_internal_r+0x1ba8>
 4003670:	d9002e17 	ldw	r4,184(sp)
 4003674:	d9402a17 	ldw	r5,168(sp)
 4003678:	002d883a 	mov	r22,zero
 400367c:	20800104 	addi	r2,r4,4
 4003680:	24c00017 	ldw	r19,0(r4)
 4003684:	283e4b0e 	bge	r5,zero,4002fb4 <__alt_data_end+0xfc002fb4>
 4003688:	9d86b03a 	or	r3,r19,r22
 400368c:	d8802e15 	stw	r2,184(sp)
 4003690:	183e4c1e 	bne	r3,zero,4002fc4 <__alt_data_end+0xfc002fc4>
 4003694:	0039883a 	mov	fp,zero
 4003698:	0005883a 	mov	r2,zero
 400369c:	003d4006 	br	4002ba0 <__alt_data_end+0xfc002ba0>
 40036a0:	01410074 	movhi	r5,1025
 40036a4:	294a5e84 	addi	r5,r5,10618
 40036a8:	d9402c15 	stw	r5,176(sp)
 40036ac:	d9402c17 	ldw	r5,176(sp)
 40036b0:	1c47883a 	add	r3,r3,r17
 40036b4:	10800044 	addi	r2,r2,1
 40036b8:	41400015 	stw	r5,0(r8)
 40036bc:	44400115 	stw	r17,4(r8)
 40036c0:	d8c02015 	stw	r3,128(sp)
 40036c4:	d8801f15 	stw	r2,124(sp)
 40036c8:	010001c4 	movi	r4,7
 40036cc:	20bec816 	blt	r4,r2,40031f0 <__alt_data_end+0xfc0031f0>
 40036d0:	42000204 	addi	r8,r8,8
 40036d4:	003ecd06 	br	400320c <__alt_data_end+0xfc00320c>
 40036d8:	d9002a17 	ldw	r4,168(sp)
 40036dc:	d8002785 	stb	zero,158(sp)
 40036e0:	203d2d16 	blt	r4,zero,4002b98 <__alt_data_end+0xfc002b98>
 40036e4:	00bfdfc4 	movi	r2,-129
 40036e8:	90a4703a 	and	r18,r18,r2
 40036ec:	003a6106 	br	4002074 <__alt_data_end+0xfc002074>
 40036f0:	01010074 	movhi	r4,1025
 40036f4:	210a5e84 	addi	r4,r4,10618
 40036f8:	d9002c15 	stw	r4,176(sp)
 40036fc:	003bea06 	br	40026a8 <__alt_data_end+0xfc0026a8>
 4003700:	d9002d17 	ldw	r4,180(sp)
 4003704:	d9801e04 	addi	r6,sp,120
 4003708:	b80b883a 	mov	r5,r23
 400370c:	40094d00 	call	40094d0 <__sprint_r>
 4003710:	103a7b1e 	bne	r2,zero,4002100 <__alt_data_end+0xfc002100>
 4003714:	d8c02017 	ldw	r3,128(sp)
 4003718:	da000404 	addi	r8,sp,16
 400371c:	003d4106 	br	4002c24 <__alt_data_end+0xfc002c24>
 4003720:	d8801f17 	ldw	r2,124(sp)
 4003724:	01410074 	movhi	r5,1025
 4003728:	01000044 	movi	r4,1
 400372c:	18c00044 	addi	r3,r3,1
 4003730:	10800044 	addi	r2,r2,1
 4003734:	294a5e04 	addi	r5,r5,10616
 4003738:	41000115 	stw	r4,4(r8)
 400373c:	41400015 	stw	r5,0(r8)
 4003740:	d8c02015 	stw	r3,128(sp)
 4003744:	d8801f15 	stw	r2,124(sp)
 4003748:	010001c4 	movi	r4,7
 400374c:	20805c16 	blt	r4,r2,40038c0 <___vfprintf_internal_r+0x1bd0>
 4003750:	42000204 	addi	r8,r8,8
 4003754:	8800041e 	bne	r17,zero,4003768 <___vfprintf_internal_r+0x1a78>
 4003758:	d8803317 	ldw	r2,204(sp)
 400375c:	1000021e 	bne	r2,zero,4003768 <___vfprintf_internal_r+0x1a78>
 4003760:	9080004c 	andi	r2,r18,1
 4003764:	103be726 	beq	r2,zero,4002704 <__alt_data_end+0xfc002704>
 4003768:	d9003717 	ldw	r4,220(sp)
 400376c:	d8801f17 	ldw	r2,124(sp)
 4003770:	d9403417 	ldw	r5,208(sp)
 4003774:	20c7883a 	add	r3,r4,r3
 4003778:	10800044 	addi	r2,r2,1
 400377c:	41000115 	stw	r4,4(r8)
 4003780:	41400015 	stw	r5,0(r8)
 4003784:	d8c02015 	stw	r3,128(sp)
 4003788:	d8801f15 	stw	r2,124(sp)
 400378c:	010001c4 	movi	r4,7
 4003790:	20812116 	blt	r4,r2,4003c18 <___vfprintf_internal_r+0x1f28>
 4003794:	42000204 	addi	r8,r8,8
 4003798:	0463c83a 	sub	r17,zero,r17
 400379c:	0440730e 	bge	zero,r17,400396c <___vfprintf_internal_r+0x1c7c>
 40037a0:	05800404 	movi	r22,16
 40037a4:	b440860e 	bge	r22,r17,40039c0 <___vfprintf_internal_r+0x1cd0>
 40037a8:	01410074 	movhi	r5,1025
 40037ac:	294a5e84 	addi	r5,r5,10618
 40037b0:	d9402c15 	stw	r5,176(sp)
 40037b4:	070001c4 	movi	fp,7
 40037b8:	dcc02d17 	ldw	r19,180(sp)
 40037bc:	00000306 	br	40037cc <___vfprintf_internal_r+0x1adc>
 40037c0:	42000204 	addi	r8,r8,8
 40037c4:	8c7ffc04 	addi	r17,r17,-16
 40037c8:	b440800e 	bge	r22,r17,40039cc <___vfprintf_internal_r+0x1cdc>
 40037cc:	18c00404 	addi	r3,r3,16
 40037d0:	10800044 	addi	r2,r2,1
 40037d4:	45000015 	stw	r20,0(r8)
 40037d8:	45800115 	stw	r22,4(r8)
 40037dc:	d8c02015 	stw	r3,128(sp)
 40037e0:	d8801f15 	stw	r2,124(sp)
 40037e4:	e0bff60e 	bge	fp,r2,40037c0 <__alt_data_end+0xfc0037c0>
 40037e8:	d9801e04 	addi	r6,sp,120
 40037ec:	b80b883a 	mov	r5,r23
 40037f0:	9809883a 	mov	r4,r19
 40037f4:	40094d00 	call	40094d0 <__sprint_r>
 40037f8:	103a411e 	bne	r2,zero,4002100 <__alt_data_end+0xfc002100>
 40037fc:	d8c02017 	ldw	r3,128(sp)
 4003800:	d8801f17 	ldw	r2,124(sp)
 4003804:	da000404 	addi	r8,sp,16
 4003808:	003fee06 	br	40037c4 <__alt_data_end+0xfc0037c4>
 400380c:	00bfffc4 	movi	r2,-1
 4003810:	003a3f06 	br	4002110 <__alt_data_end+0xfc002110>
 4003814:	008011c4 	movi	r2,71
 4003818:	1440b816 	blt	r2,r17,4003afc <___vfprintf_internal_r+0x1e0c>
 400381c:	04010074 	movhi	r16,1025
 4003820:	840a5004 	addi	r16,r16,10560
 4003824:	00c000c4 	movi	r3,3
 4003828:	00bfdfc4 	movi	r2,-129
 400382c:	d8c02915 	stw	r3,164(sp)
 4003830:	90a4703a 	and	r18,r18,r2
 4003834:	df002783 	ldbu	fp,158(sp)
 4003838:	d8c02b15 	stw	r3,172(sp)
 400383c:	d8002a15 	stw	zero,168(sp)
 4003840:	d8003215 	stw	zero,200(sp)
 4003844:	003b0706 	br	4002464 <__alt_data_end+0xfc002464>
 4003848:	d8c02e17 	ldw	r3,184(sp)
 400384c:	1cc00017 	ldw	r19,0(r3)
 4003850:	18c00104 	addi	r3,r3,4
 4003854:	d8c02e15 	stw	r3,184(sp)
 4003858:	982dd7fa 	srai	r22,r19,31
 400385c:	b005883a 	mov	r2,r22
 4003860:	003a7706 	br	4002240 <__alt_data_end+0xfc002240>
 4003864:	d8c02e17 	ldw	r3,184(sp)
 4003868:	d9002f17 	ldw	r4,188(sp)
 400386c:	18800017 	ldw	r2,0(r3)
 4003870:	18c00104 	addi	r3,r3,4
 4003874:	d8c02e15 	stw	r3,184(sp)
 4003878:	11000015 	stw	r4,0(r2)
 400387c:	00395406 	br	4001dd0 <__alt_data_end+0xfc001dd0>
 4003880:	d9002e17 	ldw	r4,184(sp)
 4003884:	002d883a 	mov	r22,zero
 4003888:	24c00017 	ldw	r19,0(r4)
 400388c:	21000104 	addi	r4,r4,4
 4003890:	d9002e15 	stw	r4,184(sp)
 4003894:	003c0706 	br	40028b4 <__alt_data_end+0xfc0028b4>
 4003898:	d9402e17 	ldw	r5,184(sp)
 400389c:	d8c02a17 	ldw	r3,168(sp)
 40038a0:	002d883a 	mov	r22,zero
 40038a4:	28800104 	addi	r2,r5,4
 40038a8:	2cc0000b 	ldhu	r19,0(r5)
 40038ac:	183dc10e 	bge	r3,zero,4002fb4 <__alt_data_end+0xfc002fb4>
 40038b0:	003f7506 	br	4003688 <__alt_data_end+0xfc003688>
 40038b4:	04010074 	movhi	r16,1025
 40038b8:	840a4e04 	addi	r16,r16,10552
 40038bc:	003aa706 	br	400235c <__alt_data_end+0xfc00235c>
 40038c0:	d9002d17 	ldw	r4,180(sp)
 40038c4:	d9801e04 	addi	r6,sp,120
 40038c8:	b80b883a 	mov	r5,r23
 40038cc:	40094d00 	call	40094d0 <__sprint_r>
 40038d0:	103a0b1e 	bne	r2,zero,4002100 <__alt_data_end+0xfc002100>
 40038d4:	dc402617 	ldw	r17,152(sp)
 40038d8:	d8c02017 	ldw	r3,128(sp)
 40038dc:	da000404 	addi	r8,sp,16
 40038e0:	003f9c06 	br	4003754 <__alt_data_end+0xfc003754>
 40038e4:	ac400043 	ldbu	r17,1(r21)
 40038e8:	84000814 	ori	r16,r16,32
 40038ec:	ad400044 	addi	r21,r21,1
 40038f0:	8c403fcc 	andi	r17,r17,255
 40038f4:	8c40201c 	xori	r17,r17,128
 40038f8:	8c7fe004 	addi	r17,r17,-128
 40038fc:	00395e06 	br	4001e78 <__alt_data_end+0xfc001e78>
 4003900:	d8c02e15 	stw	r3,184(sp)
 4003904:	0039883a 	mov	fp,zero
 4003908:	003e3506 	br	40031e0 <__alt_data_end+0xfc0031e0>
 400390c:	d9002d17 	ldw	r4,180(sp)
 4003910:	d9801e04 	addi	r6,sp,120
 4003914:	b80b883a 	mov	r5,r23
 4003918:	40094d00 	call	40094d0 <__sprint_r>
 400391c:	1039f81e 	bne	r2,zero,4002100 <__alt_data_end+0xfc002100>
 4003920:	d8c02017 	ldw	r3,128(sp)
 4003924:	da000404 	addi	r8,sp,16
 4003928:	003cd006 	br	4002c6c <__alt_data_end+0xfc002c6c>
 400392c:	8009883a 	mov	r4,r16
 4003930:	df003d15 	stw	fp,244(sp)
 4003934:	4001c580 	call	4001c58 <strlen>
 4003938:	d8802b15 	stw	r2,172(sp)
 400393c:	da003d17 	ldw	r8,244(sp)
 4003940:	103c200e 	bge	r2,zero,40029c4 <__alt_data_end+0xfc0029c4>
 4003944:	0005883a 	mov	r2,zero
 4003948:	003c1e06 	br	40029c4 <__alt_data_end+0xfc0029c4>
 400394c:	d9002d17 	ldw	r4,180(sp)
 4003950:	d9801e04 	addi	r6,sp,120
 4003954:	b80b883a 	mov	r5,r23
 4003958:	40094d00 	call	40094d0 <__sprint_r>
 400395c:	1039e81e 	bne	r2,zero,4002100 <__alt_data_end+0xfc002100>
 4003960:	d8c02017 	ldw	r3,128(sp)
 4003964:	d8801f17 	ldw	r2,124(sp)
 4003968:	da000404 	addi	r8,sp,16
 400396c:	d9403317 	ldw	r5,204(sp)
 4003970:	10800044 	addi	r2,r2,1
 4003974:	44000015 	stw	r16,0(r8)
 4003978:	28c7883a 	add	r3,r5,r3
 400397c:	003b5b06 	br	40026ec <__alt_data_end+0xfc0026ec>
 4003980:	01010074 	movhi	r4,1025
 4003984:	210a6284 	addi	r4,r4,10634
 4003988:	d9003515 	stw	r4,212(sp)
 400398c:	003af206 	br	4002558 <__alt_data_end+0xfc002558>
 4003990:	013fffc4 	movi	r4,-1
 4003994:	003a0806 	br	40021b8 <__alt_data_end+0xfc0021b8>
 4003998:	0023883a 	mov	r17,zero
 400399c:	003d9d06 	br	4003014 <__alt_data_end+0xfc003014>
 40039a0:	d9002d17 	ldw	r4,180(sp)
 40039a4:	d9801e04 	addi	r6,sp,120
 40039a8:	b80b883a 	mov	r5,r23
 40039ac:	40094d00 	call	40094d0 <__sprint_r>
 40039b0:	1039d31e 	bne	r2,zero,4002100 <__alt_data_end+0xfc002100>
 40039b4:	d8c02017 	ldw	r3,128(sp)
 40039b8:	da000404 	addi	r8,sp,16
 40039bc:	003d9406 	br	4003010 <__alt_data_end+0xfc003010>
 40039c0:	01010074 	movhi	r4,1025
 40039c4:	210a5e84 	addi	r4,r4,10618
 40039c8:	d9002c15 	stw	r4,176(sp)
 40039cc:	d9002c17 	ldw	r4,176(sp)
 40039d0:	1c47883a 	add	r3,r3,r17
 40039d4:	10800044 	addi	r2,r2,1
 40039d8:	41000015 	stw	r4,0(r8)
 40039dc:	44400115 	stw	r17,4(r8)
 40039e0:	d8c02015 	stw	r3,128(sp)
 40039e4:	d8801f15 	stw	r2,124(sp)
 40039e8:	010001c4 	movi	r4,7
 40039ec:	20bfd716 	blt	r4,r2,400394c <__alt_data_end+0xfc00394c>
 40039f0:	42000204 	addi	r8,r8,8
 40039f4:	003fdd06 	br	400396c <__alt_data_end+0xfc00396c>
 40039f8:	d9002d17 	ldw	r4,180(sp)
 40039fc:	d9801e04 	addi	r6,sp,120
 4003a00:	b80b883a 	mov	r5,r23
 4003a04:	40094d00 	call	40094d0 <__sprint_r>
 4003a08:	1039bd1e 	bne	r2,zero,4002100 <__alt_data_end+0xfc002100>
 4003a0c:	d8802617 	ldw	r2,152(sp)
 4003a10:	d8c02017 	ldw	r3,128(sp)
 4003a14:	da000404 	addi	r8,sp,16
 4003a18:	003e1006 	br	400325c <__alt_data_end+0xfc00325c>
 4003a1c:	00800044 	movi	r2,1
 4003a20:	10803fcc 	andi	r2,r2,255
 4003a24:	00c00044 	movi	r3,1
 4003a28:	10fa0d26 	beq	r2,r3,4002260 <__alt_data_end+0xfc002260>
 4003a2c:	00c00084 	movi	r3,2
 4003a30:	10fbaf26 	beq	r2,r3,40028f0 <__alt_data_end+0xfc0028f0>
 4003a34:	003a6d06 	br	40023ec <__alt_data_end+0xfc0023ec>
 4003a38:	01010074 	movhi	r4,1025
 4003a3c:	210a6284 	addi	r4,r4,10634
 4003a40:	d9003515 	stw	r4,212(sp)
 4003a44:	003b5406 	br	4002798 <__alt_data_end+0xfc002798>
 4003a48:	d8802a17 	ldw	r2,168(sp)
 4003a4c:	00c00184 	movi	r3,6
 4003a50:	1880012e 	bgeu	r3,r2,4003a58 <___vfprintf_internal_r+0x1d68>
 4003a54:	1805883a 	mov	r2,r3
 4003a58:	d8802b15 	stw	r2,172(sp)
 4003a5c:	1000ef16 	blt	r2,zero,4003e1c <___vfprintf_internal_r+0x212c>
 4003a60:	04010074 	movhi	r16,1025
 4003a64:	d8802915 	stw	r2,164(sp)
 4003a68:	dcc02e15 	stw	r19,184(sp)
 4003a6c:	d8002a15 	stw	zero,168(sp)
 4003a70:	d8003215 	stw	zero,200(sp)
 4003a74:	840a5c04 	addi	r16,r16,10608
 4003a78:	0039883a 	mov	fp,zero
 4003a7c:	003a8006 	br	4002480 <__alt_data_end+0xfc002480>
 4003a80:	0021883a 	mov	r16,zero
 4003a84:	003e0706 	br	40032a4 <__alt_data_end+0xfc0032a4>
 4003a88:	d9002d17 	ldw	r4,180(sp)
 4003a8c:	d9801e04 	addi	r6,sp,120
 4003a90:	b80b883a 	mov	r5,r23
 4003a94:	40094d00 	call	40094d0 <__sprint_r>
 4003a98:	1039991e 	bne	r2,zero,4002100 <__alt_data_end+0xfc002100>
 4003a9c:	d8802617 	ldw	r2,152(sp)
 4003aa0:	d9403317 	ldw	r5,204(sp)
 4003aa4:	d8c02017 	ldw	r3,128(sp)
 4003aa8:	da000404 	addi	r8,sp,16
 4003aac:	2885c83a 	sub	r2,r5,r2
 4003ab0:	003dfb06 	br	40032a0 <__alt_data_end+0xfc0032a0>
 4003ab4:	9080004c 	andi	r2,r18,1
 4003ab8:	103e8f1e 	bne	r2,zero,40034f8 <__alt_data_end+0xfc0034f8>
 4003abc:	d8802117 	ldw	r2,132(sp)
 4003ac0:	003e9e06 	br	400353c <__alt_data_end+0xfc00353c>
 4003ac4:	1025883a 	mov	r18,r2
 4003ac8:	0039883a 	mov	fp,zero
 4003acc:	00800084 	movi	r2,2
 4003ad0:	003fd306 	br	4003a20 <__alt_data_end+0xfc003a20>
 4003ad4:	07000b44 	movi	fp,45
 4003ad8:	df002785 	stb	fp,158(sp)
 4003adc:	003a1b06 	br	400234c <__alt_data_end+0xfc00234c>
 4003ae0:	00c00b44 	movi	r3,45
 4003ae4:	d8c02785 	stb	r3,158(sp)
 4003ae8:	d8802915 	stw	r2,164(sp)
 4003aec:	dc802c17 	ldw	r18,176(sp)
 4003af0:	d8002a15 	stw	zero,168(sp)
 4003af4:	07000b44 	movi	fp,45
 4003af8:	003a5e06 	br	4002474 <__alt_data_end+0xfc002474>
 4003afc:	04010074 	movhi	r16,1025
 4003b00:	840a5104 	addi	r16,r16,10564
 4003b04:	003f4706 	br	4003824 <__alt_data_end+0xfc003824>
 4003b08:	d9002e17 	ldw	r4,184(sp)
 4003b0c:	d9402f17 	ldw	r5,188(sp)
 4003b10:	20800017 	ldw	r2,0(r4)
 4003b14:	21000104 	addi	r4,r4,4
 4003b18:	d9002e15 	stw	r4,184(sp)
 4003b1c:	11400015 	stw	r5,0(r2)
 4003b20:	0038ab06 	br	4001dd0 <__alt_data_end+0xfc001dd0>
 4003b24:	dd802617 	ldw	r22,152(sp)
 4003b28:	00bfff44 	movi	r2,-3
 4003b2c:	b0801c16 	blt	r22,r2,4003ba0 <___vfprintf_internal_r+0x1eb0>
 4003b30:	d9402a17 	ldw	r5,168(sp)
 4003b34:	2d801a16 	blt	r5,r22,4003ba0 <___vfprintf_internal_r+0x1eb0>
 4003b38:	dd803215 	stw	r22,200(sp)
 4003b3c:	003e8906 	br	4003564 <__alt_data_end+0xfc003564>
 4003b40:	01010074 	movhi	r4,1025
 4003b44:	210a5e84 	addi	r4,r4,10618
 4003b48:	d9002c15 	stw	r4,176(sp)
 4003b4c:	003c9106 	br	4002d94 <__alt_data_end+0xfc002d94>
 4003b50:	e005883a 	mov	r2,fp
 4003b54:	003e7906 	br	400353c <__alt_data_end+0xfc00353c>
 4003b58:	d9002a17 	ldw	r4,168(sp)
 4003b5c:	df002783 	ldbu	fp,158(sp)
 4003b60:	dcc02e15 	stw	r19,184(sp)
 4003b64:	d9002915 	stw	r4,164(sp)
 4003b68:	d9002b15 	stw	r4,172(sp)
 4003b6c:	d8002a15 	stw	zero,168(sp)
 4003b70:	d8003215 	stw	zero,200(sp)
 4003b74:	003a3b06 	br	4002464 <__alt_data_end+0xfc002464>
 4003b78:	9080004c 	andi	r2,r18,1
 4003b7c:	0039883a 	mov	fp,zero
 4003b80:	10000426 	beq	r2,zero,4003b94 <___vfprintf_internal_r+0x1ea4>
 4003b84:	00800c04 	movi	r2,48
 4003b88:	dc001dc4 	addi	r16,sp,119
 4003b8c:	d8801dc5 	stb	r2,119(sp)
 4003b90:	003b6406 	br	4002924 <__alt_data_end+0xfc002924>
 4003b94:	d8002b15 	stw	zero,172(sp)
 4003b98:	dc001e04 	addi	r16,sp,120
 4003b9c:	003a2b06 	br	400244c <__alt_data_end+0xfc00244c>
 4003ba0:	8c7fff84 	addi	r17,r17,-2
 4003ba4:	b5bfffc4 	addi	r22,r22,-1
 4003ba8:	dd802615 	stw	r22,152(sp)
 4003bac:	dc4022c5 	stb	r17,139(sp)
 4003bb0:	b000bf16 	blt	r22,zero,4003eb0 <___vfprintf_internal_r+0x21c0>
 4003bb4:	00800ac4 	movi	r2,43
 4003bb8:	d8802305 	stb	r2,140(sp)
 4003bbc:	00800244 	movi	r2,9
 4003bc0:	15807016 	blt	r2,r22,4003d84 <___vfprintf_internal_r+0x2094>
 4003bc4:	00800c04 	movi	r2,48
 4003bc8:	b5800c04 	addi	r22,r22,48
 4003bcc:	d8802345 	stb	r2,141(sp)
 4003bd0:	dd802385 	stb	r22,142(sp)
 4003bd4:	d88023c4 	addi	r2,sp,143
 4003bd8:	df0022c4 	addi	fp,sp,139
 4003bdc:	d8c03317 	ldw	r3,204(sp)
 4003be0:	1739c83a 	sub	fp,r2,fp
 4003be4:	d9003317 	ldw	r4,204(sp)
 4003be8:	e0c7883a 	add	r3,fp,r3
 4003bec:	df003a15 	stw	fp,232(sp)
 4003bf0:	d8c02b15 	stw	r3,172(sp)
 4003bf4:	00800044 	movi	r2,1
 4003bf8:	1100b30e 	bge	r2,r4,4003ec8 <___vfprintf_internal_r+0x21d8>
 4003bfc:	d8c02b17 	ldw	r3,172(sp)
 4003c00:	18c00044 	addi	r3,r3,1
 4003c04:	d8c02b15 	stw	r3,172(sp)
 4003c08:	1805883a 	mov	r2,r3
 4003c0c:	1800ac16 	blt	r3,zero,4003ec0 <___vfprintf_internal_r+0x21d0>
 4003c10:	d8003215 	stw	zero,200(sp)
 4003c14:	003e5d06 	br	400358c <__alt_data_end+0xfc00358c>
 4003c18:	d9002d17 	ldw	r4,180(sp)
 4003c1c:	d9801e04 	addi	r6,sp,120
 4003c20:	b80b883a 	mov	r5,r23
 4003c24:	40094d00 	call	40094d0 <__sprint_r>
 4003c28:	1039351e 	bne	r2,zero,4002100 <__alt_data_end+0xfc002100>
 4003c2c:	dc402617 	ldw	r17,152(sp)
 4003c30:	d8c02017 	ldw	r3,128(sp)
 4003c34:	d8801f17 	ldw	r2,124(sp)
 4003c38:	da000404 	addi	r8,sp,16
 4003c3c:	003ed606 	br	4003798 <__alt_data_end+0xfc003798>
 4003c40:	182b883a 	mov	r21,r3
 4003c44:	d8002a15 	stw	zero,168(sp)
 4003c48:	00388c06 	br	4001e7c <__alt_data_end+0xfc001e7c>
 4003c4c:	d8802a17 	ldw	r2,168(sp)
 4003c50:	103e071e 	bne	r2,zero,4003470 <__alt_data_end+0xfc003470>
 4003c54:	dc002a15 	stw	r16,168(sp)
 4003c58:	003e0506 	br	4003470 <__alt_data_end+0xfc003470>
 4003c5c:	d9002a17 	ldw	r4,168(sp)
 4003c60:	20c00044 	addi	r3,r4,1
 4003c64:	003e0f06 	br	40034a4 <__alt_data_end+0xfc0034a4>
 4003c68:	01400184 	movi	r5,6
 4003c6c:	d9402a15 	stw	r5,168(sp)
 4003c70:	003dff06 	br	4003470 <__alt_data_end+0xfc003470>
 4003c74:	d8802104 	addi	r2,sp,132
 4003c78:	d8800315 	stw	r2,12(sp)
 4003c7c:	d8802504 	addi	r2,sp,148
 4003c80:	d8800215 	stw	r2,8(sp)
 4003c84:	d8802604 	addi	r2,sp,152
 4003c88:	d8800115 	stw	r2,4(sp)
 4003c8c:	d8802a17 	ldw	r2,168(sp)
 4003c90:	d9403617 	ldw	r5,216(sp)
 4003c94:	d9002d17 	ldw	r4,180(sp)
 4003c98:	d8800015 	stw	r2,0(sp)
 4003c9c:	01c000c4 	movi	r7,3
 4003ca0:	980d883a 	mov	r6,r19
 4003ca4:	da003d15 	stw	r8,244(sp)
 4003ca8:	40044200 	call	4004420 <_dtoa_r>
 4003cac:	d8c02a17 	ldw	r3,168(sp)
 4003cb0:	da003d17 	ldw	r8,244(sp)
 4003cb4:	1021883a 	mov	r16,r2
 4003cb8:	10f9883a 	add	fp,r2,r3
 4003cbc:	81000007 	ldb	r4,0(r16)
 4003cc0:	00800c04 	movi	r2,48
 4003cc4:	20805e26 	beq	r4,r2,4003e40 <___vfprintf_internal_r+0x2150>
 4003cc8:	d8c02617 	ldw	r3,152(sp)
 4003ccc:	e0f9883a 	add	fp,fp,r3
 4003cd0:	003e0a06 	br	40034fc <__alt_data_end+0xfc0034fc>
 4003cd4:	00c00b44 	movi	r3,45
 4003cd8:	24e0003c 	xorhi	r19,r4,32768
 4003cdc:	d8c02905 	stb	r3,164(sp)
 4003ce0:	003de906 	br	4003488 <__alt_data_end+0xfc003488>
 4003ce4:	d8c03217 	ldw	r3,200(sp)
 4003ce8:	00c07a0e 	bge	zero,r3,4003ed4 <___vfprintf_internal_r+0x21e4>
 4003cec:	00800044 	movi	r2,1
 4003cf0:	d9003317 	ldw	r4,204(sp)
 4003cf4:	1105883a 	add	r2,r2,r4
 4003cf8:	d8802b15 	stw	r2,172(sp)
 4003cfc:	10004e16 	blt	r2,zero,4003e38 <___vfprintf_internal_r+0x2148>
 4003d00:	044019c4 	movi	r17,103
 4003d04:	003e2106 	br	400358c <__alt_data_end+0xfc00358c>
 4003d08:	d9002a17 	ldw	r4,168(sp)
 4003d0c:	d8802104 	addi	r2,sp,132
 4003d10:	d8800315 	stw	r2,12(sp)
 4003d14:	d9000015 	stw	r4,0(sp)
 4003d18:	d8802504 	addi	r2,sp,148
 4003d1c:	d9403617 	ldw	r5,216(sp)
 4003d20:	d9002d17 	ldw	r4,180(sp)
 4003d24:	d8800215 	stw	r2,8(sp)
 4003d28:	d8802604 	addi	r2,sp,152
 4003d2c:	d8800115 	stw	r2,4(sp)
 4003d30:	01c000c4 	movi	r7,3
 4003d34:	980d883a 	mov	r6,r19
 4003d38:	da003d15 	stw	r8,244(sp)
 4003d3c:	40044200 	call	4004420 <_dtoa_r>
 4003d40:	d8c02a17 	ldw	r3,168(sp)
 4003d44:	da003d17 	ldw	r8,244(sp)
 4003d48:	1021883a 	mov	r16,r2
 4003d4c:	00801184 	movi	r2,70
 4003d50:	80f9883a 	add	fp,r16,r3
 4003d54:	88bfd926 	beq	r17,r2,4003cbc <__alt_data_end+0xfc003cbc>
 4003d58:	003de806 	br	40034fc <__alt_data_end+0xfc0034fc>
 4003d5c:	d9002a17 	ldw	r4,168(sp)
 4003d60:	00c04d0e 	bge	zero,r3,4003e98 <___vfprintf_internal_r+0x21a8>
 4003d64:	2000441e 	bne	r4,zero,4003e78 <___vfprintf_internal_r+0x2188>
 4003d68:	9480004c 	andi	r18,r18,1
 4003d6c:	9000421e 	bne	r18,zero,4003e78 <___vfprintf_internal_r+0x2188>
 4003d70:	1805883a 	mov	r2,r3
 4003d74:	18006f16 	blt	r3,zero,4003f34 <___vfprintf_internal_r+0x2244>
 4003d78:	d8c03217 	ldw	r3,200(sp)
 4003d7c:	d8c02b15 	stw	r3,172(sp)
 4003d80:	003e0206 	br	400358c <__alt_data_end+0xfc00358c>
 4003d84:	df0022c4 	addi	fp,sp,139
 4003d88:	dc002a15 	stw	r16,168(sp)
 4003d8c:	4027883a 	mov	r19,r8
 4003d90:	e021883a 	mov	r16,fp
 4003d94:	b009883a 	mov	r4,r22
 4003d98:	01400284 	movi	r5,10
 4003d9c:	400c05c0 	call	400c05c <__modsi3>
 4003da0:	10800c04 	addi	r2,r2,48
 4003da4:	843fffc4 	addi	r16,r16,-1
 4003da8:	b009883a 	mov	r4,r22
 4003dac:	01400284 	movi	r5,10
 4003db0:	80800005 	stb	r2,0(r16)
 4003db4:	400bfd80 	call	400bfd8 <__divsi3>
 4003db8:	102d883a 	mov	r22,r2
 4003dbc:	00800244 	movi	r2,9
 4003dc0:	15bff416 	blt	r2,r22,4003d94 <__alt_data_end+0xfc003d94>
 4003dc4:	9811883a 	mov	r8,r19
 4003dc8:	b0800c04 	addi	r2,r22,48
 4003dcc:	8027883a 	mov	r19,r16
 4003dd0:	997fffc4 	addi	r5,r19,-1
 4003dd4:	98bfffc5 	stb	r2,-1(r19)
 4003dd8:	dc002a17 	ldw	r16,168(sp)
 4003ddc:	2f006d2e 	bgeu	r5,fp,4003f94 <___vfprintf_internal_r+0x22a4>
 4003de0:	d9c02384 	addi	r7,sp,142
 4003de4:	3ccfc83a 	sub	r7,r7,r19
 4003de8:	d9002344 	addi	r4,sp,141
 4003dec:	e1cf883a 	add	r7,fp,r7
 4003df0:	00000106 	br	4003df8 <___vfprintf_internal_r+0x2108>
 4003df4:	28800003 	ldbu	r2,0(r5)
 4003df8:	20800005 	stb	r2,0(r4)
 4003dfc:	21000044 	addi	r4,r4,1
 4003e00:	29400044 	addi	r5,r5,1
 4003e04:	393ffb1e 	bne	r7,r4,4003df4 <__alt_data_end+0xfc003df4>
 4003e08:	d8802304 	addi	r2,sp,140
 4003e0c:	14c5c83a 	sub	r2,r2,r19
 4003e10:	d8c02344 	addi	r3,sp,141
 4003e14:	1885883a 	add	r2,r3,r2
 4003e18:	003f7006 	br	4003bdc <__alt_data_end+0xfc003bdc>
 4003e1c:	0005883a 	mov	r2,zero
 4003e20:	003f0f06 	br	4003a60 <__alt_data_end+0xfc003a60>
 4003e24:	d8c03217 	ldw	r3,200(sp)
 4003e28:	18c00044 	addi	r3,r3,1
 4003e2c:	d8c02b15 	stw	r3,172(sp)
 4003e30:	1805883a 	mov	r2,r3
 4003e34:	183fb20e 	bge	r3,zero,4003d00 <__alt_data_end+0xfc003d00>
 4003e38:	0005883a 	mov	r2,zero
 4003e3c:	003fb006 	br	4003d00 <__alt_data_end+0xfc003d00>
 4003e40:	d9003617 	ldw	r4,216(sp)
 4003e44:	000d883a 	mov	r6,zero
 4003e48:	000f883a 	mov	r7,zero
 4003e4c:	980b883a 	mov	r5,r19
 4003e50:	d8c03c15 	stw	r3,240(sp)
 4003e54:	da003d15 	stw	r8,244(sp)
 4003e58:	400d4080 	call	400d408 <__eqdf2>
 4003e5c:	d8c03c17 	ldw	r3,240(sp)
 4003e60:	da003d17 	ldw	r8,244(sp)
 4003e64:	103f9826 	beq	r2,zero,4003cc8 <__alt_data_end+0xfc003cc8>
 4003e68:	00800044 	movi	r2,1
 4003e6c:	10c7c83a 	sub	r3,r2,r3
 4003e70:	d8c02615 	stw	r3,152(sp)
 4003e74:	003f9506 	br	4003ccc <__alt_data_end+0xfc003ccc>
 4003e78:	d9002a17 	ldw	r4,168(sp)
 4003e7c:	d8c03217 	ldw	r3,200(sp)
 4003e80:	20800044 	addi	r2,r4,1
 4003e84:	1885883a 	add	r2,r3,r2
 4003e88:	d8802b15 	stw	r2,172(sp)
 4003e8c:	103dbf0e 	bge	r2,zero,400358c <__alt_data_end+0xfc00358c>
 4003e90:	0005883a 	mov	r2,zero
 4003e94:	003dbd06 	br	400358c <__alt_data_end+0xfc00358c>
 4003e98:	2000201e 	bne	r4,zero,4003f1c <___vfprintf_internal_r+0x222c>
 4003e9c:	9480004c 	andi	r18,r18,1
 4003ea0:	90001e1e 	bne	r18,zero,4003f1c <___vfprintf_internal_r+0x222c>
 4003ea4:	00800044 	movi	r2,1
 4003ea8:	d8802b15 	stw	r2,172(sp)
 4003eac:	003db706 	br	400358c <__alt_data_end+0xfc00358c>
 4003eb0:	00800b44 	movi	r2,45
 4003eb4:	05adc83a 	sub	r22,zero,r22
 4003eb8:	d8802305 	stb	r2,140(sp)
 4003ebc:	003f3f06 	br	4003bbc <__alt_data_end+0xfc003bbc>
 4003ec0:	0005883a 	mov	r2,zero
 4003ec4:	003f5206 	br	4003c10 <__alt_data_end+0xfc003c10>
 4003ec8:	90a4703a 	and	r18,r18,r2
 4003ecc:	903f4e26 	beq	r18,zero,4003c08 <__alt_data_end+0xfc003c08>
 4003ed0:	003f4a06 	br	4003bfc <__alt_data_end+0xfc003bfc>
 4003ed4:	00800084 	movi	r2,2
 4003ed8:	10c5c83a 	sub	r2,r2,r3
 4003edc:	003f8406 	br	4003cf0 <__alt_data_end+0xfc003cf0>
 4003ee0:	d9402e17 	ldw	r5,184(sp)
 4003ee4:	d9002e17 	ldw	r4,184(sp)
 4003ee8:	ac400043 	ldbu	r17,1(r21)
 4003eec:	29400017 	ldw	r5,0(r5)
 4003ef0:	20800104 	addi	r2,r4,4
 4003ef4:	d8802e15 	stw	r2,184(sp)
 4003ef8:	d9402a15 	stw	r5,168(sp)
 4003efc:	182b883a 	mov	r21,r3
 4003f00:	283e7b0e 	bge	r5,zero,40038f0 <__alt_data_end+0xfc0038f0>
 4003f04:	8c403fcc 	andi	r17,r17,255
 4003f08:	017fffc4 	movi	r5,-1
 4003f0c:	8c40201c 	xori	r17,r17,128
 4003f10:	d9402a15 	stw	r5,168(sp)
 4003f14:	8c7fe004 	addi	r17,r17,-128
 4003f18:	0037d706 	br	4001e78 <__alt_data_end+0xfc001e78>
 4003f1c:	d8c02a17 	ldw	r3,168(sp)
 4003f20:	18c00084 	addi	r3,r3,2
 4003f24:	d8c02b15 	stw	r3,172(sp)
 4003f28:	1805883a 	mov	r2,r3
 4003f2c:	183d970e 	bge	r3,zero,400358c <__alt_data_end+0xfc00358c>
 4003f30:	003fd706 	br	4003e90 <__alt_data_end+0xfc003e90>
 4003f34:	0005883a 	mov	r2,zero
 4003f38:	003f8f06 	br	4003d78 <__alt_data_end+0xfc003d78>
 4003f3c:	9080004c 	andi	r2,r18,1
 4003f40:	103f821e 	bne	r2,zero,4003d4c <__alt_data_end+0xfc003d4c>
 4003f44:	d8802117 	ldw	r2,132(sp)
 4003f48:	1405c83a 	sub	r2,r2,r16
 4003f4c:	d8803315 	stw	r2,204(sp)
 4003f50:	b47ef426 	beq	r22,r17,4003b24 <__alt_data_end+0xfc003b24>
 4003f54:	dd802617 	ldw	r22,152(sp)
 4003f58:	003f1206 	br	4003ba4 <__alt_data_end+0xfc003ba4>
 4003f5c:	d8c02b03 	ldbu	r3,172(sp)
 4003f60:	d8c02785 	stb	r3,158(sp)
 4003f64:	0038df06 	br	40022e4 <__alt_data_end+0xfc0022e4>
 4003f68:	d8c02b03 	ldbu	r3,172(sp)
 4003f6c:	d8c02785 	stb	r3,158(sp)
 4003f70:	0038aa06 	br	400221c <__alt_data_end+0xfc00221c>
 4003f74:	d8c02b03 	ldbu	r3,172(sp)
 4003f78:	d8c02785 	stb	r3,158(sp)
 4003f7c:	003a4306 	br	400288c <__alt_data_end+0xfc00288c>
 4003f80:	d8c02b03 	ldbu	r3,172(sp)
 4003f84:	d8c02785 	stb	r3,158(sp)
 4003f88:	003af506 	br	4002b60 <__alt_data_end+0xfc002b60>
 4003f8c:	0005883a 	mov	r2,zero
 4003f90:	003d7b06 	br	4003580 <__alt_data_end+0xfc003580>
 4003f94:	d8802344 	addi	r2,sp,141
 4003f98:	003f1006 	br	4003bdc <__alt_data_end+0xfc003bdc>
 4003f9c:	d8c02b03 	ldbu	r3,172(sp)
 4003fa0:	d8c02785 	stb	r3,158(sp)
 4003fa4:	0038fd06 	br	400239c <__alt_data_end+0xfc00239c>
 4003fa8:	d8c02b03 	ldbu	r3,172(sp)
 4003fac:	d8c02785 	stb	r3,158(sp)
 4003fb0:	003a9706 	br	4002a10 <__alt_data_end+0xfc002a10>
 4003fb4:	d8c02b03 	ldbu	r3,172(sp)
 4003fb8:	d8c02785 	stb	r3,158(sp)
 4003fbc:	003a1806 	br	4002820 <__alt_data_end+0xfc002820>
 4003fc0:	d8c02b03 	ldbu	r3,172(sp)
 4003fc4:	d8c02785 	stb	r3,158(sp)
 4003fc8:	003abe06 	br	4002ac4 <__alt_data_end+0xfc002ac4>

04003fcc <__vfprintf_internal>:
 4003fcc:	00810074 	movhi	r2,1025
 4003fd0:	108e5b04 	addi	r2,r2,14700
 4003fd4:	300f883a 	mov	r7,r6
 4003fd8:	280d883a 	mov	r6,r5
 4003fdc:	200b883a 	mov	r5,r4
 4003fe0:	11000017 	ldw	r4,0(r2)
 4003fe4:	4001cf01 	jmpi	4001cf0 <___vfprintf_internal_r>

04003fe8 <__sbprintf>:
 4003fe8:	2880030b 	ldhu	r2,12(r5)
 4003fec:	2ac01917 	ldw	r11,100(r5)
 4003ff0:	2a80038b 	ldhu	r10,14(r5)
 4003ff4:	2a400717 	ldw	r9,28(r5)
 4003ff8:	2a000917 	ldw	r8,36(r5)
 4003ffc:	defee204 	addi	sp,sp,-1144
 4004000:	00c10004 	movi	r3,1024
 4004004:	dc011a15 	stw	r16,1128(sp)
 4004008:	10bfff4c 	andi	r2,r2,65533
 400400c:	2821883a 	mov	r16,r5
 4004010:	d8cb883a 	add	r5,sp,r3
 4004014:	dc811c15 	stw	r18,1136(sp)
 4004018:	dc411b15 	stw	r17,1132(sp)
 400401c:	dfc11d15 	stw	ra,1140(sp)
 4004020:	2025883a 	mov	r18,r4
 4004024:	d881030d 	sth	r2,1036(sp)
 4004028:	dac11915 	stw	r11,1124(sp)
 400402c:	da81038d 	sth	r10,1038(sp)
 4004030:	da410715 	stw	r9,1052(sp)
 4004034:	da010915 	stw	r8,1060(sp)
 4004038:	dec10015 	stw	sp,1024(sp)
 400403c:	dec10415 	stw	sp,1040(sp)
 4004040:	d8c10215 	stw	r3,1032(sp)
 4004044:	d8c10515 	stw	r3,1044(sp)
 4004048:	d8010615 	stw	zero,1048(sp)
 400404c:	4001cf00 	call	4001cf0 <___vfprintf_internal_r>
 4004050:	1023883a 	mov	r17,r2
 4004054:	10000416 	blt	r2,zero,4004068 <__sbprintf+0x80>
 4004058:	d9410004 	addi	r5,sp,1024
 400405c:	9009883a 	mov	r4,r18
 4004060:	4005cc40 	call	4005cc4 <_fflush_r>
 4004064:	10000d1e 	bne	r2,zero,400409c <__sbprintf+0xb4>
 4004068:	d881030b 	ldhu	r2,1036(sp)
 400406c:	1080100c 	andi	r2,r2,64
 4004070:	10000326 	beq	r2,zero,4004080 <__sbprintf+0x98>
 4004074:	8080030b 	ldhu	r2,12(r16)
 4004078:	10801014 	ori	r2,r2,64
 400407c:	8080030d 	sth	r2,12(r16)
 4004080:	8805883a 	mov	r2,r17
 4004084:	dfc11d17 	ldw	ra,1140(sp)
 4004088:	dc811c17 	ldw	r18,1136(sp)
 400408c:	dc411b17 	ldw	r17,1132(sp)
 4004090:	dc011a17 	ldw	r16,1128(sp)
 4004094:	dec11e04 	addi	sp,sp,1144
 4004098:	f800283a 	ret
 400409c:	047fffc4 	movi	r17,-1
 40040a0:	003ff106 	br	4004068 <__alt_data_end+0xfc004068>

040040a4 <__swsetup_r>:
 40040a4:	00810074 	movhi	r2,1025
 40040a8:	defffd04 	addi	sp,sp,-12
 40040ac:	108e5b04 	addi	r2,r2,14700
 40040b0:	dc400115 	stw	r17,4(sp)
 40040b4:	2023883a 	mov	r17,r4
 40040b8:	11000017 	ldw	r4,0(r2)
 40040bc:	dc000015 	stw	r16,0(sp)
 40040c0:	dfc00215 	stw	ra,8(sp)
 40040c4:	2821883a 	mov	r16,r5
 40040c8:	20000226 	beq	r4,zero,40040d4 <__swsetup_r+0x30>
 40040cc:	20800e17 	ldw	r2,56(r4)
 40040d0:	10003126 	beq	r2,zero,4004198 <__swsetup_r+0xf4>
 40040d4:	8080030b 	ldhu	r2,12(r16)
 40040d8:	10c0020c 	andi	r3,r2,8
 40040dc:	1009883a 	mov	r4,r2
 40040e0:	18000f26 	beq	r3,zero,4004120 <__swsetup_r+0x7c>
 40040e4:	80c00417 	ldw	r3,16(r16)
 40040e8:	18001526 	beq	r3,zero,4004140 <__swsetup_r+0x9c>
 40040ec:	1100004c 	andi	r4,r2,1
 40040f0:	20001c1e 	bne	r4,zero,4004164 <__swsetup_r+0xc0>
 40040f4:	1080008c 	andi	r2,r2,2
 40040f8:	1000291e 	bne	r2,zero,40041a0 <__swsetup_r+0xfc>
 40040fc:	80800517 	ldw	r2,20(r16)
 4004100:	80800215 	stw	r2,8(r16)
 4004104:	18001c26 	beq	r3,zero,4004178 <__swsetup_r+0xd4>
 4004108:	0005883a 	mov	r2,zero
 400410c:	dfc00217 	ldw	ra,8(sp)
 4004110:	dc400117 	ldw	r17,4(sp)
 4004114:	dc000017 	ldw	r16,0(sp)
 4004118:	dec00304 	addi	sp,sp,12
 400411c:	f800283a 	ret
 4004120:	2080040c 	andi	r2,r4,16
 4004124:	10002e26 	beq	r2,zero,40041e0 <__swsetup_r+0x13c>
 4004128:	2080010c 	andi	r2,r4,4
 400412c:	10001e1e 	bne	r2,zero,40041a8 <__swsetup_r+0x104>
 4004130:	80c00417 	ldw	r3,16(r16)
 4004134:	20800214 	ori	r2,r4,8
 4004138:	8080030d 	sth	r2,12(r16)
 400413c:	183feb1e 	bne	r3,zero,40040ec <__alt_data_end+0xfc0040ec>
 4004140:	1100a00c 	andi	r4,r2,640
 4004144:	01408004 	movi	r5,512
 4004148:	217fe826 	beq	r4,r5,40040ec <__alt_data_end+0xfc0040ec>
 400414c:	800b883a 	mov	r5,r16
 4004150:	8809883a 	mov	r4,r17
 4004154:	4006c600 	call	4006c60 <__smakebuf_r>
 4004158:	8080030b 	ldhu	r2,12(r16)
 400415c:	80c00417 	ldw	r3,16(r16)
 4004160:	003fe206 	br	40040ec <__alt_data_end+0xfc0040ec>
 4004164:	80800517 	ldw	r2,20(r16)
 4004168:	80000215 	stw	zero,8(r16)
 400416c:	0085c83a 	sub	r2,zero,r2
 4004170:	80800615 	stw	r2,24(r16)
 4004174:	183fe41e 	bne	r3,zero,4004108 <__alt_data_end+0xfc004108>
 4004178:	80c0030b 	ldhu	r3,12(r16)
 400417c:	0005883a 	mov	r2,zero
 4004180:	1900200c 	andi	r4,r3,128
 4004184:	203fe126 	beq	r4,zero,400410c <__alt_data_end+0xfc00410c>
 4004188:	18c01014 	ori	r3,r3,64
 400418c:	80c0030d 	sth	r3,12(r16)
 4004190:	00bfffc4 	movi	r2,-1
 4004194:	003fdd06 	br	400410c <__alt_data_end+0xfc00410c>
 4004198:	40060b00 	call	40060b0 <__sinit>
 400419c:	003fcd06 	br	40040d4 <__alt_data_end+0xfc0040d4>
 40041a0:	0005883a 	mov	r2,zero
 40041a4:	003fd606 	br	4004100 <__alt_data_end+0xfc004100>
 40041a8:	81400c17 	ldw	r5,48(r16)
 40041ac:	28000626 	beq	r5,zero,40041c8 <__swsetup_r+0x124>
 40041b0:	80801004 	addi	r2,r16,64
 40041b4:	28800326 	beq	r5,r2,40041c4 <__swsetup_r+0x120>
 40041b8:	8809883a 	mov	r4,r17
 40041bc:	40062240 	call	4006224 <_free_r>
 40041c0:	8100030b 	ldhu	r4,12(r16)
 40041c4:	80000c15 	stw	zero,48(r16)
 40041c8:	80c00417 	ldw	r3,16(r16)
 40041cc:	00bff6c4 	movi	r2,-37
 40041d0:	1108703a 	and	r4,r2,r4
 40041d4:	80000115 	stw	zero,4(r16)
 40041d8:	80c00015 	stw	r3,0(r16)
 40041dc:	003fd506 	br	4004134 <__alt_data_end+0xfc004134>
 40041e0:	00800244 	movi	r2,9
 40041e4:	88800015 	stw	r2,0(r17)
 40041e8:	20801014 	ori	r2,r4,64
 40041ec:	8080030d 	sth	r2,12(r16)
 40041f0:	00bfffc4 	movi	r2,-1
 40041f4:	003fc506 	br	400410c <__alt_data_end+0xfc00410c>

040041f8 <quorem>:
 40041f8:	defff204 	addi	sp,sp,-56
 40041fc:	ddc00b15 	stw	r23,44(sp)
 4004200:	20800417 	ldw	r2,16(r4)
 4004204:	2dc00417 	ldw	r23,16(r5)
 4004208:	dfc00d15 	stw	ra,52(sp)
 400420c:	df000c15 	stw	fp,48(sp)
 4004210:	dd800a15 	stw	r22,40(sp)
 4004214:	dd400915 	stw	r21,36(sp)
 4004218:	dd000815 	stw	r20,32(sp)
 400421c:	dcc00715 	stw	r19,28(sp)
 4004220:	dc800615 	stw	r18,24(sp)
 4004224:	dc400515 	stw	r17,20(sp)
 4004228:	dc000415 	stw	r16,16(sp)
 400422c:	15c07a16 	blt	r2,r23,4004418 <quorem+0x220>
 4004230:	bdffffc4 	addi	r23,r23,-1
 4004234:	bde9883a 	add	r20,r23,r23
 4004238:	28c00504 	addi	r3,r5,20
 400423c:	a529883a 	add	r20,r20,r20
 4004240:	1d39883a 	add	fp,r3,r20
 4004244:	24c00504 	addi	r19,r4,20
 4004248:	d9400215 	stw	r5,8(sp)
 400424c:	9d29883a 	add	r20,r19,r20
 4004250:	e1400017 	ldw	r5,0(fp)
 4004254:	d9000015 	stw	r4,0(sp)
 4004258:	a1000017 	ldw	r4,0(r20)
 400425c:	29400044 	addi	r5,r5,1
 4004260:	d8c00115 	stw	r3,4(sp)
 4004264:	dd000315 	stw	r20,12(sp)
 4004268:	400c0d00 	call	400c0d0 <__udivsi3>
 400426c:	1025883a 	mov	r18,r2
 4004270:	10003026 	beq	r2,zero,4004334 <quorem+0x13c>
 4004274:	dc400117 	ldw	r17,4(sp)
 4004278:	9829883a 	mov	r20,r19
 400427c:	002d883a 	mov	r22,zero
 4004280:	0021883a 	mov	r16,zero
 4004284:	8d400017 	ldw	r21,0(r17)
 4004288:	900b883a 	mov	r5,r18
 400428c:	8c400104 	addi	r17,r17,4
 4004290:	a93fffcc 	andi	r4,r21,65535
 4004294:	4000bd80 	call	4000bd8 <__mulsi3>
 4004298:	a808d43a 	srli	r4,r21,16
 400429c:	900b883a 	mov	r5,r18
 40042a0:	15ad883a 	add	r22,r2,r22
 40042a4:	4000bd80 	call	4000bd8 <__mulsi3>
 40042a8:	a1000017 	ldw	r4,0(r20)
 40042ac:	b00cd43a 	srli	r6,r22,16
 40042b0:	b0ffffcc 	andi	r3,r22,65535
 40042b4:	217fffcc 	andi	r5,r4,65535
 40042b8:	2c21883a 	add	r16,r5,r16
 40042bc:	80c7c83a 	sub	r3,r16,r3
 40042c0:	2008d43a 	srli	r4,r4,16
 40042c4:	1185883a 	add	r2,r2,r6
 40042c8:	1821d43a 	srai	r16,r3,16
 40042cc:	117fffcc 	andi	r5,r2,65535
 40042d0:	2149c83a 	sub	r4,r4,r5
 40042d4:	2421883a 	add	r16,r4,r16
 40042d8:	8008943a 	slli	r4,r16,16
 40042dc:	18ffffcc 	andi	r3,r3,65535
 40042e0:	102cd43a 	srli	r22,r2,16
 40042e4:	20c8b03a 	or	r4,r4,r3
 40042e8:	a1000015 	stw	r4,0(r20)
 40042ec:	8021d43a 	srai	r16,r16,16
 40042f0:	a5000104 	addi	r20,r20,4
 40042f4:	e47fe32e 	bgeu	fp,r17,4004284 <__alt_data_end+0xfc004284>
 40042f8:	d8c00317 	ldw	r3,12(sp)
 40042fc:	18800017 	ldw	r2,0(r3)
 4004300:	10000c1e 	bne	r2,zero,4004334 <quorem+0x13c>
 4004304:	18bfff04 	addi	r2,r3,-4
 4004308:	9880082e 	bgeu	r19,r2,400432c <quorem+0x134>
 400430c:	18ffff17 	ldw	r3,-4(r3)
 4004310:	18000326 	beq	r3,zero,4004320 <quorem+0x128>
 4004314:	00000506 	br	400432c <quorem+0x134>
 4004318:	10c00017 	ldw	r3,0(r2)
 400431c:	1800031e 	bne	r3,zero,400432c <quorem+0x134>
 4004320:	10bfff04 	addi	r2,r2,-4
 4004324:	bdffffc4 	addi	r23,r23,-1
 4004328:	98bffb36 	bltu	r19,r2,4004318 <__alt_data_end+0xfc004318>
 400432c:	d8c00017 	ldw	r3,0(sp)
 4004330:	1dc00415 	stw	r23,16(r3)
 4004334:	d9400217 	ldw	r5,8(sp)
 4004338:	d9000017 	ldw	r4,0(sp)
 400433c:	400845c0 	call	400845c <__mcmp>
 4004340:	10002816 	blt	r2,zero,40043e4 <quorem+0x1ec>
 4004344:	dc400117 	ldw	r17,4(sp)
 4004348:	94800044 	addi	r18,r18,1
 400434c:	980d883a 	mov	r6,r19
 4004350:	0007883a 	mov	r3,zero
 4004354:	31000017 	ldw	r4,0(r6)
 4004358:	89400017 	ldw	r5,0(r17)
 400435c:	31800104 	addi	r6,r6,4
 4004360:	20bfffcc 	andi	r2,r4,65535
 4004364:	10c7883a 	add	r3,r2,r3
 4004368:	28bfffcc 	andi	r2,r5,65535
 400436c:	1885c83a 	sub	r2,r3,r2
 4004370:	280ad43a 	srli	r5,r5,16
 4004374:	2008d43a 	srli	r4,r4,16
 4004378:	1007d43a 	srai	r3,r2,16
 400437c:	10bfffcc 	andi	r2,r2,65535
 4004380:	2149c83a 	sub	r4,r4,r5
 4004384:	20c9883a 	add	r4,r4,r3
 4004388:	200a943a 	slli	r5,r4,16
 400438c:	8c400104 	addi	r17,r17,4
 4004390:	2007d43a 	srai	r3,r4,16
 4004394:	2884b03a 	or	r2,r5,r2
 4004398:	30bfff15 	stw	r2,-4(r6)
 400439c:	e47fed2e 	bgeu	fp,r17,4004354 <__alt_data_end+0xfc004354>
 40043a0:	bdc5883a 	add	r2,r23,r23
 40043a4:	1085883a 	add	r2,r2,r2
 40043a8:	9887883a 	add	r3,r19,r2
 40043ac:	18800017 	ldw	r2,0(r3)
 40043b0:	10000c1e 	bne	r2,zero,40043e4 <quorem+0x1ec>
 40043b4:	18bfff04 	addi	r2,r3,-4
 40043b8:	9880082e 	bgeu	r19,r2,40043dc <quorem+0x1e4>
 40043bc:	18ffff17 	ldw	r3,-4(r3)
 40043c0:	18000326 	beq	r3,zero,40043d0 <quorem+0x1d8>
 40043c4:	00000506 	br	40043dc <quorem+0x1e4>
 40043c8:	10c00017 	ldw	r3,0(r2)
 40043cc:	1800031e 	bne	r3,zero,40043dc <quorem+0x1e4>
 40043d0:	10bfff04 	addi	r2,r2,-4
 40043d4:	bdffffc4 	addi	r23,r23,-1
 40043d8:	98bffb36 	bltu	r19,r2,40043c8 <__alt_data_end+0xfc0043c8>
 40043dc:	d8c00017 	ldw	r3,0(sp)
 40043e0:	1dc00415 	stw	r23,16(r3)
 40043e4:	9005883a 	mov	r2,r18
 40043e8:	dfc00d17 	ldw	ra,52(sp)
 40043ec:	df000c17 	ldw	fp,48(sp)
 40043f0:	ddc00b17 	ldw	r23,44(sp)
 40043f4:	dd800a17 	ldw	r22,40(sp)
 40043f8:	dd400917 	ldw	r21,36(sp)
 40043fc:	dd000817 	ldw	r20,32(sp)
 4004400:	dcc00717 	ldw	r19,28(sp)
 4004404:	dc800617 	ldw	r18,24(sp)
 4004408:	dc400517 	ldw	r17,20(sp)
 400440c:	dc000417 	ldw	r16,16(sp)
 4004410:	dec00e04 	addi	sp,sp,56
 4004414:	f800283a 	ret
 4004418:	0005883a 	mov	r2,zero
 400441c:	003ff206 	br	40043e8 <__alt_data_end+0xfc0043e8>

04004420 <_dtoa_r>:
 4004420:	20801017 	ldw	r2,64(r4)
 4004424:	deffde04 	addi	sp,sp,-136
 4004428:	df002015 	stw	fp,128(sp)
 400442c:	dcc01b15 	stw	r19,108(sp)
 4004430:	dc801a15 	stw	r18,104(sp)
 4004434:	dc401915 	stw	r17,100(sp)
 4004438:	dc001815 	stw	r16,96(sp)
 400443c:	dfc02115 	stw	ra,132(sp)
 4004440:	ddc01f15 	stw	r23,124(sp)
 4004444:	dd801e15 	stw	r22,120(sp)
 4004448:	dd401d15 	stw	r21,116(sp)
 400444c:	dd001c15 	stw	r20,112(sp)
 4004450:	d9c00315 	stw	r7,12(sp)
 4004454:	2039883a 	mov	fp,r4
 4004458:	3023883a 	mov	r17,r6
 400445c:	2825883a 	mov	r18,r5
 4004460:	dc002417 	ldw	r16,144(sp)
 4004464:	3027883a 	mov	r19,r6
 4004468:	10000826 	beq	r2,zero,400448c <_dtoa_r+0x6c>
 400446c:	21801117 	ldw	r6,68(r4)
 4004470:	00c00044 	movi	r3,1
 4004474:	100b883a 	mov	r5,r2
 4004478:	1986983a 	sll	r3,r3,r6
 400447c:	11800115 	stw	r6,4(r2)
 4004480:	10c00215 	stw	r3,8(r2)
 4004484:	4007b800 	call	4007b80 <_Bfree>
 4004488:	e0001015 	stw	zero,64(fp)
 400448c:	88002e16 	blt	r17,zero,4004548 <_dtoa_r+0x128>
 4004490:	80000015 	stw	zero,0(r16)
 4004494:	889ffc2c 	andhi	r2,r17,32752
 4004498:	00dffc34 	movhi	r3,32752
 400449c:	10c01c26 	beq	r2,r3,4004510 <_dtoa_r+0xf0>
 40044a0:	000d883a 	mov	r6,zero
 40044a4:	000f883a 	mov	r7,zero
 40044a8:	9009883a 	mov	r4,r18
 40044ac:	980b883a 	mov	r5,r19
 40044b0:	400d4080 	call	400d408 <__eqdf2>
 40044b4:	10002b1e 	bne	r2,zero,4004564 <_dtoa_r+0x144>
 40044b8:	d9c02317 	ldw	r7,140(sp)
 40044bc:	00800044 	movi	r2,1
 40044c0:	38800015 	stw	r2,0(r7)
 40044c4:	d8802517 	ldw	r2,148(sp)
 40044c8:	10019e26 	beq	r2,zero,4004b44 <_dtoa_r+0x724>
 40044cc:	d8c02517 	ldw	r3,148(sp)
 40044d0:	00810074 	movhi	r2,1025
 40044d4:	108a5e44 	addi	r2,r2,10617
 40044d8:	18800015 	stw	r2,0(r3)
 40044dc:	10bfffc4 	addi	r2,r2,-1
 40044e0:	dfc02117 	ldw	ra,132(sp)
 40044e4:	df002017 	ldw	fp,128(sp)
 40044e8:	ddc01f17 	ldw	r23,124(sp)
 40044ec:	dd801e17 	ldw	r22,120(sp)
 40044f0:	dd401d17 	ldw	r21,116(sp)
 40044f4:	dd001c17 	ldw	r20,112(sp)
 40044f8:	dcc01b17 	ldw	r19,108(sp)
 40044fc:	dc801a17 	ldw	r18,104(sp)
 4004500:	dc401917 	ldw	r17,100(sp)
 4004504:	dc001817 	ldw	r16,96(sp)
 4004508:	dec02204 	addi	sp,sp,136
 400450c:	f800283a 	ret
 4004510:	d8c02317 	ldw	r3,140(sp)
 4004514:	0089c3c4 	movi	r2,9999
 4004518:	18800015 	stw	r2,0(r3)
 400451c:	90017726 	beq	r18,zero,4004afc <_dtoa_r+0x6dc>
 4004520:	00810074 	movhi	r2,1025
 4004524:	108a6a04 	addi	r2,r2,10664
 4004528:	d9002517 	ldw	r4,148(sp)
 400452c:	203fec26 	beq	r4,zero,40044e0 <__alt_data_end+0xfc0044e0>
 4004530:	10c000c7 	ldb	r3,3(r2)
 4004534:	1801781e 	bne	r3,zero,4004b18 <_dtoa_r+0x6f8>
 4004538:	10c000c4 	addi	r3,r2,3
 400453c:	d9802517 	ldw	r6,148(sp)
 4004540:	30c00015 	stw	r3,0(r6)
 4004544:	003fe606 	br	40044e0 <__alt_data_end+0xfc0044e0>
 4004548:	04e00034 	movhi	r19,32768
 400454c:	9cffffc4 	addi	r19,r19,-1
 4004550:	00800044 	movi	r2,1
 4004554:	8ce6703a 	and	r19,r17,r19
 4004558:	80800015 	stw	r2,0(r16)
 400455c:	9823883a 	mov	r17,r19
 4004560:	003fcc06 	br	4004494 <__alt_data_end+0xfc004494>
 4004564:	d8800204 	addi	r2,sp,8
 4004568:	d8800015 	stw	r2,0(sp)
 400456c:	d9c00104 	addi	r7,sp,4
 4004570:	900b883a 	mov	r5,r18
 4004574:	980d883a 	mov	r6,r19
 4004578:	e009883a 	mov	r4,fp
 400457c:	8820d53a 	srli	r16,r17,20
 4004580:	40088280 	call	4008828 <__d2b>
 4004584:	d8800915 	stw	r2,36(sp)
 4004588:	8001651e 	bne	r16,zero,4004b20 <_dtoa_r+0x700>
 400458c:	dd800217 	ldw	r22,8(sp)
 4004590:	dc000117 	ldw	r16,4(sp)
 4004594:	00800804 	movi	r2,32
 4004598:	b421883a 	add	r16,r22,r16
 400459c:	80c10c84 	addi	r3,r16,1074
 40045a0:	10c2d10e 	bge	r2,r3,40050e8 <_dtoa_r+0xcc8>
 40045a4:	00801004 	movi	r2,64
 40045a8:	81010484 	addi	r4,r16,1042
 40045ac:	10c7c83a 	sub	r3,r2,r3
 40045b0:	9108d83a 	srl	r4,r18,r4
 40045b4:	88e2983a 	sll	r17,r17,r3
 40045b8:	2448b03a 	or	r4,r4,r17
 40045bc:	400e9240 	call	400e924 <__floatunsidf>
 40045c0:	017f8434 	movhi	r5,65040
 40045c4:	01800044 	movi	r6,1
 40045c8:	1009883a 	mov	r4,r2
 40045cc:	194b883a 	add	r5,r3,r5
 40045d0:	843fffc4 	addi	r16,r16,-1
 40045d4:	d9801115 	stw	r6,68(sp)
 40045d8:	000d883a 	mov	r6,zero
 40045dc:	01cffe34 	movhi	r7,16376
 40045e0:	400decc0 	call	400decc <__subdf3>
 40045e4:	0198dbf4 	movhi	r6,25455
 40045e8:	01cff4f4 	movhi	r7,16339
 40045ec:	3190d844 	addi	r6,r6,17249
 40045f0:	39e1e9c4 	addi	r7,r7,-30809
 40045f4:	1009883a 	mov	r4,r2
 40045f8:	180b883a 	mov	r5,r3
 40045fc:	400d6600 	call	400d660 <__muldf3>
 4004600:	01a2d874 	movhi	r6,35681
 4004604:	01cff1f4 	movhi	r7,16327
 4004608:	31b22cc4 	addi	r6,r6,-14157
 400460c:	39e28a04 	addi	r7,r7,-30168
 4004610:	180b883a 	mov	r5,r3
 4004614:	1009883a 	mov	r4,r2
 4004618:	400c18c0 	call	400c18c <__adddf3>
 400461c:	8009883a 	mov	r4,r16
 4004620:	1029883a 	mov	r20,r2
 4004624:	1823883a 	mov	r17,r3
 4004628:	400e8480 	call	400e848 <__floatsidf>
 400462c:	019427f4 	movhi	r6,20639
 4004630:	01cff4f4 	movhi	r7,16339
 4004634:	319e7ec4 	addi	r6,r6,31227
 4004638:	39d104c4 	addi	r7,r7,17427
 400463c:	1009883a 	mov	r4,r2
 4004640:	180b883a 	mov	r5,r3
 4004644:	400d6600 	call	400d660 <__muldf3>
 4004648:	100d883a 	mov	r6,r2
 400464c:	180f883a 	mov	r7,r3
 4004650:	a009883a 	mov	r4,r20
 4004654:	880b883a 	mov	r5,r17
 4004658:	400c18c0 	call	400c18c <__adddf3>
 400465c:	1009883a 	mov	r4,r2
 4004660:	180b883a 	mov	r5,r3
 4004664:	1029883a 	mov	r20,r2
 4004668:	1823883a 	mov	r17,r3
 400466c:	400e7c80 	call	400e7c8 <__fixdfsi>
 4004670:	000d883a 	mov	r6,zero
 4004674:	000f883a 	mov	r7,zero
 4004678:	a009883a 	mov	r4,r20
 400467c:	880b883a 	mov	r5,r17
 4004680:	d8800515 	stw	r2,20(sp)
 4004684:	400d56c0 	call	400d56c <__ledf2>
 4004688:	10028716 	blt	r2,zero,40050a8 <_dtoa_r+0xc88>
 400468c:	d8c00517 	ldw	r3,20(sp)
 4004690:	00800584 	movi	r2,22
 4004694:	10c27536 	bltu	r2,r3,400506c <_dtoa_r+0xc4c>
 4004698:	180490fa 	slli	r2,r3,3
 400469c:	00c10074 	movhi	r3,1025
 40046a0:	18ca8604 	addi	r3,r3,10776
 40046a4:	1885883a 	add	r2,r3,r2
 40046a8:	11000017 	ldw	r4,0(r2)
 40046ac:	11400117 	ldw	r5,4(r2)
 40046b0:	900d883a 	mov	r6,r18
 40046b4:	980f883a 	mov	r7,r19
 40046b8:	400d4900 	call	400d490 <__gedf2>
 40046bc:	00828d0e 	bge	zero,r2,40050f4 <_dtoa_r+0xcd4>
 40046c0:	d9000517 	ldw	r4,20(sp)
 40046c4:	d8000e15 	stw	zero,56(sp)
 40046c8:	213fffc4 	addi	r4,r4,-1
 40046cc:	d9000515 	stw	r4,20(sp)
 40046d0:	b42dc83a 	sub	r22,r22,r16
 40046d4:	b5bfffc4 	addi	r22,r22,-1
 40046d8:	b0026f16 	blt	r22,zero,4005098 <_dtoa_r+0xc78>
 40046dc:	d8000815 	stw	zero,32(sp)
 40046e0:	d9c00517 	ldw	r7,20(sp)
 40046e4:	38026416 	blt	r7,zero,4005078 <_dtoa_r+0xc58>
 40046e8:	b1ed883a 	add	r22,r22,r7
 40046ec:	d9c00d15 	stw	r7,52(sp)
 40046f0:	d8000a15 	stw	zero,40(sp)
 40046f4:	d9800317 	ldw	r6,12(sp)
 40046f8:	00800244 	movi	r2,9
 40046fc:	11811436 	bltu	r2,r6,4004b50 <_dtoa_r+0x730>
 4004700:	00800144 	movi	r2,5
 4004704:	1184e10e 	bge	r2,r6,4005a8c <_dtoa_r+0x166c>
 4004708:	31bfff04 	addi	r6,r6,-4
 400470c:	d9800315 	stw	r6,12(sp)
 4004710:	0023883a 	mov	r17,zero
 4004714:	d9800317 	ldw	r6,12(sp)
 4004718:	008000c4 	movi	r2,3
 400471c:	30836726 	beq	r6,r2,40054bc <_dtoa_r+0x109c>
 4004720:	1183410e 	bge	r2,r6,4005428 <_dtoa_r+0x1008>
 4004724:	d9c00317 	ldw	r7,12(sp)
 4004728:	00800104 	movi	r2,4
 400472c:	38827c26 	beq	r7,r2,4005120 <_dtoa_r+0xd00>
 4004730:	00800144 	movi	r2,5
 4004734:	3884c41e 	bne	r7,r2,4005a48 <_dtoa_r+0x1628>
 4004738:	00800044 	movi	r2,1
 400473c:	d8800b15 	stw	r2,44(sp)
 4004740:	d8c00517 	ldw	r3,20(sp)
 4004744:	d9002217 	ldw	r4,136(sp)
 4004748:	1907883a 	add	r3,r3,r4
 400474c:	19800044 	addi	r6,r3,1
 4004750:	d8c00c15 	stw	r3,48(sp)
 4004754:	d9800615 	stw	r6,24(sp)
 4004758:	0183a40e 	bge	zero,r6,40055ec <_dtoa_r+0x11cc>
 400475c:	d9800617 	ldw	r6,24(sp)
 4004760:	3021883a 	mov	r16,r6
 4004764:	e0001115 	stw	zero,68(fp)
 4004768:	008005c4 	movi	r2,23
 400476c:	1184c92e 	bgeu	r2,r6,4005a94 <_dtoa_r+0x1674>
 4004770:	00c00044 	movi	r3,1
 4004774:	00800104 	movi	r2,4
 4004778:	1085883a 	add	r2,r2,r2
 400477c:	11000504 	addi	r4,r2,20
 4004780:	180b883a 	mov	r5,r3
 4004784:	18c00044 	addi	r3,r3,1
 4004788:	313ffb2e 	bgeu	r6,r4,4004778 <__alt_data_end+0xfc004778>
 400478c:	e1401115 	stw	r5,68(fp)
 4004790:	e009883a 	mov	r4,fp
 4004794:	4007ad80 	call	4007ad8 <_Balloc>
 4004798:	d8800715 	stw	r2,28(sp)
 400479c:	e0801015 	stw	r2,64(fp)
 40047a0:	00800384 	movi	r2,14
 40047a4:	1400f736 	bltu	r2,r16,4004b84 <_dtoa_r+0x764>
 40047a8:	8800f626 	beq	r17,zero,4004b84 <_dtoa_r+0x764>
 40047ac:	d9c00517 	ldw	r7,20(sp)
 40047b0:	01c39a0e 	bge	zero,r7,400561c <_dtoa_r+0x11fc>
 40047b4:	388003cc 	andi	r2,r7,15
 40047b8:	100490fa 	slli	r2,r2,3
 40047bc:	382bd13a 	srai	r21,r7,4
 40047c0:	00c10074 	movhi	r3,1025
 40047c4:	18ca8604 	addi	r3,r3,10776
 40047c8:	1885883a 	add	r2,r3,r2
 40047cc:	a8c0040c 	andi	r3,r21,16
 40047d0:	12400017 	ldw	r9,0(r2)
 40047d4:	12000117 	ldw	r8,4(r2)
 40047d8:	18037926 	beq	r3,zero,40055c0 <_dtoa_r+0x11a0>
 40047dc:	00810074 	movhi	r2,1025
 40047e0:	108a7c04 	addi	r2,r2,10736
 40047e4:	11800817 	ldw	r6,32(r2)
 40047e8:	11c00917 	ldw	r7,36(r2)
 40047ec:	9009883a 	mov	r4,r18
 40047f0:	980b883a 	mov	r5,r19
 40047f4:	da001715 	stw	r8,92(sp)
 40047f8:	da401615 	stw	r9,88(sp)
 40047fc:	400ca380 	call	400ca38 <__divdf3>
 4004800:	da001717 	ldw	r8,92(sp)
 4004804:	da401617 	ldw	r9,88(sp)
 4004808:	ad4003cc 	andi	r21,r21,15
 400480c:	040000c4 	movi	r16,3
 4004810:	1023883a 	mov	r17,r2
 4004814:	1829883a 	mov	r20,r3
 4004818:	a8001126 	beq	r21,zero,4004860 <_dtoa_r+0x440>
 400481c:	05c10074 	movhi	r23,1025
 4004820:	bdca7c04 	addi	r23,r23,10736
 4004824:	4805883a 	mov	r2,r9
 4004828:	4007883a 	mov	r3,r8
 400482c:	a980004c 	andi	r6,r21,1
 4004830:	1009883a 	mov	r4,r2
 4004834:	a82bd07a 	srai	r21,r21,1
 4004838:	180b883a 	mov	r5,r3
 400483c:	30000426 	beq	r6,zero,4004850 <_dtoa_r+0x430>
 4004840:	b9800017 	ldw	r6,0(r23)
 4004844:	b9c00117 	ldw	r7,4(r23)
 4004848:	84000044 	addi	r16,r16,1
 400484c:	400d6600 	call	400d660 <__muldf3>
 4004850:	bdc00204 	addi	r23,r23,8
 4004854:	a83ff51e 	bne	r21,zero,400482c <__alt_data_end+0xfc00482c>
 4004858:	1013883a 	mov	r9,r2
 400485c:	1811883a 	mov	r8,r3
 4004860:	480d883a 	mov	r6,r9
 4004864:	400f883a 	mov	r7,r8
 4004868:	8809883a 	mov	r4,r17
 400486c:	a00b883a 	mov	r5,r20
 4004870:	400ca380 	call	400ca38 <__divdf3>
 4004874:	d8800f15 	stw	r2,60(sp)
 4004878:	d8c01015 	stw	r3,64(sp)
 400487c:	d8c00e17 	ldw	r3,56(sp)
 4004880:	18000626 	beq	r3,zero,400489c <_dtoa_r+0x47c>
 4004884:	d9000f17 	ldw	r4,60(sp)
 4004888:	d9401017 	ldw	r5,64(sp)
 400488c:	000d883a 	mov	r6,zero
 4004890:	01cffc34 	movhi	r7,16368
 4004894:	400d56c0 	call	400d56c <__ledf2>
 4004898:	10040b16 	blt	r2,zero,40058c8 <_dtoa_r+0x14a8>
 400489c:	8009883a 	mov	r4,r16
 40048a0:	400e8480 	call	400e848 <__floatsidf>
 40048a4:	d9800f17 	ldw	r6,60(sp)
 40048a8:	d9c01017 	ldw	r7,64(sp)
 40048ac:	1009883a 	mov	r4,r2
 40048b0:	180b883a 	mov	r5,r3
 40048b4:	400d6600 	call	400d660 <__muldf3>
 40048b8:	000d883a 	mov	r6,zero
 40048bc:	01d00734 	movhi	r7,16412
 40048c0:	1009883a 	mov	r4,r2
 40048c4:	180b883a 	mov	r5,r3
 40048c8:	400c18c0 	call	400c18c <__adddf3>
 40048cc:	1021883a 	mov	r16,r2
 40048d0:	d8800617 	ldw	r2,24(sp)
 40048d4:	047f3034 	movhi	r17,64704
 40048d8:	1c63883a 	add	r17,r3,r17
 40048dc:	10031826 	beq	r2,zero,4005540 <_dtoa_r+0x1120>
 40048e0:	d8c00517 	ldw	r3,20(sp)
 40048e4:	db000617 	ldw	r12,24(sp)
 40048e8:	d8c01315 	stw	r3,76(sp)
 40048ec:	d9000b17 	ldw	r4,44(sp)
 40048f0:	20038f26 	beq	r4,zero,4005730 <_dtoa_r+0x1310>
 40048f4:	60bfffc4 	addi	r2,r12,-1
 40048f8:	100490fa 	slli	r2,r2,3
 40048fc:	00c10074 	movhi	r3,1025
 4004900:	18ca8604 	addi	r3,r3,10776
 4004904:	1885883a 	add	r2,r3,r2
 4004908:	11800017 	ldw	r6,0(r2)
 400490c:	11c00117 	ldw	r7,4(r2)
 4004910:	d8800717 	ldw	r2,28(sp)
 4004914:	0009883a 	mov	r4,zero
 4004918:	014ff834 	movhi	r5,16352
 400491c:	db001615 	stw	r12,88(sp)
 4004920:	15c00044 	addi	r23,r2,1
 4004924:	400ca380 	call	400ca38 <__divdf3>
 4004928:	800d883a 	mov	r6,r16
 400492c:	880f883a 	mov	r7,r17
 4004930:	1009883a 	mov	r4,r2
 4004934:	180b883a 	mov	r5,r3
 4004938:	400decc0 	call	400decc <__subdf3>
 400493c:	d9401017 	ldw	r5,64(sp)
 4004940:	d9000f17 	ldw	r4,60(sp)
 4004944:	102b883a 	mov	r21,r2
 4004948:	d8c01215 	stw	r3,72(sp)
 400494c:	400e7c80 	call	400e7c8 <__fixdfsi>
 4004950:	1009883a 	mov	r4,r2
 4004954:	1029883a 	mov	r20,r2
 4004958:	400e8480 	call	400e848 <__floatsidf>
 400495c:	d9000f17 	ldw	r4,60(sp)
 4004960:	d9401017 	ldw	r5,64(sp)
 4004964:	100d883a 	mov	r6,r2
 4004968:	180f883a 	mov	r7,r3
 400496c:	400decc0 	call	400decc <__subdf3>
 4004970:	1823883a 	mov	r17,r3
 4004974:	d8c00717 	ldw	r3,28(sp)
 4004978:	d9401217 	ldw	r5,72(sp)
 400497c:	a2000c04 	addi	r8,r20,48
 4004980:	1021883a 	mov	r16,r2
 4004984:	1a000005 	stb	r8,0(r3)
 4004988:	800d883a 	mov	r6,r16
 400498c:	880f883a 	mov	r7,r17
 4004990:	a809883a 	mov	r4,r21
 4004994:	4029883a 	mov	r20,r8
 4004998:	400d4900 	call	400d490 <__gedf2>
 400499c:	00841d16 	blt	zero,r2,4005a14 <_dtoa_r+0x15f4>
 40049a0:	800d883a 	mov	r6,r16
 40049a4:	880f883a 	mov	r7,r17
 40049a8:	0009883a 	mov	r4,zero
 40049ac:	014ffc34 	movhi	r5,16368
 40049b0:	400decc0 	call	400decc <__subdf3>
 40049b4:	d9401217 	ldw	r5,72(sp)
 40049b8:	100d883a 	mov	r6,r2
 40049bc:	180f883a 	mov	r7,r3
 40049c0:	a809883a 	mov	r4,r21
 40049c4:	400d4900 	call	400d490 <__gedf2>
 40049c8:	db001617 	ldw	r12,88(sp)
 40049cc:	00840e16 	blt	zero,r2,4005a08 <_dtoa_r+0x15e8>
 40049d0:	00800044 	movi	r2,1
 40049d4:	13006b0e 	bge	r2,r12,4004b84 <_dtoa_r+0x764>
 40049d8:	d9000717 	ldw	r4,28(sp)
 40049dc:	dd800f15 	stw	r22,60(sp)
 40049e0:	dcc01015 	stw	r19,64(sp)
 40049e4:	2319883a 	add	r12,r4,r12
 40049e8:	dcc01217 	ldw	r19,72(sp)
 40049ec:	602d883a 	mov	r22,r12
 40049f0:	dc801215 	stw	r18,72(sp)
 40049f4:	b825883a 	mov	r18,r23
 40049f8:	00000906 	br	4004a20 <_dtoa_r+0x600>
 40049fc:	400decc0 	call	400decc <__subdf3>
 4004a00:	a80d883a 	mov	r6,r21
 4004a04:	980f883a 	mov	r7,r19
 4004a08:	1009883a 	mov	r4,r2
 4004a0c:	180b883a 	mov	r5,r3
 4004a10:	400d56c0 	call	400d56c <__ledf2>
 4004a14:	1003e816 	blt	r2,zero,40059b8 <_dtoa_r+0x1598>
 4004a18:	b825883a 	mov	r18,r23
 4004a1c:	bd83e926 	beq	r23,r22,40059c4 <_dtoa_r+0x15a4>
 4004a20:	a809883a 	mov	r4,r21
 4004a24:	980b883a 	mov	r5,r19
 4004a28:	000d883a 	mov	r6,zero
 4004a2c:	01d00934 	movhi	r7,16420
 4004a30:	400d6600 	call	400d660 <__muldf3>
 4004a34:	000d883a 	mov	r6,zero
 4004a38:	01d00934 	movhi	r7,16420
 4004a3c:	8009883a 	mov	r4,r16
 4004a40:	880b883a 	mov	r5,r17
 4004a44:	102b883a 	mov	r21,r2
 4004a48:	1827883a 	mov	r19,r3
 4004a4c:	400d6600 	call	400d660 <__muldf3>
 4004a50:	180b883a 	mov	r5,r3
 4004a54:	1009883a 	mov	r4,r2
 4004a58:	1821883a 	mov	r16,r3
 4004a5c:	1023883a 	mov	r17,r2
 4004a60:	400e7c80 	call	400e7c8 <__fixdfsi>
 4004a64:	1009883a 	mov	r4,r2
 4004a68:	1029883a 	mov	r20,r2
 4004a6c:	400e8480 	call	400e848 <__floatsidf>
 4004a70:	8809883a 	mov	r4,r17
 4004a74:	800b883a 	mov	r5,r16
 4004a78:	100d883a 	mov	r6,r2
 4004a7c:	180f883a 	mov	r7,r3
 4004a80:	400decc0 	call	400decc <__subdf3>
 4004a84:	a5000c04 	addi	r20,r20,48
 4004a88:	a80d883a 	mov	r6,r21
 4004a8c:	980f883a 	mov	r7,r19
 4004a90:	1009883a 	mov	r4,r2
 4004a94:	180b883a 	mov	r5,r3
 4004a98:	95000005 	stb	r20,0(r18)
 4004a9c:	1021883a 	mov	r16,r2
 4004aa0:	1823883a 	mov	r17,r3
 4004aa4:	400d56c0 	call	400d56c <__ledf2>
 4004aa8:	bdc00044 	addi	r23,r23,1
 4004aac:	800d883a 	mov	r6,r16
 4004ab0:	880f883a 	mov	r7,r17
 4004ab4:	0009883a 	mov	r4,zero
 4004ab8:	014ffc34 	movhi	r5,16368
 4004abc:	103fcf0e 	bge	r2,zero,40049fc <__alt_data_end+0xfc0049fc>
 4004ac0:	d8c01317 	ldw	r3,76(sp)
 4004ac4:	d8c00515 	stw	r3,20(sp)
 4004ac8:	d9400917 	ldw	r5,36(sp)
 4004acc:	e009883a 	mov	r4,fp
 4004ad0:	4007b800 	call	4007b80 <_Bfree>
 4004ad4:	d9000517 	ldw	r4,20(sp)
 4004ad8:	d9802317 	ldw	r6,140(sp)
 4004adc:	d9c02517 	ldw	r7,148(sp)
 4004ae0:	b8000005 	stb	zero,0(r23)
 4004ae4:	20800044 	addi	r2,r4,1
 4004ae8:	30800015 	stw	r2,0(r6)
 4004aec:	3802aa26 	beq	r7,zero,4005598 <_dtoa_r+0x1178>
 4004af0:	3dc00015 	stw	r23,0(r7)
 4004af4:	d8800717 	ldw	r2,28(sp)
 4004af8:	003e7906 	br	40044e0 <__alt_data_end+0xfc0044e0>
 4004afc:	00800434 	movhi	r2,16
 4004b00:	10bfffc4 	addi	r2,r2,-1
 4004b04:	88a2703a 	and	r17,r17,r2
 4004b08:	883e851e 	bne	r17,zero,4004520 <__alt_data_end+0xfc004520>
 4004b0c:	00810074 	movhi	r2,1025
 4004b10:	108a6704 	addi	r2,r2,10652
 4004b14:	003e8406 	br	4004528 <__alt_data_end+0xfc004528>
 4004b18:	10c00204 	addi	r3,r2,8
 4004b1c:	003e8706 	br	400453c <__alt_data_end+0xfc00453c>
 4004b20:	01400434 	movhi	r5,16
 4004b24:	297fffc4 	addi	r5,r5,-1
 4004b28:	994a703a 	and	r5,r19,r5
 4004b2c:	9009883a 	mov	r4,r18
 4004b30:	843f0044 	addi	r16,r16,-1023
 4004b34:	294ffc34 	orhi	r5,r5,16368
 4004b38:	dd800217 	ldw	r22,8(sp)
 4004b3c:	d8001115 	stw	zero,68(sp)
 4004b40:	003ea506 	br	40045d8 <__alt_data_end+0xfc0045d8>
 4004b44:	00810074 	movhi	r2,1025
 4004b48:	108a5e04 	addi	r2,r2,10616
 4004b4c:	003e6406 	br	40044e0 <__alt_data_end+0xfc0044e0>
 4004b50:	e0001115 	stw	zero,68(fp)
 4004b54:	000b883a 	mov	r5,zero
 4004b58:	e009883a 	mov	r4,fp
 4004b5c:	4007ad80 	call	4007ad8 <_Balloc>
 4004b60:	01bfffc4 	movi	r6,-1
 4004b64:	01c00044 	movi	r7,1
 4004b68:	d8800715 	stw	r2,28(sp)
 4004b6c:	d9800c15 	stw	r6,48(sp)
 4004b70:	e0801015 	stw	r2,64(fp)
 4004b74:	d8000315 	stw	zero,12(sp)
 4004b78:	d9c00b15 	stw	r7,44(sp)
 4004b7c:	d9800615 	stw	r6,24(sp)
 4004b80:	d8002215 	stw	zero,136(sp)
 4004b84:	d8800117 	ldw	r2,4(sp)
 4004b88:	10008916 	blt	r2,zero,4004db0 <_dtoa_r+0x990>
 4004b8c:	d9000517 	ldw	r4,20(sp)
 4004b90:	00c00384 	movi	r3,14
 4004b94:	19008616 	blt	r3,r4,4004db0 <_dtoa_r+0x990>
 4004b98:	200490fa 	slli	r2,r4,3
 4004b9c:	00c10074 	movhi	r3,1025
 4004ba0:	d9802217 	ldw	r6,136(sp)
 4004ba4:	18ca8604 	addi	r3,r3,10776
 4004ba8:	1885883a 	add	r2,r3,r2
 4004bac:	14000017 	ldw	r16,0(r2)
 4004bb0:	14400117 	ldw	r17,4(r2)
 4004bb4:	30016316 	blt	r6,zero,4005144 <_dtoa_r+0xd24>
 4004bb8:	800d883a 	mov	r6,r16
 4004bbc:	880f883a 	mov	r7,r17
 4004bc0:	9009883a 	mov	r4,r18
 4004bc4:	980b883a 	mov	r5,r19
 4004bc8:	400ca380 	call	400ca38 <__divdf3>
 4004bcc:	180b883a 	mov	r5,r3
 4004bd0:	1009883a 	mov	r4,r2
 4004bd4:	400e7c80 	call	400e7c8 <__fixdfsi>
 4004bd8:	1009883a 	mov	r4,r2
 4004bdc:	102b883a 	mov	r21,r2
 4004be0:	400e8480 	call	400e848 <__floatsidf>
 4004be4:	800d883a 	mov	r6,r16
 4004be8:	880f883a 	mov	r7,r17
 4004bec:	1009883a 	mov	r4,r2
 4004bf0:	180b883a 	mov	r5,r3
 4004bf4:	400d6600 	call	400d660 <__muldf3>
 4004bf8:	100d883a 	mov	r6,r2
 4004bfc:	180f883a 	mov	r7,r3
 4004c00:	9009883a 	mov	r4,r18
 4004c04:	980b883a 	mov	r5,r19
 4004c08:	400decc0 	call	400decc <__subdf3>
 4004c0c:	d9c00717 	ldw	r7,28(sp)
 4004c10:	1009883a 	mov	r4,r2
 4004c14:	a8800c04 	addi	r2,r21,48
 4004c18:	38800005 	stb	r2,0(r7)
 4004c1c:	3dc00044 	addi	r23,r7,1
 4004c20:	d9c00617 	ldw	r7,24(sp)
 4004c24:	01800044 	movi	r6,1
 4004c28:	180b883a 	mov	r5,r3
 4004c2c:	2005883a 	mov	r2,r4
 4004c30:	39803826 	beq	r7,r6,4004d14 <_dtoa_r+0x8f4>
 4004c34:	000d883a 	mov	r6,zero
 4004c38:	01d00934 	movhi	r7,16420
 4004c3c:	400d6600 	call	400d660 <__muldf3>
 4004c40:	000d883a 	mov	r6,zero
 4004c44:	000f883a 	mov	r7,zero
 4004c48:	1009883a 	mov	r4,r2
 4004c4c:	180b883a 	mov	r5,r3
 4004c50:	1025883a 	mov	r18,r2
 4004c54:	1827883a 	mov	r19,r3
 4004c58:	400d4080 	call	400d408 <__eqdf2>
 4004c5c:	103f9a26 	beq	r2,zero,4004ac8 <__alt_data_end+0xfc004ac8>
 4004c60:	d9c00617 	ldw	r7,24(sp)
 4004c64:	d8c00717 	ldw	r3,28(sp)
 4004c68:	b829883a 	mov	r20,r23
 4004c6c:	38bfffc4 	addi	r2,r7,-1
 4004c70:	18ad883a 	add	r22,r3,r2
 4004c74:	00000a06 	br	4004ca0 <_dtoa_r+0x880>
 4004c78:	400d6600 	call	400d660 <__muldf3>
 4004c7c:	000d883a 	mov	r6,zero
 4004c80:	000f883a 	mov	r7,zero
 4004c84:	1009883a 	mov	r4,r2
 4004c88:	180b883a 	mov	r5,r3
 4004c8c:	1025883a 	mov	r18,r2
 4004c90:	1827883a 	mov	r19,r3
 4004c94:	b829883a 	mov	r20,r23
 4004c98:	400d4080 	call	400d408 <__eqdf2>
 4004c9c:	103f8a26 	beq	r2,zero,4004ac8 <__alt_data_end+0xfc004ac8>
 4004ca0:	800d883a 	mov	r6,r16
 4004ca4:	880f883a 	mov	r7,r17
 4004ca8:	9009883a 	mov	r4,r18
 4004cac:	980b883a 	mov	r5,r19
 4004cb0:	400ca380 	call	400ca38 <__divdf3>
 4004cb4:	180b883a 	mov	r5,r3
 4004cb8:	1009883a 	mov	r4,r2
 4004cbc:	400e7c80 	call	400e7c8 <__fixdfsi>
 4004cc0:	1009883a 	mov	r4,r2
 4004cc4:	102b883a 	mov	r21,r2
 4004cc8:	400e8480 	call	400e848 <__floatsidf>
 4004ccc:	800d883a 	mov	r6,r16
 4004cd0:	880f883a 	mov	r7,r17
 4004cd4:	1009883a 	mov	r4,r2
 4004cd8:	180b883a 	mov	r5,r3
 4004cdc:	400d6600 	call	400d660 <__muldf3>
 4004ce0:	100d883a 	mov	r6,r2
 4004ce4:	180f883a 	mov	r7,r3
 4004ce8:	9009883a 	mov	r4,r18
 4004cec:	980b883a 	mov	r5,r19
 4004cf0:	400decc0 	call	400decc <__subdf3>
 4004cf4:	aa000c04 	addi	r8,r21,48
 4004cf8:	a2000005 	stb	r8,0(r20)
 4004cfc:	000d883a 	mov	r6,zero
 4004d00:	01d00934 	movhi	r7,16420
 4004d04:	1009883a 	mov	r4,r2
 4004d08:	180b883a 	mov	r5,r3
 4004d0c:	a5c00044 	addi	r23,r20,1
 4004d10:	b53fd91e 	bne	r22,r20,4004c78 <__alt_data_end+0xfc004c78>
 4004d14:	100d883a 	mov	r6,r2
 4004d18:	180f883a 	mov	r7,r3
 4004d1c:	1009883a 	mov	r4,r2
 4004d20:	180b883a 	mov	r5,r3
 4004d24:	400c18c0 	call	400c18c <__adddf3>
 4004d28:	100d883a 	mov	r6,r2
 4004d2c:	180f883a 	mov	r7,r3
 4004d30:	8009883a 	mov	r4,r16
 4004d34:	880b883a 	mov	r5,r17
 4004d38:	1027883a 	mov	r19,r2
 4004d3c:	1825883a 	mov	r18,r3
 4004d40:	400d56c0 	call	400d56c <__ledf2>
 4004d44:	10000816 	blt	r2,zero,4004d68 <_dtoa_r+0x948>
 4004d48:	980d883a 	mov	r6,r19
 4004d4c:	900f883a 	mov	r7,r18
 4004d50:	8009883a 	mov	r4,r16
 4004d54:	880b883a 	mov	r5,r17
 4004d58:	400d4080 	call	400d408 <__eqdf2>
 4004d5c:	103f5a1e 	bne	r2,zero,4004ac8 <__alt_data_end+0xfc004ac8>
 4004d60:	ad40004c 	andi	r21,r21,1
 4004d64:	a83f5826 	beq	r21,zero,4004ac8 <__alt_data_end+0xfc004ac8>
 4004d68:	bd3fffc3 	ldbu	r20,-1(r23)
 4004d6c:	b8bfffc4 	addi	r2,r23,-1
 4004d70:	1007883a 	mov	r3,r2
 4004d74:	01400e44 	movi	r5,57
 4004d78:	d9800717 	ldw	r6,28(sp)
 4004d7c:	00000506 	br	4004d94 <_dtoa_r+0x974>
 4004d80:	18ffffc4 	addi	r3,r3,-1
 4004d84:	11824726 	beq	r2,r6,40056a4 <_dtoa_r+0x1284>
 4004d88:	1d000003 	ldbu	r20,0(r3)
 4004d8c:	102f883a 	mov	r23,r2
 4004d90:	10bfffc4 	addi	r2,r2,-1
 4004d94:	a1003fcc 	andi	r4,r20,255
 4004d98:	2100201c 	xori	r4,r4,128
 4004d9c:	213fe004 	addi	r4,r4,-128
 4004da0:	217ff726 	beq	r4,r5,4004d80 <__alt_data_end+0xfc004d80>
 4004da4:	a2000044 	addi	r8,r20,1
 4004da8:	12000005 	stb	r8,0(r2)
 4004dac:	003f4606 	br	4004ac8 <__alt_data_end+0xfc004ac8>
 4004db0:	d9000b17 	ldw	r4,44(sp)
 4004db4:	2000c826 	beq	r4,zero,40050d8 <_dtoa_r+0xcb8>
 4004db8:	d9800317 	ldw	r6,12(sp)
 4004dbc:	00c00044 	movi	r3,1
 4004dc0:	1980f90e 	bge	r3,r6,40051a8 <_dtoa_r+0xd88>
 4004dc4:	d8800617 	ldw	r2,24(sp)
 4004dc8:	d8c00a17 	ldw	r3,40(sp)
 4004dcc:	157fffc4 	addi	r21,r2,-1
 4004dd0:	1d41f316 	blt	r3,r21,40055a0 <_dtoa_r+0x1180>
 4004dd4:	1d6bc83a 	sub	r21,r3,r21
 4004dd8:	d9c00617 	ldw	r7,24(sp)
 4004ddc:	3802aa16 	blt	r7,zero,4005888 <_dtoa_r+0x1468>
 4004de0:	dd000817 	ldw	r20,32(sp)
 4004de4:	d8800617 	ldw	r2,24(sp)
 4004de8:	d8c00817 	ldw	r3,32(sp)
 4004dec:	01400044 	movi	r5,1
 4004df0:	e009883a 	mov	r4,fp
 4004df4:	1887883a 	add	r3,r3,r2
 4004df8:	d8c00815 	stw	r3,32(sp)
 4004dfc:	b0ad883a 	add	r22,r22,r2
 4004e00:	4007f0c0 	call	4007f0c <__i2b>
 4004e04:	1023883a 	mov	r17,r2
 4004e08:	a0000826 	beq	r20,zero,4004e2c <_dtoa_r+0xa0c>
 4004e0c:	0580070e 	bge	zero,r22,4004e2c <_dtoa_r+0xa0c>
 4004e10:	a005883a 	mov	r2,r20
 4004e14:	b500b916 	blt	r22,r20,40050fc <_dtoa_r+0xcdc>
 4004e18:	d9000817 	ldw	r4,32(sp)
 4004e1c:	a0a9c83a 	sub	r20,r20,r2
 4004e20:	b0adc83a 	sub	r22,r22,r2
 4004e24:	2089c83a 	sub	r4,r4,r2
 4004e28:	d9000815 	stw	r4,32(sp)
 4004e2c:	d9800a17 	ldw	r6,40(sp)
 4004e30:	0181810e 	bge	zero,r6,4005438 <_dtoa_r+0x1018>
 4004e34:	d9c00b17 	ldw	r7,44(sp)
 4004e38:	3800b326 	beq	r7,zero,4005108 <_dtoa_r+0xce8>
 4004e3c:	a800b226 	beq	r21,zero,4005108 <_dtoa_r+0xce8>
 4004e40:	880b883a 	mov	r5,r17
 4004e44:	a80d883a 	mov	r6,r21
 4004e48:	e009883a 	mov	r4,fp
 4004e4c:	40081d40 	call	40081d4 <__pow5mult>
 4004e50:	d9800917 	ldw	r6,36(sp)
 4004e54:	100b883a 	mov	r5,r2
 4004e58:	e009883a 	mov	r4,fp
 4004e5c:	1023883a 	mov	r17,r2
 4004e60:	4007f480 	call	4007f48 <__multiply>
 4004e64:	1021883a 	mov	r16,r2
 4004e68:	d8800a17 	ldw	r2,40(sp)
 4004e6c:	d9400917 	ldw	r5,36(sp)
 4004e70:	e009883a 	mov	r4,fp
 4004e74:	1545c83a 	sub	r2,r2,r21
 4004e78:	d8800a15 	stw	r2,40(sp)
 4004e7c:	4007b800 	call	4007b80 <_Bfree>
 4004e80:	d8c00a17 	ldw	r3,40(sp)
 4004e84:	18009f1e 	bne	r3,zero,4005104 <_dtoa_r+0xce4>
 4004e88:	05c00044 	movi	r23,1
 4004e8c:	e009883a 	mov	r4,fp
 4004e90:	b80b883a 	mov	r5,r23
 4004e94:	4007f0c0 	call	4007f0c <__i2b>
 4004e98:	d9000d17 	ldw	r4,52(sp)
 4004e9c:	102b883a 	mov	r21,r2
 4004ea0:	2000ce26 	beq	r4,zero,40051dc <_dtoa_r+0xdbc>
 4004ea4:	200d883a 	mov	r6,r4
 4004ea8:	100b883a 	mov	r5,r2
 4004eac:	e009883a 	mov	r4,fp
 4004eb0:	40081d40 	call	40081d4 <__pow5mult>
 4004eb4:	d9800317 	ldw	r6,12(sp)
 4004eb8:	102b883a 	mov	r21,r2
 4004ebc:	b981810e 	bge	r23,r6,40054c4 <_dtoa_r+0x10a4>
 4004ec0:	0027883a 	mov	r19,zero
 4004ec4:	a8800417 	ldw	r2,16(r21)
 4004ec8:	05c00804 	movi	r23,32
 4004ecc:	10800104 	addi	r2,r2,4
 4004ed0:	1085883a 	add	r2,r2,r2
 4004ed4:	1085883a 	add	r2,r2,r2
 4004ed8:	a885883a 	add	r2,r21,r2
 4004edc:	11000017 	ldw	r4,0(r2)
 4004ee0:	4007df40 	call	4007df4 <__hi0bits>
 4004ee4:	b885c83a 	sub	r2,r23,r2
 4004ee8:	1585883a 	add	r2,r2,r22
 4004eec:	108007cc 	andi	r2,r2,31
 4004ef0:	1000b326 	beq	r2,zero,40051c0 <_dtoa_r+0xda0>
 4004ef4:	00c00804 	movi	r3,32
 4004ef8:	1887c83a 	sub	r3,r3,r2
 4004efc:	01000104 	movi	r4,4
 4004f00:	20c2cd0e 	bge	r4,r3,4005a38 <_dtoa_r+0x1618>
 4004f04:	00c00704 	movi	r3,28
 4004f08:	1885c83a 	sub	r2,r3,r2
 4004f0c:	d8c00817 	ldw	r3,32(sp)
 4004f10:	a0a9883a 	add	r20,r20,r2
 4004f14:	b0ad883a 	add	r22,r22,r2
 4004f18:	1887883a 	add	r3,r3,r2
 4004f1c:	d8c00815 	stw	r3,32(sp)
 4004f20:	d9800817 	ldw	r6,32(sp)
 4004f24:	0180040e 	bge	zero,r6,4004f38 <_dtoa_r+0xb18>
 4004f28:	800b883a 	mov	r5,r16
 4004f2c:	e009883a 	mov	r4,fp
 4004f30:	40083140 	call	4008314 <__lshift>
 4004f34:	1021883a 	mov	r16,r2
 4004f38:	0580050e 	bge	zero,r22,4004f50 <_dtoa_r+0xb30>
 4004f3c:	a80b883a 	mov	r5,r21
 4004f40:	b00d883a 	mov	r6,r22
 4004f44:	e009883a 	mov	r4,fp
 4004f48:	40083140 	call	4008314 <__lshift>
 4004f4c:	102b883a 	mov	r21,r2
 4004f50:	d9c00e17 	ldw	r7,56(sp)
 4004f54:	3801211e 	bne	r7,zero,40053dc <_dtoa_r+0xfbc>
 4004f58:	d9800617 	ldw	r6,24(sp)
 4004f5c:	0181380e 	bge	zero,r6,4005440 <_dtoa_r+0x1020>
 4004f60:	d8c00b17 	ldw	r3,44(sp)
 4004f64:	1800ab1e 	bne	r3,zero,4005214 <_dtoa_r+0xdf4>
 4004f68:	dc800717 	ldw	r18,28(sp)
 4004f6c:	dcc00617 	ldw	r19,24(sp)
 4004f70:	9029883a 	mov	r20,r18
 4004f74:	00000206 	br	4004f80 <_dtoa_r+0xb60>
 4004f78:	4007ba80 	call	4007ba8 <__multadd>
 4004f7c:	1021883a 	mov	r16,r2
 4004f80:	a80b883a 	mov	r5,r21
 4004f84:	8009883a 	mov	r4,r16
 4004f88:	40041f80 	call	40041f8 <quorem>
 4004f8c:	10800c04 	addi	r2,r2,48
 4004f90:	90800005 	stb	r2,0(r18)
 4004f94:	94800044 	addi	r18,r18,1
 4004f98:	9507c83a 	sub	r3,r18,r20
 4004f9c:	000f883a 	mov	r7,zero
 4004fa0:	01800284 	movi	r6,10
 4004fa4:	800b883a 	mov	r5,r16
 4004fa8:	e009883a 	mov	r4,fp
 4004fac:	1cfff216 	blt	r3,r19,4004f78 <__alt_data_end+0xfc004f78>
 4004fb0:	1011883a 	mov	r8,r2
 4004fb4:	d8800617 	ldw	r2,24(sp)
 4004fb8:	0082370e 	bge	zero,r2,4005898 <_dtoa_r+0x1478>
 4004fbc:	d9000717 	ldw	r4,28(sp)
 4004fc0:	0025883a 	mov	r18,zero
 4004fc4:	20af883a 	add	r23,r4,r2
 4004fc8:	01800044 	movi	r6,1
 4004fcc:	800b883a 	mov	r5,r16
 4004fd0:	e009883a 	mov	r4,fp
 4004fd4:	da001715 	stw	r8,92(sp)
 4004fd8:	40083140 	call	4008314 <__lshift>
 4004fdc:	a80b883a 	mov	r5,r21
 4004fe0:	1009883a 	mov	r4,r2
 4004fe4:	d8800915 	stw	r2,36(sp)
 4004fe8:	400845c0 	call	400845c <__mcmp>
 4004fec:	da001717 	ldw	r8,92(sp)
 4004ff0:	0081800e 	bge	zero,r2,40055f4 <_dtoa_r+0x11d4>
 4004ff4:	b93fffc3 	ldbu	r4,-1(r23)
 4004ff8:	b8bfffc4 	addi	r2,r23,-1
 4004ffc:	1007883a 	mov	r3,r2
 4005000:	01800e44 	movi	r6,57
 4005004:	d9c00717 	ldw	r7,28(sp)
 4005008:	00000506 	br	4005020 <_dtoa_r+0xc00>
 400500c:	18ffffc4 	addi	r3,r3,-1
 4005010:	11c12326 	beq	r2,r7,40054a0 <_dtoa_r+0x1080>
 4005014:	19000003 	ldbu	r4,0(r3)
 4005018:	102f883a 	mov	r23,r2
 400501c:	10bfffc4 	addi	r2,r2,-1
 4005020:	21403fcc 	andi	r5,r4,255
 4005024:	2940201c 	xori	r5,r5,128
 4005028:	297fe004 	addi	r5,r5,-128
 400502c:	29bff726 	beq	r5,r6,400500c <__alt_data_end+0xfc00500c>
 4005030:	21000044 	addi	r4,r4,1
 4005034:	11000005 	stb	r4,0(r2)
 4005038:	a80b883a 	mov	r5,r21
 400503c:	e009883a 	mov	r4,fp
 4005040:	4007b800 	call	4007b80 <_Bfree>
 4005044:	883ea026 	beq	r17,zero,4004ac8 <__alt_data_end+0xfc004ac8>
 4005048:	90000426 	beq	r18,zero,400505c <_dtoa_r+0xc3c>
 400504c:	94400326 	beq	r18,r17,400505c <_dtoa_r+0xc3c>
 4005050:	900b883a 	mov	r5,r18
 4005054:	e009883a 	mov	r4,fp
 4005058:	4007b800 	call	4007b80 <_Bfree>
 400505c:	880b883a 	mov	r5,r17
 4005060:	e009883a 	mov	r4,fp
 4005064:	4007b800 	call	4007b80 <_Bfree>
 4005068:	003e9706 	br	4004ac8 <__alt_data_end+0xfc004ac8>
 400506c:	01800044 	movi	r6,1
 4005070:	d9800e15 	stw	r6,56(sp)
 4005074:	003d9606 	br	40046d0 <__alt_data_end+0xfc0046d0>
 4005078:	d8800817 	ldw	r2,32(sp)
 400507c:	d8c00517 	ldw	r3,20(sp)
 4005080:	d8000d15 	stw	zero,52(sp)
 4005084:	10c5c83a 	sub	r2,r2,r3
 4005088:	00c9c83a 	sub	r4,zero,r3
 400508c:	d8800815 	stw	r2,32(sp)
 4005090:	d9000a15 	stw	r4,40(sp)
 4005094:	003d9706 	br	40046f4 <__alt_data_end+0xfc0046f4>
 4005098:	05adc83a 	sub	r22,zero,r22
 400509c:	dd800815 	stw	r22,32(sp)
 40050a0:	002d883a 	mov	r22,zero
 40050a4:	003d8e06 	br	40046e0 <__alt_data_end+0xfc0046e0>
 40050a8:	d9000517 	ldw	r4,20(sp)
 40050ac:	400e8480 	call	400e848 <__floatsidf>
 40050b0:	100d883a 	mov	r6,r2
 40050b4:	180f883a 	mov	r7,r3
 40050b8:	a009883a 	mov	r4,r20
 40050bc:	880b883a 	mov	r5,r17
 40050c0:	400d4080 	call	400d408 <__eqdf2>
 40050c4:	103d7126 	beq	r2,zero,400468c <__alt_data_end+0xfc00468c>
 40050c8:	d9c00517 	ldw	r7,20(sp)
 40050cc:	39ffffc4 	addi	r7,r7,-1
 40050d0:	d9c00515 	stw	r7,20(sp)
 40050d4:	003d6d06 	br	400468c <__alt_data_end+0xfc00468c>
 40050d8:	dd400a17 	ldw	r21,40(sp)
 40050dc:	dd000817 	ldw	r20,32(sp)
 40050e0:	0023883a 	mov	r17,zero
 40050e4:	003f4806 	br	4004e08 <__alt_data_end+0xfc004e08>
 40050e8:	10e3c83a 	sub	r17,r2,r3
 40050ec:	9448983a 	sll	r4,r18,r17
 40050f0:	003d3206 	br	40045bc <__alt_data_end+0xfc0045bc>
 40050f4:	d8000e15 	stw	zero,56(sp)
 40050f8:	003d7506 	br	40046d0 <__alt_data_end+0xfc0046d0>
 40050fc:	b005883a 	mov	r2,r22
 4005100:	003f4506 	br	4004e18 <__alt_data_end+0xfc004e18>
 4005104:	dc000915 	stw	r16,36(sp)
 4005108:	d9800a17 	ldw	r6,40(sp)
 400510c:	d9400917 	ldw	r5,36(sp)
 4005110:	e009883a 	mov	r4,fp
 4005114:	40081d40 	call	40081d4 <__pow5mult>
 4005118:	1021883a 	mov	r16,r2
 400511c:	003f5a06 	br	4004e88 <__alt_data_end+0xfc004e88>
 4005120:	01c00044 	movi	r7,1
 4005124:	d9c00b15 	stw	r7,44(sp)
 4005128:	d8802217 	ldw	r2,136(sp)
 400512c:	0081280e 	bge	zero,r2,40055d0 <_dtoa_r+0x11b0>
 4005130:	100d883a 	mov	r6,r2
 4005134:	1021883a 	mov	r16,r2
 4005138:	d8800c15 	stw	r2,48(sp)
 400513c:	d8800615 	stw	r2,24(sp)
 4005140:	003d8806 	br	4004764 <__alt_data_end+0xfc004764>
 4005144:	d8800617 	ldw	r2,24(sp)
 4005148:	00be9b16 	blt	zero,r2,4004bb8 <__alt_data_end+0xfc004bb8>
 400514c:	10010f1e 	bne	r2,zero,400558c <_dtoa_r+0x116c>
 4005150:	880b883a 	mov	r5,r17
 4005154:	000d883a 	mov	r6,zero
 4005158:	01d00534 	movhi	r7,16404
 400515c:	8009883a 	mov	r4,r16
 4005160:	400d6600 	call	400d660 <__muldf3>
 4005164:	900d883a 	mov	r6,r18
 4005168:	980f883a 	mov	r7,r19
 400516c:	1009883a 	mov	r4,r2
 4005170:	180b883a 	mov	r5,r3
 4005174:	400d4900 	call	400d490 <__gedf2>
 4005178:	002b883a 	mov	r21,zero
 400517c:	0023883a 	mov	r17,zero
 4005180:	1000bf16 	blt	r2,zero,4005480 <_dtoa_r+0x1060>
 4005184:	d9802217 	ldw	r6,136(sp)
 4005188:	ddc00717 	ldw	r23,28(sp)
 400518c:	018c303a 	nor	r6,zero,r6
 4005190:	d9800515 	stw	r6,20(sp)
 4005194:	a80b883a 	mov	r5,r21
 4005198:	e009883a 	mov	r4,fp
 400519c:	4007b800 	call	4007b80 <_Bfree>
 40051a0:	883e4926 	beq	r17,zero,4004ac8 <__alt_data_end+0xfc004ac8>
 40051a4:	003fad06 	br	400505c <__alt_data_end+0xfc00505c>
 40051a8:	d9c01117 	ldw	r7,68(sp)
 40051ac:	3801bc26 	beq	r7,zero,40058a0 <_dtoa_r+0x1480>
 40051b0:	10810cc4 	addi	r2,r2,1075
 40051b4:	dd400a17 	ldw	r21,40(sp)
 40051b8:	dd000817 	ldw	r20,32(sp)
 40051bc:	003f0a06 	br	4004de8 <__alt_data_end+0xfc004de8>
 40051c0:	00800704 	movi	r2,28
 40051c4:	d9000817 	ldw	r4,32(sp)
 40051c8:	a0a9883a 	add	r20,r20,r2
 40051cc:	b0ad883a 	add	r22,r22,r2
 40051d0:	2089883a 	add	r4,r4,r2
 40051d4:	d9000815 	stw	r4,32(sp)
 40051d8:	003f5106 	br	4004f20 <__alt_data_end+0xfc004f20>
 40051dc:	d8c00317 	ldw	r3,12(sp)
 40051e0:	b8c1fc0e 	bge	r23,r3,40059d4 <_dtoa_r+0x15b4>
 40051e4:	0027883a 	mov	r19,zero
 40051e8:	b805883a 	mov	r2,r23
 40051ec:	003f3e06 	br	4004ee8 <__alt_data_end+0xfc004ee8>
 40051f0:	880b883a 	mov	r5,r17
 40051f4:	e009883a 	mov	r4,fp
 40051f8:	000f883a 	mov	r7,zero
 40051fc:	01800284 	movi	r6,10
 4005200:	4007ba80 	call	4007ba8 <__multadd>
 4005204:	d9000c17 	ldw	r4,48(sp)
 4005208:	1023883a 	mov	r17,r2
 400520c:	0102040e 	bge	zero,r4,4005a20 <_dtoa_r+0x1600>
 4005210:	d9000615 	stw	r4,24(sp)
 4005214:	0500050e 	bge	zero,r20,400522c <_dtoa_r+0xe0c>
 4005218:	880b883a 	mov	r5,r17
 400521c:	a00d883a 	mov	r6,r20
 4005220:	e009883a 	mov	r4,fp
 4005224:	40083140 	call	4008314 <__lshift>
 4005228:	1023883a 	mov	r17,r2
 400522c:	9801241e 	bne	r19,zero,40056c0 <_dtoa_r+0x12a0>
 4005230:	8829883a 	mov	r20,r17
 4005234:	d9000617 	ldw	r4,24(sp)
 4005238:	dcc00717 	ldw	r19,28(sp)
 400523c:	9480004c 	andi	r18,r18,1
 4005240:	20bfffc4 	addi	r2,r4,-1
 4005244:	9885883a 	add	r2,r19,r2
 4005248:	d8800415 	stw	r2,16(sp)
 400524c:	dc800615 	stw	r18,24(sp)
 4005250:	a80b883a 	mov	r5,r21
 4005254:	8009883a 	mov	r4,r16
 4005258:	40041f80 	call	40041f8 <quorem>
 400525c:	880b883a 	mov	r5,r17
 4005260:	8009883a 	mov	r4,r16
 4005264:	102f883a 	mov	r23,r2
 4005268:	400845c0 	call	400845c <__mcmp>
 400526c:	a80b883a 	mov	r5,r21
 4005270:	a00d883a 	mov	r6,r20
 4005274:	e009883a 	mov	r4,fp
 4005278:	102d883a 	mov	r22,r2
 400527c:	40084bc0 	call	40084bc <__mdiff>
 4005280:	1007883a 	mov	r3,r2
 4005284:	10800317 	ldw	r2,12(r2)
 4005288:	bc800c04 	addi	r18,r23,48
 400528c:	180b883a 	mov	r5,r3
 4005290:	10004e1e 	bne	r2,zero,40053cc <_dtoa_r+0xfac>
 4005294:	8009883a 	mov	r4,r16
 4005298:	d8c01615 	stw	r3,88(sp)
 400529c:	400845c0 	call	400845c <__mcmp>
 40052a0:	d8c01617 	ldw	r3,88(sp)
 40052a4:	e009883a 	mov	r4,fp
 40052a8:	d8801615 	stw	r2,88(sp)
 40052ac:	180b883a 	mov	r5,r3
 40052b0:	4007b800 	call	4007b80 <_Bfree>
 40052b4:	d8801617 	ldw	r2,88(sp)
 40052b8:	1000041e 	bne	r2,zero,40052cc <_dtoa_r+0xeac>
 40052bc:	d9800317 	ldw	r6,12(sp)
 40052c0:	3000021e 	bne	r6,zero,40052cc <_dtoa_r+0xeac>
 40052c4:	d8c00617 	ldw	r3,24(sp)
 40052c8:	18003726 	beq	r3,zero,40053a8 <_dtoa_r+0xf88>
 40052cc:	b0002016 	blt	r22,zero,4005350 <_dtoa_r+0xf30>
 40052d0:	b000041e 	bne	r22,zero,40052e4 <_dtoa_r+0xec4>
 40052d4:	d9000317 	ldw	r4,12(sp)
 40052d8:	2000021e 	bne	r4,zero,40052e4 <_dtoa_r+0xec4>
 40052dc:	d8c00617 	ldw	r3,24(sp)
 40052e0:	18001b26 	beq	r3,zero,4005350 <_dtoa_r+0xf30>
 40052e4:	00810716 	blt	zero,r2,4005704 <_dtoa_r+0x12e4>
 40052e8:	d8c00417 	ldw	r3,16(sp)
 40052ec:	9d800044 	addi	r22,r19,1
 40052f0:	9c800005 	stb	r18,0(r19)
 40052f4:	b02f883a 	mov	r23,r22
 40052f8:	98c10626 	beq	r19,r3,4005714 <_dtoa_r+0x12f4>
 40052fc:	800b883a 	mov	r5,r16
 4005300:	000f883a 	mov	r7,zero
 4005304:	01800284 	movi	r6,10
 4005308:	e009883a 	mov	r4,fp
 400530c:	4007ba80 	call	4007ba8 <__multadd>
 4005310:	1021883a 	mov	r16,r2
 4005314:	000f883a 	mov	r7,zero
 4005318:	01800284 	movi	r6,10
 400531c:	880b883a 	mov	r5,r17
 4005320:	e009883a 	mov	r4,fp
 4005324:	8d002526 	beq	r17,r20,40053bc <_dtoa_r+0xf9c>
 4005328:	4007ba80 	call	4007ba8 <__multadd>
 400532c:	a00b883a 	mov	r5,r20
 4005330:	000f883a 	mov	r7,zero
 4005334:	01800284 	movi	r6,10
 4005338:	e009883a 	mov	r4,fp
 400533c:	1023883a 	mov	r17,r2
 4005340:	4007ba80 	call	4007ba8 <__multadd>
 4005344:	1029883a 	mov	r20,r2
 4005348:	b027883a 	mov	r19,r22
 400534c:	003fc006 	br	4005250 <__alt_data_end+0xfc005250>
 4005350:	9011883a 	mov	r8,r18
 4005354:	00800e0e 	bge	zero,r2,4005390 <_dtoa_r+0xf70>
 4005358:	800b883a 	mov	r5,r16
 400535c:	01800044 	movi	r6,1
 4005360:	e009883a 	mov	r4,fp
 4005364:	da001715 	stw	r8,92(sp)
 4005368:	40083140 	call	4008314 <__lshift>
 400536c:	a80b883a 	mov	r5,r21
 4005370:	1009883a 	mov	r4,r2
 4005374:	1021883a 	mov	r16,r2
 4005378:	400845c0 	call	400845c <__mcmp>
 400537c:	da001717 	ldw	r8,92(sp)
 4005380:	0081960e 	bge	zero,r2,40059dc <_dtoa_r+0x15bc>
 4005384:	00800e44 	movi	r2,57
 4005388:	40817026 	beq	r8,r2,400594c <_dtoa_r+0x152c>
 400538c:	ba000c44 	addi	r8,r23,49
 4005390:	8825883a 	mov	r18,r17
 4005394:	9dc00044 	addi	r23,r19,1
 4005398:	9a000005 	stb	r8,0(r19)
 400539c:	a023883a 	mov	r17,r20
 40053a0:	dc000915 	stw	r16,36(sp)
 40053a4:	003f2406 	br	4005038 <__alt_data_end+0xfc005038>
 40053a8:	00800e44 	movi	r2,57
 40053ac:	9011883a 	mov	r8,r18
 40053b0:	90816626 	beq	r18,r2,400594c <_dtoa_r+0x152c>
 40053b4:	05bff516 	blt	zero,r22,400538c <__alt_data_end+0xfc00538c>
 40053b8:	003ff506 	br	4005390 <__alt_data_end+0xfc005390>
 40053bc:	4007ba80 	call	4007ba8 <__multadd>
 40053c0:	1023883a 	mov	r17,r2
 40053c4:	1029883a 	mov	r20,r2
 40053c8:	003fdf06 	br	4005348 <__alt_data_end+0xfc005348>
 40053cc:	e009883a 	mov	r4,fp
 40053d0:	4007b800 	call	4007b80 <_Bfree>
 40053d4:	00800044 	movi	r2,1
 40053d8:	003fbc06 	br	40052cc <__alt_data_end+0xfc0052cc>
 40053dc:	a80b883a 	mov	r5,r21
 40053e0:	8009883a 	mov	r4,r16
 40053e4:	400845c0 	call	400845c <__mcmp>
 40053e8:	103edb0e 	bge	r2,zero,4004f58 <__alt_data_end+0xfc004f58>
 40053ec:	800b883a 	mov	r5,r16
 40053f0:	000f883a 	mov	r7,zero
 40053f4:	01800284 	movi	r6,10
 40053f8:	e009883a 	mov	r4,fp
 40053fc:	4007ba80 	call	4007ba8 <__multadd>
 4005400:	1021883a 	mov	r16,r2
 4005404:	d8800517 	ldw	r2,20(sp)
 4005408:	d8c00b17 	ldw	r3,44(sp)
 400540c:	10bfffc4 	addi	r2,r2,-1
 4005410:	d8800515 	stw	r2,20(sp)
 4005414:	183f761e 	bne	r3,zero,40051f0 <__alt_data_end+0xfc0051f0>
 4005418:	d9000c17 	ldw	r4,48(sp)
 400541c:	0101730e 	bge	zero,r4,40059ec <_dtoa_r+0x15cc>
 4005420:	d9000615 	stw	r4,24(sp)
 4005424:	003ed006 	br	4004f68 <__alt_data_end+0xfc004f68>
 4005428:	00800084 	movi	r2,2
 400542c:	3081861e 	bne	r6,r2,4005a48 <_dtoa_r+0x1628>
 4005430:	d8000b15 	stw	zero,44(sp)
 4005434:	003f3c06 	br	4005128 <__alt_data_end+0xfc005128>
 4005438:	dc000917 	ldw	r16,36(sp)
 400543c:	003e9206 	br	4004e88 <__alt_data_end+0xfc004e88>
 4005440:	d9c00317 	ldw	r7,12(sp)
 4005444:	00800084 	movi	r2,2
 4005448:	11fec50e 	bge	r2,r7,4004f60 <__alt_data_end+0xfc004f60>
 400544c:	d9000617 	ldw	r4,24(sp)
 4005450:	20013c1e 	bne	r4,zero,4005944 <_dtoa_r+0x1524>
 4005454:	a80b883a 	mov	r5,r21
 4005458:	000f883a 	mov	r7,zero
 400545c:	01800144 	movi	r6,5
 4005460:	e009883a 	mov	r4,fp
 4005464:	4007ba80 	call	4007ba8 <__multadd>
 4005468:	100b883a 	mov	r5,r2
 400546c:	8009883a 	mov	r4,r16
 4005470:	102b883a 	mov	r21,r2
 4005474:	400845c0 	call	400845c <__mcmp>
 4005478:	dc000915 	stw	r16,36(sp)
 400547c:	00bf410e 	bge	zero,r2,4005184 <__alt_data_end+0xfc005184>
 4005480:	d9c00717 	ldw	r7,28(sp)
 4005484:	00800c44 	movi	r2,49
 4005488:	38800005 	stb	r2,0(r7)
 400548c:	d8800517 	ldw	r2,20(sp)
 4005490:	3dc00044 	addi	r23,r7,1
 4005494:	10800044 	addi	r2,r2,1
 4005498:	d8800515 	stw	r2,20(sp)
 400549c:	003f3d06 	br	4005194 <__alt_data_end+0xfc005194>
 40054a0:	d9800517 	ldw	r6,20(sp)
 40054a4:	d9c00717 	ldw	r7,28(sp)
 40054a8:	00800c44 	movi	r2,49
 40054ac:	31800044 	addi	r6,r6,1
 40054b0:	d9800515 	stw	r6,20(sp)
 40054b4:	38800005 	stb	r2,0(r7)
 40054b8:	003edf06 	br	4005038 <__alt_data_end+0xfc005038>
 40054bc:	d8000b15 	stw	zero,44(sp)
 40054c0:	003c9f06 	br	4004740 <__alt_data_end+0xfc004740>
 40054c4:	903e7e1e 	bne	r18,zero,4004ec0 <__alt_data_end+0xfc004ec0>
 40054c8:	00800434 	movhi	r2,16
 40054cc:	10bfffc4 	addi	r2,r2,-1
 40054d0:	9884703a 	and	r2,r19,r2
 40054d4:	1000ea1e 	bne	r2,zero,4005880 <_dtoa_r+0x1460>
 40054d8:	9cdffc2c 	andhi	r19,r19,32752
 40054dc:	9800e826 	beq	r19,zero,4005880 <_dtoa_r+0x1460>
 40054e0:	d9c00817 	ldw	r7,32(sp)
 40054e4:	b5800044 	addi	r22,r22,1
 40054e8:	04c00044 	movi	r19,1
 40054ec:	39c00044 	addi	r7,r7,1
 40054f0:	d9c00815 	stw	r7,32(sp)
 40054f4:	d8800d17 	ldw	r2,52(sp)
 40054f8:	103e721e 	bne	r2,zero,4004ec4 <__alt_data_end+0xfc004ec4>
 40054fc:	00800044 	movi	r2,1
 4005500:	003e7906 	br	4004ee8 <__alt_data_end+0xfc004ee8>
 4005504:	8009883a 	mov	r4,r16
 4005508:	400e8480 	call	400e848 <__floatsidf>
 400550c:	d9800f17 	ldw	r6,60(sp)
 4005510:	d9c01017 	ldw	r7,64(sp)
 4005514:	1009883a 	mov	r4,r2
 4005518:	180b883a 	mov	r5,r3
 400551c:	400d6600 	call	400d660 <__muldf3>
 4005520:	000d883a 	mov	r6,zero
 4005524:	01d00734 	movhi	r7,16412
 4005528:	1009883a 	mov	r4,r2
 400552c:	180b883a 	mov	r5,r3
 4005530:	400c18c0 	call	400c18c <__adddf3>
 4005534:	047f3034 	movhi	r17,64704
 4005538:	1021883a 	mov	r16,r2
 400553c:	1c63883a 	add	r17,r3,r17
 4005540:	d9000f17 	ldw	r4,60(sp)
 4005544:	d9401017 	ldw	r5,64(sp)
 4005548:	000d883a 	mov	r6,zero
 400554c:	01d00534 	movhi	r7,16404
 4005550:	400decc0 	call	400decc <__subdf3>
 4005554:	800d883a 	mov	r6,r16
 4005558:	880f883a 	mov	r7,r17
 400555c:	1009883a 	mov	r4,r2
 4005560:	180b883a 	mov	r5,r3
 4005564:	102b883a 	mov	r21,r2
 4005568:	1829883a 	mov	r20,r3
 400556c:	400d4900 	call	400d490 <__gedf2>
 4005570:	00806c16 	blt	zero,r2,4005724 <_dtoa_r+0x1304>
 4005574:	89e0003c 	xorhi	r7,r17,32768
 4005578:	800d883a 	mov	r6,r16
 400557c:	a809883a 	mov	r4,r21
 4005580:	a00b883a 	mov	r5,r20
 4005584:	400d56c0 	call	400d56c <__ledf2>
 4005588:	103d7e0e 	bge	r2,zero,4004b84 <__alt_data_end+0xfc004b84>
 400558c:	002b883a 	mov	r21,zero
 4005590:	0023883a 	mov	r17,zero
 4005594:	003efb06 	br	4005184 <__alt_data_end+0xfc005184>
 4005598:	d8800717 	ldw	r2,28(sp)
 400559c:	003bd006 	br	40044e0 <__alt_data_end+0xfc0044e0>
 40055a0:	d9000a17 	ldw	r4,40(sp)
 40055a4:	d9800d17 	ldw	r6,52(sp)
 40055a8:	dd400a15 	stw	r21,40(sp)
 40055ac:	a905c83a 	sub	r2,r21,r4
 40055b0:	308d883a 	add	r6,r6,r2
 40055b4:	d9800d15 	stw	r6,52(sp)
 40055b8:	002b883a 	mov	r21,zero
 40055bc:	003e0606 	br	4004dd8 <__alt_data_end+0xfc004dd8>
 40055c0:	9023883a 	mov	r17,r18
 40055c4:	9829883a 	mov	r20,r19
 40055c8:	04000084 	movi	r16,2
 40055cc:	003c9206 	br	4004818 <__alt_data_end+0xfc004818>
 40055d0:	04000044 	movi	r16,1
 40055d4:	dc000c15 	stw	r16,48(sp)
 40055d8:	dc000615 	stw	r16,24(sp)
 40055dc:	dc002215 	stw	r16,136(sp)
 40055e0:	e0001115 	stw	zero,68(fp)
 40055e4:	000b883a 	mov	r5,zero
 40055e8:	003c6906 	br	4004790 <__alt_data_end+0xfc004790>
 40055ec:	3021883a 	mov	r16,r6
 40055f0:	003ffb06 	br	40055e0 <__alt_data_end+0xfc0055e0>
 40055f4:	1000021e 	bne	r2,zero,4005600 <_dtoa_r+0x11e0>
 40055f8:	4200004c 	andi	r8,r8,1
 40055fc:	403e7d1e 	bne	r8,zero,4004ff4 <__alt_data_end+0xfc004ff4>
 4005600:	01000c04 	movi	r4,48
 4005604:	00000106 	br	400560c <_dtoa_r+0x11ec>
 4005608:	102f883a 	mov	r23,r2
 400560c:	b8bfffc4 	addi	r2,r23,-1
 4005610:	10c00007 	ldb	r3,0(r2)
 4005614:	193ffc26 	beq	r3,r4,4005608 <__alt_data_end+0xfc005608>
 4005618:	003e8706 	br	4005038 <__alt_data_end+0xfc005038>
 400561c:	d8800517 	ldw	r2,20(sp)
 4005620:	00a3c83a 	sub	r17,zero,r2
 4005624:	8800a426 	beq	r17,zero,40058b8 <_dtoa_r+0x1498>
 4005628:	888003cc 	andi	r2,r17,15
 400562c:	100490fa 	slli	r2,r2,3
 4005630:	00c10074 	movhi	r3,1025
 4005634:	18ca8604 	addi	r3,r3,10776
 4005638:	1885883a 	add	r2,r3,r2
 400563c:	11800017 	ldw	r6,0(r2)
 4005640:	11c00117 	ldw	r7,4(r2)
 4005644:	9009883a 	mov	r4,r18
 4005648:	980b883a 	mov	r5,r19
 400564c:	8823d13a 	srai	r17,r17,4
 4005650:	400d6600 	call	400d660 <__muldf3>
 4005654:	d8800f15 	stw	r2,60(sp)
 4005658:	d8c01015 	stw	r3,64(sp)
 400565c:	8800e826 	beq	r17,zero,4005a00 <_dtoa_r+0x15e0>
 4005660:	05010074 	movhi	r20,1025
 4005664:	a50a7c04 	addi	r20,r20,10736
 4005668:	04000084 	movi	r16,2
 400566c:	8980004c 	andi	r6,r17,1
 4005670:	1009883a 	mov	r4,r2
 4005674:	8823d07a 	srai	r17,r17,1
 4005678:	180b883a 	mov	r5,r3
 400567c:	30000426 	beq	r6,zero,4005690 <_dtoa_r+0x1270>
 4005680:	a1800017 	ldw	r6,0(r20)
 4005684:	a1c00117 	ldw	r7,4(r20)
 4005688:	84000044 	addi	r16,r16,1
 400568c:	400d6600 	call	400d660 <__muldf3>
 4005690:	a5000204 	addi	r20,r20,8
 4005694:	883ff51e 	bne	r17,zero,400566c <__alt_data_end+0xfc00566c>
 4005698:	d8800f15 	stw	r2,60(sp)
 400569c:	d8c01015 	stw	r3,64(sp)
 40056a0:	003c7606 	br	400487c <__alt_data_end+0xfc00487c>
 40056a4:	00c00c04 	movi	r3,48
 40056a8:	10c00005 	stb	r3,0(r2)
 40056ac:	d8c00517 	ldw	r3,20(sp)
 40056b0:	bd3fffc3 	ldbu	r20,-1(r23)
 40056b4:	18c00044 	addi	r3,r3,1
 40056b8:	d8c00515 	stw	r3,20(sp)
 40056bc:	003db906 	br	4004da4 <__alt_data_end+0xfc004da4>
 40056c0:	89400117 	ldw	r5,4(r17)
 40056c4:	e009883a 	mov	r4,fp
 40056c8:	4007ad80 	call	4007ad8 <_Balloc>
 40056cc:	89800417 	ldw	r6,16(r17)
 40056d0:	89400304 	addi	r5,r17,12
 40056d4:	11000304 	addi	r4,r2,12
 40056d8:	31800084 	addi	r6,r6,2
 40056dc:	318d883a 	add	r6,r6,r6
 40056e0:	318d883a 	add	r6,r6,r6
 40056e4:	1027883a 	mov	r19,r2
 40056e8:	400770c0 	call	400770c <memcpy>
 40056ec:	01800044 	movi	r6,1
 40056f0:	980b883a 	mov	r5,r19
 40056f4:	e009883a 	mov	r4,fp
 40056f8:	40083140 	call	4008314 <__lshift>
 40056fc:	1029883a 	mov	r20,r2
 4005700:	003ecc06 	br	4005234 <__alt_data_end+0xfc005234>
 4005704:	00800e44 	movi	r2,57
 4005708:	90809026 	beq	r18,r2,400594c <_dtoa_r+0x152c>
 400570c:	92000044 	addi	r8,r18,1
 4005710:	003f1f06 	br	4005390 <__alt_data_end+0xfc005390>
 4005714:	9011883a 	mov	r8,r18
 4005718:	8825883a 	mov	r18,r17
 400571c:	a023883a 	mov	r17,r20
 4005720:	003e2906 	br	4004fc8 <__alt_data_end+0xfc004fc8>
 4005724:	002b883a 	mov	r21,zero
 4005728:	0023883a 	mov	r17,zero
 400572c:	003f5406 	br	4005480 <__alt_data_end+0xfc005480>
 4005730:	61bfffc4 	addi	r6,r12,-1
 4005734:	300490fa 	slli	r2,r6,3
 4005738:	00c10074 	movhi	r3,1025
 400573c:	18ca8604 	addi	r3,r3,10776
 4005740:	1885883a 	add	r2,r3,r2
 4005744:	11000017 	ldw	r4,0(r2)
 4005748:	11400117 	ldw	r5,4(r2)
 400574c:	d8800717 	ldw	r2,28(sp)
 4005750:	880f883a 	mov	r7,r17
 4005754:	d9801215 	stw	r6,72(sp)
 4005758:	800d883a 	mov	r6,r16
 400575c:	db001615 	stw	r12,88(sp)
 4005760:	15c00044 	addi	r23,r2,1
 4005764:	400d6600 	call	400d660 <__muldf3>
 4005768:	d9401017 	ldw	r5,64(sp)
 400576c:	d9000f17 	ldw	r4,60(sp)
 4005770:	d8c01515 	stw	r3,84(sp)
 4005774:	d8801415 	stw	r2,80(sp)
 4005778:	400e7c80 	call	400e7c8 <__fixdfsi>
 400577c:	1009883a 	mov	r4,r2
 4005780:	1021883a 	mov	r16,r2
 4005784:	400e8480 	call	400e848 <__floatsidf>
 4005788:	d9000f17 	ldw	r4,60(sp)
 400578c:	d9401017 	ldw	r5,64(sp)
 4005790:	100d883a 	mov	r6,r2
 4005794:	180f883a 	mov	r7,r3
 4005798:	400decc0 	call	400decc <__subdf3>
 400579c:	1829883a 	mov	r20,r3
 40057a0:	d8c00717 	ldw	r3,28(sp)
 40057a4:	84000c04 	addi	r16,r16,48
 40057a8:	1023883a 	mov	r17,r2
 40057ac:	1c000005 	stb	r16,0(r3)
 40057b0:	db001617 	ldw	r12,88(sp)
 40057b4:	00800044 	movi	r2,1
 40057b8:	60802226 	beq	r12,r2,4005844 <_dtoa_r+0x1424>
 40057bc:	d9c00717 	ldw	r7,28(sp)
 40057c0:	8805883a 	mov	r2,r17
 40057c4:	b82b883a 	mov	r21,r23
 40057c8:	3b19883a 	add	r12,r7,r12
 40057cc:	6023883a 	mov	r17,r12
 40057d0:	a007883a 	mov	r3,r20
 40057d4:	dc800f15 	stw	r18,60(sp)
 40057d8:	000d883a 	mov	r6,zero
 40057dc:	01d00934 	movhi	r7,16420
 40057e0:	1009883a 	mov	r4,r2
 40057e4:	180b883a 	mov	r5,r3
 40057e8:	400d6600 	call	400d660 <__muldf3>
 40057ec:	180b883a 	mov	r5,r3
 40057f0:	1009883a 	mov	r4,r2
 40057f4:	1829883a 	mov	r20,r3
 40057f8:	1025883a 	mov	r18,r2
 40057fc:	400e7c80 	call	400e7c8 <__fixdfsi>
 4005800:	1009883a 	mov	r4,r2
 4005804:	1021883a 	mov	r16,r2
 4005808:	400e8480 	call	400e848 <__floatsidf>
 400580c:	100d883a 	mov	r6,r2
 4005810:	180f883a 	mov	r7,r3
 4005814:	9009883a 	mov	r4,r18
 4005818:	a00b883a 	mov	r5,r20
 400581c:	84000c04 	addi	r16,r16,48
 4005820:	400decc0 	call	400decc <__subdf3>
 4005824:	ad400044 	addi	r21,r21,1
 4005828:	ac3fffc5 	stb	r16,-1(r21)
 400582c:	ac7fea1e 	bne	r21,r17,40057d8 <__alt_data_end+0xfc0057d8>
 4005830:	1023883a 	mov	r17,r2
 4005834:	d8801217 	ldw	r2,72(sp)
 4005838:	dc800f17 	ldw	r18,60(sp)
 400583c:	1829883a 	mov	r20,r3
 4005840:	b8af883a 	add	r23,r23,r2
 4005844:	d9001417 	ldw	r4,80(sp)
 4005848:	d9401517 	ldw	r5,84(sp)
 400584c:	000d883a 	mov	r6,zero
 4005850:	01cff834 	movhi	r7,16352
 4005854:	400c18c0 	call	400c18c <__adddf3>
 4005858:	880d883a 	mov	r6,r17
 400585c:	a00f883a 	mov	r7,r20
 4005860:	1009883a 	mov	r4,r2
 4005864:	180b883a 	mov	r5,r3
 4005868:	400d56c0 	call	400d56c <__ledf2>
 400586c:	10003e0e 	bge	r2,zero,4005968 <_dtoa_r+0x1548>
 4005870:	d9001317 	ldw	r4,76(sp)
 4005874:	bd3fffc3 	ldbu	r20,-1(r23)
 4005878:	d9000515 	stw	r4,20(sp)
 400587c:	003d3b06 	br	4004d6c <__alt_data_end+0xfc004d6c>
 4005880:	0027883a 	mov	r19,zero
 4005884:	003f1b06 	br	40054f4 <__alt_data_end+0xfc0054f4>
 4005888:	d8800817 	ldw	r2,32(sp)
 400588c:	11e9c83a 	sub	r20,r2,r7
 4005890:	0005883a 	mov	r2,zero
 4005894:	003d5406 	br	4004de8 <__alt_data_end+0xfc004de8>
 4005898:	00800044 	movi	r2,1
 400589c:	003dc706 	br	4004fbc <__alt_data_end+0xfc004fbc>
 40058a0:	d8c00217 	ldw	r3,8(sp)
 40058a4:	00800d84 	movi	r2,54
 40058a8:	dd400a17 	ldw	r21,40(sp)
 40058ac:	10c5c83a 	sub	r2,r2,r3
 40058b0:	dd000817 	ldw	r20,32(sp)
 40058b4:	003d4c06 	br	4004de8 <__alt_data_end+0xfc004de8>
 40058b8:	dc800f15 	stw	r18,60(sp)
 40058bc:	dcc01015 	stw	r19,64(sp)
 40058c0:	04000084 	movi	r16,2
 40058c4:	003bed06 	br	400487c <__alt_data_end+0xfc00487c>
 40058c8:	d9000617 	ldw	r4,24(sp)
 40058cc:	203f0d26 	beq	r4,zero,4005504 <__alt_data_end+0xfc005504>
 40058d0:	d9800c17 	ldw	r6,48(sp)
 40058d4:	01bcab0e 	bge	zero,r6,4004b84 <__alt_data_end+0xfc004b84>
 40058d8:	d9401017 	ldw	r5,64(sp)
 40058dc:	d9000f17 	ldw	r4,60(sp)
 40058e0:	000d883a 	mov	r6,zero
 40058e4:	01d00934 	movhi	r7,16420
 40058e8:	400d6600 	call	400d660 <__muldf3>
 40058ec:	81000044 	addi	r4,r16,1
 40058f0:	d8800f15 	stw	r2,60(sp)
 40058f4:	d8c01015 	stw	r3,64(sp)
 40058f8:	400e8480 	call	400e848 <__floatsidf>
 40058fc:	d9800f17 	ldw	r6,60(sp)
 4005900:	d9c01017 	ldw	r7,64(sp)
 4005904:	1009883a 	mov	r4,r2
 4005908:	180b883a 	mov	r5,r3
 400590c:	400d6600 	call	400d660 <__muldf3>
 4005910:	01d00734 	movhi	r7,16412
 4005914:	000d883a 	mov	r6,zero
 4005918:	1009883a 	mov	r4,r2
 400591c:	180b883a 	mov	r5,r3
 4005920:	400c18c0 	call	400c18c <__adddf3>
 4005924:	d9c00517 	ldw	r7,20(sp)
 4005928:	047f3034 	movhi	r17,64704
 400592c:	1021883a 	mov	r16,r2
 4005930:	39ffffc4 	addi	r7,r7,-1
 4005934:	d9c01315 	stw	r7,76(sp)
 4005938:	1c63883a 	add	r17,r3,r17
 400593c:	db000c17 	ldw	r12,48(sp)
 4005940:	003bea06 	br	40048ec <__alt_data_end+0xfc0048ec>
 4005944:	dc000915 	stw	r16,36(sp)
 4005948:	003e0e06 	br	4005184 <__alt_data_end+0xfc005184>
 400594c:	01000e44 	movi	r4,57
 4005950:	8825883a 	mov	r18,r17
 4005954:	9dc00044 	addi	r23,r19,1
 4005958:	99000005 	stb	r4,0(r19)
 400595c:	a023883a 	mov	r17,r20
 4005960:	dc000915 	stw	r16,36(sp)
 4005964:	003da406 	br	4004ff8 <__alt_data_end+0xfc004ff8>
 4005968:	d9801417 	ldw	r6,80(sp)
 400596c:	d9c01517 	ldw	r7,84(sp)
 4005970:	0009883a 	mov	r4,zero
 4005974:	014ff834 	movhi	r5,16352
 4005978:	400decc0 	call	400decc <__subdf3>
 400597c:	880d883a 	mov	r6,r17
 4005980:	a00f883a 	mov	r7,r20
 4005984:	1009883a 	mov	r4,r2
 4005988:	180b883a 	mov	r5,r3
 400598c:	400d4900 	call	400d490 <__gedf2>
 4005990:	00bc7c0e 	bge	zero,r2,4004b84 <__alt_data_end+0xfc004b84>
 4005994:	01000c04 	movi	r4,48
 4005998:	00000106 	br	40059a0 <_dtoa_r+0x1580>
 400599c:	102f883a 	mov	r23,r2
 40059a0:	b8bfffc4 	addi	r2,r23,-1
 40059a4:	10c00007 	ldb	r3,0(r2)
 40059a8:	193ffc26 	beq	r3,r4,400599c <__alt_data_end+0xfc00599c>
 40059ac:	d9801317 	ldw	r6,76(sp)
 40059b0:	d9800515 	stw	r6,20(sp)
 40059b4:	003c4406 	br	4004ac8 <__alt_data_end+0xfc004ac8>
 40059b8:	d9801317 	ldw	r6,76(sp)
 40059bc:	d9800515 	stw	r6,20(sp)
 40059c0:	003cea06 	br	4004d6c <__alt_data_end+0xfc004d6c>
 40059c4:	dd800f17 	ldw	r22,60(sp)
 40059c8:	dcc01017 	ldw	r19,64(sp)
 40059cc:	dc801217 	ldw	r18,72(sp)
 40059d0:	003c6c06 	br	4004b84 <__alt_data_end+0xfc004b84>
 40059d4:	903e031e 	bne	r18,zero,40051e4 <__alt_data_end+0xfc0051e4>
 40059d8:	003ebb06 	br	40054c8 <__alt_data_end+0xfc0054c8>
 40059dc:	103e6c1e 	bne	r2,zero,4005390 <__alt_data_end+0xfc005390>
 40059e0:	4080004c 	andi	r2,r8,1
 40059e4:	103e6a26 	beq	r2,zero,4005390 <__alt_data_end+0xfc005390>
 40059e8:	003e6606 	br	4005384 <__alt_data_end+0xfc005384>
 40059ec:	d8c00317 	ldw	r3,12(sp)
 40059f0:	00800084 	movi	r2,2
 40059f4:	10c02916 	blt	r2,r3,4005a9c <_dtoa_r+0x167c>
 40059f8:	d9000c17 	ldw	r4,48(sp)
 40059fc:	003e8806 	br	4005420 <__alt_data_end+0xfc005420>
 4005a00:	04000084 	movi	r16,2
 4005a04:	003b9d06 	br	400487c <__alt_data_end+0xfc00487c>
 4005a08:	d9001317 	ldw	r4,76(sp)
 4005a0c:	d9000515 	stw	r4,20(sp)
 4005a10:	003cd606 	br	4004d6c <__alt_data_end+0xfc004d6c>
 4005a14:	d8801317 	ldw	r2,76(sp)
 4005a18:	d8800515 	stw	r2,20(sp)
 4005a1c:	003c2a06 	br	4004ac8 <__alt_data_end+0xfc004ac8>
 4005a20:	d9800317 	ldw	r6,12(sp)
 4005a24:	00800084 	movi	r2,2
 4005a28:	11801516 	blt	r2,r6,4005a80 <_dtoa_r+0x1660>
 4005a2c:	d9c00c17 	ldw	r7,48(sp)
 4005a30:	d9c00615 	stw	r7,24(sp)
 4005a34:	003df706 	br	4005214 <__alt_data_end+0xfc005214>
 4005a38:	193d3926 	beq	r3,r4,4004f20 <__alt_data_end+0xfc004f20>
 4005a3c:	00c00f04 	movi	r3,60
 4005a40:	1885c83a 	sub	r2,r3,r2
 4005a44:	003ddf06 	br	40051c4 <__alt_data_end+0xfc0051c4>
 4005a48:	e009883a 	mov	r4,fp
 4005a4c:	e0001115 	stw	zero,68(fp)
 4005a50:	000b883a 	mov	r5,zero
 4005a54:	4007ad80 	call	4007ad8 <_Balloc>
 4005a58:	d8800715 	stw	r2,28(sp)
 4005a5c:	d8c00717 	ldw	r3,28(sp)
 4005a60:	00bfffc4 	movi	r2,-1
 4005a64:	01000044 	movi	r4,1
 4005a68:	d8800c15 	stw	r2,48(sp)
 4005a6c:	e0c01015 	stw	r3,64(fp)
 4005a70:	d9000b15 	stw	r4,44(sp)
 4005a74:	d8800615 	stw	r2,24(sp)
 4005a78:	d8002215 	stw	zero,136(sp)
 4005a7c:	003c4106 	br	4004b84 <__alt_data_end+0xfc004b84>
 4005a80:	d8c00c17 	ldw	r3,48(sp)
 4005a84:	d8c00615 	stw	r3,24(sp)
 4005a88:	003e7006 	br	400544c <__alt_data_end+0xfc00544c>
 4005a8c:	04400044 	movi	r17,1
 4005a90:	003b2006 	br	4004714 <__alt_data_end+0xfc004714>
 4005a94:	000b883a 	mov	r5,zero
 4005a98:	003b3d06 	br	4004790 <__alt_data_end+0xfc004790>
 4005a9c:	d8800c17 	ldw	r2,48(sp)
 4005aa0:	d8800615 	stw	r2,24(sp)
 4005aa4:	003e6906 	br	400544c <__alt_data_end+0xfc00544c>

04005aa8 <__sflush_r>:
 4005aa8:	2880030b 	ldhu	r2,12(r5)
 4005aac:	defffb04 	addi	sp,sp,-20
 4005ab0:	dcc00315 	stw	r19,12(sp)
 4005ab4:	dc400115 	stw	r17,4(sp)
 4005ab8:	dfc00415 	stw	ra,16(sp)
 4005abc:	dc800215 	stw	r18,8(sp)
 4005ac0:	dc000015 	stw	r16,0(sp)
 4005ac4:	10c0020c 	andi	r3,r2,8
 4005ac8:	2823883a 	mov	r17,r5
 4005acc:	2027883a 	mov	r19,r4
 4005ad0:	1800311e 	bne	r3,zero,4005b98 <__sflush_r+0xf0>
 4005ad4:	28c00117 	ldw	r3,4(r5)
 4005ad8:	10820014 	ori	r2,r2,2048
 4005adc:	2880030d 	sth	r2,12(r5)
 4005ae0:	00c04b0e 	bge	zero,r3,4005c10 <__sflush_r+0x168>
 4005ae4:	8a000a17 	ldw	r8,40(r17)
 4005ae8:	40002326 	beq	r8,zero,4005b78 <__sflush_r+0xd0>
 4005aec:	9c000017 	ldw	r16,0(r19)
 4005af0:	10c4000c 	andi	r3,r2,4096
 4005af4:	98000015 	stw	zero,0(r19)
 4005af8:	18004826 	beq	r3,zero,4005c1c <__sflush_r+0x174>
 4005afc:	89801417 	ldw	r6,80(r17)
 4005b00:	10c0010c 	andi	r3,r2,4
 4005b04:	18000626 	beq	r3,zero,4005b20 <__sflush_r+0x78>
 4005b08:	88c00117 	ldw	r3,4(r17)
 4005b0c:	88800c17 	ldw	r2,48(r17)
 4005b10:	30cdc83a 	sub	r6,r6,r3
 4005b14:	10000226 	beq	r2,zero,4005b20 <__sflush_r+0x78>
 4005b18:	88800f17 	ldw	r2,60(r17)
 4005b1c:	308dc83a 	sub	r6,r6,r2
 4005b20:	89400717 	ldw	r5,28(r17)
 4005b24:	000f883a 	mov	r7,zero
 4005b28:	9809883a 	mov	r4,r19
 4005b2c:	403ee83a 	callr	r8
 4005b30:	00ffffc4 	movi	r3,-1
 4005b34:	10c04426 	beq	r2,r3,4005c48 <__sflush_r+0x1a0>
 4005b38:	88c0030b 	ldhu	r3,12(r17)
 4005b3c:	89000417 	ldw	r4,16(r17)
 4005b40:	88000115 	stw	zero,4(r17)
 4005b44:	197dffcc 	andi	r5,r3,63487
 4005b48:	8940030d 	sth	r5,12(r17)
 4005b4c:	89000015 	stw	r4,0(r17)
 4005b50:	18c4000c 	andi	r3,r3,4096
 4005b54:	18002c1e 	bne	r3,zero,4005c08 <__sflush_r+0x160>
 4005b58:	89400c17 	ldw	r5,48(r17)
 4005b5c:	9c000015 	stw	r16,0(r19)
 4005b60:	28000526 	beq	r5,zero,4005b78 <__sflush_r+0xd0>
 4005b64:	88801004 	addi	r2,r17,64
 4005b68:	28800226 	beq	r5,r2,4005b74 <__sflush_r+0xcc>
 4005b6c:	9809883a 	mov	r4,r19
 4005b70:	40062240 	call	4006224 <_free_r>
 4005b74:	88000c15 	stw	zero,48(r17)
 4005b78:	0005883a 	mov	r2,zero
 4005b7c:	dfc00417 	ldw	ra,16(sp)
 4005b80:	dcc00317 	ldw	r19,12(sp)
 4005b84:	dc800217 	ldw	r18,8(sp)
 4005b88:	dc400117 	ldw	r17,4(sp)
 4005b8c:	dc000017 	ldw	r16,0(sp)
 4005b90:	dec00504 	addi	sp,sp,20
 4005b94:	f800283a 	ret
 4005b98:	2c800417 	ldw	r18,16(r5)
 4005b9c:	903ff626 	beq	r18,zero,4005b78 <__alt_data_end+0xfc005b78>
 4005ba0:	2c000017 	ldw	r16,0(r5)
 4005ba4:	108000cc 	andi	r2,r2,3
 4005ba8:	2c800015 	stw	r18,0(r5)
 4005bac:	84a1c83a 	sub	r16,r16,r18
 4005bb0:	1000131e 	bne	r2,zero,4005c00 <__sflush_r+0x158>
 4005bb4:	28800517 	ldw	r2,20(r5)
 4005bb8:	88800215 	stw	r2,8(r17)
 4005bbc:	04000316 	blt	zero,r16,4005bcc <__sflush_r+0x124>
 4005bc0:	003fed06 	br	4005b78 <__alt_data_end+0xfc005b78>
 4005bc4:	90a5883a 	add	r18,r18,r2
 4005bc8:	043feb0e 	bge	zero,r16,4005b78 <__alt_data_end+0xfc005b78>
 4005bcc:	88800917 	ldw	r2,36(r17)
 4005bd0:	89400717 	ldw	r5,28(r17)
 4005bd4:	800f883a 	mov	r7,r16
 4005bd8:	900d883a 	mov	r6,r18
 4005bdc:	9809883a 	mov	r4,r19
 4005be0:	103ee83a 	callr	r2
 4005be4:	80a1c83a 	sub	r16,r16,r2
 4005be8:	00bff616 	blt	zero,r2,4005bc4 <__alt_data_end+0xfc005bc4>
 4005bec:	88c0030b 	ldhu	r3,12(r17)
 4005bf0:	00bfffc4 	movi	r2,-1
 4005bf4:	18c01014 	ori	r3,r3,64
 4005bf8:	88c0030d 	sth	r3,12(r17)
 4005bfc:	003fdf06 	br	4005b7c <__alt_data_end+0xfc005b7c>
 4005c00:	0005883a 	mov	r2,zero
 4005c04:	003fec06 	br	4005bb8 <__alt_data_end+0xfc005bb8>
 4005c08:	88801415 	stw	r2,80(r17)
 4005c0c:	003fd206 	br	4005b58 <__alt_data_end+0xfc005b58>
 4005c10:	28c00f17 	ldw	r3,60(r5)
 4005c14:	00ffb316 	blt	zero,r3,4005ae4 <__alt_data_end+0xfc005ae4>
 4005c18:	003fd706 	br	4005b78 <__alt_data_end+0xfc005b78>
 4005c1c:	89400717 	ldw	r5,28(r17)
 4005c20:	000d883a 	mov	r6,zero
 4005c24:	01c00044 	movi	r7,1
 4005c28:	9809883a 	mov	r4,r19
 4005c2c:	403ee83a 	callr	r8
 4005c30:	100d883a 	mov	r6,r2
 4005c34:	00bfffc4 	movi	r2,-1
 4005c38:	30801426 	beq	r6,r2,4005c8c <__sflush_r+0x1e4>
 4005c3c:	8880030b 	ldhu	r2,12(r17)
 4005c40:	8a000a17 	ldw	r8,40(r17)
 4005c44:	003fae06 	br	4005b00 <__alt_data_end+0xfc005b00>
 4005c48:	98c00017 	ldw	r3,0(r19)
 4005c4c:	183fba26 	beq	r3,zero,4005b38 <__alt_data_end+0xfc005b38>
 4005c50:	01000744 	movi	r4,29
 4005c54:	19000626 	beq	r3,r4,4005c70 <__sflush_r+0x1c8>
 4005c58:	01000584 	movi	r4,22
 4005c5c:	19000426 	beq	r3,r4,4005c70 <__sflush_r+0x1c8>
 4005c60:	88c0030b 	ldhu	r3,12(r17)
 4005c64:	18c01014 	ori	r3,r3,64
 4005c68:	88c0030d 	sth	r3,12(r17)
 4005c6c:	003fc306 	br	4005b7c <__alt_data_end+0xfc005b7c>
 4005c70:	8880030b 	ldhu	r2,12(r17)
 4005c74:	88c00417 	ldw	r3,16(r17)
 4005c78:	88000115 	stw	zero,4(r17)
 4005c7c:	10bdffcc 	andi	r2,r2,63487
 4005c80:	8880030d 	sth	r2,12(r17)
 4005c84:	88c00015 	stw	r3,0(r17)
 4005c88:	003fb306 	br	4005b58 <__alt_data_end+0xfc005b58>
 4005c8c:	98800017 	ldw	r2,0(r19)
 4005c90:	103fea26 	beq	r2,zero,4005c3c <__alt_data_end+0xfc005c3c>
 4005c94:	00c00744 	movi	r3,29
 4005c98:	10c00226 	beq	r2,r3,4005ca4 <__sflush_r+0x1fc>
 4005c9c:	00c00584 	movi	r3,22
 4005ca0:	10c0031e 	bne	r2,r3,4005cb0 <__sflush_r+0x208>
 4005ca4:	9c000015 	stw	r16,0(r19)
 4005ca8:	0005883a 	mov	r2,zero
 4005cac:	003fb306 	br	4005b7c <__alt_data_end+0xfc005b7c>
 4005cb0:	88c0030b 	ldhu	r3,12(r17)
 4005cb4:	3005883a 	mov	r2,r6
 4005cb8:	18c01014 	ori	r3,r3,64
 4005cbc:	88c0030d 	sth	r3,12(r17)
 4005cc0:	003fae06 	br	4005b7c <__alt_data_end+0xfc005b7c>

04005cc4 <_fflush_r>:
 4005cc4:	defffd04 	addi	sp,sp,-12
 4005cc8:	dc000115 	stw	r16,4(sp)
 4005ccc:	dfc00215 	stw	ra,8(sp)
 4005cd0:	2021883a 	mov	r16,r4
 4005cd4:	20000226 	beq	r4,zero,4005ce0 <_fflush_r+0x1c>
 4005cd8:	20800e17 	ldw	r2,56(r4)
 4005cdc:	10000c26 	beq	r2,zero,4005d10 <_fflush_r+0x4c>
 4005ce0:	2880030f 	ldh	r2,12(r5)
 4005ce4:	1000051e 	bne	r2,zero,4005cfc <_fflush_r+0x38>
 4005ce8:	0005883a 	mov	r2,zero
 4005cec:	dfc00217 	ldw	ra,8(sp)
 4005cf0:	dc000117 	ldw	r16,4(sp)
 4005cf4:	dec00304 	addi	sp,sp,12
 4005cf8:	f800283a 	ret
 4005cfc:	8009883a 	mov	r4,r16
 4005d00:	dfc00217 	ldw	ra,8(sp)
 4005d04:	dc000117 	ldw	r16,4(sp)
 4005d08:	dec00304 	addi	sp,sp,12
 4005d0c:	4005aa81 	jmpi	4005aa8 <__sflush_r>
 4005d10:	d9400015 	stw	r5,0(sp)
 4005d14:	40060b00 	call	40060b0 <__sinit>
 4005d18:	d9400017 	ldw	r5,0(sp)
 4005d1c:	003ff006 	br	4005ce0 <__alt_data_end+0xfc005ce0>

04005d20 <fflush>:
 4005d20:	20000526 	beq	r4,zero,4005d38 <fflush+0x18>
 4005d24:	00810074 	movhi	r2,1025
 4005d28:	108e5b04 	addi	r2,r2,14700
 4005d2c:	200b883a 	mov	r5,r4
 4005d30:	11000017 	ldw	r4,0(r2)
 4005d34:	4005cc41 	jmpi	4005cc4 <_fflush_r>
 4005d38:	00810074 	movhi	r2,1025
 4005d3c:	108e5a04 	addi	r2,r2,14696
 4005d40:	11000017 	ldw	r4,0(r2)
 4005d44:	01410034 	movhi	r5,1024
 4005d48:	29573104 	addi	r5,r5,23748
 4005d4c:	4006ac01 	jmpi	4006ac0 <_fwalk_reent>

04005d50 <__fp_unlock>:
 4005d50:	0005883a 	mov	r2,zero
 4005d54:	f800283a 	ret

04005d58 <_cleanup_r>:
 4005d58:	01410074 	movhi	r5,1025
 4005d5c:	296b1704 	addi	r5,r5,-21412
 4005d60:	4006ac01 	jmpi	4006ac0 <_fwalk_reent>

04005d64 <__sinit.part.1>:
 4005d64:	defff704 	addi	sp,sp,-36
 4005d68:	00c10034 	movhi	r3,1024
 4005d6c:	dfc00815 	stw	ra,32(sp)
 4005d70:	ddc00715 	stw	r23,28(sp)
 4005d74:	dd800615 	stw	r22,24(sp)
 4005d78:	dd400515 	stw	r21,20(sp)
 4005d7c:	dd000415 	stw	r20,16(sp)
 4005d80:	dcc00315 	stw	r19,12(sp)
 4005d84:	dc800215 	stw	r18,8(sp)
 4005d88:	dc400115 	stw	r17,4(sp)
 4005d8c:	dc000015 	stw	r16,0(sp)
 4005d90:	18d75604 	addi	r3,r3,23896
 4005d94:	24000117 	ldw	r16,4(r4)
 4005d98:	20c00f15 	stw	r3,60(r4)
 4005d9c:	2080bb04 	addi	r2,r4,748
 4005da0:	00c000c4 	movi	r3,3
 4005da4:	20c0b915 	stw	r3,740(r4)
 4005da8:	2080ba15 	stw	r2,744(r4)
 4005dac:	2000b815 	stw	zero,736(r4)
 4005db0:	05c00204 	movi	r23,8
 4005db4:	00800104 	movi	r2,4
 4005db8:	2025883a 	mov	r18,r4
 4005dbc:	b80d883a 	mov	r6,r23
 4005dc0:	81001704 	addi	r4,r16,92
 4005dc4:	000b883a 	mov	r5,zero
 4005dc8:	80000015 	stw	zero,0(r16)
 4005dcc:	80000115 	stw	zero,4(r16)
 4005dd0:	80000215 	stw	zero,8(r16)
 4005dd4:	8080030d 	sth	r2,12(r16)
 4005dd8:	80001915 	stw	zero,100(r16)
 4005ddc:	8000038d 	sth	zero,14(r16)
 4005de0:	80000415 	stw	zero,16(r16)
 4005de4:	80000515 	stw	zero,20(r16)
 4005de8:	80000615 	stw	zero,24(r16)
 4005dec:	40079b00 	call	40079b0 <memset>
 4005df0:	05810074 	movhi	r22,1025
 4005df4:	94400217 	ldw	r17,8(r18)
 4005df8:	05410074 	movhi	r21,1025
 4005dfc:	05010074 	movhi	r20,1025
 4005e00:	04c10074 	movhi	r19,1025
 4005e04:	b5a46f04 	addi	r22,r22,-28228
 4005e08:	ad648604 	addi	r21,r21,-28136
 4005e0c:	a524a504 	addi	r20,r20,-28012
 4005e10:	9ce4bc04 	addi	r19,r19,-27920
 4005e14:	85800815 	stw	r22,32(r16)
 4005e18:	85400915 	stw	r21,36(r16)
 4005e1c:	85000a15 	stw	r20,40(r16)
 4005e20:	84c00b15 	stw	r19,44(r16)
 4005e24:	84000715 	stw	r16,28(r16)
 4005e28:	00800284 	movi	r2,10
 4005e2c:	8880030d 	sth	r2,12(r17)
 4005e30:	00800044 	movi	r2,1
 4005e34:	b80d883a 	mov	r6,r23
 4005e38:	89001704 	addi	r4,r17,92
 4005e3c:	000b883a 	mov	r5,zero
 4005e40:	88000015 	stw	zero,0(r17)
 4005e44:	88000115 	stw	zero,4(r17)
 4005e48:	88000215 	stw	zero,8(r17)
 4005e4c:	88001915 	stw	zero,100(r17)
 4005e50:	8880038d 	sth	r2,14(r17)
 4005e54:	88000415 	stw	zero,16(r17)
 4005e58:	88000515 	stw	zero,20(r17)
 4005e5c:	88000615 	stw	zero,24(r17)
 4005e60:	40079b00 	call	40079b0 <memset>
 4005e64:	94000317 	ldw	r16,12(r18)
 4005e68:	00800484 	movi	r2,18
 4005e6c:	8c400715 	stw	r17,28(r17)
 4005e70:	8d800815 	stw	r22,32(r17)
 4005e74:	8d400915 	stw	r21,36(r17)
 4005e78:	8d000a15 	stw	r20,40(r17)
 4005e7c:	8cc00b15 	stw	r19,44(r17)
 4005e80:	8080030d 	sth	r2,12(r16)
 4005e84:	00800084 	movi	r2,2
 4005e88:	80000015 	stw	zero,0(r16)
 4005e8c:	80000115 	stw	zero,4(r16)
 4005e90:	80000215 	stw	zero,8(r16)
 4005e94:	80001915 	stw	zero,100(r16)
 4005e98:	8080038d 	sth	r2,14(r16)
 4005e9c:	80000415 	stw	zero,16(r16)
 4005ea0:	80000515 	stw	zero,20(r16)
 4005ea4:	80000615 	stw	zero,24(r16)
 4005ea8:	b80d883a 	mov	r6,r23
 4005eac:	000b883a 	mov	r5,zero
 4005eb0:	81001704 	addi	r4,r16,92
 4005eb4:	40079b00 	call	40079b0 <memset>
 4005eb8:	00800044 	movi	r2,1
 4005ebc:	84000715 	stw	r16,28(r16)
 4005ec0:	85800815 	stw	r22,32(r16)
 4005ec4:	85400915 	stw	r21,36(r16)
 4005ec8:	85000a15 	stw	r20,40(r16)
 4005ecc:	84c00b15 	stw	r19,44(r16)
 4005ed0:	90800e15 	stw	r2,56(r18)
 4005ed4:	dfc00817 	ldw	ra,32(sp)
 4005ed8:	ddc00717 	ldw	r23,28(sp)
 4005edc:	dd800617 	ldw	r22,24(sp)
 4005ee0:	dd400517 	ldw	r21,20(sp)
 4005ee4:	dd000417 	ldw	r20,16(sp)
 4005ee8:	dcc00317 	ldw	r19,12(sp)
 4005eec:	dc800217 	ldw	r18,8(sp)
 4005ef0:	dc400117 	ldw	r17,4(sp)
 4005ef4:	dc000017 	ldw	r16,0(sp)
 4005ef8:	dec00904 	addi	sp,sp,36
 4005efc:	f800283a 	ret

04005f00 <__fp_lock>:
 4005f00:	0005883a 	mov	r2,zero
 4005f04:	f800283a 	ret

04005f08 <__sfmoreglue>:
 4005f08:	defffc04 	addi	sp,sp,-16
 4005f0c:	dc800215 	stw	r18,8(sp)
 4005f10:	2825883a 	mov	r18,r5
 4005f14:	dc000015 	stw	r16,0(sp)
 4005f18:	01401a04 	movi	r5,104
 4005f1c:	2021883a 	mov	r16,r4
 4005f20:	913fffc4 	addi	r4,r18,-1
 4005f24:	dfc00315 	stw	ra,12(sp)
 4005f28:	dc400115 	stw	r17,4(sp)
 4005f2c:	4000bd80 	call	4000bd8 <__mulsi3>
 4005f30:	8009883a 	mov	r4,r16
 4005f34:	11401d04 	addi	r5,r2,116
 4005f38:	1023883a 	mov	r17,r2
 4005f3c:	4006e1c0 	call	4006e1c <_malloc_r>
 4005f40:	1021883a 	mov	r16,r2
 4005f44:	10000726 	beq	r2,zero,4005f64 <__sfmoreglue+0x5c>
 4005f48:	11000304 	addi	r4,r2,12
 4005f4c:	10000015 	stw	zero,0(r2)
 4005f50:	14800115 	stw	r18,4(r2)
 4005f54:	11000215 	stw	r4,8(r2)
 4005f58:	89801a04 	addi	r6,r17,104
 4005f5c:	000b883a 	mov	r5,zero
 4005f60:	40079b00 	call	40079b0 <memset>
 4005f64:	8005883a 	mov	r2,r16
 4005f68:	dfc00317 	ldw	ra,12(sp)
 4005f6c:	dc800217 	ldw	r18,8(sp)
 4005f70:	dc400117 	ldw	r17,4(sp)
 4005f74:	dc000017 	ldw	r16,0(sp)
 4005f78:	dec00404 	addi	sp,sp,16
 4005f7c:	f800283a 	ret

04005f80 <__sfp>:
 4005f80:	defffb04 	addi	sp,sp,-20
 4005f84:	dc000015 	stw	r16,0(sp)
 4005f88:	04010074 	movhi	r16,1025
 4005f8c:	840e5a04 	addi	r16,r16,14696
 4005f90:	dcc00315 	stw	r19,12(sp)
 4005f94:	2027883a 	mov	r19,r4
 4005f98:	81000017 	ldw	r4,0(r16)
 4005f9c:	dfc00415 	stw	ra,16(sp)
 4005fa0:	dc800215 	stw	r18,8(sp)
 4005fa4:	20800e17 	ldw	r2,56(r4)
 4005fa8:	dc400115 	stw	r17,4(sp)
 4005fac:	1000021e 	bne	r2,zero,4005fb8 <__sfp+0x38>
 4005fb0:	4005d640 	call	4005d64 <__sinit.part.1>
 4005fb4:	81000017 	ldw	r4,0(r16)
 4005fb8:	2480b804 	addi	r18,r4,736
 4005fbc:	047fffc4 	movi	r17,-1
 4005fc0:	91000117 	ldw	r4,4(r18)
 4005fc4:	94000217 	ldw	r16,8(r18)
 4005fc8:	213fffc4 	addi	r4,r4,-1
 4005fcc:	20000a16 	blt	r4,zero,4005ff8 <__sfp+0x78>
 4005fd0:	8080030f 	ldh	r2,12(r16)
 4005fd4:	10000c26 	beq	r2,zero,4006008 <__sfp+0x88>
 4005fd8:	80c01d04 	addi	r3,r16,116
 4005fdc:	00000206 	br	4005fe8 <__sfp+0x68>
 4005fe0:	18bfe60f 	ldh	r2,-104(r3)
 4005fe4:	10000826 	beq	r2,zero,4006008 <__sfp+0x88>
 4005fe8:	213fffc4 	addi	r4,r4,-1
 4005fec:	1c3ffd04 	addi	r16,r3,-12
 4005ff0:	18c01a04 	addi	r3,r3,104
 4005ff4:	247ffa1e 	bne	r4,r17,4005fe0 <__alt_data_end+0xfc005fe0>
 4005ff8:	90800017 	ldw	r2,0(r18)
 4005ffc:	10001d26 	beq	r2,zero,4006074 <__sfp+0xf4>
 4006000:	1025883a 	mov	r18,r2
 4006004:	003fee06 	br	4005fc0 <__alt_data_end+0xfc005fc0>
 4006008:	00bfffc4 	movi	r2,-1
 400600c:	8080038d 	sth	r2,14(r16)
 4006010:	00800044 	movi	r2,1
 4006014:	8080030d 	sth	r2,12(r16)
 4006018:	80001915 	stw	zero,100(r16)
 400601c:	80000015 	stw	zero,0(r16)
 4006020:	80000215 	stw	zero,8(r16)
 4006024:	80000115 	stw	zero,4(r16)
 4006028:	80000415 	stw	zero,16(r16)
 400602c:	80000515 	stw	zero,20(r16)
 4006030:	80000615 	stw	zero,24(r16)
 4006034:	01800204 	movi	r6,8
 4006038:	000b883a 	mov	r5,zero
 400603c:	81001704 	addi	r4,r16,92
 4006040:	40079b00 	call	40079b0 <memset>
 4006044:	8005883a 	mov	r2,r16
 4006048:	80000c15 	stw	zero,48(r16)
 400604c:	80000d15 	stw	zero,52(r16)
 4006050:	80001115 	stw	zero,68(r16)
 4006054:	80001215 	stw	zero,72(r16)
 4006058:	dfc00417 	ldw	ra,16(sp)
 400605c:	dcc00317 	ldw	r19,12(sp)
 4006060:	dc800217 	ldw	r18,8(sp)
 4006064:	dc400117 	ldw	r17,4(sp)
 4006068:	dc000017 	ldw	r16,0(sp)
 400606c:	dec00504 	addi	sp,sp,20
 4006070:	f800283a 	ret
 4006074:	01400104 	movi	r5,4
 4006078:	9809883a 	mov	r4,r19
 400607c:	4005f080 	call	4005f08 <__sfmoreglue>
 4006080:	90800015 	stw	r2,0(r18)
 4006084:	103fde1e 	bne	r2,zero,4006000 <__alt_data_end+0xfc006000>
 4006088:	00800304 	movi	r2,12
 400608c:	98800015 	stw	r2,0(r19)
 4006090:	0005883a 	mov	r2,zero
 4006094:	003ff006 	br	4006058 <__alt_data_end+0xfc006058>

04006098 <_cleanup>:
 4006098:	00810074 	movhi	r2,1025
 400609c:	108e5a04 	addi	r2,r2,14696
 40060a0:	11000017 	ldw	r4,0(r2)
 40060a4:	01410074 	movhi	r5,1025
 40060a8:	296b1704 	addi	r5,r5,-21412
 40060ac:	4006ac01 	jmpi	4006ac0 <_fwalk_reent>

040060b0 <__sinit>:
 40060b0:	20800e17 	ldw	r2,56(r4)
 40060b4:	10000126 	beq	r2,zero,40060bc <__sinit+0xc>
 40060b8:	f800283a 	ret
 40060bc:	4005d641 	jmpi	4005d64 <__sinit.part.1>

040060c0 <__sfp_lock_acquire>:
 40060c0:	f800283a 	ret

040060c4 <__sfp_lock_release>:
 40060c4:	f800283a 	ret

040060c8 <__sinit_lock_acquire>:
 40060c8:	f800283a 	ret

040060cc <__sinit_lock_release>:
 40060cc:	f800283a 	ret

040060d0 <__fp_lock_all>:
 40060d0:	00810074 	movhi	r2,1025
 40060d4:	108e5b04 	addi	r2,r2,14700
 40060d8:	11000017 	ldw	r4,0(r2)
 40060dc:	01410034 	movhi	r5,1024
 40060e0:	2957c004 	addi	r5,r5,24320
 40060e4:	40069fc1 	jmpi	40069fc <_fwalk>

040060e8 <__fp_unlock_all>:
 40060e8:	00810074 	movhi	r2,1025
 40060ec:	108e5b04 	addi	r2,r2,14700
 40060f0:	11000017 	ldw	r4,0(r2)
 40060f4:	01410034 	movhi	r5,1024
 40060f8:	29575404 	addi	r5,r5,23888
 40060fc:	40069fc1 	jmpi	40069fc <_fwalk>

04006100 <_malloc_trim_r>:
 4006100:	defffb04 	addi	sp,sp,-20
 4006104:	dcc00315 	stw	r19,12(sp)
 4006108:	04c10074 	movhi	r19,1025
 400610c:	dc800215 	stw	r18,8(sp)
 4006110:	dc400115 	stw	r17,4(sp)
 4006114:	dc000015 	stw	r16,0(sp)
 4006118:	dfc00415 	stw	ra,16(sp)
 400611c:	2821883a 	mov	r16,r5
 4006120:	9cccce04 	addi	r19,r19,13112
 4006124:	2025883a 	mov	r18,r4
 4006128:	400ef680 	call	400ef68 <__malloc_lock>
 400612c:	98800217 	ldw	r2,8(r19)
 4006130:	14400117 	ldw	r17,4(r2)
 4006134:	00bfff04 	movi	r2,-4
 4006138:	88a2703a 	and	r17,r17,r2
 400613c:	8c21c83a 	sub	r16,r17,r16
 4006140:	8403fbc4 	addi	r16,r16,4079
 4006144:	8020d33a 	srli	r16,r16,12
 4006148:	0083ffc4 	movi	r2,4095
 400614c:	843fffc4 	addi	r16,r16,-1
 4006150:	8020933a 	slli	r16,r16,12
 4006154:	1400060e 	bge	r2,r16,4006170 <_malloc_trim_r+0x70>
 4006158:	000b883a 	mov	r5,zero
 400615c:	9009883a 	mov	r4,r18
 4006160:	40091680 	call	4009168 <_sbrk_r>
 4006164:	98c00217 	ldw	r3,8(r19)
 4006168:	1c47883a 	add	r3,r3,r17
 400616c:	10c00a26 	beq	r2,r3,4006198 <_malloc_trim_r+0x98>
 4006170:	9009883a 	mov	r4,r18
 4006174:	400ef8c0 	call	400ef8c <__malloc_unlock>
 4006178:	0005883a 	mov	r2,zero
 400617c:	dfc00417 	ldw	ra,16(sp)
 4006180:	dcc00317 	ldw	r19,12(sp)
 4006184:	dc800217 	ldw	r18,8(sp)
 4006188:	dc400117 	ldw	r17,4(sp)
 400618c:	dc000017 	ldw	r16,0(sp)
 4006190:	dec00504 	addi	sp,sp,20
 4006194:	f800283a 	ret
 4006198:	040bc83a 	sub	r5,zero,r16
 400619c:	9009883a 	mov	r4,r18
 40061a0:	40091680 	call	4009168 <_sbrk_r>
 40061a4:	00ffffc4 	movi	r3,-1
 40061a8:	10c00d26 	beq	r2,r3,40061e0 <_malloc_trim_r+0xe0>
 40061ac:	00c10074 	movhi	r3,1025
 40061b0:	18d17e04 	addi	r3,r3,17912
 40061b4:	18800017 	ldw	r2,0(r3)
 40061b8:	99000217 	ldw	r4,8(r19)
 40061bc:	8c23c83a 	sub	r17,r17,r16
 40061c0:	8c400054 	ori	r17,r17,1
 40061c4:	1421c83a 	sub	r16,r2,r16
 40061c8:	24400115 	stw	r17,4(r4)
 40061cc:	9009883a 	mov	r4,r18
 40061d0:	1c000015 	stw	r16,0(r3)
 40061d4:	400ef8c0 	call	400ef8c <__malloc_unlock>
 40061d8:	00800044 	movi	r2,1
 40061dc:	003fe706 	br	400617c <__alt_data_end+0xfc00617c>
 40061e0:	000b883a 	mov	r5,zero
 40061e4:	9009883a 	mov	r4,r18
 40061e8:	40091680 	call	4009168 <_sbrk_r>
 40061ec:	99000217 	ldw	r4,8(r19)
 40061f0:	014003c4 	movi	r5,15
 40061f4:	1107c83a 	sub	r3,r2,r4
 40061f8:	28ffdd0e 	bge	r5,r3,4006170 <__alt_data_end+0xfc006170>
 40061fc:	01410074 	movhi	r5,1025
 4006200:	294e5d04 	addi	r5,r5,14708
 4006204:	29400017 	ldw	r5,0(r5)
 4006208:	18c00054 	ori	r3,r3,1
 400620c:	20c00115 	stw	r3,4(r4)
 4006210:	00c10074 	movhi	r3,1025
 4006214:	1145c83a 	sub	r2,r2,r5
 4006218:	18d17e04 	addi	r3,r3,17912
 400621c:	18800015 	stw	r2,0(r3)
 4006220:	003fd306 	br	4006170 <__alt_data_end+0xfc006170>

04006224 <_free_r>:
 4006224:	28004126 	beq	r5,zero,400632c <_free_r+0x108>
 4006228:	defffd04 	addi	sp,sp,-12
 400622c:	dc400115 	stw	r17,4(sp)
 4006230:	dc000015 	stw	r16,0(sp)
 4006234:	2023883a 	mov	r17,r4
 4006238:	2821883a 	mov	r16,r5
 400623c:	dfc00215 	stw	ra,8(sp)
 4006240:	400ef680 	call	400ef68 <__malloc_lock>
 4006244:	81ffff17 	ldw	r7,-4(r16)
 4006248:	00bfff84 	movi	r2,-2
 400624c:	01010074 	movhi	r4,1025
 4006250:	81bffe04 	addi	r6,r16,-8
 4006254:	3884703a 	and	r2,r7,r2
 4006258:	210cce04 	addi	r4,r4,13112
 400625c:	308b883a 	add	r5,r6,r2
 4006260:	2a400117 	ldw	r9,4(r5)
 4006264:	22000217 	ldw	r8,8(r4)
 4006268:	00ffff04 	movi	r3,-4
 400626c:	48c6703a 	and	r3,r9,r3
 4006270:	2a005726 	beq	r5,r8,40063d0 <_free_r+0x1ac>
 4006274:	28c00115 	stw	r3,4(r5)
 4006278:	39c0004c 	andi	r7,r7,1
 400627c:	3800091e 	bne	r7,zero,40062a4 <_free_r+0x80>
 4006280:	823ffe17 	ldw	r8,-8(r16)
 4006284:	22400204 	addi	r9,r4,8
 4006288:	320dc83a 	sub	r6,r6,r8
 400628c:	31c00217 	ldw	r7,8(r6)
 4006290:	1205883a 	add	r2,r2,r8
 4006294:	3a406526 	beq	r7,r9,400642c <_free_r+0x208>
 4006298:	32000317 	ldw	r8,12(r6)
 400629c:	3a000315 	stw	r8,12(r7)
 40062a0:	41c00215 	stw	r7,8(r8)
 40062a4:	28cf883a 	add	r7,r5,r3
 40062a8:	39c00117 	ldw	r7,4(r7)
 40062ac:	39c0004c 	andi	r7,r7,1
 40062b0:	38003a26 	beq	r7,zero,400639c <_free_r+0x178>
 40062b4:	10c00054 	ori	r3,r2,1
 40062b8:	30c00115 	stw	r3,4(r6)
 40062bc:	3087883a 	add	r3,r6,r2
 40062c0:	18800015 	stw	r2,0(r3)
 40062c4:	00c07fc4 	movi	r3,511
 40062c8:	18801936 	bltu	r3,r2,4006330 <_free_r+0x10c>
 40062cc:	1004d0fa 	srli	r2,r2,3
 40062d0:	01c00044 	movi	r7,1
 40062d4:	21400117 	ldw	r5,4(r4)
 40062d8:	10c00044 	addi	r3,r2,1
 40062dc:	18c7883a 	add	r3,r3,r3
 40062e0:	1005d0ba 	srai	r2,r2,2
 40062e4:	18c7883a 	add	r3,r3,r3
 40062e8:	18c7883a 	add	r3,r3,r3
 40062ec:	1907883a 	add	r3,r3,r4
 40062f0:	3884983a 	sll	r2,r7,r2
 40062f4:	19c00017 	ldw	r7,0(r3)
 40062f8:	1a3ffe04 	addi	r8,r3,-8
 40062fc:	1144b03a 	or	r2,r2,r5
 4006300:	32000315 	stw	r8,12(r6)
 4006304:	31c00215 	stw	r7,8(r6)
 4006308:	20800115 	stw	r2,4(r4)
 400630c:	19800015 	stw	r6,0(r3)
 4006310:	39800315 	stw	r6,12(r7)
 4006314:	8809883a 	mov	r4,r17
 4006318:	dfc00217 	ldw	ra,8(sp)
 400631c:	dc400117 	ldw	r17,4(sp)
 4006320:	dc000017 	ldw	r16,0(sp)
 4006324:	dec00304 	addi	sp,sp,12
 4006328:	400ef8c1 	jmpi	400ef8c <__malloc_unlock>
 400632c:	f800283a 	ret
 4006330:	100ad27a 	srli	r5,r2,9
 4006334:	00c00104 	movi	r3,4
 4006338:	19404a36 	bltu	r3,r5,4006464 <_free_r+0x240>
 400633c:	100ad1ba 	srli	r5,r2,6
 4006340:	28c00e44 	addi	r3,r5,57
 4006344:	18c7883a 	add	r3,r3,r3
 4006348:	29400e04 	addi	r5,r5,56
 400634c:	18c7883a 	add	r3,r3,r3
 4006350:	18c7883a 	add	r3,r3,r3
 4006354:	1909883a 	add	r4,r3,r4
 4006358:	20c00017 	ldw	r3,0(r4)
 400635c:	01c10074 	movhi	r7,1025
 4006360:	213ffe04 	addi	r4,r4,-8
 4006364:	39ccce04 	addi	r7,r7,13112
 4006368:	20c04426 	beq	r4,r3,400647c <_free_r+0x258>
 400636c:	01ffff04 	movi	r7,-4
 4006370:	19400117 	ldw	r5,4(r3)
 4006374:	29ca703a 	and	r5,r5,r7
 4006378:	1140022e 	bgeu	r2,r5,4006384 <_free_r+0x160>
 400637c:	18c00217 	ldw	r3,8(r3)
 4006380:	20fffb1e 	bne	r4,r3,4006370 <__alt_data_end+0xfc006370>
 4006384:	19000317 	ldw	r4,12(r3)
 4006388:	31000315 	stw	r4,12(r6)
 400638c:	30c00215 	stw	r3,8(r6)
 4006390:	21800215 	stw	r6,8(r4)
 4006394:	19800315 	stw	r6,12(r3)
 4006398:	003fde06 	br	4006314 <__alt_data_end+0xfc006314>
 400639c:	29c00217 	ldw	r7,8(r5)
 40063a0:	10c5883a 	add	r2,r2,r3
 40063a4:	00c10074 	movhi	r3,1025
 40063a8:	18ccd004 	addi	r3,r3,13120
 40063ac:	38c03b26 	beq	r7,r3,400649c <_free_r+0x278>
 40063b0:	2a000317 	ldw	r8,12(r5)
 40063b4:	11400054 	ori	r5,r2,1
 40063b8:	3087883a 	add	r3,r6,r2
 40063bc:	3a000315 	stw	r8,12(r7)
 40063c0:	41c00215 	stw	r7,8(r8)
 40063c4:	31400115 	stw	r5,4(r6)
 40063c8:	18800015 	stw	r2,0(r3)
 40063cc:	003fbd06 	br	40062c4 <__alt_data_end+0xfc0062c4>
 40063d0:	39c0004c 	andi	r7,r7,1
 40063d4:	10c5883a 	add	r2,r2,r3
 40063d8:	3800071e 	bne	r7,zero,40063f8 <_free_r+0x1d4>
 40063dc:	81fffe17 	ldw	r7,-8(r16)
 40063e0:	31cdc83a 	sub	r6,r6,r7
 40063e4:	30c00317 	ldw	r3,12(r6)
 40063e8:	31400217 	ldw	r5,8(r6)
 40063ec:	11c5883a 	add	r2,r2,r7
 40063f0:	28c00315 	stw	r3,12(r5)
 40063f4:	19400215 	stw	r5,8(r3)
 40063f8:	10c00054 	ori	r3,r2,1
 40063fc:	30c00115 	stw	r3,4(r6)
 4006400:	00c10074 	movhi	r3,1025
 4006404:	18ce5e04 	addi	r3,r3,14712
 4006408:	18c00017 	ldw	r3,0(r3)
 400640c:	21800215 	stw	r6,8(r4)
 4006410:	10ffc036 	bltu	r2,r3,4006314 <__alt_data_end+0xfc006314>
 4006414:	00810074 	movhi	r2,1025
 4006418:	10913504 	addi	r2,r2,17620
 400641c:	11400017 	ldw	r5,0(r2)
 4006420:	8809883a 	mov	r4,r17
 4006424:	40061000 	call	4006100 <_malloc_trim_r>
 4006428:	003fba06 	br	4006314 <__alt_data_end+0xfc006314>
 400642c:	28c9883a 	add	r4,r5,r3
 4006430:	21000117 	ldw	r4,4(r4)
 4006434:	2100004c 	andi	r4,r4,1
 4006438:	2000391e 	bne	r4,zero,4006520 <_free_r+0x2fc>
 400643c:	29c00217 	ldw	r7,8(r5)
 4006440:	29000317 	ldw	r4,12(r5)
 4006444:	1885883a 	add	r2,r3,r2
 4006448:	10c00054 	ori	r3,r2,1
 400644c:	39000315 	stw	r4,12(r7)
 4006450:	21c00215 	stw	r7,8(r4)
 4006454:	30c00115 	stw	r3,4(r6)
 4006458:	308d883a 	add	r6,r6,r2
 400645c:	30800015 	stw	r2,0(r6)
 4006460:	003fac06 	br	4006314 <__alt_data_end+0xfc006314>
 4006464:	00c00504 	movi	r3,20
 4006468:	19401536 	bltu	r3,r5,40064c0 <_free_r+0x29c>
 400646c:	28c01704 	addi	r3,r5,92
 4006470:	18c7883a 	add	r3,r3,r3
 4006474:	294016c4 	addi	r5,r5,91
 4006478:	003fb406 	br	400634c <__alt_data_end+0xfc00634c>
 400647c:	280bd0ba 	srai	r5,r5,2
 4006480:	00c00044 	movi	r3,1
 4006484:	38800117 	ldw	r2,4(r7)
 4006488:	194a983a 	sll	r5,r3,r5
 400648c:	2007883a 	mov	r3,r4
 4006490:	2884b03a 	or	r2,r5,r2
 4006494:	38800115 	stw	r2,4(r7)
 4006498:	003fbb06 	br	4006388 <__alt_data_end+0xfc006388>
 400649c:	21800515 	stw	r6,20(r4)
 40064a0:	21800415 	stw	r6,16(r4)
 40064a4:	10c00054 	ori	r3,r2,1
 40064a8:	31c00315 	stw	r7,12(r6)
 40064ac:	31c00215 	stw	r7,8(r6)
 40064b0:	30c00115 	stw	r3,4(r6)
 40064b4:	308d883a 	add	r6,r6,r2
 40064b8:	30800015 	stw	r2,0(r6)
 40064bc:	003f9506 	br	4006314 <__alt_data_end+0xfc006314>
 40064c0:	00c01504 	movi	r3,84
 40064c4:	19400536 	bltu	r3,r5,40064dc <_free_r+0x2b8>
 40064c8:	100ad33a 	srli	r5,r2,12
 40064cc:	28c01bc4 	addi	r3,r5,111
 40064d0:	18c7883a 	add	r3,r3,r3
 40064d4:	29401b84 	addi	r5,r5,110
 40064d8:	003f9c06 	br	400634c <__alt_data_end+0xfc00634c>
 40064dc:	00c05504 	movi	r3,340
 40064e0:	19400536 	bltu	r3,r5,40064f8 <_free_r+0x2d4>
 40064e4:	100ad3fa 	srli	r5,r2,15
 40064e8:	28c01e04 	addi	r3,r5,120
 40064ec:	18c7883a 	add	r3,r3,r3
 40064f0:	29401dc4 	addi	r5,r5,119
 40064f4:	003f9506 	br	400634c <__alt_data_end+0xfc00634c>
 40064f8:	00c15504 	movi	r3,1364
 40064fc:	19400536 	bltu	r3,r5,4006514 <_free_r+0x2f0>
 4006500:	100ad4ba 	srli	r5,r2,18
 4006504:	28c01f44 	addi	r3,r5,125
 4006508:	18c7883a 	add	r3,r3,r3
 400650c:	29401f04 	addi	r5,r5,124
 4006510:	003f8e06 	br	400634c <__alt_data_end+0xfc00634c>
 4006514:	00c03f84 	movi	r3,254
 4006518:	01401f84 	movi	r5,126
 400651c:	003f8b06 	br	400634c <__alt_data_end+0xfc00634c>
 4006520:	10c00054 	ori	r3,r2,1
 4006524:	30c00115 	stw	r3,4(r6)
 4006528:	308d883a 	add	r6,r6,r2
 400652c:	30800015 	stw	r2,0(r6)
 4006530:	003f7806 	br	4006314 <__alt_data_end+0xfc006314>

04006534 <__sfvwrite_r>:
 4006534:	30800217 	ldw	r2,8(r6)
 4006538:	10006726 	beq	r2,zero,40066d8 <__sfvwrite_r+0x1a4>
 400653c:	28c0030b 	ldhu	r3,12(r5)
 4006540:	defff404 	addi	sp,sp,-48
 4006544:	dd400715 	stw	r21,28(sp)
 4006548:	dd000615 	stw	r20,24(sp)
 400654c:	dc000215 	stw	r16,8(sp)
 4006550:	dfc00b15 	stw	ra,44(sp)
 4006554:	df000a15 	stw	fp,40(sp)
 4006558:	ddc00915 	stw	r23,36(sp)
 400655c:	dd800815 	stw	r22,32(sp)
 4006560:	dcc00515 	stw	r19,20(sp)
 4006564:	dc800415 	stw	r18,16(sp)
 4006568:	dc400315 	stw	r17,12(sp)
 400656c:	1880020c 	andi	r2,r3,8
 4006570:	2821883a 	mov	r16,r5
 4006574:	202b883a 	mov	r21,r4
 4006578:	3029883a 	mov	r20,r6
 400657c:	10002726 	beq	r2,zero,400661c <__sfvwrite_r+0xe8>
 4006580:	28800417 	ldw	r2,16(r5)
 4006584:	10002526 	beq	r2,zero,400661c <__sfvwrite_r+0xe8>
 4006588:	1880008c 	andi	r2,r3,2
 400658c:	a4400017 	ldw	r17,0(r20)
 4006590:	10002a26 	beq	r2,zero,400663c <__sfvwrite_r+0x108>
 4006594:	05a00034 	movhi	r22,32768
 4006598:	0027883a 	mov	r19,zero
 400659c:	0025883a 	mov	r18,zero
 40065a0:	b5bf0004 	addi	r22,r22,-1024
 40065a4:	980d883a 	mov	r6,r19
 40065a8:	a809883a 	mov	r4,r21
 40065ac:	90004626 	beq	r18,zero,40066c8 <__sfvwrite_r+0x194>
 40065b0:	900f883a 	mov	r7,r18
 40065b4:	b480022e 	bgeu	r22,r18,40065c0 <__sfvwrite_r+0x8c>
 40065b8:	01e00034 	movhi	r7,32768
 40065bc:	39ff0004 	addi	r7,r7,-1024
 40065c0:	80800917 	ldw	r2,36(r16)
 40065c4:	81400717 	ldw	r5,28(r16)
 40065c8:	103ee83a 	callr	r2
 40065cc:	00805a0e 	bge	zero,r2,4006738 <__sfvwrite_r+0x204>
 40065d0:	a0c00217 	ldw	r3,8(r20)
 40065d4:	98a7883a 	add	r19,r19,r2
 40065d8:	90a5c83a 	sub	r18,r18,r2
 40065dc:	1885c83a 	sub	r2,r3,r2
 40065e0:	a0800215 	stw	r2,8(r20)
 40065e4:	103fef1e 	bne	r2,zero,40065a4 <__alt_data_end+0xfc0065a4>
 40065e8:	0005883a 	mov	r2,zero
 40065ec:	dfc00b17 	ldw	ra,44(sp)
 40065f0:	df000a17 	ldw	fp,40(sp)
 40065f4:	ddc00917 	ldw	r23,36(sp)
 40065f8:	dd800817 	ldw	r22,32(sp)
 40065fc:	dd400717 	ldw	r21,28(sp)
 4006600:	dd000617 	ldw	r20,24(sp)
 4006604:	dcc00517 	ldw	r19,20(sp)
 4006608:	dc800417 	ldw	r18,16(sp)
 400660c:	dc400317 	ldw	r17,12(sp)
 4006610:	dc000217 	ldw	r16,8(sp)
 4006614:	dec00c04 	addi	sp,sp,48
 4006618:	f800283a 	ret
 400661c:	800b883a 	mov	r5,r16
 4006620:	a809883a 	mov	r4,r21
 4006624:	40040a40 	call	40040a4 <__swsetup_r>
 4006628:	1000ee1e 	bne	r2,zero,40069e4 <__sfvwrite_r+0x4b0>
 400662c:	80c0030b 	ldhu	r3,12(r16)
 4006630:	a4400017 	ldw	r17,0(r20)
 4006634:	1880008c 	andi	r2,r3,2
 4006638:	103fd61e 	bne	r2,zero,4006594 <__alt_data_end+0xfc006594>
 400663c:	1880004c 	andi	r2,r3,1
 4006640:	1000421e 	bne	r2,zero,400674c <__sfvwrite_r+0x218>
 4006644:	0039883a 	mov	fp,zero
 4006648:	0025883a 	mov	r18,zero
 400664c:	90001a26 	beq	r18,zero,40066b8 <__sfvwrite_r+0x184>
 4006650:	1880800c 	andi	r2,r3,512
 4006654:	84c00217 	ldw	r19,8(r16)
 4006658:	10002126 	beq	r2,zero,40066e0 <__sfvwrite_r+0x1ac>
 400665c:	982f883a 	mov	r23,r19
 4006660:	94c09636 	bltu	r18,r19,40068bc <__sfvwrite_r+0x388>
 4006664:	1881200c 	andi	r2,r3,1152
 4006668:	1000a11e 	bne	r2,zero,40068f0 <__sfvwrite_r+0x3bc>
 400666c:	81000017 	ldw	r4,0(r16)
 4006670:	b80d883a 	mov	r6,r23
 4006674:	e00b883a 	mov	r5,fp
 4006678:	40078540 	call	4007854 <memmove>
 400667c:	80c00217 	ldw	r3,8(r16)
 4006680:	81000017 	ldw	r4,0(r16)
 4006684:	9005883a 	mov	r2,r18
 4006688:	1ce7c83a 	sub	r19,r3,r19
 400668c:	25cf883a 	add	r7,r4,r23
 4006690:	84c00215 	stw	r19,8(r16)
 4006694:	81c00015 	stw	r7,0(r16)
 4006698:	a0c00217 	ldw	r3,8(r20)
 400669c:	e0b9883a 	add	fp,fp,r2
 40066a0:	90a5c83a 	sub	r18,r18,r2
 40066a4:	18a7c83a 	sub	r19,r3,r2
 40066a8:	a4c00215 	stw	r19,8(r20)
 40066ac:	983fce26 	beq	r19,zero,40065e8 <__alt_data_end+0xfc0065e8>
 40066b0:	80c0030b 	ldhu	r3,12(r16)
 40066b4:	903fe61e 	bne	r18,zero,4006650 <__alt_data_end+0xfc006650>
 40066b8:	8f000017 	ldw	fp,0(r17)
 40066bc:	8c800117 	ldw	r18,4(r17)
 40066c0:	8c400204 	addi	r17,r17,8
 40066c4:	003fe106 	br	400664c <__alt_data_end+0xfc00664c>
 40066c8:	8cc00017 	ldw	r19,0(r17)
 40066cc:	8c800117 	ldw	r18,4(r17)
 40066d0:	8c400204 	addi	r17,r17,8
 40066d4:	003fb306 	br	40065a4 <__alt_data_end+0xfc0065a4>
 40066d8:	0005883a 	mov	r2,zero
 40066dc:	f800283a 	ret
 40066e0:	81000017 	ldw	r4,0(r16)
 40066e4:	80800417 	ldw	r2,16(r16)
 40066e8:	11005a36 	bltu	r2,r4,4006854 <__sfvwrite_r+0x320>
 40066ec:	85c00517 	ldw	r23,20(r16)
 40066f0:	95c05836 	bltu	r18,r23,4006854 <__sfvwrite_r+0x320>
 40066f4:	00a00034 	movhi	r2,32768
 40066f8:	10bfffc4 	addi	r2,r2,-1
 40066fc:	9009883a 	mov	r4,r18
 4006700:	1480012e 	bgeu	r2,r18,4006708 <__sfvwrite_r+0x1d4>
 4006704:	1009883a 	mov	r4,r2
 4006708:	b80b883a 	mov	r5,r23
 400670c:	400bfd80 	call	400bfd8 <__divsi3>
 4006710:	b80b883a 	mov	r5,r23
 4006714:	1009883a 	mov	r4,r2
 4006718:	4000bd80 	call	4000bd8 <__mulsi3>
 400671c:	81400717 	ldw	r5,28(r16)
 4006720:	80c00917 	ldw	r3,36(r16)
 4006724:	100f883a 	mov	r7,r2
 4006728:	e00d883a 	mov	r6,fp
 400672c:	a809883a 	mov	r4,r21
 4006730:	183ee83a 	callr	r3
 4006734:	00bfd816 	blt	zero,r2,4006698 <__alt_data_end+0xfc006698>
 4006738:	8080030b 	ldhu	r2,12(r16)
 400673c:	10801014 	ori	r2,r2,64
 4006740:	8080030d 	sth	r2,12(r16)
 4006744:	00bfffc4 	movi	r2,-1
 4006748:	003fa806 	br	40065ec <__alt_data_end+0xfc0065ec>
 400674c:	0027883a 	mov	r19,zero
 4006750:	0011883a 	mov	r8,zero
 4006754:	0039883a 	mov	fp,zero
 4006758:	0025883a 	mov	r18,zero
 400675c:	90001f26 	beq	r18,zero,40067dc <__sfvwrite_r+0x2a8>
 4006760:	40005a26 	beq	r8,zero,40068cc <__sfvwrite_r+0x398>
 4006764:	982d883a 	mov	r22,r19
 4006768:	94c0012e 	bgeu	r18,r19,4006770 <__sfvwrite_r+0x23c>
 400676c:	902d883a 	mov	r22,r18
 4006770:	81000017 	ldw	r4,0(r16)
 4006774:	80800417 	ldw	r2,16(r16)
 4006778:	b02f883a 	mov	r23,r22
 400677c:	81c00517 	ldw	r7,20(r16)
 4006780:	1100032e 	bgeu	r2,r4,4006790 <__sfvwrite_r+0x25c>
 4006784:	80c00217 	ldw	r3,8(r16)
 4006788:	38c7883a 	add	r3,r7,r3
 400678c:	1d801816 	blt	r3,r22,40067f0 <__sfvwrite_r+0x2bc>
 4006790:	b1c03e16 	blt	r22,r7,400688c <__sfvwrite_r+0x358>
 4006794:	80800917 	ldw	r2,36(r16)
 4006798:	81400717 	ldw	r5,28(r16)
 400679c:	e00d883a 	mov	r6,fp
 40067a0:	da000115 	stw	r8,4(sp)
 40067a4:	a809883a 	mov	r4,r21
 40067a8:	103ee83a 	callr	r2
 40067ac:	102f883a 	mov	r23,r2
 40067b0:	da000117 	ldw	r8,4(sp)
 40067b4:	00bfe00e 	bge	zero,r2,4006738 <__alt_data_end+0xfc006738>
 40067b8:	9de7c83a 	sub	r19,r19,r23
 40067bc:	98001f26 	beq	r19,zero,400683c <__sfvwrite_r+0x308>
 40067c0:	a0800217 	ldw	r2,8(r20)
 40067c4:	e5f9883a 	add	fp,fp,r23
 40067c8:	95e5c83a 	sub	r18,r18,r23
 40067cc:	15efc83a 	sub	r23,r2,r23
 40067d0:	a5c00215 	stw	r23,8(r20)
 40067d4:	b83f8426 	beq	r23,zero,40065e8 <__alt_data_end+0xfc0065e8>
 40067d8:	903fe11e 	bne	r18,zero,4006760 <__alt_data_end+0xfc006760>
 40067dc:	8f000017 	ldw	fp,0(r17)
 40067e0:	8c800117 	ldw	r18,4(r17)
 40067e4:	0011883a 	mov	r8,zero
 40067e8:	8c400204 	addi	r17,r17,8
 40067ec:	003fdb06 	br	400675c <__alt_data_end+0xfc00675c>
 40067f0:	180d883a 	mov	r6,r3
 40067f4:	e00b883a 	mov	r5,fp
 40067f8:	da000115 	stw	r8,4(sp)
 40067fc:	d8c00015 	stw	r3,0(sp)
 4006800:	40078540 	call	4007854 <memmove>
 4006804:	d8c00017 	ldw	r3,0(sp)
 4006808:	80800017 	ldw	r2,0(r16)
 400680c:	800b883a 	mov	r5,r16
 4006810:	a809883a 	mov	r4,r21
 4006814:	10c5883a 	add	r2,r2,r3
 4006818:	80800015 	stw	r2,0(r16)
 400681c:	d8c00015 	stw	r3,0(sp)
 4006820:	4005cc40 	call	4005cc4 <_fflush_r>
 4006824:	d8c00017 	ldw	r3,0(sp)
 4006828:	da000117 	ldw	r8,4(sp)
 400682c:	103fc21e 	bne	r2,zero,4006738 <__alt_data_end+0xfc006738>
 4006830:	182f883a 	mov	r23,r3
 4006834:	9de7c83a 	sub	r19,r19,r23
 4006838:	983fe11e 	bne	r19,zero,40067c0 <__alt_data_end+0xfc0067c0>
 400683c:	800b883a 	mov	r5,r16
 4006840:	a809883a 	mov	r4,r21
 4006844:	4005cc40 	call	4005cc4 <_fflush_r>
 4006848:	103fbb1e 	bne	r2,zero,4006738 <__alt_data_end+0xfc006738>
 400684c:	0011883a 	mov	r8,zero
 4006850:	003fdb06 	br	40067c0 <__alt_data_end+0xfc0067c0>
 4006854:	94c0012e 	bgeu	r18,r19,400685c <__sfvwrite_r+0x328>
 4006858:	9027883a 	mov	r19,r18
 400685c:	980d883a 	mov	r6,r19
 4006860:	e00b883a 	mov	r5,fp
 4006864:	40078540 	call	4007854 <memmove>
 4006868:	80800217 	ldw	r2,8(r16)
 400686c:	80c00017 	ldw	r3,0(r16)
 4006870:	14c5c83a 	sub	r2,r2,r19
 4006874:	1cc7883a 	add	r3,r3,r19
 4006878:	80800215 	stw	r2,8(r16)
 400687c:	80c00015 	stw	r3,0(r16)
 4006880:	10004326 	beq	r2,zero,4006990 <__sfvwrite_r+0x45c>
 4006884:	9805883a 	mov	r2,r19
 4006888:	003f8306 	br	4006698 <__alt_data_end+0xfc006698>
 400688c:	b00d883a 	mov	r6,r22
 4006890:	e00b883a 	mov	r5,fp
 4006894:	da000115 	stw	r8,4(sp)
 4006898:	40078540 	call	4007854 <memmove>
 400689c:	80800217 	ldw	r2,8(r16)
 40068a0:	80c00017 	ldw	r3,0(r16)
 40068a4:	da000117 	ldw	r8,4(sp)
 40068a8:	1585c83a 	sub	r2,r2,r22
 40068ac:	1dad883a 	add	r22,r3,r22
 40068b0:	80800215 	stw	r2,8(r16)
 40068b4:	85800015 	stw	r22,0(r16)
 40068b8:	003fbf06 	br	40067b8 <__alt_data_end+0xfc0067b8>
 40068bc:	81000017 	ldw	r4,0(r16)
 40068c0:	9027883a 	mov	r19,r18
 40068c4:	902f883a 	mov	r23,r18
 40068c8:	003f6906 	br	4006670 <__alt_data_end+0xfc006670>
 40068cc:	900d883a 	mov	r6,r18
 40068d0:	01400284 	movi	r5,10
 40068d4:	e009883a 	mov	r4,fp
 40068d8:	40076280 	call	4007628 <memchr>
 40068dc:	10003e26 	beq	r2,zero,40069d8 <__sfvwrite_r+0x4a4>
 40068e0:	10800044 	addi	r2,r2,1
 40068e4:	1727c83a 	sub	r19,r2,fp
 40068e8:	02000044 	movi	r8,1
 40068ec:	003f9d06 	br	4006764 <__alt_data_end+0xfc006764>
 40068f0:	80800517 	ldw	r2,20(r16)
 40068f4:	81400417 	ldw	r5,16(r16)
 40068f8:	81c00017 	ldw	r7,0(r16)
 40068fc:	10a7883a 	add	r19,r2,r2
 4006900:	9885883a 	add	r2,r19,r2
 4006904:	1026d7fa 	srli	r19,r2,31
 4006908:	396dc83a 	sub	r22,r7,r5
 400690c:	b1000044 	addi	r4,r22,1
 4006910:	9885883a 	add	r2,r19,r2
 4006914:	1027d07a 	srai	r19,r2,1
 4006918:	2485883a 	add	r2,r4,r18
 400691c:	980d883a 	mov	r6,r19
 4006920:	9880022e 	bgeu	r19,r2,400692c <__sfvwrite_r+0x3f8>
 4006924:	1027883a 	mov	r19,r2
 4006928:	100d883a 	mov	r6,r2
 400692c:	18c1000c 	andi	r3,r3,1024
 4006930:	18001c26 	beq	r3,zero,40069a4 <__sfvwrite_r+0x470>
 4006934:	300b883a 	mov	r5,r6
 4006938:	a809883a 	mov	r4,r21
 400693c:	4006e1c0 	call	4006e1c <_malloc_r>
 4006940:	102f883a 	mov	r23,r2
 4006944:	10002926 	beq	r2,zero,40069ec <__sfvwrite_r+0x4b8>
 4006948:	81400417 	ldw	r5,16(r16)
 400694c:	b00d883a 	mov	r6,r22
 4006950:	1009883a 	mov	r4,r2
 4006954:	400770c0 	call	400770c <memcpy>
 4006958:	8080030b 	ldhu	r2,12(r16)
 400695c:	00fedfc4 	movi	r3,-1153
 4006960:	10c4703a 	and	r2,r2,r3
 4006964:	10802014 	ori	r2,r2,128
 4006968:	8080030d 	sth	r2,12(r16)
 400696c:	bd89883a 	add	r4,r23,r22
 4006970:	9d8fc83a 	sub	r7,r19,r22
 4006974:	85c00415 	stw	r23,16(r16)
 4006978:	84c00515 	stw	r19,20(r16)
 400697c:	81000015 	stw	r4,0(r16)
 4006980:	9027883a 	mov	r19,r18
 4006984:	81c00215 	stw	r7,8(r16)
 4006988:	902f883a 	mov	r23,r18
 400698c:	003f3806 	br	4006670 <__alt_data_end+0xfc006670>
 4006990:	800b883a 	mov	r5,r16
 4006994:	a809883a 	mov	r4,r21
 4006998:	4005cc40 	call	4005cc4 <_fflush_r>
 400699c:	103fb926 	beq	r2,zero,4006884 <__alt_data_end+0xfc006884>
 40069a0:	003f6506 	br	4006738 <__alt_data_end+0xfc006738>
 40069a4:	a809883a 	mov	r4,r21
 40069a8:	4008b900 	call	4008b90 <_realloc_r>
 40069ac:	102f883a 	mov	r23,r2
 40069b0:	103fee1e 	bne	r2,zero,400696c <__alt_data_end+0xfc00696c>
 40069b4:	81400417 	ldw	r5,16(r16)
 40069b8:	a809883a 	mov	r4,r21
 40069bc:	40062240 	call	4006224 <_free_r>
 40069c0:	8080030b 	ldhu	r2,12(r16)
 40069c4:	00ffdfc4 	movi	r3,-129
 40069c8:	1884703a 	and	r2,r3,r2
 40069cc:	00c00304 	movi	r3,12
 40069d0:	a8c00015 	stw	r3,0(r21)
 40069d4:	003f5906 	br	400673c <__alt_data_end+0xfc00673c>
 40069d8:	94c00044 	addi	r19,r18,1
 40069dc:	02000044 	movi	r8,1
 40069e0:	003f6006 	br	4006764 <__alt_data_end+0xfc006764>
 40069e4:	00bfffc4 	movi	r2,-1
 40069e8:	003f0006 	br	40065ec <__alt_data_end+0xfc0065ec>
 40069ec:	00800304 	movi	r2,12
 40069f0:	a8800015 	stw	r2,0(r21)
 40069f4:	8080030b 	ldhu	r2,12(r16)
 40069f8:	003f5006 	br	400673c <__alt_data_end+0xfc00673c>

040069fc <_fwalk>:
 40069fc:	defff704 	addi	sp,sp,-36
 4006a00:	dd000415 	stw	r20,16(sp)
 4006a04:	dfc00815 	stw	ra,32(sp)
 4006a08:	ddc00715 	stw	r23,28(sp)
 4006a0c:	dd800615 	stw	r22,24(sp)
 4006a10:	dd400515 	stw	r21,20(sp)
 4006a14:	dcc00315 	stw	r19,12(sp)
 4006a18:	dc800215 	stw	r18,8(sp)
 4006a1c:	dc400115 	stw	r17,4(sp)
 4006a20:	dc000015 	stw	r16,0(sp)
 4006a24:	2500b804 	addi	r20,r4,736
 4006a28:	a0002326 	beq	r20,zero,4006ab8 <_fwalk+0xbc>
 4006a2c:	282b883a 	mov	r21,r5
 4006a30:	002f883a 	mov	r23,zero
 4006a34:	05800044 	movi	r22,1
 4006a38:	04ffffc4 	movi	r19,-1
 4006a3c:	a4400117 	ldw	r17,4(r20)
 4006a40:	a4800217 	ldw	r18,8(r20)
 4006a44:	8c7fffc4 	addi	r17,r17,-1
 4006a48:	88000d16 	blt	r17,zero,4006a80 <_fwalk+0x84>
 4006a4c:	94000304 	addi	r16,r18,12
 4006a50:	94800384 	addi	r18,r18,14
 4006a54:	8080000b 	ldhu	r2,0(r16)
 4006a58:	8c7fffc4 	addi	r17,r17,-1
 4006a5c:	813ffd04 	addi	r4,r16,-12
 4006a60:	b080042e 	bgeu	r22,r2,4006a74 <_fwalk+0x78>
 4006a64:	9080000f 	ldh	r2,0(r18)
 4006a68:	14c00226 	beq	r2,r19,4006a74 <_fwalk+0x78>
 4006a6c:	a83ee83a 	callr	r21
 4006a70:	b8aeb03a 	or	r23,r23,r2
 4006a74:	84001a04 	addi	r16,r16,104
 4006a78:	94801a04 	addi	r18,r18,104
 4006a7c:	8cfff51e 	bne	r17,r19,4006a54 <__alt_data_end+0xfc006a54>
 4006a80:	a5000017 	ldw	r20,0(r20)
 4006a84:	a03fed1e 	bne	r20,zero,4006a3c <__alt_data_end+0xfc006a3c>
 4006a88:	b805883a 	mov	r2,r23
 4006a8c:	dfc00817 	ldw	ra,32(sp)
 4006a90:	ddc00717 	ldw	r23,28(sp)
 4006a94:	dd800617 	ldw	r22,24(sp)
 4006a98:	dd400517 	ldw	r21,20(sp)
 4006a9c:	dd000417 	ldw	r20,16(sp)
 4006aa0:	dcc00317 	ldw	r19,12(sp)
 4006aa4:	dc800217 	ldw	r18,8(sp)
 4006aa8:	dc400117 	ldw	r17,4(sp)
 4006aac:	dc000017 	ldw	r16,0(sp)
 4006ab0:	dec00904 	addi	sp,sp,36
 4006ab4:	f800283a 	ret
 4006ab8:	002f883a 	mov	r23,zero
 4006abc:	003ff206 	br	4006a88 <__alt_data_end+0xfc006a88>

04006ac0 <_fwalk_reent>:
 4006ac0:	defff704 	addi	sp,sp,-36
 4006ac4:	dd000415 	stw	r20,16(sp)
 4006ac8:	dfc00815 	stw	ra,32(sp)
 4006acc:	ddc00715 	stw	r23,28(sp)
 4006ad0:	dd800615 	stw	r22,24(sp)
 4006ad4:	dd400515 	stw	r21,20(sp)
 4006ad8:	dcc00315 	stw	r19,12(sp)
 4006adc:	dc800215 	stw	r18,8(sp)
 4006ae0:	dc400115 	stw	r17,4(sp)
 4006ae4:	dc000015 	stw	r16,0(sp)
 4006ae8:	2500b804 	addi	r20,r4,736
 4006aec:	a0002326 	beq	r20,zero,4006b7c <_fwalk_reent+0xbc>
 4006af0:	282b883a 	mov	r21,r5
 4006af4:	2027883a 	mov	r19,r4
 4006af8:	002f883a 	mov	r23,zero
 4006afc:	05800044 	movi	r22,1
 4006b00:	04bfffc4 	movi	r18,-1
 4006b04:	a4400117 	ldw	r17,4(r20)
 4006b08:	a4000217 	ldw	r16,8(r20)
 4006b0c:	8c7fffc4 	addi	r17,r17,-1
 4006b10:	88000c16 	blt	r17,zero,4006b44 <_fwalk_reent+0x84>
 4006b14:	84000304 	addi	r16,r16,12
 4006b18:	8080000b 	ldhu	r2,0(r16)
 4006b1c:	8c7fffc4 	addi	r17,r17,-1
 4006b20:	817ffd04 	addi	r5,r16,-12
 4006b24:	b080052e 	bgeu	r22,r2,4006b3c <_fwalk_reent+0x7c>
 4006b28:	8080008f 	ldh	r2,2(r16)
 4006b2c:	9809883a 	mov	r4,r19
 4006b30:	14800226 	beq	r2,r18,4006b3c <_fwalk_reent+0x7c>
 4006b34:	a83ee83a 	callr	r21
 4006b38:	b8aeb03a 	or	r23,r23,r2
 4006b3c:	84001a04 	addi	r16,r16,104
 4006b40:	8cbff51e 	bne	r17,r18,4006b18 <__alt_data_end+0xfc006b18>
 4006b44:	a5000017 	ldw	r20,0(r20)
 4006b48:	a03fee1e 	bne	r20,zero,4006b04 <__alt_data_end+0xfc006b04>
 4006b4c:	b805883a 	mov	r2,r23
 4006b50:	dfc00817 	ldw	ra,32(sp)
 4006b54:	ddc00717 	ldw	r23,28(sp)
 4006b58:	dd800617 	ldw	r22,24(sp)
 4006b5c:	dd400517 	ldw	r21,20(sp)
 4006b60:	dd000417 	ldw	r20,16(sp)
 4006b64:	dcc00317 	ldw	r19,12(sp)
 4006b68:	dc800217 	ldw	r18,8(sp)
 4006b6c:	dc400117 	ldw	r17,4(sp)
 4006b70:	dc000017 	ldw	r16,0(sp)
 4006b74:	dec00904 	addi	sp,sp,36
 4006b78:	f800283a 	ret
 4006b7c:	002f883a 	mov	r23,zero
 4006b80:	003ff206 	br	4006b4c <__alt_data_end+0xfc006b4c>

04006b84 <_setlocale_r>:
 4006b84:	30001b26 	beq	r6,zero,4006bf4 <_setlocale_r+0x70>
 4006b88:	01410074 	movhi	r5,1025
 4006b8c:	defffe04 	addi	sp,sp,-8
 4006b90:	294a6c04 	addi	r5,r5,10672
 4006b94:	3009883a 	mov	r4,r6
 4006b98:	dc000015 	stw	r16,0(sp)
 4006b9c:	dfc00115 	stw	ra,4(sp)
 4006ba0:	3021883a 	mov	r16,r6
 4006ba4:	40092f80 	call	40092f8 <strcmp>
 4006ba8:	1000061e 	bne	r2,zero,4006bc4 <_setlocale_r+0x40>
 4006bac:	00810074 	movhi	r2,1025
 4006bb0:	108a6b04 	addi	r2,r2,10668
 4006bb4:	dfc00117 	ldw	ra,4(sp)
 4006bb8:	dc000017 	ldw	r16,0(sp)
 4006bbc:	dec00204 	addi	sp,sp,8
 4006bc0:	f800283a 	ret
 4006bc4:	01410074 	movhi	r5,1025
 4006bc8:	294a6b04 	addi	r5,r5,10668
 4006bcc:	8009883a 	mov	r4,r16
 4006bd0:	40092f80 	call	40092f8 <strcmp>
 4006bd4:	103ff526 	beq	r2,zero,4006bac <__alt_data_end+0xfc006bac>
 4006bd8:	01410074 	movhi	r5,1025
 4006bdc:	294a5604 	addi	r5,r5,10584
 4006be0:	8009883a 	mov	r4,r16
 4006be4:	40092f80 	call	40092f8 <strcmp>
 4006be8:	103ff026 	beq	r2,zero,4006bac <__alt_data_end+0xfc006bac>
 4006bec:	0005883a 	mov	r2,zero
 4006bf0:	003ff006 	br	4006bb4 <__alt_data_end+0xfc006bb4>
 4006bf4:	00810074 	movhi	r2,1025
 4006bf8:	108a6b04 	addi	r2,r2,10668
 4006bfc:	f800283a 	ret

04006c00 <__locale_charset>:
 4006c00:	00810074 	movhi	r2,1025
 4006c04:	108cb804 	addi	r2,r2,13024
 4006c08:	f800283a 	ret

04006c0c <__locale_mb_cur_max>:
 4006c0c:	00810074 	movhi	r2,1025
 4006c10:	108e5c04 	addi	r2,r2,14704
 4006c14:	10800017 	ldw	r2,0(r2)
 4006c18:	f800283a 	ret

04006c1c <__locale_msgcharset>:
 4006c1c:	00810074 	movhi	r2,1025
 4006c20:	108cb004 	addi	r2,r2,12992
 4006c24:	f800283a 	ret

04006c28 <__locale_cjk_lang>:
 4006c28:	0005883a 	mov	r2,zero
 4006c2c:	f800283a 	ret

04006c30 <_localeconv_r>:
 4006c30:	00810074 	movhi	r2,1025
 4006c34:	108cc004 	addi	r2,r2,13056
 4006c38:	f800283a 	ret

04006c3c <setlocale>:
 4006c3c:	00810074 	movhi	r2,1025
 4006c40:	108e5b04 	addi	r2,r2,14700
 4006c44:	280d883a 	mov	r6,r5
 4006c48:	200b883a 	mov	r5,r4
 4006c4c:	11000017 	ldw	r4,0(r2)
 4006c50:	4006b841 	jmpi	4006b84 <_setlocale_r>

04006c54 <localeconv>:
 4006c54:	00810074 	movhi	r2,1025
 4006c58:	108cc004 	addi	r2,r2,13056
 4006c5c:	f800283a 	ret

04006c60 <__smakebuf_r>:
 4006c60:	2880030b 	ldhu	r2,12(r5)
 4006c64:	10c0008c 	andi	r3,r2,2
 4006c68:	1800411e 	bne	r3,zero,4006d70 <__smakebuf_r+0x110>
 4006c6c:	deffec04 	addi	sp,sp,-80
 4006c70:	dc000f15 	stw	r16,60(sp)
 4006c74:	2821883a 	mov	r16,r5
 4006c78:	2940038f 	ldh	r5,14(r5)
 4006c7c:	dc401015 	stw	r17,64(sp)
 4006c80:	dfc01315 	stw	ra,76(sp)
 4006c84:	dcc01215 	stw	r19,72(sp)
 4006c88:	dc801115 	stw	r18,68(sp)
 4006c8c:	2023883a 	mov	r17,r4
 4006c90:	28001c16 	blt	r5,zero,4006d04 <__smakebuf_r+0xa4>
 4006c94:	d80d883a 	mov	r6,sp
 4006c98:	400af680 	call	400af68 <_fstat_r>
 4006c9c:	10001816 	blt	r2,zero,4006d00 <__smakebuf_r+0xa0>
 4006ca0:	d8800117 	ldw	r2,4(sp)
 4006ca4:	00e00014 	movui	r3,32768
 4006ca8:	10bc000c 	andi	r2,r2,61440
 4006cac:	14c80020 	cmpeqi	r19,r2,8192
 4006cb0:	10c03726 	beq	r2,r3,4006d90 <__smakebuf_r+0x130>
 4006cb4:	80c0030b 	ldhu	r3,12(r16)
 4006cb8:	18c20014 	ori	r3,r3,2048
 4006cbc:	80c0030d 	sth	r3,12(r16)
 4006cc0:	00c80004 	movi	r3,8192
 4006cc4:	10c0521e 	bne	r2,r3,4006e10 <__smakebuf_r+0x1b0>
 4006cc8:	8140038f 	ldh	r5,14(r16)
 4006ccc:	8809883a 	mov	r4,r17
 4006cd0:	400afc40 	call	400afc4 <_isatty_r>
 4006cd4:	10004c26 	beq	r2,zero,4006e08 <__smakebuf_r+0x1a8>
 4006cd8:	8080030b 	ldhu	r2,12(r16)
 4006cdc:	80c010c4 	addi	r3,r16,67
 4006ce0:	80c00015 	stw	r3,0(r16)
 4006ce4:	10800054 	ori	r2,r2,1
 4006ce8:	8080030d 	sth	r2,12(r16)
 4006cec:	00800044 	movi	r2,1
 4006cf0:	80c00415 	stw	r3,16(r16)
 4006cf4:	80800515 	stw	r2,20(r16)
 4006cf8:	04810004 	movi	r18,1024
 4006cfc:	00000706 	br	4006d1c <__smakebuf_r+0xbc>
 4006d00:	8080030b 	ldhu	r2,12(r16)
 4006d04:	10c0200c 	andi	r3,r2,128
 4006d08:	18001f1e 	bne	r3,zero,4006d88 <__smakebuf_r+0x128>
 4006d0c:	04810004 	movi	r18,1024
 4006d10:	10820014 	ori	r2,r2,2048
 4006d14:	8080030d 	sth	r2,12(r16)
 4006d18:	0027883a 	mov	r19,zero
 4006d1c:	900b883a 	mov	r5,r18
 4006d20:	8809883a 	mov	r4,r17
 4006d24:	4006e1c0 	call	4006e1c <_malloc_r>
 4006d28:	10002c26 	beq	r2,zero,4006ddc <__smakebuf_r+0x17c>
 4006d2c:	80c0030b 	ldhu	r3,12(r16)
 4006d30:	01010034 	movhi	r4,1024
 4006d34:	21175604 	addi	r4,r4,23896
 4006d38:	89000f15 	stw	r4,60(r17)
 4006d3c:	18c02014 	ori	r3,r3,128
 4006d40:	80c0030d 	sth	r3,12(r16)
 4006d44:	80800015 	stw	r2,0(r16)
 4006d48:	80800415 	stw	r2,16(r16)
 4006d4c:	84800515 	stw	r18,20(r16)
 4006d50:	98001a1e 	bne	r19,zero,4006dbc <__smakebuf_r+0x15c>
 4006d54:	dfc01317 	ldw	ra,76(sp)
 4006d58:	dcc01217 	ldw	r19,72(sp)
 4006d5c:	dc801117 	ldw	r18,68(sp)
 4006d60:	dc401017 	ldw	r17,64(sp)
 4006d64:	dc000f17 	ldw	r16,60(sp)
 4006d68:	dec01404 	addi	sp,sp,80
 4006d6c:	f800283a 	ret
 4006d70:	288010c4 	addi	r2,r5,67
 4006d74:	28800015 	stw	r2,0(r5)
 4006d78:	28800415 	stw	r2,16(r5)
 4006d7c:	00800044 	movi	r2,1
 4006d80:	28800515 	stw	r2,20(r5)
 4006d84:	f800283a 	ret
 4006d88:	04801004 	movi	r18,64
 4006d8c:	003fe006 	br	4006d10 <__alt_data_end+0xfc006d10>
 4006d90:	81000a17 	ldw	r4,40(r16)
 4006d94:	00c10074 	movhi	r3,1025
 4006d98:	18e4a504 	addi	r3,r3,-28012
 4006d9c:	20ffc51e 	bne	r4,r3,4006cb4 <__alt_data_end+0xfc006cb4>
 4006da0:	8080030b 	ldhu	r2,12(r16)
 4006da4:	04810004 	movi	r18,1024
 4006da8:	84801315 	stw	r18,76(r16)
 4006dac:	1484b03a 	or	r2,r2,r18
 4006db0:	8080030d 	sth	r2,12(r16)
 4006db4:	0027883a 	mov	r19,zero
 4006db8:	003fd806 	br	4006d1c <__alt_data_end+0xfc006d1c>
 4006dbc:	8140038f 	ldh	r5,14(r16)
 4006dc0:	8809883a 	mov	r4,r17
 4006dc4:	400afc40 	call	400afc4 <_isatty_r>
 4006dc8:	103fe226 	beq	r2,zero,4006d54 <__alt_data_end+0xfc006d54>
 4006dcc:	8080030b 	ldhu	r2,12(r16)
 4006dd0:	10800054 	ori	r2,r2,1
 4006dd4:	8080030d 	sth	r2,12(r16)
 4006dd8:	003fde06 	br	4006d54 <__alt_data_end+0xfc006d54>
 4006ddc:	8080030b 	ldhu	r2,12(r16)
 4006de0:	10c0800c 	andi	r3,r2,512
 4006de4:	183fdb1e 	bne	r3,zero,4006d54 <__alt_data_end+0xfc006d54>
 4006de8:	10800094 	ori	r2,r2,2
 4006dec:	80c010c4 	addi	r3,r16,67
 4006df0:	8080030d 	sth	r2,12(r16)
 4006df4:	00800044 	movi	r2,1
 4006df8:	80c00015 	stw	r3,0(r16)
 4006dfc:	80c00415 	stw	r3,16(r16)
 4006e00:	80800515 	stw	r2,20(r16)
 4006e04:	003fd306 	br	4006d54 <__alt_data_end+0xfc006d54>
 4006e08:	04810004 	movi	r18,1024
 4006e0c:	003fc306 	br	4006d1c <__alt_data_end+0xfc006d1c>
 4006e10:	0027883a 	mov	r19,zero
 4006e14:	04810004 	movi	r18,1024
 4006e18:	003fc006 	br	4006d1c <__alt_data_end+0xfc006d1c>

04006e1c <_malloc_r>:
 4006e1c:	defff504 	addi	sp,sp,-44
 4006e20:	dc800315 	stw	r18,12(sp)
 4006e24:	dfc00a15 	stw	ra,40(sp)
 4006e28:	df000915 	stw	fp,36(sp)
 4006e2c:	ddc00815 	stw	r23,32(sp)
 4006e30:	dd800715 	stw	r22,28(sp)
 4006e34:	dd400615 	stw	r21,24(sp)
 4006e38:	dd000515 	stw	r20,20(sp)
 4006e3c:	dcc00415 	stw	r19,16(sp)
 4006e40:	dc400215 	stw	r17,8(sp)
 4006e44:	dc000115 	stw	r16,4(sp)
 4006e48:	288002c4 	addi	r2,r5,11
 4006e4c:	00c00584 	movi	r3,22
 4006e50:	2025883a 	mov	r18,r4
 4006e54:	18807f2e 	bgeu	r3,r2,4007054 <_malloc_r+0x238>
 4006e58:	047ffe04 	movi	r17,-8
 4006e5c:	1462703a 	and	r17,r2,r17
 4006e60:	8800a316 	blt	r17,zero,40070f0 <_malloc_r+0x2d4>
 4006e64:	8940a236 	bltu	r17,r5,40070f0 <_malloc_r+0x2d4>
 4006e68:	400ef680 	call	400ef68 <__malloc_lock>
 4006e6c:	00807dc4 	movi	r2,503
 4006e70:	1441e92e 	bgeu	r2,r17,4007618 <_malloc_r+0x7fc>
 4006e74:	8804d27a 	srli	r2,r17,9
 4006e78:	1000a126 	beq	r2,zero,4007100 <_malloc_r+0x2e4>
 4006e7c:	00c00104 	movi	r3,4
 4006e80:	18811e36 	bltu	r3,r2,40072fc <_malloc_r+0x4e0>
 4006e84:	8804d1ba 	srli	r2,r17,6
 4006e88:	12000e44 	addi	r8,r2,57
 4006e8c:	11c00e04 	addi	r7,r2,56
 4006e90:	4209883a 	add	r4,r8,r8
 4006e94:	04c10074 	movhi	r19,1025
 4006e98:	2109883a 	add	r4,r4,r4
 4006e9c:	9cccce04 	addi	r19,r19,13112
 4006ea0:	2109883a 	add	r4,r4,r4
 4006ea4:	9909883a 	add	r4,r19,r4
 4006ea8:	24000117 	ldw	r16,4(r4)
 4006eac:	213ffe04 	addi	r4,r4,-8
 4006eb0:	24009726 	beq	r4,r16,4007110 <_malloc_r+0x2f4>
 4006eb4:	80800117 	ldw	r2,4(r16)
 4006eb8:	01bfff04 	movi	r6,-4
 4006ebc:	014003c4 	movi	r5,15
 4006ec0:	1184703a 	and	r2,r2,r6
 4006ec4:	1447c83a 	sub	r3,r2,r17
 4006ec8:	28c00716 	blt	r5,r3,4006ee8 <_malloc_r+0xcc>
 4006ecc:	1800920e 	bge	r3,zero,4007118 <_malloc_r+0x2fc>
 4006ed0:	84000317 	ldw	r16,12(r16)
 4006ed4:	24008e26 	beq	r4,r16,4007110 <_malloc_r+0x2f4>
 4006ed8:	80800117 	ldw	r2,4(r16)
 4006edc:	1184703a 	and	r2,r2,r6
 4006ee0:	1447c83a 	sub	r3,r2,r17
 4006ee4:	28fff90e 	bge	r5,r3,4006ecc <__alt_data_end+0xfc006ecc>
 4006ee8:	3809883a 	mov	r4,r7
 4006eec:	01810074 	movhi	r6,1025
 4006ef0:	9c000417 	ldw	r16,16(r19)
 4006ef4:	318cce04 	addi	r6,r6,13112
 4006ef8:	32000204 	addi	r8,r6,8
 4006efc:	82013426 	beq	r16,r8,40073d0 <_malloc_r+0x5b4>
 4006f00:	80c00117 	ldw	r3,4(r16)
 4006f04:	00bfff04 	movi	r2,-4
 4006f08:	188e703a 	and	r7,r3,r2
 4006f0c:	3c45c83a 	sub	r2,r7,r17
 4006f10:	00c003c4 	movi	r3,15
 4006f14:	18811f16 	blt	r3,r2,4007394 <_malloc_r+0x578>
 4006f18:	32000515 	stw	r8,20(r6)
 4006f1c:	32000415 	stw	r8,16(r6)
 4006f20:	10007f0e 	bge	r2,zero,4007120 <_malloc_r+0x304>
 4006f24:	00807fc4 	movi	r2,511
 4006f28:	11c0fd36 	bltu	r2,r7,4007320 <_malloc_r+0x504>
 4006f2c:	3806d0fa 	srli	r3,r7,3
 4006f30:	01c00044 	movi	r7,1
 4006f34:	30800117 	ldw	r2,4(r6)
 4006f38:	19400044 	addi	r5,r3,1
 4006f3c:	294b883a 	add	r5,r5,r5
 4006f40:	1807d0ba 	srai	r3,r3,2
 4006f44:	294b883a 	add	r5,r5,r5
 4006f48:	294b883a 	add	r5,r5,r5
 4006f4c:	298b883a 	add	r5,r5,r6
 4006f50:	38c6983a 	sll	r3,r7,r3
 4006f54:	29c00017 	ldw	r7,0(r5)
 4006f58:	2a7ffe04 	addi	r9,r5,-8
 4006f5c:	1886b03a 	or	r3,r3,r2
 4006f60:	82400315 	stw	r9,12(r16)
 4006f64:	81c00215 	stw	r7,8(r16)
 4006f68:	30c00115 	stw	r3,4(r6)
 4006f6c:	2c000015 	stw	r16,0(r5)
 4006f70:	3c000315 	stw	r16,12(r7)
 4006f74:	2005d0ba 	srai	r2,r4,2
 4006f78:	01400044 	movi	r5,1
 4006f7c:	288a983a 	sll	r5,r5,r2
 4006f80:	19406f36 	bltu	r3,r5,4007140 <_malloc_r+0x324>
 4006f84:	28c4703a 	and	r2,r5,r3
 4006f88:	10000a1e 	bne	r2,zero,4006fb4 <_malloc_r+0x198>
 4006f8c:	00bfff04 	movi	r2,-4
 4006f90:	294b883a 	add	r5,r5,r5
 4006f94:	2088703a 	and	r4,r4,r2
 4006f98:	28c4703a 	and	r2,r5,r3
 4006f9c:	21000104 	addi	r4,r4,4
 4006fa0:	1000041e 	bne	r2,zero,4006fb4 <_malloc_r+0x198>
 4006fa4:	294b883a 	add	r5,r5,r5
 4006fa8:	28c4703a 	and	r2,r5,r3
 4006fac:	21000104 	addi	r4,r4,4
 4006fb0:	103ffc26 	beq	r2,zero,4006fa4 <__alt_data_end+0xfc006fa4>
 4006fb4:	02bfff04 	movi	r10,-4
 4006fb8:	024003c4 	movi	r9,15
 4006fbc:	21800044 	addi	r6,r4,1
 4006fc0:	318d883a 	add	r6,r6,r6
 4006fc4:	318d883a 	add	r6,r6,r6
 4006fc8:	318d883a 	add	r6,r6,r6
 4006fcc:	998d883a 	add	r6,r19,r6
 4006fd0:	333ffe04 	addi	r12,r6,-8
 4006fd4:	2017883a 	mov	r11,r4
 4006fd8:	31800104 	addi	r6,r6,4
 4006fdc:	34000017 	ldw	r16,0(r6)
 4006fe0:	31fffd04 	addi	r7,r6,-12
 4006fe4:	81c0041e 	bne	r16,r7,4006ff8 <_malloc_r+0x1dc>
 4006fe8:	0000fb06 	br	40073d8 <_malloc_r+0x5bc>
 4006fec:	1801030e 	bge	r3,zero,40073fc <_malloc_r+0x5e0>
 4006ff0:	84000317 	ldw	r16,12(r16)
 4006ff4:	81c0f826 	beq	r16,r7,40073d8 <_malloc_r+0x5bc>
 4006ff8:	80800117 	ldw	r2,4(r16)
 4006ffc:	1284703a 	and	r2,r2,r10
 4007000:	1447c83a 	sub	r3,r2,r17
 4007004:	48fff90e 	bge	r9,r3,4006fec <__alt_data_end+0xfc006fec>
 4007008:	80800317 	ldw	r2,12(r16)
 400700c:	81000217 	ldw	r4,8(r16)
 4007010:	89400054 	ori	r5,r17,1
 4007014:	81400115 	stw	r5,4(r16)
 4007018:	20800315 	stw	r2,12(r4)
 400701c:	11000215 	stw	r4,8(r2)
 4007020:	8463883a 	add	r17,r16,r17
 4007024:	9c400515 	stw	r17,20(r19)
 4007028:	9c400415 	stw	r17,16(r19)
 400702c:	18800054 	ori	r2,r3,1
 4007030:	88800115 	stw	r2,4(r17)
 4007034:	8a000315 	stw	r8,12(r17)
 4007038:	8a000215 	stw	r8,8(r17)
 400703c:	88e3883a 	add	r17,r17,r3
 4007040:	88c00015 	stw	r3,0(r17)
 4007044:	9009883a 	mov	r4,r18
 4007048:	400ef8c0 	call	400ef8c <__malloc_unlock>
 400704c:	80800204 	addi	r2,r16,8
 4007050:	00001b06 	br	40070c0 <_malloc_r+0x2a4>
 4007054:	04400404 	movi	r17,16
 4007058:	89402536 	bltu	r17,r5,40070f0 <_malloc_r+0x2d4>
 400705c:	400ef680 	call	400ef68 <__malloc_lock>
 4007060:	00800184 	movi	r2,6
 4007064:	01000084 	movi	r4,2
 4007068:	04c10074 	movhi	r19,1025
 400706c:	1085883a 	add	r2,r2,r2
 4007070:	9cccce04 	addi	r19,r19,13112
 4007074:	1085883a 	add	r2,r2,r2
 4007078:	9885883a 	add	r2,r19,r2
 400707c:	14000117 	ldw	r16,4(r2)
 4007080:	10fffe04 	addi	r3,r2,-8
 4007084:	80c0d926 	beq	r16,r3,40073ec <_malloc_r+0x5d0>
 4007088:	80c00117 	ldw	r3,4(r16)
 400708c:	81000317 	ldw	r4,12(r16)
 4007090:	00bfff04 	movi	r2,-4
 4007094:	1884703a 	and	r2,r3,r2
 4007098:	81400217 	ldw	r5,8(r16)
 400709c:	8085883a 	add	r2,r16,r2
 40070a0:	10c00117 	ldw	r3,4(r2)
 40070a4:	29000315 	stw	r4,12(r5)
 40070a8:	21400215 	stw	r5,8(r4)
 40070ac:	18c00054 	ori	r3,r3,1
 40070b0:	10c00115 	stw	r3,4(r2)
 40070b4:	9009883a 	mov	r4,r18
 40070b8:	400ef8c0 	call	400ef8c <__malloc_unlock>
 40070bc:	80800204 	addi	r2,r16,8
 40070c0:	dfc00a17 	ldw	ra,40(sp)
 40070c4:	df000917 	ldw	fp,36(sp)
 40070c8:	ddc00817 	ldw	r23,32(sp)
 40070cc:	dd800717 	ldw	r22,28(sp)
 40070d0:	dd400617 	ldw	r21,24(sp)
 40070d4:	dd000517 	ldw	r20,20(sp)
 40070d8:	dcc00417 	ldw	r19,16(sp)
 40070dc:	dc800317 	ldw	r18,12(sp)
 40070e0:	dc400217 	ldw	r17,8(sp)
 40070e4:	dc000117 	ldw	r16,4(sp)
 40070e8:	dec00b04 	addi	sp,sp,44
 40070ec:	f800283a 	ret
 40070f0:	00800304 	movi	r2,12
 40070f4:	90800015 	stw	r2,0(r18)
 40070f8:	0005883a 	mov	r2,zero
 40070fc:	003ff006 	br	40070c0 <__alt_data_end+0xfc0070c0>
 4007100:	01002004 	movi	r4,128
 4007104:	02001004 	movi	r8,64
 4007108:	01c00fc4 	movi	r7,63
 400710c:	003f6106 	br	4006e94 <__alt_data_end+0xfc006e94>
 4007110:	4009883a 	mov	r4,r8
 4007114:	003f7506 	br	4006eec <__alt_data_end+0xfc006eec>
 4007118:	81000317 	ldw	r4,12(r16)
 400711c:	003fde06 	br	4007098 <__alt_data_end+0xfc007098>
 4007120:	81c5883a 	add	r2,r16,r7
 4007124:	11400117 	ldw	r5,4(r2)
 4007128:	9009883a 	mov	r4,r18
 400712c:	29400054 	ori	r5,r5,1
 4007130:	11400115 	stw	r5,4(r2)
 4007134:	400ef8c0 	call	400ef8c <__malloc_unlock>
 4007138:	80800204 	addi	r2,r16,8
 400713c:	003fe006 	br	40070c0 <__alt_data_end+0xfc0070c0>
 4007140:	9c000217 	ldw	r16,8(r19)
 4007144:	00bfff04 	movi	r2,-4
 4007148:	85800117 	ldw	r22,4(r16)
 400714c:	b0ac703a 	and	r22,r22,r2
 4007150:	b4400336 	bltu	r22,r17,4007160 <_malloc_r+0x344>
 4007154:	b445c83a 	sub	r2,r22,r17
 4007158:	00c003c4 	movi	r3,15
 400715c:	18805d16 	blt	r3,r2,40072d4 <_malloc_r+0x4b8>
 4007160:	05c10074 	movhi	r23,1025
 4007164:	00810074 	movhi	r2,1025
 4007168:	10913504 	addi	r2,r2,17620
 400716c:	bdce5d04 	addi	r23,r23,14708
 4007170:	15400017 	ldw	r21,0(r2)
 4007174:	b8c00017 	ldw	r3,0(r23)
 4007178:	00bfffc4 	movi	r2,-1
 400717c:	858d883a 	add	r6,r16,r22
 4007180:	8d6b883a 	add	r21,r17,r21
 4007184:	1880ea26 	beq	r3,r2,4007530 <_malloc_r+0x714>
 4007188:	ad4403c4 	addi	r21,r21,4111
 400718c:	00bc0004 	movi	r2,-4096
 4007190:	a8aa703a 	and	r21,r21,r2
 4007194:	a80b883a 	mov	r5,r21
 4007198:	9009883a 	mov	r4,r18
 400719c:	d9800015 	stw	r6,0(sp)
 40071a0:	40091680 	call	4009168 <_sbrk_r>
 40071a4:	1029883a 	mov	r20,r2
 40071a8:	00bfffc4 	movi	r2,-1
 40071ac:	d9800017 	ldw	r6,0(sp)
 40071b0:	a080e826 	beq	r20,r2,4007554 <_malloc_r+0x738>
 40071b4:	a180a636 	bltu	r20,r6,4007450 <_malloc_r+0x634>
 40071b8:	07010074 	movhi	fp,1025
 40071bc:	e7117e04 	addi	fp,fp,17912
 40071c0:	e0800017 	ldw	r2,0(fp)
 40071c4:	a887883a 	add	r3,r21,r2
 40071c8:	e0c00015 	stw	r3,0(fp)
 40071cc:	3500e626 	beq	r6,r20,4007568 <_malloc_r+0x74c>
 40071d0:	b9000017 	ldw	r4,0(r23)
 40071d4:	00bfffc4 	movi	r2,-1
 40071d8:	2080ee26 	beq	r4,r2,4007594 <_malloc_r+0x778>
 40071dc:	a185c83a 	sub	r2,r20,r6
 40071e0:	10c5883a 	add	r2,r2,r3
 40071e4:	e0800015 	stw	r2,0(fp)
 40071e8:	a0c001cc 	andi	r3,r20,7
 40071ec:	1800bc26 	beq	r3,zero,40074e0 <_malloc_r+0x6c4>
 40071f0:	a0e9c83a 	sub	r20,r20,r3
 40071f4:	00840204 	movi	r2,4104
 40071f8:	a5000204 	addi	r20,r20,8
 40071fc:	10c7c83a 	sub	r3,r2,r3
 4007200:	a545883a 	add	r2,r20,r21
 4007204:	1083ffcc 	andi	r2,r2,4095
 4007208:	18abc83a 	sub	r21,r3,r2
 400720c:	a80b883a 	mov	r5,r21
 4007210:	9009883a 	mov	r4,r18
 4007214:	40091680 	call	4009168 <_sbrk_r>
 4007218:	00ffffc4 	movi	r3,-1
 400721c:	10c0e126 	beq	r2,r3,40075a4 <_malloc_r+0x788>
 4007220:	1505c83a 	sub	r2,r2,r20
 4007224:	1545883a 	add	r2,r2,r21
 4007228:	10800054 	ori	r2,r2,1
 400722c:	e0c00017 	ldw	r3,0(fp)
 4007230:	9d000215 	stw	r20,8(r19)
 4007234:	a0800115 	stw	r2,4(r20)
 4007238:	a8c7883a 	add	r3,r21,r3
 400723c:	e0c00015 	stw	r3,0(fp)
 4007240:	84c00e26 	beq	r16,r19,400727c <_malloc_r+0x460>
 4007244:	018003c4 	movi	r6,15
 4007248:	3580a72e 	bgeu	r6,r22,40074e8 <_malloc_r+0x6cc>
 400724c:	81400117 	ldw	r5,4(r16)
 4007250:	013ffe04 	movi	r4,-8
 4007254:	b0bffd04 	addi	r2,r22,-12
 4007258:	1104703a 	and	r2,r2,r4
 400725c:	2900004c 	andi	r4,r5,1
 4007260:	2088b03a 	or	r4,r4,r2
 4007264:	81000115 	stw	r4,4(r16)
 4007268:	01400144 	movi	r5,5
 400726c:	8089883a 	add	r4,r16,r2
 4007270:	21400115 	stw	r5,4(r4)
 4007274:	21400215 	stw	r5,8(r4)
 4007278:	3080cd36 	bltu	r6,r2,40075b0 <_malloc_r+0x794>
 400727c:	00810074 	movhi	r2,1025
 4007280:	10913404 	addi	r2,r2,17616
 4007284:	11000017 	ldw	r4,0(r2)
 4007288:	20c0012e 	bgeu	r4,r3,4007290 <_malloc_r+0x474>
 400728c:	10c00015 	stw	r3,0(r2)
 4007290:	00810074 	movhi	r2,1025
 4007294:	10913304 	addi	r2,r2,17612
 4007298:	11000017 	ldw	r4,0(r2)
 400729c:	9c000217 	ldw	r16,8(r19)
 40072a0:	20c0012e 	bgeu	r4,r3,40072a8 <_malloc_r+0x48c>
 40072a4:	10c00015 	stw	r3,0(r2)
 40072a8:	80c00117 	ldw	r3,4(r16)
 40072ac:	00bfff04 	movi	r2,-4
 40072b0:	1886703a 	and	r3,r3,r2
 40072b4:	1c45c83a 	sub	r2,r3,r17
 40072b8:	1c400236 	bltu	r3,r17,40072c4 <_malloc_r+0x4a8>
 40072bc:	00c003c4 	movi	r3,15
 40072c0:	18800416 	blt	r3,r2,40072d4 <_malloc_r+0x4b8>
 40072c4:	9009883a 	mov	r4,r18
 40072c8:	400ef8c0 	call	400ef8c <__malloc_unlock>
 40072cc:	0005883a 	mov	r2,zero
 40072d0:	003f7b06 	br	40070c0 <__alt_data_end+0xfc0070c0>
 40072d4:	88c00054 	ori	r3,r17,1
 40072d8:	80c00115 	stw	r3,4(r16)
 40072dc:	8463883a 	add	r17,r16,r17
 40072e0:	10800054 	ori	r2,r2,1
 40072e4:	9c400215 	stw	r17,8(r19)
 40072e8:	88800115 	stw	r2,4(r17)
 40072ec:	9009883a 	mov	r4,r18
 40072f0:	400ef8c0 	call	400ef8c <__malloc_unlock>
 40072f4:	80800204 	addi	r2,r16,8
 40072f8:	003f7106 	br	40070c0 <__alt_data_end+0xfc0070c0>
 40072fc:	00c00504 	movi	r3,20
 4007300:	18804a2e 	bgeu	r3,r2,400742c <_malloc_r+0x610>
 4007304:	00c01504 	movi	r3,84
 4007308:	18806e36 	bltu	r3,r2,40074c4 <_malloc_r+0x6a8>
 400730c:	8804d33a 	srli	r2,r17,12
 4007310:	12001bc4 	addi	r8,r2,111
 4007314:	11c01b84 	addi	r7,r2,110
 4007318:	4209883a 	add	r4,r8,r8
 400731c:	003edd06 	br	4006e94 <__alt_data_end+0xfc006e94>
 4007320:	3804d27a 	srli	r2,r7,9
 4007324:	00c00104 	movi	r3,4
 4007328:	1880442e 	bgeu	r3,r2,400743c <_malloc_r+0x620>
 400732c:	00c00504 	movi	r3,20
 4007330:	18808136 	bltu	r3,r2,4007538 <_malloc_r+0x71c>
 4007334:	11401704 	addi	r5,r2,92
 4007338:	10c016c4 	addi	r3,r2,91
 400733c:	294b883a 	add	r5,r5,r5
 4007340:	294b883a 	add	r5,r5,r5
 4007344:	294b883a 	add	r5,r5,r5
 4007348:	994b883a 	add	r5,r19,r5
 400734c:	28800017 	ldw	r2,0(r5)
 4007350:	01810074 	movhi	r6,1025
 4007354:	297ffe04 	addi	r5,r5,-8
 4007358:	318cce04 	addi	r6,r6,13112
 400735c:	28806526 	beq	r5,r2,40074f4 <_malloc_r+0x6d8>
 4007360:	01bfff04 	movi	r6,-4
 4007364:	10c00117 	ldw	r3,4(r2)
 4007368:	1986703a 	and	r3,r3,r6
 400736c:	38c0022e 	bgeu	r7,r3,4007378 <_malloc_r+0x55c>
 4007370:	10800217 	ldw	r2,8(r2)
 4007374:	28bffb1e 	bne	r5,r2,4007364 <__alt_data_end+0xfc007364>
 4007378:	11400317 	ldw	r5,12(r2)
 400737c:	98c00117 	ldw	r3,4(r19)
 4007380:	81400315 	stw	r5,12(r16)
 4007384:	80800215 	stw	r2,8(r16)
 4007388:	2c000215 	stw	r16,8(r5)
 400738c:	14000315 	stw	r16,12(r2)
 4007390:	003ef806 	br	4006f74 <__alt_data_end+0xfc006f74>
 4007394:	88c00054 	ori	r3,r17,1
 4007398:	80c00115 	stw	r3,4(r16)
 400739c:	8463883a 	add	r17,r16,r17
 40073a0:	34400515 	stw	r17,20(r6)
 40073a4:	34400415 	stw	r17,16(r6)
 40073a8:	10c00054 	ori	r3,r2,1
 40073ac:	8a000315 	stw	r8,12(r17)
 40073b0:	8a000215 	stw	r8,8(r17)
 40073b4:	88c00115 	stw	r3,4(r17)
 40073b8:	88a3883a 	add	r17,r17,r2
 40073bc:	88800015 	stw	r2,0(r17)
 40073c0:	9009883a 	mov	r4,r18
 40073c4:	400ef8c0 	call	400ef8c <__malloc_unlock>
 40073c8:	80800204 	addi	r2,r16,8
 40073cc:	003f3c06 	br	40070c0 <__alt_data_end+0xfc0070c0>
 40073d0:	30c00117 	ldw	r3,4(r6)
 40073d4:	003ee706 	br	4006f74 <__alt_data_end+0xfc006f74>
 40073d8:	5ac00044 	addi	r11,r11,1
 40073dc:	588000cc 	andi	r2,r11,3
 40073e0:	31800204 	addi	r6,r6,8
 40073e4:	103efd1e 	bne	r2,zero,4006fdc <__alt_data_end+0xfc006fdc>
 40073e8:	00002406 	br	400747c <_malloc_r+0x660>
 40073ec:	14000317 	ldw	r16,12(r2)
 40073f0:	143f251e 	bne	r2,r16,4007088 <__alt_data_end+0xfc007088>
 40073f4:	21000084 	addi	r4,r4,2
 40073f8:	003ebc06 	br	4006eec <__alt_data_end+0xfc006eec>
 40073fc:	8085883a 	add	r2,r16,r2
 4007400:	10c00117 	ldw	r3,4(r2)
 4007404:	81000317 	ldw	r4,12(r16)
 4007408:	81400217 	ldw	r5,8(r16)
 400740c:	18c00054 	ori	r3,r3,1
 4007410:	10c00115 	stw	r3,4(r2)
 4007414:	29000315 	stw	r4,12(r5)
 4007418:	21400215 	stw	r5,8(r4)
 400741c:	9009883a 	mov	r4,r18
 4007420:	400ef8c0 	call	400ef8c <__malloc_unlock>
 4007424:	80800204 	addi	r2,r16,8
 4007428:	003f2506 	br	40070c0 <__alt_data_end+0xfc0070c0>
 400742c:	12001704 	addi	r8,r2,92
 4007430:	11c016c4 	addi	r7,r2,91
 4007434:	4209883a 	add	r4,r8,r8
 4007438:	003e9606 	br	4006e94 <__alt_data_end+0xfc006e94>
 400743c:	3804d1ba 	srli	r2,r7,6
 4007440:	11400e44 	addi	r5,r2,57
 4007444:	10c00e04 	addi	r3,r2,56
 4007448:	294b883a 	add	r5,r5,r5
 400744c:	003fbc06 	br	4007340 <__alt_data_end+0xfc007340>
 4007450:	84ff5926 	beq	r16,r19,40071b8 <__alt_data_end+0xfc0071b8>
 4007454:	00810074 	movhi	r2,1025
 4007458:	108cce04 	addi	r2,r2,13112
 400745c:	14000217 	ldw	r16,8(r2)
 4007460:	00bfff04 	movi	r2,-4
 4007464:	80c00117 	ldw	r3,4(r16)
 4007468:	1886703a 	and	r3,r3,r2
 400746c:	003f9106 	br	40072b4 <__alt_data_end+0xfc0072b4>
 4007470:	60800217 	ldw	r2,8(r12)
 4007474:	213fffc4 	addi	r4,r4,-1
 4007478:	1300651e 	bne	r2,r12,4007610 <_malloc_r+0x7f4>
 400747c:	208000cc 	andi	r2,r4,3
 4007480:	633ffe04 	addi	r12,r12,-8
 4007484:	103ffa1e 	bne	r2,zero,4007470 <__alt_data_end+0xfc007470>
 4007488:	98800117 	ldw	r2,4(r19)
 400748c:	0146303a 	nor	r3,zero,r5
 4007490:	1884703a 	and	r2,r3,r2
 4007494:	98800115 	stw	r2,4(r19)
 4007498:	294b883a 	add	r5,r5,r5
 400749c:	117f2836 	bltu	r2,r5,4007140 <__alt_data_end+0xfc007140>
 40074a0:	283f2726 	beq	r5,zero,4007140 <__alt_data_end+0xfc007140>
 40074a4:	2886703a 	and	r3,r5,r2
 40074a8:	5809883a 	mov	r4,r11
 40074ac:	183ec31e 	bne	r3,zero,4006fbc <__alt_data_end+0xfc006fbc>
 40074b0:	294b883a 	add	r5,r5,r5
 40074b4:	2886703a 	and	r3,r5,r2
 40074b8:	21000104 	addi	r4,r4,4
 40074bc:	183ffc26 	beq	r3,zero,40074b0 <__alt_data_end+0xfc0074b0>
 40074c0:	003ebe06 	br	4006fbc <__alt_data_end+0xfc006fbc>
 40074c4:	00c05504 	movi	r3,340
 40074c8:	18801236 	bltu	r3,r2,4007514 <_malloc_r+0x6f8>
 40074cc:	8804d3fa 	srli	r2,r17,15
 40074d0:	12001e04 	addi	r8,r2,120
 40074d4:	11c01dc4 	addi	r7,r2,119
 40074d8:	4209883a 	add	r4,r8,r8
 40074dc:	003e6d06 	br	4006e94 <__alt_data_end+0xfc006e94>
 40074e0:	00c40004 	movi	r3,4096
 40074e4:	003f4606 	br	4007200 <__alt_data_end+0xfc007200>
 40074e8:	00800044 	movi	r2,1
 40074ec:	a0800115 	stw	r2,4(r20)
 40074f0:	003f7406 	br	40072c4 <__alt_data_end+0xfc0072c4>
 40074f4:	1805d0ba 	srai	r2,r3,2
 40074f8:	01c00044 	movi	r7,1
 40074fc:	30c00117 	ldw	r3,4(r6)
 4007500:	388e983a 	sll	r7,r7,r2
 4007504:	2805883a 	mov	r2,r5
 4007508:	38c6b03a 	or	r3,r7,r3
 400750c:	30c00115 	stw	r3,4(r6)
 4007510:	003f9b06 	br	4007380 <__alt_data_end+0xfc007380>
 4007514:	00c15504 	movi	r3,1364
 4007518:	18801a36 	bltu	r3,r2,4007584 <_malloc_r+0x768>
 400751c:	8804d4ba 	srli	r2,r17,18
 4007520:	12001f44 	addi	r8,r2,125
 4007524:	11c01f04 	addi	r7,r2,124
 4007528:	4209883a 	add	r4,r8,r8
 400752c:	003e5906 	br	4006e94 <__alt_data_end+0xfc006e94>
 4007530:	ad400404 	addi	r21,r21,16
 4007534:	003f1706 	br	4007194 <__alt_data_end+0xfc007194>
 4007538:	00c01504 	movi	r3,84
 400753c:	18802336 	bltu	r3,r2,40075cc <_malloc_r+0x7b0>
 4007540:	3804d33a 	srli	r2,r7,12
 4007544:	11401bc4 	addi	r5,r2,111
 4007548:	10c01b84 	addi	r3,r2,110
 400754c:	294b883a 	add	r5,r5,r5
 4007550:	003f7b06 	br	4007340 <__alt_data_end+0xfc007340>
 4007554:	9c000217 	ldw	r16,8(r19)
 4007558:	00bfff04 	movi	r2,-4
 400755c:	80c00117 	ldw	r3,4(r16)
 4007560:	1886703a 	and	r3,r3,r2
 4007564:	003f5306 	br	40072b4 <__alt_data_end+0xfc0072b4>
 4007568:	3083ffcc 	andi	r2,r6,4095
 400756c:	103f181e 	bne	r2,zero,40071d0 <__alt_data_end+0xfc0071d0>
 4007570:	99000217 	ldw	r4,8(r19)
 4007574:	b545883a 	add	r2,r22,r21
 4007578:	10800054 	ori	r2,r2,1
 400757c:	20800115 	stw	r2,4(r4)
 4007580:	003f3e06 	br	400727c <__alt_data_end+0xfc00727c>
 4007584:	01003f84 	movi	r4,254
 4007588:	02001fc4 	movi	r8,127
 400758c:	01c01f84 	movi	r7,126
 4007590:	003e4006 	br	4006e94 <__alt_data_end+0xfc006e94>
 4007594:	00810074 	movhi	r2,1025
 4007598:	108e5d04 	addi	r2,r2,14708
 400759c:	15000015 	stw	r20,0(r2)
 40075a0:	003f1106 	br	40071e8 <__alt_data_end+0xfc0071e8>
 40075a4:	00800044 	movi	r2,1
 40075a8:	002b883a 	mov	r21,zero
 40075ac:	003f1f06 	br	400722c <__alt_data_end+0xfc00722c>
 40075b0:	81400204 	addi	r5,r16,8
 40075b4:	9009883a 	mov	r4,r18
 40075b8:	40062240 	call	4006224 <_free_r>
 40075bc:	00810074 	movhi	r2,1025
 40075c0:	10917e04 	addi	r2,r2,17912
 40075c4:	10c00017 	ldw	r3,0(r2)
 40075c8:	003f2c06 	br	400727c <__alt_data_end+0xfc00727c>
 40075cc:	00c05504 	movi	r3,340
 40075d0:	18800536 	bltu	r3,r2,40075e8 <_malloc_r+0x7cc>
 40075d4:	3804d3fa 	srli	r2,r7,15
 40075d8:	11401e04 	addi	r5,r2,120
 40075dc:	10c01dc4 	addi	r3,r2,119
 40075e0:	294b883a 	add	r5,r5,r5
 40075e4:	003f5606 	br	4007340 <__alt_data_end+0xfc007340>
 40075e8:	00c15504 	movi	r3,1364
 40075ec:	18800536 	bltu	r3,r2,4007604 <_malloc_r+0x7e8>
 40075f0:	3804d4ba 	srli	r2,r7,18
 40075f4:	11401f44 	addi	r5,r2,125
 40075f8:	10c01f04 	addi	r3,r2,124
 40075fc:	294b883a 	add	r5,r5,r5
 4007600:	003f4f06 	br	4007340 <__alt_data_end+0xfc007340>
 4007604:	01403f84 	movi	r5,254
 4007608:	00c01f84 	movi	r3,126
 400760c:	003f4c06 	br	4007340 <__alt_data_end+0xfc007340>
 4007610:	98800117 	ldw	r2,4(r19)
 4007614:	003fa006 	br	4007498 <__alt_data_end+0xfc007498>
 4007618:	8808d0fa 	srli	r4,r17,3
 400761c:	20800044 	addi	r2,r4,1
 4007620:	1085883a 	add	r2,r2,r2
 4007624:	003e9006 	br	4007068 <__alt_data_end+0xfc007068>

04007628 <memchr>:
 4007628:	208000cc 	andi	r2,r4,3
 400762c:	280f883a 	mov	r7,r5
 4007630:	10003426 	beq	r2,zero,4007704 <memchr+0xdc>
 4007634:	30bfffc4 	addi	r2,r6,-1
 4007638:	30001a26 	beq	r6,zero,40076a4 <memchr+0x7c>
 400763c:	20c00003 	ldbu	r3,0(r4)
 4007640:	29803fcc 	andi	r6,r5,255
 4007644:	30c0051e 	bne	r6,r3,400765c <memchr+0x34>
 4007648:	00001806 	br	40076ac <memchr+0x84>
 400764c:	10001526 	beq	r2,zero,40076a4 <memchr+0x7c>
 4007650:	20c00003 	ldbu	r3,0(r4)
 4007654:	10bfffc4 	addi	r2,r2,-1
 4007658:	30c01426 	beq	r6,r3,40076ac <memchr+0x84>
 400765c:	21000044 	addi	r4,r4,1
 4007660:	20c000cc 	andi	r3,r4,3
 4007664:	183ff91e 	bne	r3,zero,400764c <__alt_data_end+0xfc00764c>
 4007668:	020000c4 	movi	r8,3
 400766c:	40801136 	bltu	r8,r2,40076b4 <memchr+0x8c>
 4007670:	10000c26 	beq	r2,zero,40076a4 <memchr+0x7c>
 4007674:	20c00003 	ldbu	r3,0(r4)
 4007678:	29403fcc 	andi	r5,r5,255
 400767c:	28c00b26 	beq	r5,r3,40076ac <memchr+0x84>
 4007680:	20c00044 	addi	r3,r4,1
 4007684:	39803fcc 	andi	r6,r7,255
 4007688:	2089883a 	add	r4,r4,r2
 400768c:	00000306 	br	400769c <memchr+0x74>
 4007690:	18c00044 	addi	r3,r3,1
 4007694:	197fffc3 	ldbu	r5,-1(r3)
 4007698:	31400526 	beq	r6,r5,40076b0 <memchr+0x88>
 400769c:	1805883a 	mov	r2,r3
 40076a0:	20fffb1e 	bne	r4,r3,4007690 <__alt_data_end+0xfc007690>
 40076a4:	0005883a 	mov	r2,zero
 40076a8:	f800283a 	ret
 40076ac:	2005883a 	mov	r2,r4
 40076b0:	f800283a 	ret
 40076b4:	28c03fcc 	andi	r3,r5,255
 40076b8:	1812923a 	slli	r9,r3,8
 40076bc:	02ffbff4 	movhi	r11,65279
 40076c0:	02a02074 	movhi	r10,32897
 40076c4:	48d2b03a 	or	r9,r9,r3
 40076c8:	4806943a 	slli	r3,r9,16
 40076cc:	5affbfc4 	addi	r11,r11,-257
 40076d0:	52a02004 	addi	r10,r10,-32640
 40076d4:	48d2b03a 	or	r9,r9,r3
 40076d8:	20c00017 	ldw	r3,0(r4)
 40076dc:	48c6f03a 	xor	r3,r9,r3
 40076e0:	1acd883a 	add	r6,r3,r11
 40076e4:	00c6303a 	nor	r3,zero,r3
 40076e8:	30c6703a 	and	r3,r6,r3
 40076ec:	1a86703a 	and	r3,r3,r10
 40076f0:	183fe01e 	bne	r3,zero,4007674 <__alt_data_end+0xfc007674>
 40076f4:	10bfff04 	addi	r2,r2,-4
 40076f8:	21000104 	addi	r4,r4,4
 40076fc:	40bff636 	bltu	r8,r2,40076d8 <__alt_data_end+0xfc0076d8>
 4007700:	003fdb06 	br	4007670 <__alt_data_end+0xfc007670>
 4007704:	3005883a 	mov	r2,r6
 4007708:	003fd706 	br	4007668 <__alt_data_end+0xfc007668>

0400770c <memcpy>:
 400770c:	defffd04 	addi	sp,sp,-12
 4007710:	dfc00215 	stw	ra,8(sp)
 4007714:	dc400115 	stw	r17,4(sp)
 4007718:	dc000015 	stw	r16,0(sp)
 400771c:	00c003c4 	movi	r3,15
 4007720:	2005883a 	mov	r2,r4
 4007724:	1980452e 	bgeu	r3,r6,400783c <memcpy+0x130>
 4007728:	2906b03a 	or	r3,r5,r4
 400772c:	18c000cc 	andi	r3,r3,3
 4007730:	1800441e 	bne	r3,zero,4007844 <memcpy+0x138>
 4007734:	347ffc04 	addi	r17,r6,-16
 4007738:	8822d13a 	srli	r17,r17,4
 400773c:	28c00104 	addi	r3,r5,4
 4007740:	23400104 	addi	r13,r4,4
 4007744:	8820913a 	slli	r16,r17,4
 4007748:	2b000204 	addi	r12,r5,8
 400774c:	22c00204 	addi	r11,r4,8
 4007750:	84000504 	addi	r16,r16,20
 4007754:	2a800304 	addi	r10,r5,12
 4007758:	22400304 	addi	r9,r4,12
 400775c:	2c21883a 	add	r16,r5,r16
 4007760:	2811883a 	mov	r8,r5
 4007764:	200f883a 	mov	r7,r4
 4007768:	41000017 	ldw	r4,0(r8)
 400776c:	1fc00017 	ldw	ra,0(r3)
 4007770:	63c00017 	ldw	r15,0(r12)
 4007774:	39000015 	stw	r4,0(r7)
 4007778:	53800017 	ldw	r14,0(r10)
 400777c:	6fc00015 	stw	ra,0(r13)
 4007780:	5bc00015 	stw	r15,0(r11)
 4007784:	4b800015 	stw	r14,0(r9)
 4007788:	18c00404 	addi	r3,r3,16
 400778c:	39c00404 	addi	r7,r7,16
 4007790:	42000404 	addi	r8,r8,16
 4007794:	6b400404 	addi	r13,r13,16
 4007798:	63000404 	addi	r12,r12,16
 400779c:	5ac00404 	addi	r11,r11,16
 40077a0:	52800404 	addi	r10,r10,16
 40077a4:	4a400404 	addi	r9,r9,16
 40077a8:	1c3fef1e 	bne	r3,r16,4007768 <__alt_data_end+0xfc007768>
 40077ac:	89c00044 	addi	r7,r17,1
 40077b0:	380e913a 	slli	r7,r7,4
 40077b4:	310003cc 	andi	r4,r6,15
 40077b8:	02c000c4 	movi	r11,3
 40077bc:	11c7883a 	add	r3,r2,r7
 40077c0:	29cb883a 	add	r5,r5,r7
 40077c4:	5900212e 	bgeu	r11,r4,400784c <memcpy+0x140>
 40077c8:	1813883a 	mov	r9,r3
 40077cc:	2811883a 	mov	r8,r5
 40077d0:	200f883a 	mov	r7,r4
 40077d4:	42800017 	ldw	r10,0(r8)
 40077d8:	4a400104 	addi	r9,r9,4
 40077dc:	39ffff04 	addi	r7,r7,-4
 40077e0:	4abfff15 	stw	r10,-4(r9)
 40077e4:	42000104 	addi	r8,r8,4
 40077e8:	59fffa36 	bltu	r11,r7,40077d4 <__alt_data_end+0xfc0077d4>
 40077ec:	213fff04 	addi	r4,r4,-4
 40077f0:	2008d0ba 	srli	r4,r4,2
 40077f4:	318000cc 	andi	r6,r6,3
 40077f8:	21000044 	addi	r4,r4,1
 40077fc:	2109883a 	add	r4,r4,r4
 4007800:	2109883a 	add	r4,r4,r4
 4007804:	1907883a 	add	r3,r3,r4
 4007808:	290b883a 	add	r5,r5,r4
 400780c:	30000626 	beq	r6,zero,4007828 <memcpy+0x11c>
 4007810:	198d883a 	add	r6,r3,r6
 4007814:	29c00003 	ldbu	r7,0(r5)
 4007818:	18c00044 	addi	r3,r3,1
 400781c:	29400044 	addi	r5,r5,1
 4007820:	19ffffc5 	stb	r7,-1(r3)
 4007824:	19bffb1e 	bne	r3,r6,4007814 <__alt_data_end+0xfc007814>
 4007828:	dfc00217 	ldw	ra,8(sp)
 400782c:	dc400117 	ldw	r17,4(sp)
 4007830:	dc000017 	ldw	r16,0(sp)
 4007834:	dec00304 	addi	sp,sp,12
 4007838:	f800283a 	ret
 400783c:	2007883a 	mov	r3,r4
 4007840:	003ff206 	br	400780c <__alt_data_end+0xfc00780c>
 4007844:	2007883a 	mov	r3,r4
 4007848:	003ff106 	br	4007810 <__alt_data_end+0xfc007810>
 400784c:	200d883a 	mov	r6,r4
 4007850:	003fee06 	br	400780c <__alt_data_end+0xfc00780c>

04007854 <memmove>:
 4007854:	2005883a 	mov	r2,r4
 4007858:	29000b2e 	bgeu	r5,r4,4007888 <memmove+0x34>
 400785c:	298f883a 	add	r7,r5,r6
 4007860:	21c0092e 	bgeu	r4,r7,4007888 <memmove+0x34>
 4007864:	2187883a 	add	r3,r4,r6
 4007868:	198bc83a 	sub	r5,r3,r6
 400786c:	30004826 	beq	r6,zero,4007990 <memmove+0x13c>
 4007870:	39ffffc4 	addi	r7,r7,-1
 4007874:	39000003 	ldbu	r4,0(r7)
 4007878:	18ffffc4 	addi	r3,r3,-1
 400787c:	19000005 	stb	r4,0(r3)
 4007880:	28fffb1e 	bne	r5,r3,4007870 <__alt_data_end+0xfc007870>
 4007884:	f800283a 	ret
 4007888:	00c003c4 	movi	r3,15
 400788c:	1980412e 	bgeu	r3,r6,4007994 <memmove+0x140>
 4007890:	2886b03a 	or	r3,r5,r2
 4007894:	18c000cc 	andi	r3,r3,3
 4007898:	1800401e 	bne	r3,zero,400799c <memmove+0x148>
 400789c:	33fffc04 	addi	r15,r6,-16
 40078a0:	781ed13a 	srli	r15,r15,4
 40078a4:	28c00104 	addi	r3,r5,4
 40078a8:	13400104 	addi	r13,r2,4
 40078ac:	781c913a 	slli	r14,r15,4
 40078b0:	2b000204 	addi	r12,r5,8
 40078b4:	12c00204 	addi	r11,r2,8
 40078b8:	73800504 	addi	r14,r14,20
 40078bc:	2a800304 	addi	r10,r5,12
 40078c0:	12400304 	addi	r9,r2,12
 40078c4:	2b9d883a 	add	r14,r5,r14
 40078c8:	2811883a 	mov	r8,r5
 40078cc:	100f883a 	mov	r7,r2
 40078d0:	41000017 	ldw	r4,0(r8)
 40078d4:	39c00404 	addi	r7,r7,16
 40078d8:	18c00404 	addi	r3,r3,16
 40078dc:	393ffc15 	stw	r4,-16(r7)
 40078e0:	193ffc17 	ldw	r4,-16(r3)
 40078e4:	6b400404 	addi	r13,r13,16
 40078e8:	5ac00404 	addi	r11,r11,16
 40078ec:	693ffc15 	stw	r4,-16(r13)
 40078f0:	61000017 	ldw	r4,0(r12)
 40078f4:	4a400404 	addi	r9,r9,16
 40078f8:	42000404 	addi	r8,r8,16
 40078fc:	593ffc15 	stw	r4,-16(r11)
 4007900:	51000017 	ldw	r4,0(r10)
 4007904:	63000404 	addi	r12,r12,16
 4007908:	52800404 	addi	r10,r10,16
 400790c:	493ffc15 	stw	r4,-16(r9)
 4007910:	1bbfef1e 	bne	r3,r14,40078d0 <__alt_data_end+0xfc0078d0>
 4007914:	79000044 	addi	r4,r15,1
 4007918:	2008913a 	slli	r4,r4,4
 400791c:	328003cc 	andi	r10,r6,15
 4007920:	02c000c4 	movi	r11,3
 4007924:	1107883a 	add	r3,r2,r4
 4007928:	290b883a 	add	r5,r5,r4
 400792c:	5a801e2e 	bgeu	r11,r10,40079a8 <memmove+0x154>
 4007930:	1813883a 	mov	r9,r3
 4007934:	2811883a 	mov	r8,r5
 4007938:	500f883a 	mov	r7,r10
 400793c:	41000017 	ldw	r4,0(r8)
 4007940:	4a400104 	addi	r9,r9,4
 4007944:	39ffff04 	addi	r7,r7,-4
 4007948:	493fff15 	stw	r4,-4(r9)
 400794c:	42000104 	addi	r8,r8,4
 4007950:	59fffa36 	bltu	r11,r7,400793c <__alt_data_end+0xfc00793c>
 4007954:	513fff04 	addi	r4,r10,-4
 4007958:	2008d0ba 	srli	r4,r4,2
 400795c:	318000cc 	andi	r6,r6,3
 4007960:	21000044 	addi	r4,r4,1
 4007964:	2109883a 	add	r4,r4,r4
 4007968:	2109883a 	add	r4,r4,r4
 400796c:	1907883a 	add	r3,r3,r4
 4007970:	290b883a 	add	r5,r5,r4
 4007974:	30000b26 	beq	r6,zero,40079a4 <memmove+0x150>
 4007978:	198d883a 	add	r6,r3,r6
 400797c:	29c00003 	ldbu	r7,0(r5)
 4007980:	18c00044 	addi	r3,r3,1
 4007984:	29400044 	addi	r5,r5,1
 4007988:	19ffffc5 	stb	r7,-1(r3)
 400798c:	19bffb1e 	bne	r3,r6,400797c <__alt_data_end+0xfc00797c>
 4007990:	f800283a 	ret
 4007994:	1007883a 	mov	r3,r2
 4007998:	003ff606 	br	4007974 <__alt_data_end+0xfc007974>
 400799c:	1007883a 	mov	r3,r2
 40079a0:	003ff506 	br	4007978 <__alt_data_end+0xfc007978>
 40079a4:	f800283a 	ret
 40079a8:	500d883a 	mov	r6,r10
 40079ac:	003ff106 	br	4007974 <__alt_data_end+0xfc007974>

040079b0 <memset>:
 40079b0:	20c000cc 	andi	r3,r4,3
 40079b4:	2005883a 	mov	r2,r4
 40079b8:	18004426 	beq	r3,zero,4007acc <memset+0x11c>
 40079bc:	31ffffc4 	addi	r7,r6,-1
 40079c0:	30004026 	beq	r6,zero,4007ac4 <memset+0x114>
 40079c4:	2813883a 	mov	r9,r5
 40079c8:	200d883a 	mov	r6,r4
 40079cc:	2007883a 	mov	r3,r4
 40079d0:	00000406 	br	40079e4 <memset+0x34>
 40079d4:	3a3fffc4 	addi	r8,r7,-1
 40079d8:	31800044 	addi	r6,r6,1
 40079dc:	38003926 	beq	r7,zero,4007ac4 <memset+0x114>
 40079e0:	400f883a 	mov	r7,r8
 40079e4:	18c00044 	addi	r3,r3,1
 40079e8:	32400005 	stb	r9,0(r6)
 40079ec:	1a0000cc 	andi	r8,r3,3
 40079f0:	403ff81e 	bne	r8,zero,40079d4 <__alt_data_end+0xfc0079d4>
 40079f4:	010000c4 	movi	r4,3
 40079f8:	21c02d2e 	bgeu	r4,r7,4007ab0 <memset+0x100>
 40079fc:	29003fcc 	andi	r4,r5,255
 4007a00:	200c923a 	slli	r6,r4,8
 4007a04:	3108b03a 	or	r4,r6,r4
 4007a08:	200c943a 	slli	r6,r4,16
 4007a0c:	218cb03a 	or	r6,r4,r6
 4007a10:	010003c4 	movi	r4,15
 4007a14:	21c0182e 	bgeu	r4,r7,4007a78 <memset+0xc8>
 4007a18:	3b3ffc04 	addi	r12,r7,-16
 4007a1c:	6018d13a 	srli	r12,r12,4
 4007a20:	1a000104 	addi	r8,r3,4
 4007a24:	1ac00204 	addi	r11,r3,8
 4007a28:	6008913a 	slli	r4,r12,4
 4007a2c:	1a800304 	addi	r10,r3,12
 4007a30:	1813883a 	mov	r9,r3
 4007a34:	21000504 	addi	r4,r4,20
 4007a38:	1909883a 	add	r4,r3,r4
 4007a3c:	49800015 	stw	r6,0(r9)
 4007a40:	41800015 	stw	r6,0(r8)
 4007a44:	59800015 	stw	r6,0(r11)
 4007a48:	51800015 	stw	r6,0(r10)
 4007a4c:	42000404 	addi	r8,r8,16
 4007a50:	4a400404 	addi	r9,r9,16
 4007a54:	5ac00404 	addi	r11,r11,16
 4007a58:	52800404 	addi	r10,r10,16
 4007a5c:	413ff71e 	bne	r8,r4,4007a3c <__alt_data_end+0xfc007a3c>
 4007a60:	63000044 	addi	r12,r12,1
 4007a64:	6018913a 	slli	r12,r12,4
 4007a68:	39c003cc 	andi	r7,r7,15
 4007a6c:	010000c4 	movi	r4,3
 4007a70:	1b07883a 	add	r3,r3,r12
 4007a74:	21c00e2e 	bgeu	r4,r7,4007ab0 <memset+0x100>
 4007a78:	1813883a 	mov	r9,r3
 4007a7c:	3811883a 	mov	r8,r7
 4007a80:	010000c4 	movi	r4,3
 4007a84:	49800015 	stw	r6,0(r9)
 4007a88:	423fff04 	addi	r8,r8,-4
 4007a8c:	4a400104 	addi	r9,r9,4
 4007a90:	223ffc36 	bltu	r4,r8,4007a84 <__alt_data_end+0xfc007a84>
 4007a94:	393fff04 	addi	r4,r7,-4
 4007a98:	2008d0ba 	srli	r4,r4,2
 4007a9c:	39c000cc 	andi	r7,r7,3
 4007aa0:	21000044 	addi	r4,r4,1
 4007aa4:	2109883a 	add	r4,r4,r4
 4007aa8:	2109883a 	add	r4,r4,r4
 4007aac:	1907883a 	add	r3,r3,r4
 4007ab0:	38000526 	beq	r7,zero,4007ac8 <memset+0x118>
 4007ab4:	19cf883a 	add	r7,r3,r7
 4007ab8:	19400005 	stb	r5,0(r3)
 4007abc:	18c00044 	addi	r3,r3,1
 4007ac0:	38fffd1e 	bne	r7,r3,4007ab8 <__alt_data_end+0xfc007ab8>
 4007ac4:	f800283a 	ret
 4007ac8:	f800283a 	ret
 4007acc:	2007883a 	mov	r3,r4
 4007ad0:	300f883a 	mov	r7,r6
 4007ad4:	003fc706 	br	40079f4 <__alt_data_end+0xfc0079f4>

04007ad8 <_Balloc>:
 4007ad8:	20801317 	ldw	r2,76(r4)
 4007adc:	defffc04 	addi	sp,sp,-16
 4007ae0:	dc400115 	stw	r17,4(sp)
 4007ae4:	dc000015 	stw	r16,0(sp)
 4007ae8:	dfc00315 	stw	ra,12(sp)
 4007aec:	dc800215 	stw	r18,8(sp)
 4007af0:	2023883a 	mov	r17,r4
 4007af4:	2821883a 	mov	r16,r5
 4007af8:	10000f26 	beq	r2,zero,4007b38 <_Balloc+0x60>
 4007afc:	8407883a 	add	r3,r16,r16
 4007b00:	18c7883a 	add	r3,r3,r3
 4007b04:	10c7883a 	add	r3,r2,r3
 4007b08:	18800017 	ldw	r2,0(r3)
 4007b0c:	10001126 	beq	r2,zero,4007b54 <_Balloc+0x7c>
 4007b10:	11000017 	ldw	r4,0(r2)
 4007b14:	19000015 	stw	r4,0(r3)
 4007b18:	10000415 	stw	zero,16(r2)
 4007b1c:	10000315 	stw	zero,12(r2)
 4007b20:	dfc00317 	ldw	ra,12(sp)
 4007b24:	dc800217 	ldw	r18,8(sp)
 4007b28:	dc400117 	ldw	r17,4(sp)
 4007b2c:	dc000017 	ldw	r16,0(sp)
 4007b30:	dec00404 	addi	sp,sp,16
 4007b34:	f800283a 	ret
 4007b38:	01800844 	movi	r6,33
 4007b3c:	01400104 	movi	r5,4
 4007b40:	400ab800 	call	400ab80 <_calloc_r>
 4007b44:	88801315 	stw	r2,76(r17)
 4007b48:	103fec1e 	bne	r2,zero,4007afc <__alt_data_end+0xfc007afc>
 4007b4c:	0005883a 	mov	r2,zero
 4007b50:	003ff306 	br	4007b20 <__alt_data_end+0xfc007b20>
 4007b54:	01400044 	movi	r5,1
 4007b58:	2c24983a 	sll	r18,r5,r16
 4007b5c:	8809883a 	mov	r4,r17
 4007b60:	91800144 	addi	r6,r18,5
 4007b64:	318d883a 	add	r6,r6,r6
 4007b68:	318d883a 	add	r6,r6,r6
 4007b6c:	400ab800 	call	400ab80 <_calloc_r>
 4007b70:	103ff626 	beq	r2,zero,4007b4c <__alt_data_end+0xfc007b4c>
 4007b74:	14000115 	stw	r16,4(r2)
 4007b78:	14800215 	stw	r18,8(r2)
 4007b7c:	003fe606 	br	4007b18 <__alt_data_end+0xfc007b18>

04007b80 <_Bfree>:
 4007b80:	28000826 	beq	r5,zero,4007ba4 <_Bfree+0x24>
 4007b84:	28c00117 	ldw	r3,4(r5)
 4007b88:	20801317 	ldw	r2,76(r4)
 4007b8c:	18c7883a 	add	r3,r3,r3
 4007b90:	18c7883a 	add	r3,r3,r3
 4007b94:	10c5883a 	add	r2,r2,r3
 4007b98:	10c00017 	ldw	r3,0(r2)
 4007b9c:	28c00015 	stw	r3,0(r5)
 4007ba0:	11400015 	stw	r5,0(r2)
 4007ba4:	f800283a 	ret

04007ba8 <__multadd>:
 4007ba8:	defff704 	addi	sp,sp,-36
 4007bac:	dc800215 	stw	r18,8(sp)
 4007bb0:	2c800417 	ldw	r18,16(r5)
 4007bb4:	dd800615 	stw	r22,24(sp)
 4007bb8:	dd400515 	stw	r21,20(sp)
 4007bbc:	dd000415 	stw	r20,16(sp)
 4007bc0:	dcc00315 	stw	r19,12(sp)
 4007bc4:	dc400115 	stw	r17,4(sp)
 4007bc8:	dc000015 	stw	r16,0(sp)
 4007bcc:	dfc00815 	stw	ra,32(sp)
 4007bd0:	ddc00715 	stw	r23,28(sp)
 4007bd4:	2827883a 	mov	r19,r5
 4007bd8:	2029883a 	mov	r20,r4
 4007bdc:	3023883a 	mov	r17,r6
 4007be0:	3821883a 	mov	r16,r7
 4007be4:	2d400504 	addi	r21,r5,20
 4007be8:	002d883a 	mov	r22,zero
 4007bec:	adc00017 	ldw	r23,0(r21)
 4007bf0:	880b883a 	mov	r5,r17
 4007bf4:	ad400104 	addi	r21,r21,4
 4007bf8:	b93fffcc 	andi	r4,r23,65535
 4007bfc:	4000bd80 	call	4000bd8 <__mulsi3>
 4007c00:	b808d43a 	srli	r4,r23,16
 4007c04:	880b883a 	mov	r5,r17
 4007c08:	1421883a 	add	r16,r2,r16
 4007c0c:	4000bd80 	call	4000bd8 <__mulsi3>
 4007c10:	800ed43a 	srli	r7,r16,16
 4007c14:	80ffffcc 	andi	r3,r16,65535
 4007c18:	b5800044 	addi	r22,r22,1
 4007c1c:	11c5883a 	add	r2,r2,r7
 4007c20:	100e943a 	slli	r7,r2,16
 4007c24:	1020d43a 	srli	r16,r2,16
 4007c28:	38c7883a 	add	r3,r7,r3
 4007c2c:	a8ffff15 	stw	r3,-4(r21)
 4007c30:	b4bfee16 	blt	r22,r18,4007bec <__alt_data_end+0xfc007bec>
 4007c34:	80000926 	beq	r16,zero,4007c5c <__multadd+0xb4>
 4007c38:	98800217 	ldw	r2,8(r19)
 4007c3c:	9080130e 	bge	r18,r2,4007c8c <__multadd+0xe4>
 4007c40:	90800144 	addi	r2,r18,5
 4007c44:	1085883a 	add	r2,r2,r2
 4007c48:	1085883a 	add	r2,r2,r2
 4007c4c:	9885883a 	add	r2,r19,r2
 4007c50:	14000015 	stw	r16,0(r2)
 4007c54:	94800044 	addi	r18,r18,1
 4007c58:	9c800415 	stw	r18,16(r19)
 4007c5c:	9805883a 	mov	r2,r19
 4007c60:	dfc00817 	ldw	ra,32(sp)
 4007c64:	ddc00717 	ldw	r23,28(sp)
 4007c68:	dd800617 	ldw	r22,24(sp)
 4007c6c:	dd400517 	ldw	r21,20(sp)
 4007c70:	dd000417 	ldw	r20,16(sp)
 4007c74:	dcc00317 	ldw	r19,12(sp)
 4007c78:	dc800217 	ldw	r18,8(sp)
 4007c7c:	dc400117 	ldw	r17,4(sp)
 4007c80:	dc000017 	ldw	r16,0(sp)
 4007c84:	dec00904 	addi	sp,sp,36
 4007c88:	f800283a 	ret
 4007c8c:	99400117 	ldw	r5,4(r19)
 4007c90:	a009883a 	mov	r4,r20
 4007c94:	29400044 	addi	r5,r5,1
 4007c98:	4007ad80 	call	4007ad8 <_Balloc>
 4007c9c:	99800417 	ldw	r6,16(r19)
 4007ca0:	99400304 	addi	r5,r19,12
 4007ca4:	11000304 	addi	r4,r2,12
 4007ca8:	31800084 	addi	r6,r6,2
 4007cac:	318d883a 	add	r6,r6,r6
 4007cb0:	318d883a 	add	r6,r6,r6
 4007cb4:	1023883a 	mov	r17,r2
 4007cb8:	400770c0 	call	400770c <memcpy>
 4007cbc:	98000a26 	beq	r19,zero,4007ce8 <__multadd+0x140>
 4007cc0:	98c00117 	ldw	r3,4(r19)
 4007cc4:	a0801317 	ldw	r2,76(r20)
 4007cc8:	18c7883a 	add	r3,r3,r3
 4007ccc:	18c7883a 	add	r3,r3,r3
 4007cd0:	10c5883a 	add	r2,r2,r3
 4007cd4:	10c00017 	ldw	r3,0(r2)
 4007cd8:	98c00015 	stw	r3,0(r19)
 4007cdc:	14c00015 	stw	r19,0(r2)
 4007ce0:	8827883a 	mov	r19,r17
 4007ce4:	003fd606 	br	4007c40 <__alt_data_end+0xfc007c40>
 4007ce8:	8827883a 	mov	r19,r17
 4007cec:	003fd406 	br	4007c40 <__alt_data_end+0xfc007c40>

04007cf0 <__s2b>:
 4007cf0:	defff904 	addi	sp,sp,-28
 4007cf4:	dc400115 	stw	r17,4(sp)
 4007cf8:	dc000015 	stw	r16,0(sp)
 4007cfc:	2023883a 	mov	r17,r4
 4007d00:	2821883a 	mov	r16,r5
 4007d04:	39000204 	addi	r4,r7,8
 4007d08:	01400244 	movi	r5,9
 4007d0c:	dcc00315 	stw	r19,12(sp)
 4007d10:	dc800215 	stw	r18,8(sp)
 4007d14:	dfc00615 	stw	ra,24(sp)
 4007d18:	dd400515 	stw	r21,20(sp)
 4007d1c:	dd000415 	stw	r20,16(sp)
 4007d20:	3825883a 	mov	r18,r7
 4007d24:	3027883a 	mov	r19,r6
 4007d28:	400bfd80 	call	400bfd8 <__divsi3>
 4007d2c:	00c00044 	movi	r3,1
 4007d30:	000b883a 	mov	r5,zero
 4007d34:	1880030e 	bge	r3,r2,4007d44 <__s2b+0x54>
 4007d38:	18c7883a 	add	r3,r3,r3
 4007d3c:	29400044 	addi	r5,r5,1
 4007d40:	18bffd16 	blt	r3,r2,4007d38 <__alt_data_end+0xfc007d38>
 4007d44:	8809883a 	mov	r4,r17
 4007d48:	4007ad80 	call	4007ad8 <_Balloc>
 4007d4c:	d8c00717 	ldw	r3,28(sp)
 4007d50:	10c00515 	stw	r3,20(r2)
 4007d54:	00c00044 	movi	r3,1
 4007d58:	10c00415 	stw	r3,16(r2)
 4007d5c:	00c00244 	movi	r3,9
 4007d60:	1cc0210e 	bge	r3,r19,4007de8 <__s2b+0xf8>
 4007d64:	80eb883a 	add	r21,r16,r3
 4007d68:	a829883a 	mov	r20,r21
 4007d6c:	84e1883a 	add	r16,r16,r19
 4007d70:	a1c00007 	ldb	r7,0(r20)
 4007d74:	01800284 	movi	r6,10
 4007d78:	a5000044 	addi	r20,r20,1
 4007d7c:	100b883a 	mov	r5,r2
 4007d80:	39fff404 	addi	r7,r7,-48
 4007d84:	8809883a 	mov	r4,r17
 4007d88:	4007ba80 	call	4007ba8 <__multadd>
 4007d8c:	a43ff81e 	bne	r20,r16,4007d70 <__alt_data_end+0xfc007d70>
 4007d90:	ace1883a 	add	r16,r21,r19
 4007d94:	843ffe04 	addi	r16,r16,-8
 4007d98:	9c800a0e 	bge	r19,r18,4007dc4 <__s2b+0xd4>
 4007d9c:	94e5c83a 	sub	r18,r18,r19
 4007da0:	84a5883a 	add	r18,r16,r18
 4007da4:	81c00007 	ldb	r7,0(r16)
 4007da8:	01800284 	movi	r6,10
 4007dac:	84000044 	addi	r16,r16,1
 4007db0:	100b883a 	mov	r5,r2
 4007db4:	39fff404 	addi	r7,r7,-48
 4007db8:	8809883a 	mov	r4,r17
 4007dbc:	4007ba80 	call	4007ba8 <__multadd>
 4007dc0:	84bff81e 	bne	r16,r18,4007da4 <__alt_data_end+0xfc007da4>
 4007dc4:	dfc00617 	ldw	ra,24(sp)
 4007dc8:	dd400517 	ldw	r21,20(sp)
 4007dcc:	dd000417 	ldw	r20,16(sp)
 4007dd0:	dcc00317 	ldw	r19,12(sp)
 4007dd4:	dc800217 	ldw	r18,8(sp)
 4007dd8:	dc400117 	ldw	r17,4(sp)
 4007ddc:	dc000017 	ldw	r16,0(sp)
 4007de0:	dec00704 	addi	sp,sp,28
 4007de4:	f800283a 	ret
 4007de8:	84000284 	addi	r16,r16,10
 4007dec:	1827883a 	mov	r19,r3
 4007df0:	003fe906 	br	4007d98 <__alt_data_end+0xfc007d98>

04007df4 <__hi0bits>:
 4007df4:	20bfffec 	andhi	r2,r4,65535
 4007df8:	1000141e 	bne	r2,zero,4007e4c <__hi0bits+0x58>
 4007dfc:	2008943a 	slli	r4,r4,16
 4007e00:	00800404 	movi	r2,16
 4007e04:	20ffc02c 	andhi	r3,r4,65280
 4007e08:	1800021e 	bne	r3,zero,4007e14 <__hi0bits+0x20>
 4007e0c:	2008923a 	slli	r4,r4,8
 4007e10:	10800204 	addi	r2,r2,8
 4007e14:	20fc002c 	andhi	r3,r4,61440
 4007e18:	1800021e 	bne	r3,zero,4007e24 <__hi0bits+0x30>
 4007e1c:	2008913a 	slli	r4,r4,4
 4007e20:	10800104 	addi	r2,r2,4
 4007e24:	20f0002c 	andhi	r3,r4,49152
 4007e28:	1800031e 	bne	r3,zero,4007e38 <__hi0bits+0x44>
 4007e2c:	2109883a 	add	r4,r4,r4
 4007e30:	10800084 	addi	r2,r2,2
 4007e34:	2109883a 	add	r4,r4,r4
 4007e38:	20000316 	blt	r4,zero,4007e48 <__hi0bits+0x54>
 4007e3c:	2110002c 	andhi	r4,r4,16384
 4007e40:	2000041e 	bne	r4,zero,4007e54 <__hi0bits+0x60>
 4007e44:	00800804 	movi	r2,32
 4007e48:	f800283a 	ret
 4007e4c:	0005883a 	mov	r2,zero
 4007e50:	003fec06 	br	4007e04 <__alt_data_end+0xfc007e04>
 4007e54:	10800044 	addi	r2,r2,1
 4007e58:	f800283a 	ret

04007e5c <__lo0bits>:
 4007e5c:	20c00017 	ldw	r3,0(r4)
 4007e60:	188001cc 	andi	r2,r3,7
 4007e64:	10000826 	beq	r2,zero,4007e88 <__lo0bits+0x2c>
 4007e68:	1880004c 	andi	r2,r3,1
 4007e6c:	1000211e 	bne	r2,zero,4007ef4 <__lo0bits+0x98>
 4007e70:	1880008c 	andi	r2,r3,2
 4007e74:	1000211e 	bne	r2,zero,4007efc <__lo0bits+0xa0>
 4007e78:	1806d0ba 	srli	r3,r3,2
 4007e7c:	00800084 	movi	r2,2
 4007e80:	20c00015 	stw	r3,0(r4)
 4007e84:	f800283a 	ret
 4007e88:	18bfffcc 	andi	r2,r3,65535
 4007e8c:	10001326 	beq	r2,zero,4007edc <__lo0bits+0x80>
 4007e90:	0005883a 	mov	r2,zero
 4007e94:	19403fcc 	andi	r5,r3,255
 4007e98:	2800021e 	bne	r5,zero,4007ea4 <__lo0bits+0x48>
 4007e9c:	1806d23a 	srli	r3,r3,8
 4007ea0:	10800204 	addi	r2,r2,8
 4007ea4:	194003cc 	andi	r5,r3,15
 4007ea8:	2800021e 	bne	r5,zero,4007eb4 <__lo0bits+0x58>
 4007eac:	1806d13a 	srli	r3,r3,4
 4007eb0:	10800104 	addi	r2,r2,4
 4007eb4:	194000cc 	andi	r5,r3,3
 4007eb8:	2800021e 	bne	r5,zero,4007ec4 <__lo0bits+0x68>
 4007ebc:	1806d0ba 	srli	r3,r3,2
 4007ec0:	10800084 	addi	r2,r2,2
 4007ec4:	1940004c 	andi	r5,r3,1
 4007ec8:	2800081e 	bne	r5,zero,4007eec <__lo0bits+0x90>
 4007ecc:	1806d07a 	srli	r3,r3,1
 4007ed0:	1800051e 	bne	r3,zero,4007ee8 <__lo0bits+0x8c>
 4007ed4:	00800804 	movi	r2,32
 4007ed8:	f800283a 	ret
 4007edc:	1806d43a 	srli	r3,r3,16
 4007ee0:	00800404 	movi	r2,16
 4007ee4:	003feb06 	br	4007e94 <__alt_data_end+0xfc007e94>
 4007ee8:	10800044 	addi	r2,r2,1
 4007eec:	20c00015 	stw	r3,0(r4)
 4007ef0:	f800283a 	ret
 4007ef4:	0005883a 	mov	r2,zero
 4007ef8:	f800283a 	ret
 4007efc:	1806d07a 	srli	r3,r3,1
 4007f00:	00800044 	movi	r2,1
 4007f04:	20c00015 	stw	r3,0(r4)
 4007f08:	f800283a 	ret

04007f0c <__i2b>:
 4007f0c:	defffd04 	addi	sp,sp,-12
 4007f10:	dc000015 	stw	r16,0(sp)
 4007f14:	04000044 	movi	r16,1
 4007f18:	dc400115 	stw	r17,4(sp)
 4007f1c:	2823883a 	mov	r17,r5
 4007f20:	800b883a 	mov	r5,r16
 4007f24:	dfc00215 	stw	ra,8(sp)
 4007f28:	4007ad80 	call	4007ad8 <_Balloc>
 4007f2c:	14400515 	stw	r17,20(r2)
 4007f30:	14000415 	stw	r16,16(r2)
 4007f34:	dfc00217 	ldw	ra,8(sp)
 4007f38:	dc400117 	ldw	r17,4(sp)
 4007f3c:	dc000017 	ldw	r16,0(sp)
 4007f40:	dec00304 	addi	sp,sp,12
 4007f44:	f800283a 	ret

04007f48 <__multiply>:
 4007f48:	deffef04 	addi	sp,sp,-68
 4007f4c:	dc400815 	stw	r17,32(sp)
 4007f50:	dc000715 	stw	r16,28(sp)
 4007f54:	34400417 	ldw	r17,16(r6)
 4007f58:	2c000417 	ldw	r16,16(r5)
 4007f5c:	dd800d15 	stw	r22,52(sp)
 4007f60:	dc800915 	stw	r18,36(sp)
 4007f64:	dfc01015 	stw	ra,64(sp)
 4007f68:	df000f15 	stw	fp,60(sp)
 4007f6c:	ddc00e15 	stw	r23,56(sp)
 4007f70:	dd400c15 	stw	r21,48(sp)
 4007f74:	dd000b15 	stw	r20,44(sp)
 4007f78:	dcc00a15 	stw	r19,40(sp)
 4007f7c:	2825883a 	mov	r18,r5
 4007f80:	302d883a 	mov	r22,r6
 4007f84:	8440050e 	bge	r16,r17,4007f9c <__multiply+0x54>
 4007f88:	8007883a 	mov	r3,r16
 4007f8c:	3025883a 	mov	r18,r6
 4007f90:	8821883a 	mov	r16,r17
 4007f94:	282d883a 	mov	r22,r5
 4007f98:	1823883a 	mov	r17,r3
 4007f9c:	90800217 	ldw	r2,8(r18)
 4007fa0:	8447883a 	add	r3,r16,r17
 4007fa4:	d8c00215 	stw	r3,8(sp)
 4007fa8:	91400117 	ldw	r5,4(r18)
 4007fac:	10c0010e 	bge	r2,r3,4007fb4 <__multiply+0x6c>
 4007fb0:	29400044 	addi	r5,r5,1
 4007fb4:	4007ad80 	call	4007ad8 <_Balloc>
 4007fb8:	d8c00217 	ldw	r3,8(sp)
 4007fbc:	d8800615 	stw	r2,24(sp)
 4007fc0:	18eb883a 	add	r21,r3,r3
 4007fc4:	ad6b883a 	add	r21,r21,r21
 4007fc8:	10c00504 	addi	r3,r2,20
 4007fcc:	1d6b883a 	add	r21,r3,r21
 4007fd0:	d8c00115 	stw	r3,4(sp)
 4007fd4:	dd400315 	stw	r21,12(sp)
 4007fd8:	1805883a 	mov	r2,r3
 4007fdc:	1d40042e 	bgeu	r3,r21,4007ff0 <__multiply+0xa8>
 4007fe0:	d8c00317 	ldw	r3,12(sp)
 4007fe4:	10000015 	stw	zero,0(r2)
 4007fe8:	10800104 	addi	r2,r2,4
 4007fec:	10fffc36 	bltu	r2,r3,4007fe0 <__alt_data_end+0xfc007fe0>
 4007ff0:	8c63883a 	add	r17,r17,r17
 4007ff4:	b5800504 	addi	r22,r22,20
 4007ff8:	8c63883a 	add	r17,r17,r17
 4007ffc:	94800504 	addi	r18,r18,20
 4008000:	8421883a 	add	r16,r16,r16
 4008004:	b463883a 	add	r17,r22,r17
 4008008:	8421883a 	add	r16,r16,r16
 400800c:	dd800015 	stw	r22,0(sp)
 4008010:	dc800415 	stw	r18,16(sp)
 4008014:	dc400515 	stw	r17,20(sp)
 4008018:	9429883a 	add	r20,r18,r16
 400801c:	b4404f2e 	bgeu	r22,r17,400815c <__multiply+0x214>
 4008020:	d8c00017 	ldw	r3,0(sp)
 4008024:	1c800017 	ldw	r18,0(r3)
 4008028:	947fffcc 	andi	r17,r18,65535
 400802c:	88001e26 	beq	r17,zero,40080a8 <__multiply+0x160>
 4008030:	dd800117 	ldw	r22,4(sp)
 4008034:	dd400417 	ldw	r21,16(sp)
 4008038:	0027883a 	mov	r19,zero
 400803c:	ac800017 	ldw	r18,0(r21)
 4008040:	b4000017 	ldw	r16,0(r22)
 4008044:	880b883a 	mov	r5,r17
 4008048:	913fffcc 	andi	r4,r18,65535
 400804c:	4000bd80 	call	4000bd8 <__mulsi3>
 4008050:	9008d43a 	srli	r4,r18,16
 4008054:	84bfffcc 	andi	r18,r16,65535
 4008058:	1485883a 	add	r2,r2,r18
 400805c:	14e5883a 	add	r18,r2,r19
 4008060:	8020d43a 	srli	r16,r16,16
 4008064:	9026d43a 	srli	r19,r18,16
 4008068:	880b883a 	mov	r5,r17
 400806c:	4000bd80 	call	4000bd8 <__mulsi3>
 4008070:	1405883a 	add	r2,r2,r16
 4008074:	14e1883a 	add	r16,r2,r19
 4008078:	90ffffcc 	andi	r3,r18,65535
 400807c:	8024943a 	slli	r18,r16,16
 4008080:	ad400104 	addi	r21,r21,4
 4008084:	b005883a 	mov	r2,r22
 4008088:	90c6b03a 	or	r3,r18,r3
 400808c:	b0c00015 	stw	r3,0(r22)
 4008090:	8026d43a 	srli	r19,r16,16
 4008094:	b5800104 	addi	r22,r22,4
 4008098:	ad3fe836 	bltu	r21,r20,400803c <__alt_data_end+0xfc00803c>
 400809c:	d8c00017 	ldw	r3,0(sp)
 40080a0:	14c00115 	stw	r19,4(r2)
 40080a4:	1c800017 	ldw	r18,0(r3)
 40080a8:	9024d43a 	srli	r18,r18,16
 40080ac:	90002226 	beq	r18,zero,4008138 <__multiply+0x1f0>
 40080b0:	d8c00117 	ldw	r3,4(sp)
 40080b4:	dd800417 	ldw	r22,16(sp)
 40080b8:	002f883a 	mov	r23,zero
 40080bc:	1f000017 	ldw	fp,0(r3)
 40080c0:	1823883a 	mov	r17,r3
 40080c4:	182b883a 	mov	r21,r3
 40080c8:	e021883a 	mov	r16,fp
 40080cc:	00000106 	br	40080d4 <__multiply+0x18c>
 40080d0:	982b883a 	mov	r21,r19
 40080d4:	b100000b 	ldhu	r4,0(r22)
 40080d8:	8020d43a 	srli	r16,r16,16
 40080dc:	900b883a 	mov	r5,r18
 40080e0:	4000bd80 	call	4000bd8 <__mulsi3>
 40080e4:	1405883a 	add	r2,r2,r16
 40080e8:	15ef883a 	add	r23,r2,r23
 40080ec:	b804943a 	slli	r2,r23,16
 40080f0:	e0ffffcc 	andi	r3,fp,65535
 40080f4:	8c400104 	addi	r17,r17,4
 40080f8:	10c6b03a 	or	r3,r2,r3
 40080fc:	88ffff15 	stw	r3,-4(r17)
 4008100:	b5800104 	addi	r22,r22,4
 4008104:	b13fff17 	ldw	r4,-4(r22)
 4008108:	acc00104 	addi	r19,r21,4
 400810c:	900b883a 	mov	r5,r18
 4008110:	2008d43a 	srli	r4,r4,16
 4008114:	9c000017 	ldw	r16,0(r19)
 4008118:	4000bd80 	call	4000bd8 <__mulsi3>
 400811c:	b806d43a 	srli	r3,r23,16
 4008120:	813fffcc 	andi	r4,r16,65535
 4008124:	1105883a 	add	r2,r2,r4
 4008128:	10f9883a 	add	fp,r2,r3
 400812c:	e02ed43a 	srli	r23,fp,16
 4008130:	b53fe736 	bltu	r22,r20,40080d0 <__alt_data_end+0xfc0080d0>
 4008134:	af000115 	stw	fp,4(r21)
 4008138:	d8c00017 	ldw	r3,0(sp)
 400813c:	d9000517 	ldw	r4,20(sp)
 4008140:	18c00104 	addi	r3,r3,4
 4008144:	d8c00015 	stw	r3,0(sp)
 4008148:	d8c00117 	ldw	r3,4(sp)
 400814c:	18c00104 	addi	r3,r3,4
 4008150:	d8c00115 	stw	r3,4(sp)
 4008154:	d8c00017 	ldw	r3,0(sp)
 4008158:	193fb136 	bltu	r3,r4,4008020 <__alt_data_end+0xfc008020>
 400815c:	d8c00217 	ldw	r3,8(sp)
 4008160:	00c00c0e 	bge	zero,r3,4008194 <__multiply+0x24c>
 4008164:	d8c00317 	ldw	r3,12(sp)
 4008168:	18bfff17 	ldw	r2,-4(r3)
 400816c:	1d7fff04 	addi	r21,r3,-4
 4008170:	10000326 	beq	r2,zero,4008180 <__multiply+0x238>
 4008174:	00000706 	br	4008194 <__multiply+0x24c>
 4008178:	a8800017 	ldw	r2,0(r21)
 400817c:	1000051e 	bne	r2,zero,4008194 <__multiply+0x24c>
 4008180:	d8c00217 	ldw	r3,8(sp)
 4008184:	ad7fff04 	addi	r21,r21,-4
 4008188:	18ffffc4 	addi	r3,r3,-1
 400818c:	d8c00215 	stw	r3,8(sp)
 4008190:	183ff91e 	bne	r3,zero,4008178 <__alt_data_end+0xfc008178>
 4008194:	d8c00617 	ldw	r3,24(sp)
 4008198:	d9000217 	ldw	r4,8(sp)
 400819c:	1805883a 	mov	r2,r3
 40081a0:	19000415 	stw	r4,16(r3)
 40081a4:	dfc01017 	ldw	ra,64(sp)
 40081a8:	df000f17 	ldw	fp,60(sp)
 40081ac:	ddc00e17 	ldw	r23,56(sp)
 40081b0:	dd800d17 	ldw	r22,52(sp)
 40081b4:	dd400c17 	ldw	r21,48(sp)
 40081b8:	dd000b17 	ldw	r20,44(sp)
 40081bc:	dcc00a17 	ldw	r19,40(sp)
 40081c0:	dc800917 	ldw	r18,36(sp)
 40081c4:	dc400817 	ldw	r17,32(sp)
 40081c8:	dc000717 	ldw	r16,28(sp)
 40081cc:	dec01104 	addi	sp,sp,68
 40081d0:	f800283a 	ret

040081d4 <__pow5mult>:
 40081d4:	defffa04 	addi	sp,sp,-24
 40081d8:	dcc00315 	stw	r19,12(sp)
 40081dc:	dc000015 	stw	r16,0(sp)
 40081e0:	dfc00515 	stw	ra,20(sp)
 40081e4:	dd000415 	stw	r20,16(sp)
 40081e8:	dc800215 	stw	r18,8(sp)
 40081ec:	dc400115 	stw	r17,4(sp)
 40081f0:	308000cc 	andi	r2,r6,3
 40081f4:	3021883a 	mov	r16,r6
 40081f8:	2027883a 	mov	r19,r4
 40081fc:	10002f1e 	bne	r2,zero,40082bc <__pow5mult+0xe8>
 4008200:	2825883a 	mov	r18,r5
 4008204:	8021d0ba 	srai	r16,r16,2
 4008208:	80001a26 	beq	r16,zero,4008274 <__pow5mult+0xa0>
 400820c:	9c401217 	ldw	r17,72(r19)
 4008210:	8800061e 	bne	r17,zero,400822c <__pow5mult+0x58>
 4008214:	00003406 	br	40082e8 <__pow5mult+0x114>
 4008218:	8021d07a 	srai	r16,r16,1
 400821c:	80001526 	beq	r16,zero,4008274 <__pow5mult+0xa0>
 4008220:	88800017 	ldw	r2,0(r17)
 4008224:	10001c26 	beq	r2,zero,4008298 <__pow5mult+0xc4>
 4008228:	1023883a 	mov	r17,r2
 400822c:	8080004c 	andi	r2,r16,1
 4008230:	103ff926 	beq	r2,zero,4008218 <__alt_data_end+0xfc008218>
 4008234:	880d883a 	mov	r6,r17
 4008238:	900b883a 	mov	r5,r18
 400823c:	9809883a 	mov	r4,r19
 4008240:	4007f480 	call	4007f48 <__multiply>
 4008244:	90001b26 	beq	r18,zero,40082b4 <__pow5mult+0xe0>
 4008248:	91000117 	ldw	r4,4(r18)
 400824c:	98c01317 	ldw	r3,76(r19)
 4008250:	8021d07a 	srai	r16,r16,1
 4008254:	2109883a 	add	r4,r4,r4
 4008258:	2109883a 	add	r4,r4,r4
 400825c:	1907883a 	add	r3,r3,r4
 4008260:	19000017 	ldw	r4,0(r3)
 4008264:	91000015 	stw	r4,0(r18)
 4008268:	1c800015 	stw	r18,0(r3)
 400826c:	1025883a 	mov	r18,r2
 4008270:	803feb1e 	bne	r16,zero,4008220 <__alt_data_end+0xfc008220>
 4008274:	9005883a 	mov	r2,r18
 4008278:	dfc00517 	ldw	ra,20(sp)
 400827c:	dd000417 	ldw	r20,16(sp)
 4008280:	dcc00317 	ldw	r19,12(sp)
 4008284:	dc800217 	ldw	r18,8(sp)
 4008288:	dc400117 	ldw	r17,4(sp)
 400828c:	dc000017 	ldw	r16,0(sp)
 4008290:	dec00604 	addi	sp,sp,24
 4008294:	f800283a 	ret
 4008298:	880d883a 	mov	r6,r17
 400829c:	880b883a 	mov	r5,r17
 40082a0:	9809883a 	mov	r4,r19
 40082a4:	4007f480 	call	4007f48 <__multiply>
 40082a8:	88800015 	stw	r2,0(r17)
 40082ac:	10000015 	stw	zero,0(r2)
 40082b0:	003fdd06 	br	4008228 <__alt_data_end+0xfc008228>
 40082b4:	1025883a 	mov	r18,r2
 40082b8:	003fd706 	br	4008218 <__alt_data_end+0xfc008218>
 40082bc:	10bfffc4 	addi	r2,r2,-1
 40082c0:	1085883a 	add	r2,r2,r2
 40082c4:	00c10074 	movhi	r3,1025
 40082c8:	18ca6f04 	addi	r3,r3,10684
 40082cc:	1085883a 	add	r2,r2,r2
 40082d0:	1885883a 	add	r2,r3,r2
 40082d4:	11800017 	ldw	r6,0(r2)
 40082d8:	000f883a 	mov	r7,zero
 40082dc:	4007ba80 	call	4007ba8 <__multadd>
 40082e0:	1025883a 	mov	r18,r2
 40082e4:	003fc706 	br	4008204 <__alt_data_end+0xfc008204>
 40082e8:	05000044 	movi	r20,1
 40082ec:	a00b883a 	mov	r5,r20
 40082f0:	9809883a 	mov	r4,r19
 40082f4:	4007ad80 	call	4007ad8 <_Balloc>
 40082f8:	1023883a 	mov	r17,r2
 40082fc:	00809c44 	movi	r2,625
 4008300:	88800515 	stw	r2,20(r17)
 4008304:	8d000415 	stw	r20,16(r17)
 4008308:	9c401215 	stw	r17,72(r19)
 400830c:	88000015 	stw	zero,0(r17)
 4008310:	003fc606 	br	400822c <__alt_data_end+0xfc00822c>

04008314 <__lshift>:
 4008314:	defff904 	addi	sp,sp,-28
 4008318:	dd400515 	stw	r21,20(sp)
 400831c:	dcc00315 	stw	r19,12(sp)
 4008320:	302bd17a 	srai	r21,r6,5
 4008324:	2cc00417 	ldw	r19,16(r5)
 4008328:	28800217 	ldw	r2,8(r5)
 400832c:	dd000415 	stw	r20,16(sp)
 4008330:	ace7883a 	add	r19,r21,r19
 4008334:	dc800215 	stw	r18,8(sp)
 4008338:	dc400115 	stw	r17,4(sp)
 400833c:	dc000015 	stw	r16,0(sp)
 4008340:	dfc00615 	stw	ra,24(sp)
 4008344:	9c000044 	addi	r16,r19,1
 4008348:	2823883a 	mov	r17,r5
 400834c:	3029883a 	mov	r20,r6
 4008350:	2025883a 	mov	r18,r4
 4008354:	29400117 	ldw	r5,4(r5)
 4008358:	1400030e 	bge	r2,r16,4008368 <__lshift+0x54>
 400835c:	1085883a 	add	r2,r2,r2
 4008360:	29400044 	addi	r5,r5,1
 4008364:	143ffd16 	blt	r2,r16,400835c <__alt_data_end+0xfc00835c>
 4008368:	9009883a 	mov	r4,r18
 400836c:	4007ad80 	call	4007ad8 <_Balloc>
 4008370:	10c00504 	addi	r3,r2,20
 4008374:	0540070e 	bge	zero,r21,4008394 <__lshift+0x80>
 4008378:	ad6b883a 	add	r21,r21,r21
 400837c:	ad6b883a 	add	r21,r21,r21
 4008380:	1809883a 	mov	r4,r3
 4008384:	1d47883a 	add	r3,r3,r21
 4008388:	20000015 	stw	zero,0(r4)
 400838c:	21000104 	addi	r4,r4,4
 4008390:	193ffd1e 	bne	r3,r4,4008388 <__alt_data_end+0xfc008388>
 4008394:	8a000417 	ldw	r8,16(r17)
 4008398:	89000504 	addi	r4,r17,20
 400839c:	a18007cc 	andi	r6,r20,31
 40083a0:	4211883a 	add	r8,r8,r8
 40083a4:	4211883a 	add	r8,r8,r8
 40083a8:	2211883a 	add	r8,r4,r8
 40083ac:	30002326 	beq	r6,zero,400843c <__lshift+0x128>
 40083b0:	02400804 	movi	r9,32
 40083b4:	4993c83a 	sub	r9,r9,r6
 40083b8:	000b883a 	mov	r5,zero
 40083bc:	21c00017 	ldw	r7,0(r4)
 40083c0:	1815883a 	mov	r10,r3
 40083c4:	18c00104 	addi	r3,r3,4
 40083c8:	398e983a 	sll	r7,r7,r6
 40083cc:	21000104 	addi	r4,r4,4
 40083d0:	394ab03a 	or	r5,r7,r5
 40083d4:	197fff15 	stw	r5,-4(r3)
 40083d8:	217fff17 	ldw	r5,-4(r4)
 40083dc:	2a4ad83a 	srl	r5,r5,r9
 40083e0:	223ff636 	bltu	r4,r8,40083bc <__alt_data_end+0xfc0083bc>
 40083e4:	51400115 	stw	r5,4(r10)
 40083e8:	28001a1e 	bne	r5,zero,4008454 <__lshift+0x140>
 40083ec:	843fffc4 	addi	r16,r16,-1
 40083f0:	14000415 	stw	r16,16(r2)
 40083f4:	88000826 	beq	r17,zero,4008418 <__lshift+0x104>
 40083f8:	89000117 	ldw	r4,4(r17)
 40083fc:	90c01317 	ldw	r3,76(r18)
 4008400:	2109883a 	add	r4,r4,r4
 4008404:	2109883a 	add	r4,r4,r4
 4008408:	1907883a 	add	r3,r3,r4
 400840c:	19000017 	ldw	r4,0(r3)
 4008410:	89000015 	stw	r4,0(r17)
 4008414:	1c400015 	stw	r17,0(r3)
 4008418:	dfc00617 	ldw	ra,24(sp)
 400841c:	dd400517 	ldw	r21,20(sp)
 4008420:	dd000417 	ldw	r20,16(sp)
 4008424:	dcc00317 	ldw	r19,12(sp)
 4008428:	dc800217 	ldw	r18,8(sp)
 400842c:	dc400117 	ldw	r17,4(sp)
 4008430:	dc000017 	ldw	r16,0(sp)
 4008434:	dec00704 	addi	sp,sp,28
 4008438:	f800283a 	ret
 400843c:	21400017 	ldw	r5,0(r4)
 4008440:	18c00104 	addi	r3,r3,4
 4008444:	21000104 	addi	r4,r4,4
 4008448:	197fff15 	stw	r5,-4(r3)
 400844c:	223ffb36 	bltu	r4,r8,400843c <__alt_data_end+0xfc00843c>
 4008450:	003fe606 	br	40083ec <__alt_data_end+0xfc0083ec>
 4008454:	9c000084 	addi	r16,r19,2
 4008458:	003fe406 	br	40083ec <__alt_data_end+0xfc0083ec>

0400845c <__mcmp>:
 400845c:	20800417 	ldw	r2,16(r4)
 4008460:	28c00417 	ldw	r3,16(r5)
 4008464:	10c5c83a 	sub	r2,r2,r3
 4008468:	1000111e 	bne	r2,zero,40084b0 <__mcmp+0x54>
 400846c:	18c7883a 	add	r3,r3,r3
 4008470:	18c7883a 	add	r3,r3,r3
 4008474:	21000504 	addi	r4,r4,20
 4008478:	29400504 	addi	r5,r5,20
 400847c:	20c5883a 	add	r2,r4,r3
 4008480:	28cb883a 	add	r5,r5,r3
 4008484:	00000106 	br	400848c <__mcmp+0x30>
 4008488:	20800a2e 	bgeu	r4,r2,40084b4 <__mcmp+0x58>
 400848c:	10bfff04 	addi	r2,r2,-4
 4008490:	297fff04 	addi	r5,r5,-4
 4008494:	11800017 	ldw	r6,0(r2)
 4008498:	28c00017 	ldw	r3,0(r5)
 400849c:	30fffa26 	beq	r6,r3,4008488 <__alt_data_end+0xfc008488>
 40084a0:	30c00236 	bltu	r6,r3,40084ac <__mcmp+0x50>
 40084a4:	00800044 	movi	r2,1
 40084a8:	f800283a 	ret
 40084ac:	00bfffc4 	movi	r2,-1
 40084b0:	f800283a 	ret
 40084b4:	0005883a 	mov	r2,zero
 40084b8:	f800283a 	ret

040084bc <__mdiff>:
 40084bc:	28c00417 	ldw	r3,16(r5)
 40084c0:	30800417 	ldw	r2,16(r6)
 40084c4:	defffa04 	addi	sp,sp,-24
 40084c8:	dcc00315 	stw	r19,12(sp)
 40084cc:	dc800215 	stw	r18,8(sp)
 40084d0:	dfc00515 	stw	ra,20(sp)
 40084d4:	dd000415 	stw	r20,16(sp)
 40084d8:	dc400115 	stw	r17,4(sp)
 40084dc:	dc000015 	stw	r16,0(sp)
 40084e0:	1887c83a 	sub	r3,r3,r2
 40084e4:	2825883a 	mov	r18,r5
 40084e8:	3027883a 	mov	r19,r6
 40084ec:	1800141e 	bne	r3,zero,4008540 <__mdiff+0x84>
 40084f0:	1085883a 	add	r2,r2,r2
 40084f4:	1085883a 	add	r2,r2,r2
 40084f8:	2a000504 	addi	r8,r5,20
 40084fc:	34000504 	addi	r16,r6,20
 4008500:	4087883a 	add	r3,r8,r2
 4008504:	8085883a 	add	r2,r16,r2
 4008508:	00000106 	br	4008510 <__mdiff+0x54>
 400850c:	40c0592e 	bgeu	r8,r3,4008674 <__mdiff+0x1b8>
 4008510:	18ffff04 	addi	r3,r3,-4
 4008514:	10bfff04 	addi	r2,r2,-4
 4008518:	19c00017 	ldw	r7,0(r3)
 400851c:	11400017 	ldw	r5,0(r2)
 4008520:	397ffa26 	beq	r7,r5,400850c <__alt_data_end+0xfc00850c>
 4008524:	3940592e 	bgeu	r7,r5,400868c <__mdiff+0x1d0>
 4008528:	9005883a 	mov	r2,r18
 400852c:	4023883a 	mov	r17,r8
 4008530:	9825883a 	mov	r18,r19
 4008534:	05000044 	movi	r20,1
 4008538:	1027883a 	mov	r19,r2
 400853c:	00000406 	br	4008550 <__mdiff+0x94>
 4008540:	18005616 	blt	r3,zero,400869c <__mdiff+0x1e0>
 4008544:	34400504 	addi	r17,r6,20
 4008548:	2c000504 	addi	r16,r5,20
 400854c:	0029883a 	mov	r20,zero
 4008550:	91400117 	ldw	r5,4(r18)
 4008554:	4007ad80 	call	4007ad8 <_Balloc>
 4008558:	92400417 	ldw	r9,16(r18)
 400855c:	9b000417 	ldw	r12,16(r19)
 4008560:	12c00504 	addi	r11,r2,20
 4008564:	4a51883a 	add	r8,r9,r9
 4008568:	6319883a 	add	r12,r12,r12
 400856c:	4211883a 	add	r8,r8,r8
 4008570:	6319883a 	add	r12,r12,r12
 4008574:	15000315 	stw	r20,12(r2)
 4008578:	8211883a 	add	r8,r16,r8
 400857c:	8b19883a 	add	r12,r17,r12
 4008580:	0007883a 	mov	r3,zero
 4008584:	81400017 	ldw	r5,0(r16)
 4008588:	89c00017 	ldw	r7,0(r17)
 400858c:	59800104 	addi	r6,r11,4
 4008590:	293fffcc 	andi	r4,r5,65535
 4008594:	20c7883a 	add	r3,r4,r3
 4008598:	393fffcc 	andi	r4,r7,65535
 400859c:	1909c83a 	sub	r4,r3,r4
 40085a0:	280ad43a 	srli	r5,r5,16
 40085a4:	380ed43a 	srli	r7,r7,16
 40085a8:	2007d43a 	srai	r3,r4,16
 40085ac:	213fffcc 	andi	r4,r4,65535
 40085b0:	29cbc83a 	sub	r5,r5,r7
 40085b4:	28c7883a 	add	r3,r5,r3
 40085b8:	180a943a 	slli	r5,r3,16
 40085bc:	8c400104 	addi	r17,r17,4
 40085c0:	84000104 	addi	r16,r16,4
 40085c4:	2908b03a 	or	r4,r5,r4
 40085c8:	59000015 	stw	r4,0(r11)
 40085cc:	1807d43a 	srai	r3,r3,16
 40085d0:	3015883a 	mov	r10,r6
 40085d4:	3017883a 	mov	r11,r6
 40085d8:	8b3fea36 	bltu	r17,r12,4008584 <__alt_data_end+0xfc008584>
 40085dc:	8200162e 	bgeu	r16,r8,4008638 <__mdiff+0x17c>
 40085e0:	8017883a 	mov	r11,r16
 40085e4:	59400017 	ldw	r5,0(r11)
 40085e8:	31800104 	addi	r6,r6,4
 40085ec:	5ac00104 	addi	r11,r11,4
 40085f0:	293fffcc 	andi	r4,r5,65535
 40085f4:	20c7883a 	add	r3,r4,r3
 40085f8:	280ed43a 	srli	r7,r5,16
 40085fc:	180bd43a 	srai	r5,r3,16
 4008600:	193fffcc 	andi	r4,r3,65535
 4008604:	3947883a 	add	r3,r7,r5
 4008608:	180a943a 	slli	r5,r3,16
 400860c:	1807d43a 	srai	r3,r3,16
 4008610:	2908b03a 	or	r4,r5,r4
 4008614:	313fff15 	stw	r4,-4(r6)
 4008618:	5a3ff236 	bltu	r11,r8,40085e4 <__alt_data_end+0xfc0085e4>
 400861c:	0406303a 	nor	r3,zero,r16
 4008620:	1a07883a 	add	r3,r3,r8
 4008624:	1806d0ba 	srli	r3,r3,2
 4008628:	18c00044 	addi	r3,r3,1
 400862c:	18c7883a 	add	r3,r3,r3
 4008630:	18c7883a 	add	r3,r3,r3
 4008634:	50d5883a 	add	r10,r10,r3
 4008638:	50ffff04 	addi	r3,r10,-4
 400863c:	2000041e 	bne	r4,zero,4008650 <__mdiff+0x194>
 4008640:	18ffff04 	addi	r3,r3,-4
 4008644:	19000017 	ldw	r4,0(r3)
 4008648:	4a7fffc4 	addi	r9,r9,-1
 400864c:	203ffc26 	beq	r4,zero,4008640 <__alt_data_end+0xfc008640>
 4008650:	12400415 	stw	r9,16(r2)
 4008654:	dfc00517 	ldw	ra,20(sp)
 4008658:	dd000417 	ldw	r20,16(sp)
 400865c:	dcc00317 	ldw	r19,12(sp)
 4008660:	dc800217 	ldw	r18,8(sp)
 4008664:	dc400117 	ldw	r17,4(sp)
 4008668:	dc000017 	ldw	r16,0(sp)
 400866c:	dec00604 	addi	sp,sp,24
 4008670:	f800283a 	ret
 4008674:	000b883a 	mov	r5,zero
 4008678:	4007ad80 	call	4007ad8 <_Balloc>
 400867c:	00c00044 	movi	r3,1
 4008680:	10c00415 	stw	r3,16(r2)
 4008684:	10000515 	stw	zero,20(r2)
 4008688:	003ff206 	br	4008654 <__alt_data_end+0xfc008654>
 400868c:	8023883a 	mov	r17,r16
 4008690:	0029883a 	mov	r20,zero
 4008694:	4021883a 	mov	r16,r8
 4008698:	003fad06 	br	4008550 <__alt_data_end+0xfc008550>
 400869c:	9005883a 	mov	r2,r18
 40086a0:	94400504 	addi	r17,r18,20
 40086a4:	9c000504 	addi	r16,r19,20
 40086a8:	9825883a 	mov	r18,r19
 40086ac:	05000044 	movi	r20,1
 40086b0:	1027883a 	mov	r19,r2
 40086b4:	003fa606 	br	4008550 <__alt_data_end+0xfc008550>

040086b8 <__ulp>:
 40086b8:	295ffc2c 	andhi	r5,r5,32752
 40086bc:	00bf3034 	movhi	r2,64704
 40086c0:	2887883a 	add	r3,r5,r2
 40086c4:	00c0020e 	bge	zero,r3,40086d0 <__ulp+0x18>
 40086c8:	0005883a 	mov	r2,zero
 40086cc:	f800283a 	ret
 40086d0:	00c7c83a 	sub	r3,zero,r3
 40086d4:	1807d53a 	srai	r3,r3,20
 40086d8:	008004c4 	movi	r2,19
 40086dc:	10c00b0e 	bge	r2,r3,400870c <__ulp+0x54>
 40086e0:	18bffb04 	addi	r2,r3,-20
 40086e4:	01000784 	movi	r4,30
 40086e8:	0007883a 	mov	r3,zero
 40086ec:	20800516 	blt	r4,r2,4008704 <__ulp+0x4c>
 40086f0:	010007c4 	movi	r4,31
 40086f4:	2089c83a 	sub	r4,r4,r2
 40086f8:	00800044 	movi	r2,1
 40086fc:	1104983a 	sll	r2,r2,r4
 4008700:	f800283a 	ret
 4008704:	00800044 	movi	r2,1
 4008708:	f800283a 	ret
 400870c:	01400234 	movhi	r5,8
 4008710:	28c7d83a 	sra	r3,r5,r3
 4008714:	0005883a 	mov	r2,zero
 4008718:	f800283a 	ret

0400871c <__b2d>:
 400871c:	defffa04 	addi	sp,sp,-24
 4008720:	dc000015 	stw	r16,0(sp)
 4008724:	24000417 	ldw	r16,16(r4)
 4008728:	dc400115 	stw	r17,4(sp)
 400872c:	24400504 	addi	r17,r4,20
 4008730:	8421883a 	add	r16,r16,r16
 4008734:	8421883a 	add	r16,r16,r16
 4008738:	8c21883a 	add	r16,r17,r16
 400873c:	dc800215 	stw	r18,8(sp)
 4008740:	84bfff17 	ldw	r18,-4(r16)
 4008744:	dd000415 	stw	r20,16(sp)
 4008748:	dcc00315 	stw	r19,12(sp)
 400874c:	9009883a 	mov	r4,r18
 4008750:	2829883a 	mov	r20,r5
 4008754:	dfc00515 	stw	ra,20(sp)
 4008758:	4007df40 	call	4007df4 <__hi0bits>
 400875c:	00c00804 	movi	r3,32
 4008760:	1889c83a 	sub	r4,r3,r2
 4008764:	a1000015 	stw	r4,0(r20)
 4008768:	01000284 	movi	r4,10
 400876c:	84ffff04 	addi	r19,r16,-4
 4008770:	20801216 	blt	r4,r2,40087bc <__b2d+0xa0>
 4008774:	018002c4 	movi	r6,11
 4008778:	308dc83a 	sub	r6,r6,r2
 400877c:	9186d83a 	srl	r3,r18,r6
 4008780:	18cffc34 	orhi	r3,r3,16368
 4008784:	8cc0212e 	bgeu	r17,r19,400880c <__b2d+0xf0>
 4008788:	813ffe17 	ldw	r4,-8(r16)
 400878c:	218cd83a 	srl	r6,r4,r6
 4008790:	10800544 	addi	r2,r2,21
 4008794:	9084983a 	sll	r2,r18,r2
 4008798:	1184b03a 	or	r2,r2,r6
 400879c:	dfc00517 	ldw	ra,20(sp)
 40087a0:	dd000417 	ldw	r20,16(sp)
 40087a4:	dcc00317 	ldw	r19,12(sp)
 40087a8:	dc800217 	ldw	r18,8(sp)
 40087ac:	dc400117 	ldw	r17,4(sp)
 40087b0:	dc000017 	ldw	r16,0(sp)
 40087b4:	dec00604 	addi	sp,sp,24
 40087b8:	f800283a 	ret
 40087bc:	8cc00f2e 	bgeu	r17,r19,40087fc <__b2d+0xe0>
 40087c0:	117ffd44 	addi	r5,r2,-11
 40087c4:	80bffe17 	ldw	r2,-8(r16)
 40087c8:	28000e26 	beq	r5,zero,4008804 <__b2d+0xe8>
 40087cc:	1949c83a 	sub	r4,r3,r5
 40087d0:	9164983a 	sll	r18,r18,r5
 40087d4:	1106d83a 	srl	r3,r2,r4
 40087d8:	81bffe04 	addi	r6,r16,-8
 40087dc:	948ffc34 	orhi	r18,r18,16368
 40087e0:	90c6b03a 	or	r3,r18,r3
 40087e4:	89800e2e 	bgeu	r17,r6,4008820 <__b2d+0x104>
 40087e8:	81bffd17 	ldw	r6,-12(r16)
 40087ec:	1144983a 	sll	r2,r2,r5
 40087f0:	310ad83a 	srl	r5,r6,r4
 40087f4:	2884b03a 	or	r2,r5,r2
 40087f8:	003fe806 	br	400879c <__alt_data_end+0xfc00879c>
 40087fc:	10bffd44 	addi	r2,r2,-11
 4008800:	1000041e 	bne	r2,zero,4008814 <__b2d+0xf8>
 4008804:	90cffc34 	orhi	r3,r18,16368
 4008808:	003fe406 	br	400879c <__alt_data_end+0xfc00879c>
 400880c:	000d883a 	mov	r6,zero
 4008810:	003fdf06 	br	4008790 <__alt_data_end+0xfc008790>
 4008814:	90a4983a 	sll	r18,r18,r2
 4008818:	0005883a 	mov	r2,zero
 400881c:	003ff906 	br	4008804 <__alt_data_end+0xfc008804>
 4008820:	1144983a 	sll	r2,r2,r5
 4008824:	003fdd06 	br	400879c <__alt_data_end+0xfc00879c>

04008828 <__d2b>:
 4008828:	defff804 	addi	sp,sp,-32
 400882c:	dc000215 	stw	r16,8(sp)
 4008830:	3021883a 	mov	r16,r6
 4008834:	dc400315 	stw	r17,12(sp)
 4008838:	8022907a 	slli	r17,r16,1
 400883c:	dd000615 	stw	r20,24(sp)
 4008840:	2829883a 	mov	r20,r5
 4008844:	01400044 	movi	r5,1
 4008848:	dcc00515 	stw	r19,20(sp)
 400884c:	dc800415 	stw	r18,16(sp)
 4008850:	dfc00715 	stw	ra,28(sp)
 4008854:	3825883a 	mov	r18,r7
 4008858:	8822d57a 	srli	r17,r17,21
 400885c:	4007ad80 	call	4007ad8 <_Balloc>
 4008860:	1027883a 	mov	r19,r2
 4008864:	00800434 	movhi	r2,16
 4008868:	10bfffc4 	addi	r2,r2,-1
 400886c:	808c703a 	and	r6,r16,r2
 4008870:	88000126 	beq	r17,zero,4008878 <__d2b+0x50>
 4008874:	31800434 	orhi	r6,r6,16
 4008878:	d9800015 	stw	r6,0(sp)
 400887c:	a0002426 	beq	r20,zero,4008910 <__d2b+0xe8>
 4008880:	d9000104 	addi	r4,sp,4
 4008884:	dd000115 	stw	r20,4(sp)
 4008888:	4007e5c0 	call	4007e5c <__lo0bits>
 400888c:	d8c00017 	ldw	r3,0(sp)
 4008890:	10002f1e 	bne	r2,zero,4008950 <__d2b+0x128>
 4008894:	d9000117 	ldw	r4,4(sp)
 4008898:	99000515 	stw	r4,20(r19)
 400889c:	1821003a 	cmpeq	r16,r3,zero
 40088a0:	01000084 	movi	r4,2
 40088a4:	2421c83a 	sub	r16,r4,r16
 40088a8:	98c00615 	stw	r3,24(r19)
 40088ac:	9c000415 	stw	r16,16(r19)
 40088b0:	88001f1e 	bne	r17,zero,4008930 <__d2b+0x108>
 40088b4:	10bef384 	addi	r2,r2,-1074
 40088b8:	90800015 	stw	r2,0(r18)
 40088bc:	00900034 	movhi	r2,16384
 40088c0:	10bfffc4 	addi	r2,r2,-1
 40088c4:	8085883a 	add	r2,r16,r2
 40088c8:	1085883a 	add	r2,r2,r2
 40088cc:	1085883a 	add	r2,r2,r2
 40088d0:	9885883a 	add	r2,r19,r2
 40088d4:	11000517 	ldw	r4,20(r2)
 40088d8:	8020917a 	slli	r16,r16,5
 40088dc:	4007df40 	call	4007df4 <__hi0bits>
 40088e0:	d8c00817 	ldw	r3,32(sp)
 40088e4:	8085c83a 	sub	r2,r16,r2
 40088e8:	18800015 	stw	r2,0(r3)
 40088ec:	9805883a 	mov	r2,r19
 40088f0:	dfc00717 	ldw	ra,28(sp)
 40088f4:	dd000617 	ldw	r20,24(sp)
 40088f8:	dcc00517 	ldw	r19,20(sp)
 40088fc:	dc800417 	ldw	r18,16(sp)
 4008900:	dc400317 	ldw	r17,12(sp)
 4008904:	dc000217 	ldw	r16,8(sp)
 4008908:	dec00804 	addi	sp,sp,32
 400890c:	f800283a 	ret
 4008910:	d809883a 	mov	r4,sp
 4008914:	4007e5c0 	call	4007e5c <__lo0bits>
 4008918:	d8c00017 	ldw	r3,0(sp)
 400891c:	04000044 	movi	r16,1
 4008920:	9c000415 	stw	r16,16(r19)
 4008924:	98c00515 	stw	r3,20(r19)
 4008928:	10800804 	addi	r2,r2,32
 400892c:	883fe126 	beq	r17,zero,40088b4 <__alt_data_end+0xfc0088b4>
 4008930:	00c00d44 	movi	r3,53
 4008934:	8c7ef344 	addi	r17,r17,-1075
 4008938:	88a3883a 	add	r17,r17,r2
 400893c:	1885c83a 	sub	r2,r3,r2
 4008940:	d8c00817 	ldw	r3,32(sp)
 4008944:	94400015 	stw	r17,0(r18)
 4008948:	18800015 	stw	r2,0(r3)
 400894c:	003fe706 	br	40088ec <__alt_data_end+0xfc0088ec>
 4008950:	01000804 	movi	r4,32
 4008954:	2089c83a 	sub	r4,r4,r2
 4008958:	1908983a 	sll	r4,r3,r4
 400895c:	d9400117 	ldw	r5,4(sp)
 4008960:	1886d83a 	srl	r3,r3,r2
 4008964:	2148b03a 	or	r4,r4,r5
 4008968:	99000515 	stw	r4,20(r19)
 400896c:	d8c00015 	stw	r3,0(sp)
 4008970:	003fca06 	br	400889c <__alt_data_end+0xfc00889c>

04008974 <__ratio>:
 4008974:	defff904 	addi	sp,sp,-28
 4008978:	dc400315 	stw	r17,12(sp)
 400897c:	2823883a 	mov	r17,r5
 4008980:	d9400104 	addi	r5,sp,4
 4008984:	dfc00615 	stw	ra,24(sp)
 4008988:	dcc00515 	stw	r19,20(sp)
 400898c:	dc800415 	stw	r18,16(sp)
 4008990:	2027883a 	mov	r19,r4
 4008994:	dc000215 	stw	r16,8(sp)
 4008998:	400871c0 	call	400871c <__b2d>
 400899c:	d80b883a 	mov	r5,sp
 40089a0:	8809883a 	mov	r4,r17
 40089a4:	1025883a 	mov	r18,r2
 40089a8:	1821883a 	mov	r16,r3
 40089ac:	400871c0 	call	400871c <__b2d>
 40089b0:	8a000417 	ldw	r8,16(r17)
 40089b4:	99000417 	ldw	r4,16(r19)
 40089b8:	d9400117 	ldw	r5,4(sp)
 40089bc:	2209c83a 	sub	r4,r4,r8
 40089c0:	2010917a 	slli	r8,r4,5
 40089c4:	d9000017 	ldw	r4,0(sp)
 40089c8:	2909c83a 	sub	r4,r5,r4
 40089cc:	4109883a 	add	r4,r8,r4
 40089d0:	01000e0e 	bge	zero,r4,4008a0c <__ratio+0x98>
 40089d4:	2008953a 	slli	r4,r4,20
 40089d8:	2421883a 	add	r16,r4,r16
 40089dc:	100d883a 	mov	r6,r2
 40089e0:	180f883a 	mov	r7,r3
 40089e4:	9009883a 	mov	r4,r18
 40089e8:	800b883a 	mov	r5,r16
 40089ec:	400ca380 	call	400ca38 <__divdf3>
 40089f0:	dfc00617 	ldw	ra,24(sp)
 40089f4:	dcc00517 	ldw	r19,20(sp)
 40089f8:	dc800417 	ldw	r18,16(sp)
 40089fc:	dc400317 	ldw	r17,12(sp)
 4008a00:	dc000217 	ldw	r16,8(sp)
 4008a04:	dec00704 	addi	sp,sp,28
 4008a08:	f800283a 	ret
 4008a0c:	2008953a 	slli	r4,r4,20
 4008a10:	1907c83a 	sub	r3,r3,r4
 4008a14:	003ff106 	br	40089dc <__alt_data_end+0xfc0089dc>

04008a18 <_mprec_log10>:
 4008a18:	defffe04 	addi	sp,sp,-8
 4008a1c:	dc000015 	stw	r16,0(sp)
 4008a20:	dfc00115 	stw	ra,4(sp)
 4008a24:	008005c4 	movi	r2,23
 4008a28:	2021883a 	mov	r16,r4
 4008a2c:	11000d0e 	bge	r2,r4,4008a64 <_mprec_log10+0x4c>
 4008a30:	0005883a 	mov	r2,zero
 4008a34:	00cffc34 	movhi	r3,16368
 4008a38:	843fffc4 	addi	r16,r16,-1
 4008a3c:	000d883a 	mov	r6,zero
 4008a40:	01d00934 	movhi	r7,16420
 4008a44:	1009883a 	mov	r4,r2
 4008a48:	180b883a 	mov	r5,r3
 4008a4c:	400d6600 	call	400d660 <__muldf3>
 4008a50:	803ff91e 	bne	r16,zero,4008a38 <__alt_data_end+0xfc008a38>
 4008a54:	dfc00117 	ldw	ra,4(sp)
 4008a58:	dc000017 	ldw	r16,0(sp)
 4008a5c:	dec00204 	addi	sp,sp,8
 4008a60:	f800283a 	ret
 4008a64:	202090fa 	slli	r16,r4,3
 4008a68:	00810074 	movhi	r2,1025
 4008a6c:	108a8604 	addi	r2,r2,10776
 4008a70:	1421883a 	add	r16,r2,r16
 4008a74:	80800017 	ldw	r2,0(r16)
 4008a78:	80c00117 	ldw	r3,4(r16)
 4008a7c:	dfc00117 	ldw	ra,4(sp)
 4008a80:	dc000017 	ldw	r16,0(sp)
 4008a84:	dec00204 	addi	sp,sp,8
 4008a88:	f800283a 	ret

04008a8c <__copybits>:
 4008a8c:	297fffc4 	addi	r5,r5,-1
 4008a90:	280fd17a 	srai	r7,r5,5
 4008a94:	30c00417 	ldw	r3,16(r6)
 4008a98:	30800504 	addi	r2,r6,20
 4008a9c:	39c00044 	addi	r7,r7,1
 4008aa0:	18c7883a 	add	r3,r3,r3
 4008aa4:	39cf883a 	add	r7,r7,r7
 4008aa8:	18c7883a 	add	r3,r3,r3
 4008aac:	39cf883a 	add	r7,r7,r7
 4008ab0:	10c7883a 	add	r3,r2,r3
 4008ab4:	21cf883a 	add	r7,r4,r7
 4008ab8:	10c00d2e 	bgeu	r2,r3,4008af0 <__copybits+0x64>
 4008abc:	200b883a 	mov	r5,r4
 4008ac0:	12000017 	ldw	r8,0(r2)
 4008ac4:	29400104 	addi	r5,r5,4
 4008ac8:	10800104 	addi	r2,r2,4
 4008acc:	2a3fff15 	stw	r8,-4(r5)
 4008ad0:	10fffb36 	bltu	r2,r3,4008ac0 <__alt_data_end+0xfc008ac0>
 4008ad4:	1985c83a 	sub	r2,r3,r6
 4008ad8:	10bffac4 	addi	r2,r2,-21
 4008adc:	1004d0ba 	srli	r2,r2,2
 4008ae0:	10800044 	addi	r2,r2,1
 4008ae4:	1085883a 	add	r2,r2,r2
 4008ae8:	1085883a 	add	r2,r2,r2
 4008aec:	2089883a 	add	r4,r4,r2
 4008af0:	21c0032e 	bgeu	r4,r7,4008b00 <__copybits+0x74>
 4008af4:	20000015 	stw	zero,0(r4)
 4008af8:	21000104 	addi	r4,r4,4
 4008afc:	21fffd36 	bltu	r4,r7,4008af4 <__alt_data_end+0xfc008af4>
 4008b00:	f800283a 	ret

04008b04 <__any_on>:
 4008b04:	20c00417 	ldw	r3,16(r4)
 4008b08:	2805d17a 	srai	r2,r5,5
 4008b0c:	21000504 	addi	r4,r4,20
 4008b10:	18800d0e 	bge	r3,r2,4008b48 <__any_on+0x44>
 4008b14:	18c7883a 	add	r3,r3,r3
 4008b18:	18c7883a 	add	r3,r3,r3
 4008b1c:	20c7883a 	add	r3,r4,r3
 4008b20:	20c0192e 	bgeu	r4,r3,4008b88 <__any_on+0x84>
 4008b24:	18bfff17 	ldw	r2,-4(r3)
 4008b28:	18ffff04 	addi	r3,r3,-4
 4008b2c:	1000041e 	bne	r2,zero,4008b40 <__any_on+0x3c>
 4008b30:	20c0142e 	bgeu	r4,r3,4008b84 <__any_on+0x80>
 4008b34:	18ffff04 	addi	r3,r3,-4
 4008b38:	19400017 	ldw	r5,0(r3)
 4008b3c:	283ffc26 	beq	r5,zero,4008b30 <__alt_data_end+0xfc008b30>
 4008b40:	00800044 	movi	r2,1
 4008b44:	f800283a 	ret
 4008b48:	10c00a0e 	bge	r2,r3,4008b74 <__any_on+0x70>
 4008b4c:	1085883a 	add	r2,r2,r2
 4008b50:	1085883a 	add	r2,r2,r2
 4008b54:	294007cc 	andi	r5,r5,31
 4008b58:	2087883a 	add	r3,r4,r2
 4008b5c:	283ff026 	beq	r5,zero,4008b20 <__alt_data_end+0xfc008b20>
 4008b60:	19800017 	ldw	r6,0(r3)
 4008b64:	3144d83a 	srl	r2,r6,r5
 4008b68:	114a983a 	sll	r5,r2,r5
 4008b6c:	317ff41e 	bne	r6,r5,4008b40 <__alt_data_end+0xfc008b40>
 4008b70:	003feb06 	br	4008b20 <__alt_data_end+0xfc008b20>
 4008b74:	1085883a 	add	r2,r2,r2
 4008b78:	1085883a 	add	r2,r2,r2
 4008b7c:	2087883a 	add	r3,r4,r2
 4008b80:	003fe706 	br	4008b20 <__alt_data_end+0xfc008b20>
 4008b84:	f800283a 	ret
 4008b88:	0005883a 	mov	r2,zero
 4008b8c:	f800283a 	ret

04008b90 <_realloc_r>:
 4008b90:	defff604 	addi	sp,sp,-40
 4008b94:	dc800215 	stw	r18,8(sp)
 4008b98:	dfc00915 	stw	ra,36(sp)
 4008b9c:	df000815 	stw	fp,32(sp)
 4008ba0:	ddc00715 	stw	r23,28(sp)
 4008ba4:	dd800615 	stw	r22,24(sp)
 4008ba8:	dd400515 	stw	r21,20(sp)
 4008bac:	dd000415 	stw	r20,16(sp)
 4008bb0:	dcc00315 	stw	r19,12(sp)
 4008bb4:	dc400115 	stw	r17,4(sp)
 4008bb8:	dc000015 	stw	r16,0(sp)
 4008bbc:	3025883a 	mov	r18,r6
 4008bc0:	2800b726 	beq	r5,zero,4008ea0 <_realloc_r+0x310>
 4008bc4:	282b883a 	mov	r21,r5
 4008bc8:	2029883a 	mov	r20,r4
 4008bcc:	400ef680 	call	400ef68 <__malloc_lock>
 4008bd0:	a8bfff17 	ldw	r2,-4(r21)
 4008bd4:	043fff04 	movi	r16,-4
 4008bd8:	90c002c4 	addi	r3,r18,11
 4008bdc:	01000584 	movi	r4,22
 4008be0:	acfffe04 	addi	r19,r21,-8
 4008be4:	1420703a 	and	r16,r2,r16
 4008be8:	20c0332e 	bgeu	r4,r3,4008cb8 <_realloc_r+0x128>
 4008bec:	047ffe04 	movi	r17,-8
 4008bf0:	1c62703a 	and	r17,r3,r17
 4008bf4:	8807883a 	mov	r3,r17
 4008bf8:	88005816 	blt	r17,zero,4008d5c <_realloc_r+0x1cc>
 4008bfc:	8c805736 	bltu	r17,r18,4008d5c <_realloc_r+0x1cc>
 4008c00:	80c0300e 	bge	r16,r3,4008cc4 <_realloc_r+0x134>
 4008c04:	07010074 	movhi	fp,1025
 4008c08:	e70cce04 	addi	fp,fp,13112
 4008c0c:	e1c00217 	ldw	r7,8(fp)
 4008c10:	9c09883a 	add	r4,r19,r16
 4008c14:	22000117 	ldw	r8,4(r4)
 4008c18:	21c06326 	beq	r4,r7,4008da8 <_realloc_r+0x218>
 4008c1c:	017fff84 	movi	r5,-2
 4008c20:	414a703a 	and	r5,r8,r5
 4008c24:	214b883a 	add	r5,r4,r5
 4008c28:	29800117 	ldw	r6,4(r5)
 4008c2c:	3180004c 	andi	r6,r6,1
 4008c30:	30003f26 	beq	r6,zero,4008d30 <_realloc_r+0x1a0>
 4008c34:	1080004c 	andi	r2,r2,1
 4008c38:	10008326 	beq	r2,zero,4008e48 <_realloc_r+0x2b8>
 4008c3c:	900b883a 	mov	r5,r18
 4008c40:	a009883a 	mov	r4,r20
 4008c44:	4006e1c0 	call	4006e1c <_malloc_r>
 4008c48:	1025883a 	mov	r18,r2
 4008c4c:	10011e26 	beq	r2,zero,40090c8 <_realloc_r+0x538>
 4008c50:	a93fff17 	ldw	r4,-4(r21)
 4008c54:	10fffe04 	addi	r3,r2,-8
 4008c58:	00bfff84 	movi	r2,-2
 4008c5c:	2084703a 	and	r2,r4,r2
 4008c60:	9885883a 	add	r2,r19,r2
 4008c64:	1880ee26 	beq	r3,r2,4009020 <_realloc_r+0x490>
 4008c68:	81bfff04 	addi	r6,r16,-4
 4008c6c:	00800904 	movi	r2,36
 4008c70:	1180b836 	bltu	r2,r6,4008f54 <_realloc_r+0x3c4>
 4008c74:	00c004c4 	movi	r3,19
 4008c78:	19809636 	bltu	r3,r6,4008ed4 <_realloc_r+0x344>
 4008c7c:	9005883a 	mov	r2,r18
 4008c80:	a807883a 	mov	r3,r21
 4008c84:	19000017 	ldw	r4,0(r3)
 4008c88:	11000015 	stw	r4,0(r2)
 4008c8c:	19000117 	ldw	r4,4(r3)
 4008c90:	11000115 	stw	r4,4(r2)
 4008c94:	18c00217 	ldw	r3,8(r3)
 4008c98:	10c00215 	stw	r3,8(r2)
 4008c9c:	a80b883a 	mov	r5,r21
 4008ca0:	a009883a 	mov	r4,r20
 4008ca4:	40062240 	call	4006224 <_free_r>
 4008ca8:	a009883a 	mov	r4,r20
 4008cac:	400ef8c0 	call	400ef8c <__malloc_unlock>
 4008cb0:	9005883a 	mov	r2,r18
 4008cb4:	00001206 	br	4008d00 <_realloc_r+0x170>
 4008cb8:	00c00404 	movi	r3,16
 4008cbc:	1823883a 	mov	r17,r3
 4008cc0:	003fce06 	br	4008bfc <__alt_data_end+0xfc008bfc>
 4008cc4:	a825883a 	mov	r18,r21
 4008cc8:	8445c83a 	sub	r2,r16,r17
 4008ccc:	00c003c4 	movi	r3,15
 4008cd0:	18802636 	bltu	r3,r2,4008d6c <_realloc_r+0x1dc>
 4008cd4:	99800117 	ldw	r6,4(r19)
 4008cd8:	9c07883a 	add	r3,r19,r16
 4008cdc:	3180004c 	andi	r6,r6,1
 4008ce0:	3420b03a 	or	r16,r6,r16
 4008ce4:	9c000115 	stw	r16,4(r19)
 4008ce8:	18800117 	ldw	r2,4(r3)
 4008cec:	10800054 	ori	r2,r2,1
 4008cf0:	18800115 	stw	r2,4(r3)
 4008cf4:	a009883a 	mov	r4,r20
 4008cf8:	400ef8c0 	call	400ef8c <__malloc_unlock>
 4008cfc:	9005883a 	mov	r2,r18
 4008d00:	dfc00917 	ldw	ra,36(sp)
 4008d04:	df000817 	ldw	fp,32(sp)
 4008d08:	ddc00717 	ldw	r23,28(sp)
 4008d0c:	dd800617 	ldw	r22,24(sp)
 4008d10:	dd400517 	ldw	r21,20(sp)
 4008d14:	dd000417 	ldw	r20,16(sp)
 4008d18:	dcc00317 	ldw	r19,12(sp)
 4008d1c:	dc800217 	ldw	r18,8(sp)
 4008d20:	dc400117 	ldw	r17,4(sp)
 4008d24:	dc000017 	ldw	r16,0(sp)
 4008d28:	dec00a04 	addi	sp,sp,40
 4008d2c:	f800283a 	ret
 4008d30:	017fff04 	movi	r5,-4
 4008d34:	414a703a 	and	r5,r8,r5
 4008d38:	814d883a 	add	r6,r16,r5
 4008d3c:	30c01f16 	blt	r6,r3,4008dbc <_realloc_r+0x22c>
 4008d40:	20800317 	ldw	r2,12(r4)
 4008d44:	20c00217 	ldw	r3,8(r4)
 4008d48:	a825883a 	mov	r18,r21
 4008d4c:	3021883a 	mov	r16,r6
 4008d50:	18800315 	stw	r2,12(r3)
 4008d54:	10c00215 	stw	r3,8(r2)
 4008d58:	003fdb06 	br	4008cc8 <__alt_data_end+0xfc008cc8>
 4008d5c:	00800304 	movi	r2,12
 4008d60:	a0800015 	stw	r2,0(r20)
 4008d64:	0005883a 	mov	r2,zero
 4008d68:	003fe506 	br	4008d00 <__alt_data_end+0xfc008d00>
 4008d6c:	98c00117 	ldw	r3,4(r19)
 4008d70:	9c4b883a 	add	r5,r19,r17
 4008d74:	11000054 	ori	r4,r2,1
 4008d78:	18c0004c 	andi	r3,r3,1
 4008d7c:	1c62b03a 	or	r17,r3,r17
 4008d80:	9c400115 	stw	r17,4(r19)
 4008d84:	29000115 	stw	r4,4(r5)
 4008d88:	2885883a 	add	r2,r5,r2
 4008d8c:	10c00117 	ldw	r3,4(r2)
 4008d90:	29400204 	addi	r5,r5,8
 4008d94:	a009883a 	mov	r4,r20
 4008d98:	18c00054 	ori	r3,r3,1
 4008d9c:	10c00115 	stw	r3,4(r2)
 4008da0:	40062240 	call	4006224 <_free_r>
 4008da4:	003fd306 	br	4008cf4 <__alt_data_end+0xfc008cf4>
 4008da8:	017fff04 	movi	r5,-4
 4008dac:	414a703a 	and	r5,r8,r5
 4008db0:	89800404 	addi	r6,r17,16
 4008db4:	8151883a 	add	r8,r16,r5
 4008db8:	4180590e 	bge	r8,r6,4008f20 <_realloc_r+0x390>
 4008dbc:	1080004c 	andi	r2,r2,1
 4008dc0:	103f9e1e 	bne	r2,zero,4008c3c <__alt_data_end+0xfc008c3c>
 4008dc4:	adbffe17 	ldw	r22,-8(r21)
 4008dc8:	00bfff04 	movi	r2,-4
 4008dcc:	9dadc83a 	sub	r22,r19,r22
 4008dd0:	b1800117 	ldw	r6,4(r22)
 4008dd4:	3084703a 	and	r2,r6,r2
 4008dd8:	20002026 	beq	r4,zero,4008e5c <_realloc_r+0x2cc>
 4008ddc:	80af883a 	add	r23,r16,r2
 4008de0:	b96f883a 	add	r23,r23,r5
 4008de4:	21c05f26 	beq	r4,r7,4008f64 <_realloc_r+0x3d4>
 4008de8:	b8c01c16 	blt	r23,r3,4008e5c <_realloc_r+0x2cc>
 4008dec:	20800317 	ldw	r2,12(r4)
 4008df0:	20c00217 	ldw	r3,8(r4)
 4008df4:	81bfff04 	addi	r6,r16,-4
 4008df8:	01000904 	movi	r4,36
 4008dfc:	18800315 	stw	r2,12(r3)
 4008e00:	10c00215 	stw	r3,8(r2)
 4008e04:	b0c00217 	ldw	r3,8(r22)
 4008e08:	b0800317 	ldw	r2,12(r22)
 4008e0c:	b4800204 	addi	r18,r22,8
 4008e10:	18800315 	stw	r2,12(r3)
 4008e14:	10c00215 	stw	r3,8(r2)
 4008e18:	21801b36 	bltu	r4,r6,4008e88 <_realloc_r+0x2f8>
 4008e1c:	008004c4 	movi	r2,19
 4008e20:	1180352e 	bgeu	r2,r6,4008ef8 <_realloc_r+0x368>
 4008e24:	a8800017 	ldw	r2,0(r21)
 4008e28:	b0800215 	stw	r2,8(r22)
 4008e2c:	a8800117 	ldw	r2,4(r21)
 4008e30:	b0800315 	stw	r2,12(r22)
 4008e34:	008006c4 	movi	r2,27
 4008e38:	11807f36 	bltu	r2,r6,4009038 <_realloc_r+0x4a8>
 4008e3c:	b0800404 	addi	r2,r22,16
 4008e40:	ad400204 	addi	r21,r21,8
 4008e44:	00002d06 	br	4008efc <_realloc_r+0x36c>
 4008e48:	adbffe17 	ldw	r22,-8(r21)
 4008e4c:	00bfff04 	movi	r2,-4
 4008e50:	9dadc83a 	sub	r22,r19,r22
 4008e54:	b1000117 	ldw	r4,4(r22)
 4008e58:	2084703a 	and	r2,r4,r2
 4008e5c:	b03f7726 	beq	r22,zero,4008c3c <__alt_data_end+0xfc008c3c>
 4008e60:	80af883a 	add	r23,r16,r2
 4008e64:	b8ff7516 	blt	r23,r3,4008c3c <__alt_data_end+0xfc008c3c>
 4008e68:	b0800317 	ldw	r2,12(r22)
 4008e6c:	b0c00217 	ldw	r3,8(r22)
 4008e70:	81bfff04 	addi	r6,r16,-4
 4008e74:	01000904 	movi	r4,36
 4008e78:	18800315 	stw	r2,12(r3)
 4008e7c:	10c00215 	stw	r3,8(r2)
 4008e80:	b4800204 	addi	r18,r22,8
 4008e84:	21bfe52e 	bgeu	r4,r6,4008e1c <__alt_data_end+0xfc008e1c>
 4008e88:	a80b883a 	mov	r5,r21
 4008e8c:	9009883a 	mov	r4,r18
 4008e90:	40078540 	call	4007854 <memmove>
 4008e94:	b821883a 	mov	r16,r23
 4008e98:	b027883a 	mov	r19,r22
 4008e9c:	003f8a06 	br	4008cc8 <__alt_data_end+0xfc008cc8>
 4008ea0:	300b883a 	mov	r5,r6
 4008ea4:	dfc00917 	ldw	ra,36(sp)
 4008ea8:	df000817 	ldw	fp,32(sp)
 4008eac:	ddc00717 	ldw	r23,28(sp)
 4008eb0:	dd800617 	ldw	r22,24(sp)
 4008eb4:	dd400517 	ldw	r21,20(sp)
 4008eb8:	dd000417 	ldw	r20,16(sp)
 4008ebc:	dcc00317 	ldw	r19,12(sp)
 4008ec0:	dc800217 	ldw	r18,8(sp)
 4008ec4:	dc400117 	ldw	r17,4(sp)
 4008ec8:	dc000017 	ldw	r16,0(sp)
 4008ecc:	dec00a04 	addi	sp,sp,40
 4008ed0:	4006e1c1 	jmpi	4006e1c <_malloc_r>
 4008ed4:	a8c00017 	ldw	r3,0(r21)
 4008ed8:	90c00015 	stw	r3,0(r18)
 4008edc:	a8c00117 	ldw	r3,4(r21)
 4008ee0:	90c00115 	stw	r3,4(r18)
 4008ee4:	00c006c4 	movi	r3,27
 4008ee8:	19804536 	bltu	r3,r6,4009000 <_realloc_r+0x470>
 4008eec:	90800204 	addi	r2,r18,8
 4008ef0:	a8c00204 	addi	r3,r21,8
 4008ef4:	003f6306 	br	4008c84 <__alt_data_end+0xfc008c84>
 4008ef8:	9005883a 	mov	r2,r18
 4008efc:	a8c00017 	ldw	r3,0(r21)
 4008f00:	b821883a 	mov	r16,r23
 4008f04:	b027883a 	mov	r19,r22
 4008f08:	10c00015 	stw	r3,0(r2)
 4008f0c:	a8c00117 	ldw	r3,4(r21)
 4008f10:	10c00115 	stw	r3,4(r2)
 4008f14:	a8c00217 	ldw	r3,8(r21)
 4008f18:	10c00215 	stw	r3,8(r2)
 4008f1c:	003f6a06 	br	4008cc8 <__alt_data_end+0xfc008cc8>
 4008f20:	9c67883a 	add	r19,r19,r17
 4008f24:	4445c83a 	sub	r2,r8,r17
 4008f28:	e4c00215 	stw	r19,8(fp)
 4008f2c:	10800054 	ori	r2,r2,1
 4008f30:	98800115 	stw	r2,4(r19)
 4008f34:	a8bfff17 	ldw	r2,-4(r21)
 4008f38:	a009883a 	mov	r4,r20
 4008f3c:	1080004c 	andi	r2,r2,1
 4008f40:	1462b03a 	or	r17,r2,r17
 4008f44:	ac7fff15 	stw	r17,-4(r21)
 4008f48:	400ef8c0 	call	400ef8c <__malloc_unlock>
 4008f4c:	a805883a 	mov	r2,r21
 4008f50:	003f6b06 	br	4008d00 <__alt_data_end+0xfc008d00>
 4008f54:	a80b883a 	mov	r5,r21
 4008f58:	9009883a 	mov	r4,r18
 4008f5c:	40078540 	call	4007854 <memmove>
 4008f60:	003f4e06 	br	4008c9c <__alt_data_end+0xfc008c9c>
 4008f64:	89000404 	addi	r4,r17,16
 4008f68:	b93fbc16 	blt	r23,r4,4008e5c <__alt_data_end+0xfc008e5c>
 4008f6c:	b0800317 	ldw	r2,12(r22)
 4008f70:	b0c00217 	ldw	r3,8(r22)
 4008f74:	81bfff04 	addi	r6,r16,-4
 4008f78:	01000904 	movi	r4,36
 4008f7c:	18800315 	stw	r2,12(r3)
 4008f80:	10c00215 	stw	r3,8(r2)
 4008f84:	b4800204 	addi	r18,r22,8
 4008f88:	21804336 	bltu	r4,r6,4009098 <_realloc_r+0x508>
 4008f8c:	008004c4 	movi	r2,19
 4008f90:	11803f2e 	bgeu	r2,r6,4009090 <_realloc_r+0x500>
 4008f94:	a8800017 	ldw	r2,0(r21)
 4008f98:	b0800215 	stw	r2,8(r22)
 4008f9c:	a8800117 	ldw	r2,4(r21)
 4008fa0:	b0800315 	stw	r2,12(r22)
 4008fa4:	008006c4 	movi	r2,27
 4008fa8:	11803f36 	bltu	r2,r6,40090a8 <_realloc_r+0x518>
 4008fac:	b0800404 	addi	r2,r22,16
 4008fb0:	ad400204 	addi	r21,r21,8
 4008fb4:	a8c00017 	ldw	r3,0(r21)
 4008fb8:	10c00015 	stw	r3,0(r2)
 4008fbc:	a8c00117 	ldw	r3,4(r21)
 4008fc0:	10c00115 	stw	r3,4(r2)
 4008fc4:	a8c00217 	ldw	r3,8(r21)
 4008fc8:	10c00215 	stw	r3,8(r2)
 4008fcc:	b447883a 	add	r3,r22,r17
 4008fd0:	bc45c83a 	sub	r2,r23,r17
 4008fd4:	e0c00215 	stw	r3,8(fp)
 4008fd8:	10800054 	ori	r2,r2,1
 4008fdc:	18800115 	stw	r2,4(r3)
 4008fe0:	b0800117 	ldw	r2,4(r22)
 4008fe4:	a009883a 	mov	r4,r20
 4008fe8:	1080004c 	andi	r2,r2,1
 4008fec:	1462b03a 	or	r17,r2,r17
 4008ff0:	b4400115 	stw	r17,4(r22)
 4008ff4:	400ef8c0 	call	400ef8c <__malloc_unlock>
 4008ff8:	9005883a 	mov	r2,r18
 4008ffc:	003f4006 	br	4008d00 <__alt_data_end+0xfc008d00>
 4009000:	a8c00217 	ldw	r3,8(r21)
 4009004:	90c00215 	stw	r3,8(r18)
 4009008:	a8c00317 	ldw	r3,12(r21)
 400900c:	90c00315 	stw	r3,12(r18)
 4009010:	30801126 	beq	r6,r2,4009058 <_realloc_r+0x4c8>
 4009014:	90800404 	addi	r2,r18,16
 4009018:	a8c00404 	addi	r3,r21,16
 400901c:	003f1906 	br	4008c84 <__alt_data_end+0xfc008c84>
 4009020:	90ffff17 	ldw	r3,-4(r18)
 4009024:	00bfff04 	movi	r2,-4
 4009028:	a825883a 	mov	r18,r21
 400902c:	1884703a 	and	r2,r3,r2
 4009030:	80a1883a 	add	r16,r16,r2
 4009034:	003f2406 	br	4008cc8 <__alt_data_end+0xfc008cc8>
 4009038:	a8800217 	ldw	r2,8(r21)
 400903c:	b0800415 	stw	r2,16(r22)
 4009040:	a8800317 	ldw	r2,12(r21)
 4009044:	b0800515 	stw	r2,20(r22)
 4009048:	31000a26 	beq	r6,r4,4009074 <_realloc_r+0x4e4>
 400904c:	b0800604 	addi	r2,r22,24
 4009050:	ad400404 	addi	r21,r21,16
 4009054:	003fa906 	br	4008efc <__alt_data_end+0xfc008efc>
 4009058:	a9000417 	ldw	r4,16(r21)
 400905c:	90800604 	addi	r2,r18,24
 4009060:	a8c00604 	addi	r3,r21,24
 4009064:	91000415 	stw	r4,16(r18)
 4009068:	a9000517 	ldw	r4,20(r21)
 400906c:	91000515 	stw	r4,20(r18)
 4009070:	003f0406 	br	4008c84 <__alt_data_end+0xfc008c84>
 4009074:	a8c00417 	ldw	r3,16(r21)
 4009078:	ad400604 	addi	r21,r21,24
 400907c:	b0800804 	addi	r2,r22,32
 4009080:	b0c00615 	stw	r3,24(r22)
 4009084:	a8ffff17 	ldw	r3,-4(r21)
 4009088:	b0c00715 	stw	r3,28(r22)
 400908c:	003f9b06 	br	4008efc <__alt_data_end+0xfc008efc>
 4009090:	9005883a 	mov	r2,r18
 4009094:	003fc706 	br	4008fb4 <__alt_data_end+0xfc008fb4>
 4009098:	a80b883a 	mov	r5,r21
 400909c:	9009883a 	mov	r4,r18
 40090a0:	40078540 	call	4007854 <memmove>
 40090a4:	003fc906 	br	4008fcc <__alt_data_end+0xfc008fcc>
 40090a8:	a8800217 	ldw	r2,8(r21)
 40090ac:	b0800415 	stw	r2,16(r22)
 40090b0:	a8800317 	ldw	r2,12(r21)
 40090b4:	b0800515 	stw	r2,20(r22)
 40090b8:	31000726 	beq	r6,r4,40090d8 <_realloc_r+0x548>
 40090bc:	b0800604 	addi	r2,r22,24
 40090c0:	ad400404 	addi	r21,r21,16
 40090c4:	003fbb06 	br	4008fb4 <__alt_data_end+0xfc008fb4>
 40090c8:	a009883a 	mov	r4,r20
 40090cc:	400ef8c0 	call	400ef8c <__malloc_unlock>
 40090d0:	0005883a 	mov	r2,zero
 40090d4:	003f0a06 	br	4008d00 <__alt_data_end+0xfc008d00>
 40090d8:	a8c00417 	ldw	r3,16(r21)
 40090dc:	ad400604 	addi	r21,r21,24
 40090e0:	b0800804 	addi	r2,r22,32
 40090e4:	b0c00615 	stw	r3,24(r22)
 40090e8:	a8ffff17 	ldw	r3,-4(r21)
 40090ec:	b0c00715 	stw	r3,28(r22)
 40090f0:	003fb006 	br	4008fb4 <__alt_data_end+0xfc008fb4>

040090f4 <__fpclassifyd>:
 40090f4:	00a00034 	movhi	r2,32768
 40090f8:	10bfffc4 	addi	r2,r2,-1
 40090fc:	2884703a 	and	r2,r5,r2
 4009100:	10000726 	beq	r2,zero,4009120 <__fpclassifyd+0x2c>
 4009104:	00fffc34 	movhi	r3,65520
 4009108:	019ff834 	movhi	r6,32736
 400910c:	28c7883a 	add	r3,r5,r3
 4009110:	31bfffc4 	addi	r6,r6,-1
 4009114:	30c00536 	bltu	r6,r3,400912c <__fpclassifyd+0x38>
 4009118:	00800104 	movi	r2,4
 400911c:	f800283a 	ret
 4009120:	2000021e 	bne	r4,zero,400912c <__fpclassifyd+0x38>
 4009124:	00800084 	movi	r2,2
 4009128:	f800283a 	ret
 400912c:	00dffc34 	movhi	r3,32752
 4009130:	019ff834 	movhi	r6,32736
 4009134:	28cb883a 	add	r5,r5,r3
 4009138:	31bfffc4 	addi	r6,r6,-1
 400913c:	317ff62e 	bgeu	r6,r5,4009118 <__alt_data_end+0xfc009118>
 4009140:	01400434 	movhi	r5,16
 4009144:	297fffc4 	addi	r5,r5,-1
 4009148:	28800236 	bltu	r5,r2,4009154 <__fpclassifyd+0x60>
 400914c:	008000c4 	movi	r2,3
 4009150:	f800283a 	ret
 4009154:	10c00226 	beq	r2,r3,4009160 <__fpclassifyd+0x6c>
 4009158:	0005883a 	mov	r2,zero
 400915c:	f800283a 	ret
 4009160:	2005003a 	cmpeq	r2,r4,zero
 4009164:	f800283a 	ret

04009168 <_sbrk_r>:
 4009168:	defffd04 	addi	sp,sp,-12
 400916c:	dc000015 	stw	r16,0(sp)
 4009170:	04010074 	movhi	r16,1025
 4009174:	dc400115 	stw	r17,4(sp)
 4009178:	84113604 	addi	r16,r16,17624
 400917c:	2023883a 	mov	r17,r4
 4009180:	2809883a 	mov	r4,r5
 4009184:	dfc00215 	stw	ra,8(sp)
 4009188:	80000015 	stw	zero,0(r16)
 400918c:	400f1740 	call	400f174 <sbrk>
 4009190:	00ffffc4 	movi	r3,-1
 4009194:	10c00526 	beq	r2,r3,40091ac <_sbrk_r+0x44>
 4009198:	dfc00217 	ldw	ra,8(sp)
 400919c:	dc400117 	ldw	r17,4(sp)
 40091a0:	dc000017 	ldw	r16,0(sp)
 40091a4:	dec00304 	addi	sp,sp,12
 40091a8:	f800283a 	ret
 40091ac:	80c00017 	ldw	r3,0(r16)
 40091b0:	183ff926 	beq	r3,zero,4009198 <__alt_data_end+0xfc009198>
 40091b4:	88c00015 	stw	r3,0(r17)
 40091b8:	003ff706 	br	4009198 <__alt_data_end+0xfc009198>

040091bc <__sread>:
 40091bc:	defffe04 	addi	sp,sp,-8
 40091c0:	dc000015 	stw	r16,0(sp)
 40091c4:	2821883a 	mov	r16,r5
 40091c8:	2940038f 	ldh	r5,14(r5)
 40091cc:	dfc00115 	stw	ra,4(sp)
 40091d0:	400b0780 	call	400b078 <_read_r>
 40091d4:	10000716 	blt	r2,zero,40091f4 <__sread+0x38>
 40091d8:	80c01417 	ldw	r3,80(r16)
 40091dc:	1887883a 	add	r3,r3,r2
 40091e0:	80c01415 	stw	r3,80(r16)
 40091e4:	dfc00117 	ldw	ra,4(sp)
 40091e8:	dc000017 	ldw	r16,0(sp)
 40091ec:	dec00204 	addi	sp,sp,8
 40091f0:	f800283a 	ret
 40091f4:	80c0030b 	ldhu	r3,12(r16)
 40091f8:	18fbffcc 	andi	r3,r3,61439
 40091fc:	80c0030d 	sth	r3,12(r16)
 4009200:	dfc00117 	ldw	ra,4(sp)
 4009204:	dc000017 	ldw	r16,0(sp)
 4009208:	dec00204 	addi	sp,sp,8
 400920c:	f800283a 	ret

04009210 <__seofread>:
 4009210:	0005883a 	mov	r2,zero
 4009214:	f800283a 	ret

04009218 <__swrite>:
 4009218:	2880030b 	ldhu	r2,12(r5)
 400921c:	defffb04 	addi	sp,sp,-20
 4009220:	dcc00315 	stw	r19,12(sp)
 4009224:	dc800215 	stw	r18,8(sp)
 4009228:	dc400115 	stw	r17,4(sp)
 400922c:	dc000015 	stw	r16,0(sp)
 4009230:	dfc00415 	stw	ra,16(sp)
 4009234:	10c0400c 	andi	r3,r2,256
 4009238:	2821883a 	mov	r16,r5
 400923c:	2023883a 	mov	r17,r4
 4009240:	3025883a 	mov	r18,r6
 4009244:	3827883a 	mov	r19,r7
 4009248:	18000526 	beq	r3,zero,4009260 <__swrite+0x48>
 400924c:	2940038f 	ldh	r5,14(r5)
 4009250:	01c00084 	movi	r7,2
 4009254:	000d883a 	mov	r6,zero
 4009258:	400b0180 	call	400b018 <_lseek_r>
 400925c:	8080030b 	ldhu	r2,12(r16)
 4009260:	8140038f 	ldh	r5,14(r16)
 4009264:	10bbffcc 	andi	r2,r2,61439
 4009268:	980f883a 	mov	r7,r19
 400926c:	900d883a 	mov	r6,r18
 4009270:	8809883a 	mov	r4,r17
 4009274:	8080030d 	sth	r2,12(r16)
 4009278:	dfc00417 	ldw	ra,16(sp)
 400927c:	dcc00317 	ldw	r19,12(sp)
 4009280:	dc800217 	ldw	r18,8(sp)
 4009284:	dc400117 	ldw	r17,4(sp)
 4009288:	dc000017 	ldw	r16,0(sp)
 400928c:	dec00504 	addi	sp,sp,20
 4009290:	400aacc1 	jmpi	400aacc <_write_r>

04009294 <__sseek>:
 4009294:	defffe04 	addi	sp,sp,-8
 4009298:	dc000015 	stw	r16,0(sp)
 400929c:	2821883a 	mov	r16,r5
 40092a0:	2940038f 	ldh	r5,14(r5)
 40092a4:	dfc00115 	stw	ra,4(sp)
 40092a8:	400b0180 	call	400b018 <_lseek_r>
 40092ac:	00ffffc4 	movi	r3,-1
 40092b0:	10c00826 	beq	r2,r3,40092d4 <__sseek+0x40>
 40092b4:	80c0030b 	ldhu	r3,12(r16)
 40092b8:	80801415 	stw	r2,80(r16)
 40092bc:	18c40014 	ori	r3,r3,4096
 40092c0:	80c0030d 	sth	r3,12(r16)
 40092c4:	dfc00117 	ldw	ra,4(sp)
 40092c8:	dc000017 	ldw	r16,0(sp)
 40092cc:	dec00204 	addi	sp,sp,8
 40092d0:	f800283a 	ret
 40092d4:	80c0030b 	ldhu	r3,12(r16)
 40092d8:	18fbffcc 	andi	r3,r3,61439
 40092dc:	80c0030d 	sth	r3,12(r16)
 40092e0:	dfc00117 	ldw	ra,4(sp)
 40092e4:	dc000017 	ldw	r16,0(sp)
 40092e8:	dec00204 	addi	sp,sp,8
 40092ec:	f800283a 	ret

040092f0 <__sclose>:
 40092f0:	2940038f 	ldh	r5,14(r5)
 40092f4:	400ab2c1 	jmpi	400ab2c <_close_r>

040092f8 <strcmp>:
 40092f8:	2144b03a 	or	r2,r4,r5
 40092fc:	108000cc 	andi	r2,r2,3
 4009300:	1000171e 	bne	r2,zero,4009360 <strcmp+0x68>
 4009304:	20800017 	ldw	r2,0(r4)
 4009308:	28c00017 	ldw	r3,0(r5)
 400930c:	10c0141e 	bne	r2,r3,4009360 <strcmp+0x68>
 4009310:	027fbff4 	movhi	r9,65279
 4009314:	4a7fbfc4 	addi	r9,r9,-257
 4009318:	0086303a 	nor	r3,zero,r2
 400931c:	02202074 	movhi	r8,32897
 4009320:	1245883a 	add	r2,r2,r9
 4009324:	42202004 	addi	r8,r8,-32640
 4009328:	10c4703a 	and	r2,r2,r3
 400932c:	1204703a 	and	r2,r2,r8
 4009330:	10000226 	beq	r2,zero,400933c <strcmp+0x44>
 4009334:	00002306 	br	40093c4 <strcmp+0xcc>
 4009338:	1000221e 	bne	r2,zero,40093c4 <strcmp+0xcc>
 400933c:	21000104 	addi	r4,r4,4
 4009340:	20c00017 	ldw	r3,0(r4)
 4009344:	29400104 	addi	r5,r5,4
 4009348:	29800017 	ldw	r6,0(r5)
 400934c:	1a4f883a 	add	r7,r3,r9
 4009350:	00c4303a 	nor	r2,zero,r3
 4009354:	3884703a 	and	r2,r7,r2
 4009358:	1204703a 	and	r2,r2,r8
 400935c:	19bff626 	beq	r3,r6,4009338 <__alt_data_end+0xfc009338>
 4009360:	20800003 	ldbu	r2,0(r4)
 4009364:	10c03fcc 	andi	r3,r2,255
 4009368:	18c0201c 	xori	r3,r3,128
 400936c:	18ffe004 	addi	r3,r3,-128
 4009370:	18000c26 	beq	r3,zero,40093a4 <strcmp+0xac>
 4009374:	29800007 	ldb	r6,0(r5)
 4009378:	19800326 	beq	r3,r6,4009388 <strcmp+0x90>
 400937c:	00001306 	br	40093cc <strcmp+0xd4>
 4009380:	29800007 	ldb	r6,0(r5)
 4009384:	11800b1e 	bne	r2,r6,40093b4 <strcmp+0xbc>
 4009388:	21000044 	addi	r4,r4,1
 400938c:	20c00003 	ldbu	r3,0(r4)
 4009390:	29400044 	addi	r5,r5,1
 4009394:	18803fcc 	andi	r2,r3,255
 4009398:	1080201c 	xori	r2,r2,128
 400939c:	10bfe004 	addi	r2,r2,-128
 40093a0:	103ff71e 	bne	r2,zero,4009380 <__alt_data_end+0xfc009380>
 40093a4:	0007883a 	mov	r3,zero
 40093a8:	28800003 	ldbu	r2,0(r5)
 40093ac:	1885c83a 	sub	r2,r3,r2
 40093b0:	f800283a 	ret
 40093b4:	28800003 	ldbu	r2,0(r5)
 40093b8:	18c03fcc 	andi	r3,r3,255
 40093bc:	1885c83a 	sub	r2,r3,r2
 40093c0:	f800283a 	ret
 40093c4:	0005883a 	mov	r2,zero
 40093c8:	f800283a 	ret
 40093cc:	10c03fcc 	andi	r3,r2,255
 40093d0:	003ff506 	br	40093a8 <__alt_data_end+0xfc0093a8>

040093d4 <__sprint_r.part.0>:
 40093d4:	28801917 	ldw	r2,100(r5)
 40093d8:	defff604 	addi	sp,sp,-40
 40093dc:	dd400515 	stw	r21,20(sp)
 40093e0:	dfc00915 	stw	ra,36(sp)
 40093e4:	df000815 	stw	fp,32(sp)
 40093e8:	ddc00715 	stw	r23,28(sp)
 40093ec:	dd800615 	stw	r22,24(sp)
 40093f0:	dd000415 	stw	r20,16(sp)
 40093f4:	dcc00315 	stw	r19,12(sp)
 40093f8:	dc800215 	stw	r18,8(sp)
 40093fc:	dc400115 	stw	r17,4(sp)
 4009400:	dc000015 	stw	r16,0(sp)
 4009404:	1088000c 	andi	r2,r2,8192
 4009408:	302b883a 	mov	r21,r6
 400940c:	10002e26 	beq	r2,zero,40094c8 <__sprint_r.part.0+0xf4>
 4009410:	30800217 	ldw	r2,8(r6)
 4009414:	35800017 	ldw	r22,0(r6)
 4009418:	10002926 	beq	r2,zero,40094c0 <__sprint_r.part.0+0xec>
 400941c:	2827883a 	mov	r19,r5
 4009420:	2029883a 	mov	r20,r4
 4009424:	b5c00104 	addi	r23,r22,4
 4009428:	04bfffc4 	movi	r18,-1
 400942c:	bc400017 	ldw	r17,0(r23)
 4009430:	b4000017 	ldw	r16,0(r22)
 4009434:	0039883a 	mov	fp,zero
 4009438:	8822d0ba 	srli	r17,r17,2
 400943c:	8800031e 	bne	r17,zero,400944c <__sprint_r.part.0+0x78>
 4009440:	00001806 	br	40094a4 <__sprint_r.part.0+0xd0>
 4009444:	84000104 	addi	r16,r16,4
 4009448:	8f001526 	beq	r17,fp,40094a0 <__sprint_r.part.0+0xcc>
 400944c:	81400017 	ldw	r5,0(r16)
 4009450:	980d883a 	mov	r6,r19
 4009454:	a009883a 	mov	r4,r20
 4009458:	400aec40 	call	400aec4 <_fputwc_r>
 400945c:	e7000044 	addi	fp,fp,1
 4009460:	14bff81e 	bne	r2,r18,4009444 <__alt_data_end+0xfc009444>
 4009464:	9005883a 	mov	r2,r18
 4009468:	a8000215 	stw	zero,8(r21)
 400946c:	a8000115 	stw	zero,4(r21)
 4009470:	dfc00917 	ldw	ra,36(sp)
 4009474:	df000817 	ldw	fp,32(sp)
 4009478:	ddc00717 	ldw	r23,28(sp)
 400947c:	dd800617 	ldw	r22,24(sp)
 4009480:	dd400517 	ldw	r21,20(sp)
 4009484:	dd000417 	ldw	r20,16(sp)
 4009488:	dcc00317 	ldw	r19,12(sp)
 400948c:	dc800217 	ldw	r18,8(sp)
 4009490:	dc400117 	ldw	r17,4(sp)
 4009494:	dc000017 	ldw	r16,0(sp)
 4009498:	dec00a04 	addi	sp,sp,40
 400949c:	f800283a 	ret
 40094a0:	a8800217 	ldw	r2,8(r21)
 40094a4:	8c63883a 	add	r17,r17,r17
 40094a8:	8c63883a 	add	r17,r17,r17
 40094ac:	1445c83a 	sub	r2,r2,r17
 40094b0:	a8800215 	stw	r2,8(r21)
 40094b4:	b5800204 	addi	r22,r22,8
 40094b8:	bdc00204 	addi	r23,r23,8
 40094bc:	103fdb1e 	bne	r2,zero,400942c <__alt_data_end+0xfc00942c>
 40094c0:	0005883a 	mov	r2,zero
 40094c4:	003fe806 	br	4009468 <__alt_data_end+0xfc009468>
 40094c8:	40065340 	call	4006534 <__sfvwrite_r>
 40094cc:	003fe606 	br	4009468 <__alt_data_end+0xfc009468>

040094d0 <__sprint_r>:
 40094d0:	30c00217 	ldw	r3,8(r6)
 40094d4:	18000126 	beq	r3,zero,40094dc <__sprint_r+0xc>
 40094d8:	40093d41 	jmpi	40093d4 <__sprint_r.part.0>
 40094dc:	30000115 	stw	zero,4(r6)
 40094e0:	0005883a 	mov	r2,zero
 40094e4:	f800283a 	ret

040094e8 <___vfiprintf_internal_r>:
 40094e8:	deffca04 	addi	sp,sp,-216
 40094ec:	dd403115 	stw	r21,196(sp)
 40094f0:	dfc03515 	stw	ra,212(sp)
 40094f4:	df003415 	stw	fp,208(sp)
 40094f8:	ddc03315 	stw	r23,204(sp)
 40094fc:	dd803215 	stw	r22,200(sp)
 4009500:	dd003015 	stw	r20,192(sp)
 4009504:	dcc02f15 	stw	r19,188(sp)
 4009508:	dc802e15 	stw	r18,184(sp)
 400950c:	dc402d15 	stw	r17,180(sp)
 4009510:	dc002c15 	stw	r16,176(sp)
 4009514:	d9002115 	stw	r4,132(sp)
 4009518:	d9402015 	stw	r5,128(sp)
 400951c:	d9c02215 	stw	r7,136(sp)
 4009520:	302b883a 	mov	r21,r6
 4009524:	20000226 	beq	r4,zero,4009530 <___vfiprintf_internal_r+0x48>
 4009528:	20800e17 	ldw	r2,56(r4)
 400952c:	1000cf26 	beq	r2,zero,400986c <___vfiprintf_internal_r+0x384>
 4009530:	d8c02017 	ldw	r3,128(sp)
 4009534:	1880030b 	ldhu	r2,12(r3)
 4009538:	10c8000c 	andi	r3,r2,8192
 400953c:	1800071e 	bne	r3,zero,400955c <___vfiprintf_internal_r+0x74>
 4009540:	d9402017 	ldw	r5,128(sp)
 4009544:	00f7ffc4 	movi	r3,-8193
 4009548:	10880014 	ori	r2,r2,8192
 400954c:	29001917 	ldw	r4,100(r5)
 4009550:	2880030d 	sth	r2,12(r5)
 4009554:	20c6703a 	and	r3,r4,r3
 4009558:	28c01915 	stw	r3,100(r5)
 400955c:	10c0020c 	andi	r3,r2,8
 4009560:	1800a526 	beq	r3,zero,40097f8 <___vfiprintf_internal_r+0x310>
 4009564:	d9002017 	ldw	r4,128(sp)
 4009568:	20c00417 	ldw	r3,16(r4)
 400956c:	1800a226 	beq	r3,zero,40097f8 <___vfiprintf_internal_r+0x310>
 4009570:	1080068c 	andi	r2,r2,26
 4009574:	00c00284 	movi	r3,10
 4009578:	10c0a826 	beq	r2,r3,400981c <___vfiprintf_internal_r+0x334>
 400957c:	d9001a04 	addi	r4,sp,104
 4009580:	d94019c4 	addi	r5,sp,103
 4009584:	04810074 	movhi	r18,1025
 4009588:	2145c83a 	sub	r2,r4,r5
 400958c:	948ab804 	addi	r18,r18,10976
 4009590:	d9001e15 	stw	r4,120(sp)
 4009594:	d9401f15 	stw	r5,124(sp)
 4009598:	dec01a15 	stw	sp,104(sp)
 400959c:	d8001c15 	stw	zero,112(sp)
 40095a0:	d8001b15 	stw	zero,108(sp)
 40095a4:	d811883a 	mov	r8,sp
 40095a8:	d8002615 	stw	zero,152(sp)
 40095ac:	d8002415 	stw	zero,144(sp)
 40095b0:	d8802815 	stw	r2,160(sp)
 40095b4:	a82d883a 	mov	r22,r21
 40095b8:	b0800007 	ldb	r2,0(r22)
 40095bc:	10040d26 	beq	r2,zero,400a5f4 <___vfiprintf_internal_r+0x110c>
 40095c0:	00c00944 	movi	r3,37
 40095c4:	b029883a 	mov	r20,r22
 40095c8:	10c0021e 	bne	r2,r3,40095d4 <___vfiprintf_internal_r+0xec>
 40095cc:	00001606 	br	4009628 <___vfiprintf_internal_r+0x140>
 40095d0:	10c00326 	beq	r2,r3,40095e0 <___vfiprintf_internal_r+0xf8>
 40095d4:	a5000044 	addi	r20,r20,1
 40095d8:	a0800007 	ldb	r2,0(r20)
 40095dc:	103ffc1e 	bne	r2,zero,40095d0 <__alt_data_end+0xfc0095d0>
 40095e0:	a5a1c83a 	sub	r16,r20,r22
 40095e4:	80001026 	beq	r16,zero,4009628 <___vfiprintf_internal_r+0x140>
 40095e8:	d8c01c17 	ldw	r3,112(sp)
 40095ec:	d8801b17 	ldw	r2,108(sp)
 40095f0:	45800015 	stw	r22,0(r8)
 40095f4:	80c7883a 	add	r3,r16,r3
 40095f8:	10800044 	addi	r2,r2,1
 40095fc:	44000115 	stw	r16,4(r8)
 4009600:	d8c01c15 	stw	r3,112(sp)
 4009604:	d8801b15 	stw	r2,108(sp)
 4009608:	010001c4 	movi	r4,7
 400960c:	2080750e 	bge	r4,r2,40097e4 <___vfiprintf_internal_r+0x2fc>
 4009610:	1803951e 	bne	r3,zero,400a468 <___vfiprintf_internal_r+0xf80>
 4009614:	d8c02417 	ldw	r3,144(sp)
 4009618:	d8001b15 	stw	zero,108(sp)
 400961c:	d811883a 	mov	r8,sp
 4009620:	1c07883a 	add	r3,r3,r16
 4009624:	d8c02415 	stw	r3,144(sp)
 4009628:	a0800007 	ldb	r2,0(r20)
 400962c:	1002e026 	beq	r2,zero,400a1b0 <___vfiprintf_internal_r+0xcc8>
 4009630:	a5800044 	addi	r22,r20,1
 4009634:	a0c00047 	ldb	r3,1(r20)
 4009638:	d8001d85 	stb	zero,118(sp)
 400963c:	0027883a 	mov	r19,zero
 4009640:	d8002305 	stb	zero,140(sp)
 4009644:	043fffc4 	movi	r16,-1
 4009648:	d8002515 	stw	zero,148(sp)
 400964c:	0023883a 	mov	r17,zero
 4009650:	05001604 	movi	r20,88
 4009654:	05400244 	movi	r21,9
 4009658:	402f883a 	mov	r23,r8
 400965c:	b5800044 	addi	r22,r22,1
 4009660:	18bff804 	addi	r2,r3,-32
 4009664:	a0827736 	bltu	r20,r2,400a044 <___vfiprintf_internal_r+0xb5c>
 4009668:	100490ba 	slli	r2,r2,2
 400966c:	01010074 	movhi	r4,1025
 4009670:	2125a004 	addi	r4,r4,-27008
 4009674:	1105883a 	add	r2,r2,r4
 4009678:	10800017 	ldw	r2,0(r2)
 400967c:	1000683a 	jmp	r2
 4009680:	04009d44 	movi	r16,629
 4009684:	0400a044 	movi	r16,641
 4009688:	0400a044 	movi	r16,641
 400968c:	04009d60 	cmpeqi	r16,zero,629
 4009690:	0400a044 	movi	r16,641
 4009694:	0400a044 	movi	r16,641
 4009698:	0400a044 	movi	r16,641
 400969c:	0400a044 	movi	r16,641
 40096a0:	0400a044 	movi	r16,641
 40096a4:	0400a044 	movi	r16,641
 40096a8:	04009f68 	cmpgeui	r16,zero,637
 40096ac:	04009f8c 	andi	r16,zero,638
 40096b0:	0400a044 	movi	r16,641
 40096b4:	04009884 	movi	r16,610
 40096b8:	04009fa0 	cmpeqi	r16,zero,638
 40096bc:	0400a044 	movi	r16,641
 40096c0:	04009d6c 	andhi	r16,zero,629
 40096c4:	04009d78 	rdprs	r16,zero,629
 40096c8:	04009d78 	rdprs	r16,zero,629
 40096cc:	04009d78 	rdprs	r16,zero,629
 40096d0:	04009d78 	rdprs	r16,zero,629
 40096d4:	04009d78 	rdprs	r16,zero,629
 40096d8:	04009d78 	rdprs	r16,zero,629
 40096dc:	04009d78 	rdprs	r16,zero,629
 40096e0:	04009d78 	rdprs	r16,zero,629
 40096e4:	04009d78 	rdprs	r16,zero,629
 40096e8:	0400a044 	movi	r16,641
 40096ec:	0400a044 	movi	r16,641
 40096f0:	0400a044 	movi	r16,641
 40096f4:	0400a044 	movi	r16,641
 40096f8:	0400a044 	movi	r16,641
 40096fc:	0400a044 	movi	r16,641
 4009700:	0400a044 	movi	r16,641
 4009704:	0400a044 	movi	r16,641
 4009708:	0400a044 	movi	r16,641
 400970c:	0400a044 	movi	r16,641
 4009710:	04009db8 	rdprs	r16,zero,630
 4009714:	0400a044 	movi	r16,641
 4009718:	0400a044 	movi	r16,641
 400971c:	0400a044 	movi	r16,641
 4009720:	0400a044 	movi	r16,641
 4009724:	0400a044 	movi	r16,641
 4009728:	0400a044 	movi	r16,641
 400972c:	0400a044 	movi	r16,641
 4009730:	0400a044 	movi	r16,641
 4009734:	0400a044 	movi	r16,641
 4009738:	0400a044 	movi	r16,641
 400973c:	04009df4 	movhi	r16,631
 4009740:	0400a044 	movi	r16,641
 4009744:	0400a044 	movi	r16,641
 4009748:	0400a044 	movi	r16,641
 400974c:	0400a044 	movi	r16,641
 4009750:	0400a044 	movi	r16,641
 4009754:	04009e50 	cmplti	r16,zero,633
 4009758:	0400a044 	movi	r16,641
 400975c:	0400a044 	movi	r16,641
 4009760:	04009ec4 	movi	r16,635
 4009764:	0400a044 	movi	r16,641
 4009768:	0400a044 	movi	r16,641
 400976c:	0400a044 	movi	r16,641
 4009770:	0400a044 	movi	r16,641
 4009774:	0400a044 	movi	r16,641
 4009778:	0400a044 	movi	r16,641
 400977c:	0400a044 	movi	r16,641
 4009780:	0400a044 	movi	r16,641
 4009784:	0400a044 	movi	r16,641
 4009788:	0400a044 	movi	r16,641
 400978c:	04009c6c 	andhi	r16,zero,625
 4009790:	04009c9c 	xori	r16,zero,626
 4009794:	0400a044 	movi	r16,641
 4009798:	0400a044 	movi	r16,641
 400979c:	0400a044 	movi	r16,641
 40097a0:	04009fec 	andhi	r16,zero,639
 40097a4:	04009c9c 	xori	r16,zero,626
 40097a8:	0400a044 	movi	r16,641
 40097ac:	0400a044 	movi	r16,641
 40097b0:	04009b44 	movi	r16,621
 40097b4:	0400a044 	movi	r16,641
 40097b8:	04009b58 	cmpnei	r16,zero,621
 40097bc:	04009b90 	cmplti	r16,zero,622
 40097c0:	04009890 	cmplti	r16,zero,610
 40097c4:	04009b38 	rdprs	r16,zero,620
 40097c8:	0400a044 	movi	r16,641
 40097cc:	04009f04 	movi	r16,636
 40097d0:	0400a044 	movi	r16,641
 40097d4:	04009f50 	cmplti	r16,zero,637
 40097d8:	0400a044 	movi	r16,641
 40097dc:	0400a044 	movi	r16,641
 40097e0:	04009c14 	movui	r16,624
 40097e4:	42000204 	addi	r8,r8,8
 40097e8:	d8c02417 	ldw	r3,144(sp)
 40097ec:	1c07883a 	add	r3,r3,r16
 40097f0:	d8c02415 	stw	r3,144(sp)
 40097f4:	003f8c06 	br	4009628 <__alt_data_end+0xfc009628>
 40097f8:	d9402017 	ldw	r5,128(sp)
 40097fc:	d9002117 	ldw	r4,132(sp)
 4009800:	40040a40 	call	40040a4 <__swsetup_r>
 4009804:	1003c11e 	bne	r2,zero,400a70c <___vfiprintf_internal_r+0x1224>
 4009808:	d9402017 	ldw	r5,128(sp)
 400980c:	00c00284 	movi	r3,10
 4009810:	2880030b 	ldhu	r2,12(r5)
 4009814:	1080068c 	andi	r2,r2,26
 4009818:	10ff581e 	bne	r2,r3,400957c <__alt_data_end+0xfc00957c>
 400981c:	d8c02017 	ldw	r3,128(sp)
 4009820:	1880038f 	ldh	r2,14(r3)
 4009824:	103f5516 	blt	r2,zero,400957c <__alt_data_end+0xfc00957c>
 4009828:	d9c02217 	ldw	r7,136(sp)
 400982c:	d9002117 	ldw	r4,132(sp)
 4009830:	a80d883a 	mov	r6,r21
 4009834:	180b883a 	mov	r5,r3
 4009838:	400aa100 	call	400aa10 <__sbprintf>
 400983c:	dfc03517 	ldw	ra,212(sp)
 4009840:	df003417 	ldw	fp,208(sp)
 4009844:	ddc03317 	ldw	r23,204(sp)
 4009848:	dd803217 	ldw	r22,200(sp)
 400984c:	dd403117 	ldw	r21,196(sp)
 4009850:	dd003017 	ldw	r20,192(sp)
 4009854:	dcc02f17 	ldw	r19,188(sp)
 4009858:	dc802e17 	ldw	r18,184(sp)
 400985c:	dc402d17 	ldw	r17,180(sp)
 4009860:	dc002c17 	ldw	r16,176(sp)
 4009864:	dec03604 	addi	sp,sp,216
 4009868:	f800283a 	ret
 400986c:	40060b00 	call	40060b0 <__sinit>
 4009870:	003f2f06 	br	4009530 <__alt_data_end+0xfc009530>
 4009874:	d8c02517 	ldw	r3,148(sp)
 4009878:	d8802215 	stw	r2,136(sp)
 400987c:	00c7c83a 	sub	r3,zero,r3
 4009880:	d8c02515 	stw	r3,148(sp)
 4009884:	8c400114 	ori	r17,r17,4
 4009888:	b0c00007 	ldb	r3,0(r22)
 400988c:	003f7306 	br	400965c <__alt_data_end+0xfc00965c>
 4009890:	00800c04 	movi	r2,48
 4009894:	d9402217 	ldw	r5,136(sp)
 4009898:	d8801d05 	stb	r2,116(sp)
 400989c:	00801e04 	movi	r2,120
 40098a0:	d8801d45 	stb	r2,117(sp)
 40098a4:	d8001d85 	stb	zero,118(sp)
 40098a8:	b811883a 	mov	r8,r23
 40098ac:	28c00104 	addi	r3,r5,4
 40098b0:	2cc00017 	ldw	r19,0(r5)
 40098b4:	0029883a 	mov	r20,zero
 40098b8:	88800094 	ori	r2,r17,2
 40098bc:	80032516 	blt	r16,zero,400a554 <___vfiprintf_internal_r+0x106c>
 40098c0:	00bfdfc4 	movi	r2,-129
 40098c4:	88a2703a 	and	r17,r17,r2
 40098c8:	d8c02215 	stw	r3,136(sp)
 40098cc:	8c400094 	ori	r17,r17,2
 40098d0:	98032a1e 	bne	r19,zero,400a57c <___vfiprintf_internal_r+0x1094>
 40098d4:	00810074 	movhi	r2,1025
 40098d8:	108a5704 	addi	r2,r2,10588
 40098dc:	d8802615 	stw	r2,152(sp)
 40098e0:	002b883a 	mov	r21,zero
 40098e4:	8001741e 	bne	r16,zero,4009eb8 <___vfiprintf_internal_r+0x9d0>
 40098e8:	0021883a 	mov	r16,zero
 40098ec:	0029883a 	mov	r20,zero
 40098f0:	ddc01a04 	addi	r23,sp,104
 40098f4:	8027883a 	mov	r19,r16
 40098f8:	8500010e 	bge	r16,r20,4009900 <___vfiprintf_internal_r+0x418>
 40098fc:	a027883a 	mov	r19,r20
 4009900:	ad403fcc 	andi	r21,r21,255
 4009904:	ad40201c 	xori	r21,r21,128
 4009908:	ad7fe004 	addi	r21,r21,-128
 400990c:	a8000126 	beq	r21,zero,4009914 <___vfiprintf_internal_r+0x42c>
 4009910:	9cc00044 	addi	r19,r19,1
 4009914:	89c0008c 	andi	r7,r17,2
 4009918:	38000126 	beq	r7,zero,4009920 <___vfiprintf_internal_r+0x438>
 400991c:	9cc00084 	addi	r19,r19,2
 4009920:	88c0210c 	andi	r3,r17,132
 4009924:	1801dd1e 	bne	r3,zero,400a09c <___vfiprintf_internal_r+0xbb4>
 4009928:	d9402517 	ldw	r5,148(sp)
 400992c:	2cebc83a 	sub	r21,r5,r19
 4009930:	0541da0e 	bge	zero,r21,400a09c <___vfiprintf_internal_r+0xbb4>
 4009934:	07000404 	movi	fp,16
 4009938:	d8801c17 	ldw	r2,112(sp)
 400993c:	e543be0e 	bge	fp,r21,400a838 <___vfiprintf_internal_r+0x1350>
 4009940:	01410074 	movhi	r5,1025
 4009944:	294abc04 	addi	r5,r5,10992
 4009948:	dc002715 	stw	r16,156(sp)
 400994c:	d9801b17 	ldw	r6,108(sp)
 4009950:	a821883a 	mov	r16,r21
 4009954:	d9402315 	stw	r5,140(sp)
 4009958:	028001c4 	movi	r10,7
 400995c:	d9c02915 	stw	r7,164(sp)
 4009960:	182b883a 	mov	r21,r3
 4009964:	00000506 	br	400997c <___vfiprintf_internal_r+0x494>
 4009968:	31000084 	addi	r4,r6,2
 400996c:	42000204 	addi	r8,r8,8
 4009970:	180d883a 	mov	r6,r3
 4009974:	843ffc04 	addi	r16,r16,-16
 4009978:	e4000f0e 	bge	fp,r16,40099b8 <___vfiprintf_internal_r+0x4d0>
 400997c:	01010074 	movhi	r4,1025
 4009980:	10800404 	addi	r2,r2,16
 4009984:	30c00044 	addi	r3,r6,1
 4009988:	210abc04 	addi	r4,r4,10992
 400998c:	41000015 	stw	r4,0(r8)
 4009990:	47000115 	stw	fp,4(r8)
 4009994:	d8801c15 	stw	r2,112(sp)
 4009998:	d8c01b15 	stw	r3,108(sp)
 400999c:	50fff20e 	bge	r10,r3,4009968 <__alt_data_end+0xfc009968>
 40099a0:	1001b21e 	bne	r2,zero,400a06c <___vfiprintf_internal_r+0xb84>
 40099a4:	843ffc04 	addi	r16,r16,-16
 40099a8:	000d883a 	mov	r6,zero
 40099ac:	01000044 	movi	r4,1
 40099b0:	d811883a 	mov	r8,sp
 40099b4:	e43ff116 	blt	fp,r16,400997c <__alt_data_end+0xfc00997c>
 40099b8:	a807883a 	mov	r3,r21
 40099bc:	d9c02917 	ldw	r7,164(sp)
 40099c0:	802b883a 	mov	r21,r16
 40099c4:	dc002717 	ldw	r16,156(sp)
 40099c8:	d9402317 	ldw	r5,140(sp)
 40099cc:	a885883a 	add	r2,r21,r2
 40099d0:	45400115 	stw	r21,4(r8)
 40099d4:	41400015 	stw	r5,0(r8)
 40099d8:	d8801c15 	stw	r2,112(sp)
 40099dc:	d9001b15 	stw	r4,108(sp)
 40099e0:	014001c4 	movi	r5,7
 40099e4:	29026216 	blt	r5,r4,400a370 <___vfiprintf_internal_r+0xe88>
 40099e8:	d9801d87 	ldb	r6,118(sp)
 40099ec:	42000204 	addi	r8,r8,8
 40099f0:	21400044 	addi	r5,r4,1
 40099f4:	3001ae1e 	bne	r6,zero,400a0b0 <___vfiprintf_internal_r+0xbc8>
 40099f8:	3801bb26 	beq	r7,zero,400a0e8 <___vfiprintf_internal_r+0xc00>
 40099fc:	d9001d04 	addi	r4,sp,116
 4009a00:	10800084 	addi	r2,r2,2
 4009a04:	41000015 	stw	r4,0(r8)
 4009a08:	01000084 	movi	r4,2
 4009a0c:	41000115 	stw	r4,4(r8)
 4009a10:	d8801c15 	stw	r2,112(sp)
 4009a14:	d9401b15 	stw	r5,108(sp)
 4009a18:	010001c4 	movi	r4,7
 4009a1c:	2142680e 	bge	r4,r5,400a3c0 <___vfiprintf_internal_r+0xed8>
 4009a20:	1002b11e 	bne	r2,zero,400a4e8 <___vfiprintf_internal_r+0x1000>
 4009a24:	01802004 	movi	r6,128
 4009a28:	01400044 	movi	r5,1
 4009a2c:	0009883a 	mov	r4,zero
 4009a30:	d811883a 	mov	r8,sp
 4009a34:	1981ae1e 	bne	r3,r6,400a0f0 <___vfiprintf_internal_r+0xc08>
 4009a38:	d8c02517 	ldw	r3,148(sp)
 4009a3c:	1cf9c83a 	sub	fp,r3,r19
 4009a40:	0701ab0e 	bge	zero,fp,400a0f0 <___vfiprintf_internal_r+0xc08>
 4009a44:	05400404 	movi	r21,16
 4009a48:	af03a90e 	bge	r21,fp,400a8f0 <___vfiprintf_internal_r+0x1408>
 4009a4c:	01410074 	movhi	r5,1025
 4009a50:	294ab804 	addi	r5,r5,10976
 4009a54:	d9402315 	stw	r5,140(sp)
 4009a58:	01c001c4 	movi	r7,7
 4009a5c:	00000506 	br	4009a74 <___vfiprintf_internal_r+0x58c>
 4009a60:	21800084 	addi	r6,r4,2
 4009a64:	42000204 	addi	r8,r8,8
 4009a68:	1809883a 	mov	r4,r3
 4009a6c:	e73ffc04 	addi	fp,fp,-16
 4009a70:	af000d0e 	bge	r21,fp,4009aa8 <___vfiprintf_internal_r+0x5c0>
 4009a74:	10800404 	addi	r2,r2,16
 4009a78:	20c00044 	addi	r3,r4,1
 4009a7c:	44800015 	stw	r18,0(r8)
 4009a80:	45400115 	stw	r21,4(r8)
 4009a84:	d8801c15 	stw	r2,112(sp)
 4009a88:	d8c01b15 	stw	r3,108(sp)
 4009a8c:	38fff40e 	bge	r7,r3,4009a60 <__alt_data_end+0xfc009a60>
 4009a90:	10022b1e 	bne	r2,zero,400a340 <___vfiprintf_internal_r+0xe58>
 4009a94:	e73ffc04 	addi	fp,fp,-16
 4009a98:	01800044 	movi	r6,1
 4009a9c:	0009883a 	mov	r4,zero
 4009aa0:	d811883a 	mov	r8,sp
 4009aa4:	af3ff316 	blt	r21,fp,4009a74 <__alt_data_end+0xfc009a74>
 4009aa8:	d8c02317 	ldw	r3,140(sp)
 4009aac:	1705883a 	add	r2,r2,fp
 4009ab0:	47000115 	stw	fp,4(r8)
 4009ab4:	40c00015 	stw	r3,0(r8)
 4009ab8:	d8801c15 	stw	r2,112(sp)
 4009abc:	d9801b15 	stw	r6,108(sp)
 4009ac0:	00c001c4 	movi	r3,7
 4009ac4:	19829416 	blt	r3,r6,400a518 <___vfiprintf_internal_r+0x1030>
 4009ac8:	8521c83a 	sub	r16,r16,r20
 4009acc:	42000204 	addi	r8,r8,8
 4009ad0:	31400044 	addi	r5,r6,1
 4009ad4:	3009883a 	mov	r4,r6
 4009ad8:	04018716 	blt	zero,r16,400a0f8 <___vfiprintf_internal_r+0xc10>
 4009adc:	a085883a 	add	r2,r20,r2
 4009ae0:	45c00015 	stw	r23,0(r8)
 4009ae4:	45000115 	stw	r20,4(r8)
 4009ae8:	d8801c15 	stw	r2,112(sp)
 4009aec:	d9401b15 	stw	r5,108(sp)
 4009af0:	00c001c4 	movi	r3,7
 4009af4:	1941c20e 	bge	r3,r5,400a200 <___vfiprintf_internal_r+0xd18>
 4009af8:	1002531e 	bne	r2,zero,400a448 <___vfiprintf_internal_r+0xf60>
 4009afc:	d8001b15 	stw	zero,108(sp)
 4009b00:	8c40010c 	andi	r17,r17,4
 4009b04:	88023226 	beq	r17,zero,400a3d0 <___vfiprintf_internal_r+0xee8>
 4009b08:	d9002517 	ldw	r4,148(sp)
 4009b0c:	24e3c83a 	sub	r17,r4,r19
 4009b10:	04432916 	blt	zero,r17,400a7b8 <___vfiprintf_internal_r+0x12d0>
 4009b14:	d8802517 	ldw	r2,148(sp)
 4009b18:	14c0010e 	bge	r2,r19,4009b20 <___vfiprintf_internal_r+0x638>
 4009b1c:	9805883a 	mov	r2,r19
 4009b20:	d8c02417 	ldw	r3,144(sp)
 4009b24:	1887883a 	add	r3,r3,r2
 4009b28:	d8c02415 	stw	r3,144(sp)
 4009b2c:	d8001b15 	stw	zero,108(sp)
 4009b30:	d811883a 	mov	r8,sp
 4009b34:	003ea006 	br	40095b8 <__alt_data_end+0xfc0095b8>
 4009b38:	8c400814 	ori	r17,r17,32
 4009b3c:	b0c00007 	ldb	r3,0(r22)
 4009b40:	003ec606 	br	400965c <__alt_data_end+0xfc00965c>
 4009b44:	b0c00007 	ldb	r3,0(r22)
 4009b48:	00801b04 	movi	r2,108
 4009b4c:	18832026 	beq	r3,r2,400a7d0 <___vfiprintf_internal_r+0x12e8>
 4009b50:	8c400414 	ori	r17,r17,16
 4009b54:	003ec106 	br	400965c <__alt_data_end+0xfc00965c>
 4009b58:	9cc03fcc 	andi	r19,r19,255
 4009b5c:	b811883a 	mov	r8,r23
 4009b60:	9803981e 	bne	r19,zero,400a9c4 <___vfiprintf_internal_r+0x14dc>
 4009b64:	8880080c 	andi	r2,r17,32
 4009b68:	1002be26 	beq	r2,zero,400a664 <___vfiprintf_internal_r+0x117c>
 4009b6c:	d9002217 	ldw	r4,136(sp)
 4009b70:	d9402417 	ldw	r5,144(sp)
 4009b74:	20800017 	ldw	r2,0(r4)
 4009b78:	2807d7fa 	srai	r3,r5,31
 4009b7c:	21000104 	addi	r4,r4,4
 4009b80:	d9002215 	stw	r4,136(sp)
 4009b84:	11400015 	stw	r5,0(r2)
 4009b88:	10c00115 	stw	r3,4(r2)
 4009b8c:	003e8a06 	br	40095b8 <__alt_data_end+0xfc0095b8>
 4009b90:	9cc03fcc 	andi	r19,r19,255
 4009b94:	b811883a 	mov	r8,r23
 4009b98:	9803871e 	bne	r19,zero,400a9b8 <___vfiprintf_internal_r+0x14d0>
 4009b9c:	8880080c 	andi	r2,r17,32
 4009ba0:	10009a26 	beq	r2,zero,4009e0c <___vfiprintf_internal_r+0x924>
 4009ba4:	d9002217 	ldw	r4,136(sp)
 4009ba8:	d8001d85 	stb	zero,118(sp)
 4009bac:	20800204 	addi	r2,r4,8
 4009bb0:	24c00017 	ldw	r19,0(r4)
 4009bb4:	25000117 	ldw	r20,4(r4)
 4009bb8:	8002a416 	blt	r16,zero,400a64c <___vfiprintf_internal_r+0x1164>
 4009bbc:	013fdfc4 	movi	r4,-129
 4009bc0:	9d06b03a 	or	r3,r19,r20
 4009bc4:	d8802215 	stw	r2,136(sp)
 4009bc8:	8922703a 	and	r17,r17,r4
 4009bcc:	18009b26 	beq	r3,zero,4009e3c <___vfiprintf_internal_r+0x954>
 4009bd0:	002b883a 	mov	r21,zero
 4009bd4:	ddc01a04 	addi	r23,sp,104
 4009bd8:	9806d0fa 	srli	r3,r19,3
 4009bdc:	a008977a 	slli	r4,r20,29
 4009be0:	a028d0fa 	srli	r20,r20,3
 4009be4:	9cc001cc 	andi	r19,r19,7
 4009be8:	98800c04 	addi	r2,r19,48
 4009bec:	bdffffc4 	addi	r23,r23,-1
 4009bf0:	20e6b03a 	or	r19,r4,r3
 4009bf4:	b8800005 	stb	r2,0(r23)
 4009bf8:	9d06b03a 	or	r3,r19,r20
 4009bfc:	183ff61e 	bne	r3,zero,4009bd8 <__alt_data_end+0xfc009bd8>
 4009c00:	88c0004c 	andi	r3,r17,1
 4009c04:	18021f1e 	bne	r3,zero,400a484 <___vfiprintf_internal_r+0xf9c>
 4009c08:	d9401e17 	ldw	r5,120(sp)
 4009c0c:	2de9c83a 	sub	r20,r5,r23
 4009c10:	003f3806 	br	40098f4 <__alt_data_end+0xfc0098f4>
 4009c14:	9cc03fcc 	andi	r19,r19,255
 4009c18:	b811883a 	mov	r8,r23
 4009c1c:	98034f1e 	bne	r19,zero,400a95c <___vfiprintf_internal_r+0x1474>
 4009c20:	00810074 	movhi	r2,1025
 4009c24:	108a5704 	addi	r2,r2,10588
 4009c28:	d8802615 	stw	r2,152(sp)
 4009c2c:	8880080c 	andi	r2,r17,32
 4009c30:	1000ac26 	beq	r2,zero,4009ee4 <___vfiprintf_internal_r+0x9fc>
 4009c34:	d9002217 	ldw	r4,136(sp)
 4009c38:	24c00017 	ldw	r19,0(r4)
 4009c3c:	25000117 	ldw	r20,4(r4)
 4009c40:	21000204 	addi	r4,r4,8
 4009c44:	d9002215 	stw	r4,136(sp)
 4009c48:	8880004c 	andi	r2,r17,1
 4009c4c:	1001e726 	beq	r2,zero,400a3ec <___vfiprintf_internal_r+0xf04>
 4009c50:	9d04b03a 	or	r2,r19,r20
 4009c54:	10025c1e 	bne	r2,zero,400a5c8 <___vfiprintf_internal_r+0x10e0>
 4009c58:	d8001d85 	stb	zero,118(sp)
 4009c5c:	80024416 	blt	r16,zero,400a570 <___vfiprintf_internal_r+0x1088>
 4009c60:	00bfdfc4 	movi	r2,-129
 4009c64:	88a2703a 	and	r17,r17,r2
 4009c68:	003f1d06 	br	40098e0 <__alt_data_end+0xfc0098e0>
 4009c6c:	d8c02217 	ldw	r3,136(sp)
 4009c70:	04c00044 	movi	r19,1
 4009c74:	b811883a 	mov	r8,r23
 4009c78:	18800017 	ldw	r2,0(r3)
 4009c7c:	18c00104 	addi	r3,r3,4
 4009c80:	d8001d85 	stb	zero,118(sp)
 4009c84:	d8801005 	stb	r2,64(sp)
 4009c88:	d8c02215 	stw	r3,136(sp)
 4009c8c:	9829883a 	mov	r20,r19
 4009c90:	ddc01004 	addi	r23,sp,64
 4009c94:	0021883a 	mov	r16,zero
 4009c98:	003f1e06 	br	4009914 <__alt_data_end+0xfc009914>
 4009c9c:	9cc03fcc 	andi	r19,r19,255
 4009ca0:	b811883a 	mov	r8,r23
 4009ca4:	9803331e 	bne	r19,zero,400a974 <___vfiprintf_internal_r+0x148c>
 4009ca8:	8880080c 	andi	r2,r17,32
 4009cac:	10004826 	beq	r2,zero,4009dd0 <___vfiprintf_internal_r+0x8e8>
 4009cb0:	d9002217 	ldw	r4,136(sp)
 4009cb4:	20800117 	ldw	r2,4(r4)
 4009cb8:	24c00017 	ldw	r19,0(r4)
 4009cbc:	21000204 	addi	r4,r4,8
 4009cc0:	d9002215 	stw	r4,136(sp)
 4009cc4:	1029883a 	mov	r20,r2
 4009cc8:	10024c16 	blt	r2,zero,400a5fc <___vfiprintf_internal_r+0x1114>
 4009ccc:	dd401d83 	ldbu	r21,118(sp)
 4009cd0:	80007116 	blt	r16,zero,4009e98 <___vfiprintf_internal_r+0x9b0>
 4009cd4:	00ffdfc4 	movi	r3,-129
 4009cd8:	9d04b03a 	or	r2,r19,r20
 4009cdc:	88e2703a 	and	r17,r17,r3
 4009ce0:	1000d126 	beq	r2,zero,400a028 <___vfiprintf_internal_r+0xb40>
 4009ce4:	a0023526 	beq	r20,zero,400a5bc <___vfiprintf_internal_r+0x10d4>
 4009ce8:	ddc01a04 	addi	r23,sp,104
 4009cec:	4039883a 	mov	fp,r8
 4009cf0:	9809883a 	mov	r4,r19
 4009cf4:	a00b883a 	mov	r5,r20
 4009cf8:	01800284 	movi	r6,10
 4009cfc:	000f883a 	mov	r7,zero
 4009d00:	400ba140 	call	400ba14 <__umoddi3>
 4009d04:	10800c04 	addi	r2,r2,48
 4009d08:	bdffffc4 	addi	r23,r23,-1
 4009d0c:	9809883a 	mov	r4,r19
 4009d10:	a00b883a 	mov	r5,r20
 4009d14:	b8800005 	stb	r2,0(r23)
 4009d18:	01800284 	movi	r6,10
 4009d1c:	000f883a 	mov	r7,zero
 4009d20:	400b4180 	call	400b418 <__udivdi3>
 4009d24:	1027883a 	mov	r19,r2
 4009d28:	10c4b03a 	or	r2,r2,r3
 4009d2c:	1829883a 	mov	r20,r3
 4009d30:	103fef1e 	bne	r2,zero,4009cf0 <__alt_data_end+0xfc009cf0>
 4009d34:	d9001e17 	ldw	r4,120(sp)
 4009d38:	e011883a 	mov	r8,fp
 4009d3c:	25e9c83a 	sub	r20,r4,r23
 4009d40:	003eec06 	br	40098f4 <__alt_data_end+0xfc0098f4>
 4009d44:	d8802307 	ldb	r2,140(sp)
 4009d48:	1002361e 	bne	r2,zero,400a624 <___vfiprintf_internal_r+0x113c>
 4009d4c:	00c00804 	movi	r3,32
 4009d50:	d8c02305 	stb	r3,140(sp)
 4009d54:	04c00044 	movi	r19,1
 4009d58:	b0c00007 	ldb	r3,0(r22)
 4009d5c:	003e3f06 	br	400965c <__alt_data_end+0xfc00965c>
 4009d60:	8c400054 	ori	r17,r17,1
 4009d64:	b0c00007 	ldb	r3,0(r22)
 4009d68:	003e3c06 	br	400965c <__alt_data_end+0xfc00965c>
 4009d6c:	8c402014 	ori	r17,r17,128
 4009d70:	b0c00007 	ldb	r3,0(r22)
 4009d74:	003e3906 	br	400965c <__alt_data_end+0xfc00965c>
 4009d78:	dc002715 	stw	r16,156(sp)
 4009d7c:	d8002515 	stw	zero,148(sp)
 4009d80:	1f3ff404 	addi	fp,r3,-48
 4009d84:	0009883a 	mov	r4,zero
 4009d88:	b021883a 	mov	r16,r22
 4009d8c:	01400284 	movi	r5,10
 4009d90:	4000bd80 	call	4000bd8 <__mulsi3>
 4009d94:	80c00007 	ldb	r3,0(r16)
 4009d98:	e089883a 	add	r4,fp,r2
 4009d9c:	b5800044 	addi	r22,r22,1
 4009da0:	1f3ff404 	addi	fp,r3,-48
 4009da4:	b021883a 	mov	r16,r22
 4009da8:	af3ff82e 	bgeu	r21,fp,4009d8c <__alt_data_end+0xfc009d8c>
 4009dac:	d9002515 	stw	r4,148(sp)
 4009db0:	dc002717 	ldw	r16,156(sp)
 4009db4:	003e2a06 	br	4009660 <__alt_data_end+0xfc009660>
 4009db8:	9cc03fcc 	andi	r19,r19,255
 4009dbc:	b811883a 	mov	r8,r23
 4009dc0:	9802e91e 	bne	r19,zero,400a968 <___vfiprintf_internal_r+0x1480>
 4009dc4:	8c400414 	ori	r17,r17,16
 4009dc8:	8880080c 	andi	r2,r17,32
 4009dcc:	103fb81e 	bne	r2,zero,4009cb0 <__alt_data_end+0xfc009cb0>
 4009dd0:	8880040c 	andi	r2,r17,16
 4009dd4:	10022e26 	beq	r2,zero,400a690 <___vfiprintf_internal_r+0x11a8>
 4009dd8:	d9402217 	ldw	r5,136(sp)
 4009ddc:	2cc00017 	ldw	r19,0(r5)
 4009de0:	29400104 	addi	r5,r5,4
 4009de4:	d9402215 	stw	r5,136(sp)
 4009de8:	9829d7fa 	srai	r20,r19,31
 4009dec:	a005883a 	mov	r2,r20
 4009df0:	003fb506 	br	4009cc8 <__alt_data_end+0xfc009cc8>
 4009df4:	9cc03fcc 	andi	r19,r19,255
 4009df8:	b811883a 	mov	r8,r23
 4009dfc:	9802fa1e 	bne	r19,zero,400a9e8 <___vfiprintf_internal_r+0x1500>
 4009e00:	8c400414 	ori	r17,r17,16
 4009e04:	8880080c 	andi	r2,r17,32
 4009e08:	103f661e 	bne	r2,zero,4009ba4 <__alt_data_end+0xfc009ba4>
 4009e0c:	8880040c 	andi	r2,r17,16
 4009e10:	10020626 	beq	r2,zero,400a62c <___vfiprintf_internal_r+0x1144>
 4009e14:	d9402217 	ldw	r5,136(sp)
 4009e18:	d8001d85 	stb	zero,118(sp)
 4009e1c:	0029883a 	mov	r20,zero
 4009e20:	28800104 	addi	r2,r5,4
 4009e24:	2cc00017 	ldw	r19,0(r5)
 4009e28:	80020816 	blt	r16,zero,400a64c <___vfiprintf_internal_r+0x1164>
 4009e2c:	00ffdfc4 	movi	r3,-129
 4009e30:	d8802215 	stw	r2,136(sp)
 4009e34:	88e2703a 	and	r17,r17,r3
 4009e38:	983f651e 	bne	r19,zero,4009bd0 <__alt_data_end+0xfc009bd0>
 4009e3c:	002b883a 	mov	r21,zero
 4009e40:	8002cf26 	beq	r16,zero,400a980 <___vfiprintf_internal_r+0x1498>
 4009e44:	0027883a 	mov	r19,zero
 4009e48:	0029883a 	mov	r20,zero
 4009e4c:	003f6106 	br	4009bd4 <__alt_data_end+0xfc009bd4>
 4009e50:	9cc03fcc 	andi	r19,r19,255
 4009e54:	b811883a 	mov	r8,r23
 4009e58:	9802e01e 	bne	r19,zero,400a9dc <___vfiprintf_internal_r+0x14f4>
 4009e5c:	8c400414 	ori	r17,r17,16
 4009e60:	8880080c 	andi	r2,r17,32
 4009e64:	1000641e 	bne	r2,zero,4009ff8 <___vfiprintf_internal_r+0xb10>
 4009e68:	8880040c 	andi	r2,r17,16
 4009e6c:	1001c81e 	bne	r2,zero,400a590 <___vfiprintf_internal_r+0x10a8>
 4009e70:	8880100c 	andi	r2,r17,64
 4009e74:	d8001d85 	stb	zero,118(sp)
 4009e78:	1002281e 	bne	r2,zero,400a71c <___vfiprintf_internal_r+0x1234>
 4009e7c:	d9002217 	ldw	r4,136(sp)
 4009e80:	0029883a 	mov	r20,zero
 4009e84:	20800104 	addi	r2,r4,4
 4009e88:	24c00017 	ldw	r19,0(r4)
 4009e8c:	8001c60e 	bge	r16,zero,400a5a8 <___vfiprintf_internal_r+0x10c0>
 4009e90:	d8802215 	stw	r2,136(sp)
 4009e94:	002b883a 	mov	r21,zero
 4009e98:	9d04b03a 	or	r2,r19,r20
 4009e9c:	103f911e 	bne	r2,zero,4009ce4 <__alt_data_end+0xfc009ce4>
 4009ea0:	00800044 	movi	r2,1
 4009ea4:	10803fcc 	andi	r2,r2,255
 4009ea8:	00c00044 	movi	r3,1
 4009eac:	10c05f26 	beq	r2,r3,400a02c <___vfiprintf_internal_r+0xb44>
 4009eb0:	00c00084 	movi	r3,2
 4009eb4:	10ffe31e 	bne	r2,r3,4009e44 <__alt_data_end+0xfc009e44>
 4009eb8:	0027883a 	mov	r19,zero
 4009ebc:	0029883a 	mov	r20,zero
 4009ec0:	00015106 	br	400a408 <___vfiprintf_internal_r+0xf20>
 4009ec4:	9cc03fcc 	andi	r19,r19,255
 4009ec8:	b811883a 	mov	r8,r23
 4009ecc:	9802c01e 	bne	r19,zero,400a9d0 <___vfiprintf_internal_r+0x14e8>
 4009ed0:	01410074 	movhi	r5,1025
 4009ed4:	294a5204 	addi	r5,r5,10568
 4009ed8:	d9402615 	stw	r5,152(sp)
 4009edc:	8880080c 	andi	r2,r17,32
 4009ee0:	103f541e 	bne	r2,zero,4009c34 <__alt_data_end+0xfc009c34>
 4009ee4:	8880040c 	andi	r2,r17,16
 4009ee8:	1001f226 	beq	r2,zero,400a6b4 <___vfiprintf_internal_r+0x11cc>
 4009eec:	d9402217 	ldw	r5,136(sp)
 4009ef0:	0029883a 	mov	r20,zero
 4009ef4:	2cc00017 	ldw	r19,0(r5)
 4009ef8:	29400104 	addi	r5,r5,4
 4009efc:	d9402215 	stw	r5,136(sp)
 4009f00:	003f5106 	br	4009c48 <__alt_data_end+0xfc009c48>
 4009f04:	d8c02217 	ldw	r3,136(sp)
 4009f08:	b811883a 	mov	r8,r23
 4009f0c:	d8001d85 	stb	zero,118(sp)
 4009f10:	1dc00017 	ldw	r23,0(r3)
 4009f14:	1f000104 	addi	fp,r3,4
 4009f18:	b8025926 	beq	r23,zero,400a880 <___vfiprintf_internal_r+0x1398>
 4009f1c:	80023316 	blt	r16,zero,400a7ec <___vfiprintf_internal_r+0x1304>
 4009f20:	800d883a 	mov	r6,r16
 4009f24:	000b883a 	mov	r5,zero
 4009f28:	b809883a 	mov	r4,r23
 4009f2c:	da002a15 	stw	r8,168(sp)
 4009f30:	40076280 	call	4007628 <memchr>
 4009f34:	da002a17 	ldw	r8,168(sp)
 4009f38:	10026826 	beq	r2,zero,400a8dc <___vfiprintf_internal_r+0x13f4>
 4009f3c:	15e9c83a 	sub	r20,r2,r23
 4009f40:	dd401d83 	ldbu	r21,118(sp)
 4009f44:	df002215 	stw	fp,136(sp)
 4009f48:	0021883a 	mov	r16,zero
 4009f4c:	003e6906 	br	40098f4 <__alt_data_end+0xfc0098f4>
 4009f50:	9cc03fcc 	andi	r19,r19,255
 4009f54:	b811883a 	mov	r8,r23
 4009f58:	983fc126 	beq	r19,zero,4009e60 <__alt_data_end+0xfc009e60>
 4009f5c:	d8c02303 	ldbu	r3,140(sp)
 4009f60:	d8c01d85 	stb	r3,118(sp)
 4009f64:	003fbe06 	br	4009e60 <__alt_data_end+0xfc009e60>
 4009f68:	d9002217 	ldw	r4,136(sp)
 4009f6c:	d9402217 	ldw	r5,136(sp)
 4009f70:	21000017 	ldw	r4,0(r4)
 4009f74:	28800104 	addi	r2,r5,4
 4009f78:	d9002515 	stw	r4,148(sp)
 4009f7c:	203e3d16 	blt	r4,zero,4009874 <__alt_data_end+0xfc009874>
 4009f80:	d8802215 	stw	r2,136(sp)
 4009f84:	b0c00007 	ldb	r3,0(r22)
 4009f88:	003db406 	br	400965c <__alt_data_end+0xfc00965c>
 4009f8c:	00c00ac4 	movi	r3,43
 4009f90:	d8c02305 	stb	r3,140(sp)
 4009f94:	04c00044 	movi	r19,1
 4009f98:	b0c00007 	ldb	r3,0(r22)
 4009f9c:	003daf06 	br	400965c <__alt_data_end+0xfc00965c>
 4009fa0:	b0c00007 	ldb	r3,0(r22)
 4009fa4:	01000a84 	movi	r4,42
 4009fa8:	b4000044 	addi	r16,r22,1
 4009fac:	19025e26 	beq	r3,r4,400a928 <___vfiprintf_internal_r+0x1440>
 4009fb0:	1f3ff404 	addi	fp,r3,-48
 4009fb4:	0009883a 	mov	r4,zero
 4009fb8:	af025236 	bltu	r21,fp,400a904 <___vfiprintf_internal_r+0x141c>
 4009fbc:	01400284 	movi	r5,10
 4009fc0:	4000bd80 	call	4000bd8 <__mulsi3>
 4009fc4:	80c00007 	ldb	r3,0(r16)
 4009fc8:	1709883a 	add	r4,r2,fp
 4009fcc:	85800044 	addi	r22,r16,1
 4009fd0:	1f3ff404 	addi	fp,r3,-48
 4009fd4:	b021883a 	mov	r16,r22
 4009fd8:	af3ff82e 	bgeu	r21,fp,4009fbc <__alt_data_end+0xfc009fbc>
 4009fdc:	2021883a 	mov	r16,r4
 4009fe0:	203d9f0e 	bge	r4,zero,4009660 <__alt_data_end+0xfc009660>
 4009fe4:	043fffc4 	movi	r16,-1
 4009fe8:	003d9d06 	br	4009660 <__alt_data_end+0xfc009660>
 4009fec:	8c401014 	ori	r17,r17,64
 4009ff0:	b0c00007 	ldb	r3,0(r22)
 4009ff4:	003d9906 	br	400965c <__alt_data_end+0xfc00965c>
 4009ff8:	d9002217 	ldw	r4,136(sp)
 4009ffc:	d8001d85 	stb	zero,118(sp)
 400a000:	20c00204 	addi	r3,r4,8
 400a004:	24c00017 	ldw	r19,0(r4)
 400a008:	25000117 	ldw	r20,4(r4)
 400a00c:	8001e716 	blt	r16,zero,400a7ac <___vfiprintf_internal_r+0x12c4>
 400a010:	013fdfc4 	movi	r4,-129
 400a014:	9d04b03a 	or	r2,r19,r20
 400a018:	d8c02215 	stw	r3,136(sp)
 400a01c:	8922703a 	and	r17,r17,r4
 400a020:	002b883a 	mov	r21,zero
 400a024:	103f2f1e 	bne	r2,zero,4009ce4 <__alt_data_end+0xfc009ce4>
 400a028:	803e2f26 	beq	r16,zero,40098e8 <__alt_data_end+0xfc0098e8>
 400a02c:	0027883a 	mov	r19,zero
 400a030:	9cc00c04 	addi	r19,r19,48
 400a034:	dcc019c5 	stb	r19,103(sp)
 400a038:	dd002817 	ldw	r20,160(sp)
 400a03c:	ddc019c4 	addi	r23,sp,103
 400a040:	003e2c06 	br	40098f4 <__alt_data_end+0xfc0098f4>
 400a044:	9cc03fcc 	andi	r19,r19,255
 400a048:	b811883a 	mov	r8,r23
 400a04c:	9802571e 	bne	r19,zero,400a9ac <___vfiprintf_internal_r+0x14c4>
 400a050:	18005726 	beq	r3,zero,400a1b0 <___vfiprintf_internal_r+0xcc8>
 400a054:	04c00044 	movi	r19,1
 400a058:	d8c01005 	stb	r3,64(sp)
 400a05c:	d8001d85 	stb	zero,118(sp)
 400a060:	9829883a 	mov	r20,r19
 400a064:	ddc01004 	addi	r23,sp,64
 400a068:	003f0a06 	br	4009c94 <__alt_data_end+0xfc009c94>
 400a06c:	d9402017 	ldw	r5,128(sp)
 400a070:	d9002117 	ldw	r4,132(sp)
 400a074:	d9801a04 	addi	r6,sp,104
 400a078:	da802a15 	stw	r10,168(sp)
 400a07c:	40093d40 	call	40093d4 <__sprint_r.part.0>
 400a080:	da802a17 	ldw	r10,168(sp)
 400a084:	1000501e 	bne	r2,zero,400a1c8 <___vfiprintf_internal_r+0xce0>
 400a088:	d9801b17 	ldw	r6,108(sp)
 400a08c:	d8801c17 	ldw	r2,112(sp)
 400a090:	d811883a 	mov	r8,sp
 400a094:	31000044 	addi	r4,r6,1
 400a098:	003e3606 	br	4009974 <__alt_data_end+0xfc009974>
 400a09c:	d9001b17 	ldw	r4,108(sp)
 400a0a0:	d8801c17 	ldw	r2,112(sp)
 400a0a4:	21400044 	addi	r5,r4,1
 400a0a8:	d9801d87 	ldb	r6,118(sp)
 400a0ac:	303e5226 	beq	r6,zero,40099f8 <__alt_data_end+0xfc0099f8>
 400a0b0:	01800044 	movi	r6,1
 400a0b4:	d9001d84 	addi	r4,sp,118
 400a0b8:	1185883a 	add	r2,r2,r6
 400a0bc:	41000015 	stw	r4,0(r8)
 400a0c0:	41800115 	stw	r6,4(r8)
 400a0c4:	d8801c15 	stw	r2,112(sp)
 400a0c8:	d9401b15 	stw	r5,108(sp)
 400a0cc:	010001c4 	movi	r4,7
 400a0d0:	2140b00e 	bge	r4,r5,400a394 <___vfiprintf_internal_r+0xeac>
 400a0d4:	1000f61e 	bne	r2,zero,400a4b0 <___vfiprintf_internal_r+0xfc8>
 400a0d8:	3800b31e 	bne	r7,zero,400a3a8 <___vfiprintf_internal_r+0xec0>
 400a0dc:	0009883a 	mov	r4,zero
 400a0e0:	300b883a 	mov	r5,r6
 400a0e4:	d811883a 	mov	r8,sp
 400a0e8:	01802004 	movi	r6,128
 400a0ec:	19be5226 	beq	r3,r6,4009a38 <__alt_data_end+0xfc009a38>
 400a0f0:	8521c83a 	sub	r16,r16,r20
 400a0f4:	043e790e 	bge	zero,r16,4009adc <__alt_data_end+0xfc009adc>
 400a0f8:	05400404 	movi	r21,16
 400a0fc:	ac01b00e 	bge	r21,r16,400a7c0 <___vfiprintf_internal_r+0x12d8>
 400a100:	01410074 	movhi	r5,1025
 400a104:	294ab804 	addi	r5,r5,10976
 400a108:	d9402315 	stw	r5,140(sp)
 400a10c:	070001c4 	movi	fp,7
 400a110:	00000506 	br	400a128 <___vfiprintf_internal_r+0xc40>
 400a114:	21400084 	addi	r5,r4,2
 400a118:	42000204 	addi	r8,r8,8
 400a11c:	1809883a 	mov	r4,r3
 400a120:	843ffc04 	addi	r16,r16,-16
 400a124:	ac000d0e 	bge	r21,r16,400a15c <___vfiprintf_internal_r+0xc74>
 400a128:	10800404 	addi	r2,r2,16
 400a12c:	20c00044 	addi	r3,r4,1
 400a130:	44800015 	stw	r18,0(r8)
 400a134:	45400115 	stw	r21,4(r8)
 400a138:	d8801c15 	stw	r2,112(sp)
 400a13c:	d8c01b15 	stw	r3,108(sp)
 400a140:	e0fff40e 	bge	fp,r3,400a114 <__alt_data_end+0xfc00a114>
 400a144:	1000101e 	bne	r2,zero,400a188 <___vfiprintf_internal_r+0xca0>
 400a148:	843ffc04 	addi	r16,r16,-16
 400a14c:	01400044 	movi	r5,1
 400a150:	0009883a 	mov	r4,zero
 400a154:	d811883a 	mov	r8,sp
 400a158:	ac3ff316 	blt	r21,r16,400a128 <__alt_data_end+0xfc00a128>
 400a15c:	d8c02317 	ldw	r3,140(sp)
 400a160:	1405883a 	add	r2,r2,r16
 400a164:	44000115 	stw	r16,4(r8)
 400a168:	40c00015 	stw	r3,0(r8)
 400a16c:	d8801c15 	stw	r2,112(sp)
 400a170:	d9401b15 	stw	r5,108(sp)
 400a174:	00c001c4 	movi	r3,7
 400a178:	19401916 	blt	r3,r5,400a1e0 <___vfiprintf_internal_r+0xcf8>
 400a17c:	42000204 	addi	r8,r8,8
 400a180:	29400044 	addi	r5,r5,1
 400a184:	003e5506 	br	4009adc <__alt_data_end+0xfc009adc>
 400a188:	d9402017 	ldw	r5,128(sp)
 400a18c:	d9002117 	ldw	r4,132(sp)
 400a190:	d9801a04 	addi	r6,sp,104
 400a194:	40093d40 	call	40093d4 <__sprint_r.part.0>
 400a198:	10000b1e 	bne	r2,zero,400a1c8 <___vfiprintf_internal_r+0xce0>
 400a19c:	d9001b17 	ldw	r4,108(sp)
 400a1a0:	d8801c17 	ldw	r2,112(sp)
 400a1a4:	d811883a 	mov	r8,sp
 400a1a8:	21400044 	addi	r5,r4,1
 400a1ac:	003fdc06 	br	400a120 <__alt_data_end+0xfc00a120>
 400a1b0:	d8801c17 	ldw	r2,112(sp)
 400a1b4:	10000426 	beq	r2,zero,400a1c8 <___vfiprintf_internal_r+0xce0>
 400a1b8:	d9402017 	ldw	r5,128(sp)
 400a1bc:	d9002117 	ldw	r4,132(sp)
 400a1c0:	d9801a04 	addi	r6,sp,104
 400a1c4:	40093d40 	call	40093d4 <__sprint_r.part.0>
 400a1c8:	d9402017 	ldw	r5,128(sp)
 400a1cc:	2880030b 	ldhu	r2,12(r5)
 400a1d0:	1080100c 	andi	r2,r2,64
 400a1d4:	10014d1e 	bne	r2,zero,400a70c <___vfiprintf_internal_r+0x1224>
 400a1d8:	d8802417 	ldw	r2,144(sp)
 400a1dc:	003d9706 	br	400983c <__alt_data_end+0xfc00983c>
 400a1e0:	1000d21e 	bne	r2,zero,400a52c <___vfiprintf_internal_r+0x1044>
 400a1e4:	00c00044 	movi	r3,1
 400a1e8:	a005883a 	mov	r2,r20
 400a1ec:	ddc00015 	stw	r23,0(sp)
 400a1f0:	dd000115 	stw	r20,4(sp)
 400a1f4:	dd001c15 	stw	r20,112(sp)
 400a1f8:	d8c01b15 	stw	r3,108(sp)
 400a1fc:	d811883a 	mov	r8,sp
 400a200:	42000204 	addi	r8,r8,8
 400a204:	8c40010c 	andi	r17,r17,4
 400a208:	88004026 	beq	r17,zero,400a30c <___vfiprintf_internal_r+0xe24>
 400a20c:	d9002517 	ldw	r4,148(sp)
 400a210:	24e3c83a 	sub	r17,r4,r19
 400a214:	04403d0e 	bge	zero,r17,400a30c <___vfiprintf_internal_r+0xe24>
 400a218:	04000404 	movi	r16,16
 400a21c:	8441a90e 	bge	r16,r17,400a8c4 <___vfiprintf_internal_r+0x13dc>
 400a220:	00c10074 	movhi	r3,1025
 400a224:	18cabc04 	addi	r3,r3,10992
 400a228:	d9001b17 	ldw	r4,108(sp)
 400a22c:	d8c02315 	stw	r3,140(sp)
 400a230:	050001c4 	movi	r20,7
 400a234:	dd402117 	ldw	r21,132(sp)
 400a238:	ddc02017 	ldw	r23,128(sp)
 400a23c:	00000506 	br	400a254 <___vfiprintf_internal_r+0xd6c>
 400a240:	21400084 	addi	r5,r4,2
 400a244:	42000204 	addi	r8,r8,8
 400a248:	1809883a 	mov	r4,r3
 400a24c:	8c7ffc04 	addi	r17,r17,-16
 400a250:	84400f0e 	bge	r16,r17,400a290 <___vfiprintf_internal_r+0xda8>
 400a254:	01410074 	movhi	r5,1025
 400a258:	10800404 	addi	r2,r2,16
 400a25c:	20c00044 	addi	r3,r4,1
 400a260:	294abc04 	addi	r5,r5,10992
 400a264:	41400015 	stw	r5,0(r8)
 400a268:	44000115 	stw	r16,4(r8)
 400a26c:	d8801c15 	stw	r2,112(sp)
 400a270:	d8c01b15 	stw	r3,108(sp)
 400a274:	a0fff20e 	bge	r20,r3,400a240 <__alt_data_end+0xfc00a240>
 400a278:	1000141e 	bne	r2,zero,400a2cc <___vfiprintf_internal_r+0xde4>
 400a27c:	8c7ffc04 	addi	r17,r17,-16
 400a280:	01400044 	movi	r5,1
 400a284:	0009883a 	mov	r4,zero
 400a288:	d811883a 	mov	r8,sp
 400a28c:	847ff116 	blt	r16,r17,400a254 <__alt_data_end+0xfc00a254>
 400a290:	d8c02317 	ldw	r3,140(sp)
 400a294:	1445883a 	add	r2,r2,r17
 400a298:	44400115 	stw	r17,4(r8)
 400a29c:	40c00015 	stw	r3,0(r8)
 400a2a0:	d8801c15 	stw	r2,112(sp)
 400a2a4:	d9401b15 	stw	r5,108(sp)
 400a2a8:	00c001c4 	movi	r3,7
 400a2ac:	1940170e 	bge	r3,r5,400a30c <___vfiprintf_internal_r+0xe24>
 400a2b0:	1000101e 	bne	r2,zero,400a2f4 <___vfiprintf_internal_r+0xe0c>
 400a2b4:	d8802517 	ldw	r2,148(sp)
 400a2b8:	14c11616 	blt	r2,r19,400a714 <___vfiprintf_internal_r+0x122c>
 400a2bc:	d9002417 	ldw	r4,144(sp)
 400a2c0:	2089883a 	add	r4,r4,r2
 400a2c4:	d9002415 	stw	r4,144(sp)
 400a2c8:	003e1806 	br	4009b2c <__alt_data_end+0xfc009b2c>
 400a2cc:	d9801a04 	addi	r6,sp,104
 400a2d0:	b80b883a 	mov	r5,r23
 400a2d4:	a809883a 	mov	r4,r21
 400a2d8:	40093d40 	call	40093d4 <__sprint_r.part.0>
 400a2dc:	103fba1e 	bne	r2,zero,400a1c8 <__alt_data_end+0xfc00a1c8>
 400a2e0:	d9001b17 	ldw	r4,108(sp)
 400a2e4:	d8801c17 	ldw	r2,112(sp)
 400a2e8:	d811883a 	mov	r8,sp
 400a2ec:	21400044 	addi	r5,r4,1
 400a2f0:	003fd606 	br	400a24c <__alt_data_end+0xfc00a24c>
 400a2f4:	d9402017 	ldw	r5,128(sp)
 400a2f8:	d9002117 	ldw	r4,132(sp)
 400a2fc:	d9801a04 	addi	r6,sp,104
 400a300:	40093d40 	call	40093d4 <__sprint_r.part.0>
 400a304:	103fb01e 	bne	r2,zero,400a1c8 <__alt_data_end+0xfc00a1c8>
 400a308:	d8801c17 	ldw	r2,112(sp)
 400a30c:	d8c02517 	ldw	r3,148(sp)
 400a310:	1cc0010e 	bge	r3,r19,400a318 <___vfiprintf_internal_r+0xe30>
 400a314:	9807883a 	mov	r3,r19
 400a318:	d9002417 	ldw	r4,144(sp)
 400a31c:	20c9883a 	add	r4,r4,r3
 400a320:	d9002415 	stw	r4,144(sp)
 400a324:	103e0126 	beq	r2,zero,4009b2c <__alt_data_end+0xfc009b2c>
 400a328:	d9402017 	ldw	r5,128(sp)
 400a32c:	d9002117 	ldw	r4,132(sp)
 400a330:	d9801a04 	addi	r6,sp,104
 400a334:	40093d40 	call	40093d4 <__sprint_r.part.0>
 400a338:	103dfc26 	beq	r2,zero,4009b2c <__alt_data_end+0xfc009b2c>
 400a33c:	003fa206 	br	400a1c8 <__alt_data_end+0xfc00a1c8>
 400a340:	d9402017 	ldw	r5,128(sp)
 400a344:	d9002117 	ldw	r4,132(sp)
 400a348:	d9801a04 	addi	r6,sp,104
 400a34c:	d9c02b15 	stw	r7,172(sp)
 400a350:	40093d40 	call	40093d4 <__sprint_r.part.0>
 400a354:	d9c02b17 	ldw	r7,172(sp)
 400a358:	103f9b1e 	bne	r2,zero,400a1c8 <__alt_data_end+0xfc00a1c8>
 400a35c:	d9001b17 	ldw	r4,108(sp)
 400a360:	d8801c17 	ldw	r2,112(sp)
 400a364:	d811883a 	mov	r8,sp
 400a368:	21800044 	addi	r6,r4,1
 400a36c:	003dbf06 	br	4009a6c <__alt_data_end+0xfc009a6c>
 400a370:	1000d81e 	bne	r2,zero,400a6d4 <___vfiprintf_internal_r+0x11ec>
 400a374:	d9001d87 	ldb	r4,118(sp)
 400a378:	20000a26 	beq	r4,zero,400a3a4 <___vfiprintf_internal_r+0xebc>
 400a37c:	00800044 	movi	r2,1
 400a380:	d9001d84 	addi	r4,sp,118
 400a384:	100b883a 	mov	r5,r2
 400a388:	d9000015 	stw	r4,0(sp)
 400a38c:	d8800115 	stw	r2,4(sp)
 400a390:	d811883a 	mov	r8,sp
 400a394:	2809883a 	mov	r4,r5
 400a398:	42000204 	addi	r8,r8,8
 400a39c:	29400044 	addi	r5,r5,1
 400a3a0:	003d9506 	br	40099f8 <__alt_data_end+0xfc0099f8>
 400a3a4:	3800fd26 	beq	r7,zero,400a79c <___vfiprintf_internal_r+0x12b4>
 400a3a8:	00800084 	movi	r2,2
 400a3ac:	d9001d04 	addi	r4,sp,116
 400a3b0:	d9000015 	stw	r4,0(sp)
 400a3b4:	d8800115 	stw	r2,4(sp)
 400a3b8:	01400044 	movi	r5,1
 400a3bc:	d811883a 	mov	r8,sp
 400a3c0:	2809883a 	mov	r4,r5
 400a3c4:	42000204 	addi	r8,r8,8
 400a3c8:	29400044 	addi	r5,r5,1
 400a3cc:	003f4606 	br	400a0e8 <__alt_data_end+0xfc00a0e8>
 400a3d0:	d8802517 	ldw	r2,148(sp)
 400a3d4:	14c0010e 	bge	r2,r19,400a3dc <___vfiprintf_internal_r+0xef4>
 400a3d8:	9805883a 	mov	r2,r19
 400a3dc:	d9402417 	ldw	r5,144(sp)
 400a3e0:	288b883a 	add	r5,r5,r2
 400a3e4:	d9402415 	stw	r5,144(sp)
 400a3e8:	003dd006 	br	4009b2c <__alt_data_end+0xfc009b2c>
 400a3ec:	d8001d85 	stb	zero,118(sp)
 400a3f0:	80005d16 	blt	r16,zero,400a568 <___vfiprintf_internal_r+0x1080>
 400a3f4:	00ffdfc4 	movi	r3,-129
 400a3f8:	9d04b03a 	or	r2,r19,r20
 400a3fc:	88e2703a 	and	r17,r17,r3
 400a400:	103d3726 	beq	r2,zero,40098e0 <__alt_data_end+0xfc0098e0>
 400a404:	002b883a 	mov	r21,zero
 400a408:	d9002617 	ldw	r4,152(sp)
 400a40c:	ddc01a04 	addi	r23,sp,104
 400a410:	988003cc 	andi	r2,r19,15
 400a414:	a006973a 	slli	r3,r20,28
 400a418:	2085883a 	add	r2,r4,r2
 400a41c:	9826d13a 	srli	r19,r19,4
 400a420:	10800003 	ldbu	r2,0(r2)
 400a424:	a028d13a 	srli	r20,r20,4
 400a428:	bdffffc4 	addi	r23,r23,-1
 400a42c:	1ce6b03a 	or	r19,r3,r19
 400a430:	b8800005 	stb	r2,0(r23)
 400a434:	9d04b03a 	or	r2,r19,r20
 400a438:	103ff51e 	bne	r2,zero,400a410 <__alt_data_end+0xfc00a410>
 400a43c:	d8801e17 	ldw	r2,120(sp)
 400a440:	15e9c83a 	sub	r20,r2,r23
 400a444:	003d2b06 	br	40098f4 <__alt_data_end+0xfc0098f4>
 400a448:	d9402017 	ldw	r5,128(sp)
 400a44c:	d9002117 	ldw	r4,132(sp)
 400a450:	d9801a04 	addi	r6,sp,104
 400a454:	40093d40 	call	40093d4 <__sprint_r.part.0>
 400a458:	103f5b1e 	bne	r2,zero,400a1c8 <__alt_data_end+0xfc00a1c8>
 400a45c:	d8801c17 	ldw	r2,112(sp)
 400a460:	d811883a 	mov	r8,sp
 400a464:	003f6706 	br	400a204 <__alt_data_end+0xfc00a204>
 400a468:	d9402017 	ldw	r5,128(sp)
 400a46c:	d9002117 	ldw	r4,132(sp)
 400a470:	d9801a04 	addi	r6,sp,104
 400a474:	40093d40 	call	40093d4 <__sprint_r.part.0>
 400a478:	103f531e 	bne	r2,zero,400a1c8 <__alt_data_end+0xfc00a1c8>
 400a47c:	d811883a 	mov	r8,sp
 400a480:	003cd906 	br	40097e8 <__alt_data_end+0xfc0097e8>
 400a484:	10803fcc 	andi	r2,r2,255
 400a488:	1080201c 	xori	r2,r2,128
 400a48c:	10bfe004 	addi	r2,r2,-128
 400a490:	00c00c04 	movi	r3,48
 400a494:	10ffe926 	beq	r2,r3,400a43c <__alt_data_end+0xfc00a43c>
 400a498:	b8ffffc5 	stb	r3,-1(r23)
 400a49c:	d8c01e17 	ldw	r3,120(sp)
 400a4a0:	b8bfffc4 	addi	r2,r23,-1
 400a4a4:	102f883a 	mov	r23,r2
 400a4a8:	18a9c83a 	sub	r20,r3,r2
 400a4ac:	003d1106 	br	40098f4 <__alt_data_end+0xfc0098f4>
 400a4b0:	d9402017 	ldw	r5,128(sp)
 400a4b4:	d9002117 	ldw	r4,132(sp)
 400a4b8:	d9801a04 	addi	r6,sp,104
 400a4bc:	d8c02a15 	stw	r3,168(sp)
 400a4c0:	d9c02b15 	stw	r7,172(sp)
 400a4c4:	40093d40 	call	40093d4 <__sprint_r.part.0>
 400a4c8:	d8c02a17 	ldw	r3,168(sp)
 400a4cc:	d9c02b17 	ldw	r7,172(sp)
 400a4d0:	103f3d1e 	bne	r2,zero,400a1c8 <__alt_data_end+0xfc00a1c8>
 400a4d4:	d9001b17 	ldw	r4,108(sp)
 400a4d8:	d8801c17 	ldw	r2,112(sp)
 400a4dc:	d811883a 	mov	r8,sp
 400a4e0:	21400044 	addi	r5,r4,1
 400a4e4:	003d4406 	br	40099f8 <__alt_data_end+0xfc0099f8>
 400a4e8:	d9402017 	ldw	r5,128(sp)
 400a4ec:	d9002117 	ldw	r4,132(sp)
 400a4f0:	d9801a04 	addi	r6,sp,104
 400a4f4:	d8c02a15 	stw	r3,168(sp)
 400a4f8:	40093d40 	call	40093d4 <__sprint_r.part.0>
 400a4fc:	d8c02a17 	ldw	r3,168(sp)
 400a500:	103f311e 	bne	r2,zero,400a1c8 <__alt_data_end+0xfc00a1c8>
 400a504:	d9001b17 	ldw	r4,108(sp)
 400a508:	d8801c17 	ldw	r2,112(sp)
 400a50c:	d811883a 	mov	r8,sp
 400a510:	21400044 	addi	r5,r4,1
 400a514:	003ef406 	br	400a0e8 <__alt_data_end+0xfc00a0e8>
 400a518:	1000bd1e 	bne	r2,zero,400a810 <___vfiprintf_internal_r+0x1328>
 400a51c:	01400044 	movi	r5,1
 400a520:	0009883a 	mov	r4,zero
 400a524:	d811883a 	mov	r8,sp
 400a528:	003ef106 	br	400a0f0 <__alt_data_end+0xfc00a0f0>
 400a52c:	d9402017 	ldw	r5,128(sp)
 400a530:	d9002117 	ldw	r4,132(sp)
 400a534:	d9801a04 	addi	r6,sp,104
 400a538:	40093d40 	call	40093d4 <__sprint_r.part.0>
 400a53c:	103f221e 	bne	r2,zero,400a1c8 <__alt_data_end+0xfc00a1c8>
 400a540:	d9401b17 	ldw	r5,108(sp)
 400a544:	d8801c17 	ldw	r2,112(sp)
 400a548:	d811883a 	mov	r8,sp
 400a54c:	29400044 	addi	r5,r5,1
 400a550:	003d6206 	br	4009adc <__alt_data_end+0xfc009adc>
 400a554:	01410074 	movhi	r5,1025
 400a558:	294a5704 	addi	r5,r5,10588
 400a55c:	d9402615 	stw	r5,152(sp)
 400a560:	d8c02215 	stw	r3,136(sp)
 400a564:	1023883a 	mov	r17,r2
 400a568:	9d04b03a 	or	r2,r19,r20
 400a56c:	103fa51e 	bne	r2,zero,400a404 <__alt_data_end+0xfc00a404>
 400a570:	002b883a 	mov	r21,zero
 400a574:	00800084 	movi	r2,2
 400a578:	003e4a06 	br	4009ea4 <__alt_data_end+0xfc009ea4>
 400a57c:	01410074 	movhi	r5,1025
 400a580:	294a5704 	addi	r5,r5,10588
 400a584:	002b883a 	mov	r21,zero
 400a588:	d9402615 	stw	r5,152(sp)
 400a58c:	003f9e06 	br	400a408 <__alt_data_end+0xfc00a408>
 400a590:	d9402217 	ldw	r5,136(sp)
 400a594:	d8001d85 	stb	zero,118(sp)
 400a598:	0029883a 	mov	r20,zero
 400a59c:	28800104 	addi	r2,r5,4
 400a5a0:	2cc00017 	ldw	r19,0(r5)
 400a5a4:	803e3a16 	blt	r16,zero,4009e90 <__alt_data_end+0xfc009e90>
 400a5a8:	00ffdfc4 	movi	r3,-129
 400a5ac:	d8802215 	stw	r2,136(sp)
 400a5b0:	88e2703a 	and	r17,r17,r3
 400a5b4:	002b883a 	mov	r21,zero
 400a5b8:	983e9b26 	beq	r19,zero,400a028 <__alt_data_end+0xfc00a028>
 400a5bc:	00800244 	movi	r2,9
 400a5c0:	14fdc936 	bltu	r2,r19,4009ce8 <__alt_data_end+0xfc009ce8>
 400a5c4:	003e9a06 	br	400a030 <__alt_data_end+0xfc00a030>
 400a5c8:	00800c04 	movi	r2,48
 400a5cc:	d8c01d45 	stb	r3,117(sp)
 400a5d0:	d8801d05 	stb	r2,116(sp)
 400a5d4:	d8001d85 	stb	zero,118(sp)
 400a5d8:	88c00094 	ori	r3,r17,2
 400a5dc:	80009c16 	blt	r16,zero,400a850 <___vfiprintf_internal_r+0x1368>
 400a5e0:	00bfdfc4 	movi	r2,-129
 400a5e4:	88a2703a 	and	r17,r17,r2
 400a5e8:	8c400094 	ori	r17,r17,2
 400a5ec:	002b883a 	mov	r21,zero
 400a5f0:	003f8506 	br	400a408 <__alt_data_end+0xfc00a408>
 400a5f4:	b029883a 	mov	r20,r22
 400a5f8:	003c0b06 	br	4009628 <__alt_data_end+0xfc009628>
 400a5fc:	04e7c83a 	sub	r19,zero,r19
 400a600:	05400b44 	movi	r21,45
 400a604:	9804c03a 	cmpne	r2,r19,zero
 400a608:	0529c83a 	sub	r20,zero,r20
 400a60c:	dd401d85 	stb	r21,118(sp)
 400a610:	a0a9c83a 	sub	r20,r20,r2
 400a614:	80009716 	blt	r16,zero,400a874 <___vfiprintf_internal_r+0x138c>
 400a618:	00bfdfc4 	movi	r2,-129
 400a61c:	88a2703a 	and	r17,r17,r2
 400a620:	003db006 	br	4009ce4 <__alt_data_end+0xfc009ce4>
 400a624:	b0c00007 	ldb	r3,0(r22)
 400a628:	003c0c06 	br	400965c <__alt_data_end+0xfc00965c>
 400a62c:	8880100c 	andi	r2,r17,64
 400a630:	d8001d85 	stb	zero,118(sp)
 400a634:	1000461e 	bne	r2,zero,400a750 <___vfiprintf_internal_r+0x1268>
 400a638:	d9002217 	ldw	r4,136(sp)
 400a63c:	0029883a 	mov	r20,zero
 400a640:	20800104 	addi	r2,r4,4
 400a644:	24c00017 	ldw	r19,0(r4)
 400a648:	803df80e 	bge	r16,zero,4009e2c <__alt_data_end+0xfc009e2c>
 400a64c:	9d06b03a 	or	r3,r19,r20
 400a650:	d8802215 	stw	r2,136(sp)
 400a654:	183d5e1e 	bne	r3,zero,4009bd0 <__alt_data_end+0xfc009bd0>
 400a658:	002b883a 	mov	r21,zero
 400a65c:	0005883a 	mov	r2,zero
 400a660:	003e1006 	br	4009ea4 <__alt_data_end+0xfc009ea4>
 400a664:	8880040c 	andi	r2,r17,16
 400a668:	1000321e 	bne	r2,zero,400a734 <___vfiprintf_internal_r+0x124c>
 400a66c:	8c40100c 	andi	r17,r17,64
 400a670:	88008d26 	beq	r17,zero,400a8a8 <___vfiprintf_internal_r+0x13c0>
 400a674:	d9402217 	ldw	r5,136(sp)
 400a678:	d8c02417 	ldw	r3,144(sp)
 400a67c:	28800017 	ldw	r2,0(r5)
 400a680:	29400104 	addi	r5,r5,4
 400a684:	d9402215 	stw	r5,136(sp)
 400a688:	10c0000d 	sth	r3,0(r2)
 400a68c:	003bca06 	br	40095b8 <__alt_data_end+0xfc0095b8>
 400a690:	8880100c 	andi	r2,r17,64
 400a694:	10003a26 	beq	r2,zero,400a780 <___vfiprintf_internal_r+0x1298>
 400a698:	d8802217 	ldw	r2,136(sp)
 400a69c:	14c0000f 	ldh	r19,0(r2)
 400a6a0:	10800104 	addi	r2,r2,4
 400a6a4:	d8802215 	stw	r2,136(sp)
 400a6a8:	9829d7fa 	srai	r20,r19,31
 400a6ac:	a005883a 	mov	r2,r20
 400a6b0:	003d8506 	br	4009cc8 <__alt_data_end+0xfc009cc8>
 400a6b4:	8880100c 	andi	r2,r17,64
 400a6b8:	10002b26 	beq	r2,zero,400a768 <___vfiprintf_internal_r+0x1280>
 400a6bc:	d8802217 	ldw	r2,136(sp)
 400a6c0:	0029883a 	mov	r20,zero
 400a6c4:	14c0000b 	ldhu	r19,0(r2)
 400a6c8:	10800104 	addi	r2,r2,4
 400a6cc:	d8802215 	stw	r2,136(sp)
 400a6d0:	003d5d06 	br	4009c48 <__alt_data_end+0xfc009c48>
 400a6d4:	d9402017 	ldw	r5,128(sp)
 400a6d8:	d9002117 	ldw	r4,132(sp)
 400a6dc:	d9801a04 	addi	r6,sp,104
 400a6e0:	d8c02a15 	stw	r3,168(sp)
 400a6e4:	d9c02b15 	stw	r7,172(sp)
 400a6e8:	40093d40 	call	40093d4 <__sprint_r.part.0>
 400a6ec:	d8c02a17 	ldw	r3,168(sp)
 400a6f0:	d9c02b17 	ldw	r7,172(sp)
 400a6f4:	103eb41e 	bne	r2,zero,400a1c8 <__alt_data_end+0xfc00a1c8>
 400a6f8:	d9001b17 	ldw	r4,108(sp)
 400a6fc:	d8801c17 	ldw	r2,112(sp)
 400a700:	d811883a 	mov	r8,sp
 400a704:	21400044 	addi	r5,r4,1
 400a708:	003e6706 	br	400a0a8 <__alt_data_end+0xfc00a0a8>
 400a70c:	00bfffc4 	movi	r2,-1
 400a710:	003c4a06 	br	400983c <__alt_data_end+0xfc00983c>
 400a714:	9805883a 	mov	r2,r19
 400a718:	003ee806 	br	400a2bc <__alt_data_end+0xfc00a2bc>
 400a71c:	d8c02217 	ldw	r3,136(sp)
 400a720:	0029883a 	mov	r20,zero
 400a724:	18800104 	addi	r2,r3,4
 400a728:	1cc0000b 	ldhu	r19,0(r3)
 400a72c:	803f9e0e 	bge	r16,zero,400a5a8 <__alt_data_end+0xfc00a5a8>
 400a730:	003dd706 	br	4009e90 <__alt_data_end+0xfc009e90>
 400a734:	d8c02217 	ldw	r3,136(sp)
 400a738:	d9002417 	ldw	r4,144(sp)
 400a73c:	18800017 	ldw	r2,0(r3)
 400a740:	18c00104 	addi	r3,r3,4
 400a744:	d8c02215 	stw	r3,136(sp)
 400a748:	11000015 	stw	r4,0(r2)
 400a74c:	003b9a06 	br	40095b8 <__alt_data_end+0xfc0095b8>
 400a750:	d8c02217 	ldw	r3,136(sp)
 400a754:	0029883a 	mov	r20,zero
 400a758:	18800104 	addi	r2,r3,4
 400a75c:	1cc0000b 	ldhu	r19,0(r3)
 400a760:	803db20e 	bge	r16,zero,4009e2c <__alt_data_end+0xfc009e2c>
 400a764:	003fb906 	br	400a64c <__alt_data_end+0xfc00a64c>
 400a768:	d9002217 	ldw	r4,136(sp)
 400a76c:	0029883a 	mov	r20,zero
 400a770:	24c00017 	ldw	r19,0(r4)
 400a774:	21000104 	addi	r4,r4,4
 400a778:	d9002215 	stw	r4,136(sp)
 400a77c:	003d3206 	br	4009c48 <__alt_data_end+0xfc009c48>
 400a780:	d8c02217 	ldw	r3,136(sp)
 400a784:	1cc00017 	ldw	r19,0(r3)
 400a788:	18c00104 	addi	r3,r3,4
 400a78c:	d8c02215 	stw	r3,136(sp)
 400a790:	9829d7fa 	srai	r20,r19,31
 400a794:	a005883a 	mov	r2,r20
 400a798:	003d4b06 	br	4009cc8 <__alt_data_end+0xfc009cc8>
 400a79c:	0009883a 	mov	r4,zero
 400a7a0:	01400044 	movi	r5,1
 400a7a4:	d811883a 	mov	r8,sp
 400a7a8:	003e4f06 	br	400a0e8 <__alt_data_end+0xfc00a0e8>
 400a7ac:	d8c02215 	stw	r3,136(sp)
 400a7b0:	002b883a 	mov	r21,zero
 400a7b4:	003db806 	br	4009e98 <__alt_data_end+0xfc009e98>
 400a7b8:	d811883a 	mov	r8,sp
 400a7bc:	003e9606 	br	400a218 <__alt_data_end+0xfc00a218>
 400a7c0:	01010074 	movhi	r4,1025
 400a7c4:	210ab804 	addi	r4,r4,10976
 400a7c8:	d9002315 	stw	r4,140(sp)
 400a7cc:	003e6306 	br	400a15c <__alt_data_end+0xfc00a15c>
 400a7d0:	b0c00043 	ldbu	r3,1(r22)
 400a7d4:	8c400814 	ori	r17,r17,32
 400a7d8:	b5800044 	addi	r22,r22,1
 400a7dc:	18c03fcc 	andi	r3,r3,255
 400a7e0:	18c0201c 	xori	r3,r3,128
 400a7e4:	18ffe004 	addi	r3,r3,-128
 400a7e8:	003b9c06 	br	400965c <__alt_data_end+0xfc00965c>
 400a7ec:	b809883a 	mov	r4,r23
 400a7f0:	da002a15 	stw	r8,168(sp)
 400a7f4:	4001c580 	call	4001c58 <strlen>
 400a7f8:	1029883a 	mov	r20,r2
 400a7fc:	dd401d83 	ldbu	r21,118(sp)
 400a800:	df002215 	stw	fp,136(sp)
 400a804:	0021883a 	mov	r16,zero
 400a808:	da002a17 	ldw	r8,168(sp)
 400a80c:	003c3906 	br	40098f4 <__alt_data_end+0xfc0098f4>
 400a810:	d9402017 	ldw	r5,128(sp)
 400a814:	d9002117 	ldw	r4,132(sp)
 400a818:	d9801a04 	addi	r6,sp,104
 400a81c:	40093d40 	call	40093d4 <__sprint_r.part.0>
 400a820:	103e691e 	bne	r2,zero,400a1c8 <__alt_data_end+0xfc00a1c8>
 400a824:	d9001b17 	ldw	r4,108(sp)
 400a828:	d8801c17 	ldw	r2,112(sp)
 400a82c:	d811883a 	mov	r8,sp
 400a830:	21400044 	addi	r5,r4,1
 400a834:	003e2e06 	br	400a0f0 <__alt_data_end+0xfc00a0f0>
 400a838:	01010074 	movhi	r4,1025
 400a83c:	210abc04 	addi	r4,r4,10992
 400a840:	d9002315 	stw	r4,140(sp)
 400a844:	d9001b17 	ldw	r4,108(sp)
 400a848:	21000044 	addi	r4,r4,1
 400a84c:	003c5e06 	br	40099c8 <__alt_data_end+0xfc0099c8>
 400a850:	002b883a 	mov	r21,zero
 400a854:	00800084 	movi	r2,2
 400a858:	10803fcc 	andi	r2,r2,255
 400a85c:	01000044 	movi	r4,1
 400a860:	11002b26 	beq	r2,r4,400a910 <___vfiprintf_internal_r+0x1428>
 400a864:	01000084 	movi	r4,2
 400a868:	11002b1e 	bne	r2,r4,400a918 <___vfiprintf_internal_r+0x1430>
 400a86c:	1823883a 	mov	r17,r3
 400a870:	003ee506 	br	400a408 <__alt_data_end+0xfc00a408>
 400a874:	8807883a 	mov	r3,r17
 400a878:	00800044 	movi	r2,1
 400a87c:	003ff606 	br	400a858 <__alt_data_end+0xfc00a858>
 400a880:	00800184 	movi	r2,6
 400a884:	1400012e 	bgeu	r2,r16,400a88c <___vfiprintf_internal_r+0x13a4>
 400a888:	1021883a 	mov	r16,r2
 400a88c:	8029883a 	mov	r20,r16
 400a890:	8027883a 	mov	r19,r16
 400a894:	80002216 	blt	r16,zero,400a920 <___vfiprintf_internal_r+0x1438>
 400a898:	05c10074 	movhi	r23,1025
 400a89c:	df002215 	stw	fp,136(sp)
 400a8a0:	bdca5c04 	addi	r23,r23,10608
 400a8a4:	003cfb06 	br	4009c94 <__alt_data_end+0xfc009c94>
 400a8a8:	d9002217 	ldw	r4,136(sp)
 400a8ac:	d9402417 	ldw	r5,144(sp)
 400a8b0:	20800017 	ldw	r2,0(r4)
 400a8b4:	21000104 	addi	r4,r4,4
 400a8b8:	d9002215 	stw	r4,136(sp)
 400a8bc:	11400015 	stw	r5,0(r2)
 400a8c0:	003b3d06 	br	40095b8 <__alt_data_end+0xfc0095b8>
 400a8c4:	01410074 	movhi	r5,1025
 400a8c8:	294abc04 	addi	r5,r5,10992
 400a8cc:	d9402315 	stw	r5,140(sp)
 400a8d0:	d9401b17 	ldw	r5,108(sp)
 400a8d4:	29400044 	addi	r5,r5,1
 400a8d8:	003e6d06 	br	400a290 <__alt_data_end+0xfc00a290>
 400a8dc:	8029883a 	mov	r20,r16
 400a8e0:	dd401d83 	ldbu	r21,118(sp)
 400a8e4:	df002215 	stw	fp,136(sp)
 400a8e8:	0021883a 	mov	r16,zero
 400a8ec:	003c0106 	br	40098f4 <__alt_data_end+0xfc0098f4>
 400a8f0:	00c10074 	movhi	r3,1025
 400a8f4:	18cab804 	addi	r3,r3,10976
 400a8f8:	d8c02315 	stw	r3,140(sp)
 400a8fc:	280d883a 	mov	r6,r5
 400a900:	003c6906 	br	4009aa8 <__alt_data_end+0xfc009aa8>
 400a904:	802d883a 	mov	r22,r16
 400a908:	0021883a 	mov	r16,zero
 400a90c:	003b5406 	br	4009660 <__alt_data_end+0xfc009660>
 400a910:	1823883a 	mov	r17,r3
 400a914:	003cf306 	br	4009ce4 <__alt_data_end+0xfc009ce4>
 400a918:	1823883a 	mov	r17,r3
 400a91c:	003cad06 	br	4009bd4 <__alt_data_end+0xfc009bd4>
 400a920:	0027883a 	mov	r19,zero
 400a924:	003fdc06 	br	400a898 <__alt_data_end+0xfc00a898>
 400a928:	d9402217 	ldw	r5,136(sp)
 400a92c:	8005883a 	mov	r2,r16
 400a930:	b0c00043 	ldbu	r3,1(r22)
 400a934:	2c000017 	ldw	r16,0(r5)
 400a938:	29000104 	addi	r4,r5,4
 400a93c:	d9002215 	stw	r4,136(sp)
 400a940:	102d883a 	mov	r22,r2
 400a944:	803fa50e 	bge	r16,zero,400a7dc <__alt_data_end+0xfc00a7dc>
 400a948:	18c03fcc 	andi	r3,r3,255
 400a94c:	18c0201c 	xori	r3,r3,128
 400a950:	043fffc4 	movi	r16,-1
 400a954:	18ffe004 	addi	r3,r3,-128
 400a958:	003b4006 	br	400965c <__alt_data_end+0xfc00965c>
 400a95c:	d9402303 	ldbu	r5,140(sp)
 400a960:	d9401d85 	stb	r5,118(sp)
 400a964:	003cae06 	br	4009c20 <__alt_data_end+0xfc009c20>
 400a968:	d8c02303 	ldbu	r3,140(sp)
 400a96c:	d8c01d85 	stb	r3,118(sp)
 400a970:	003d1406 	br	4009dc4 <__alt_data_end+0xfc009dc4>
 400a974:	d8c02303 	ldbu	r3,140(sp)
 400a978:	d8c01d85 	stb	r3,118(sp)
 400a97c:	003cca06 	br	4009ca8 <__alt_data_end+0xfc009ca8>
 400a980:	8880004c 	andi	r2,r17,1
 400a984:	002b883a 	mov	r21,zero
 400a988:	10000526 	beq	r2,zero,400a9a0 <___vfiprintf_internal_r+0x14b8>
 400a98c:	00800c04 	movi	r2,48
 400a990:	d88019c5 	stb	r2,103(sp)
 400a994:	dd002817 	ldw	r20,160(sp)
 400a998:	ddc019c4 	addi	r23,sp,103
 400a99c:	003bd506 	br	40098f4 <__alt_data_end+0xfc0098f4>
 400a9a0:	0029883a 	mov	r20,zero
 400a9a4:	ddc01a04 	addi	r23,sp,104
 400a9a8:	003bd206 	br	40098f4 <__alt_data_end+0xfc0098f4>
 400a9ac:	d9002303 	ldbu	r4,140(sp)
 400a9b0:	d9001d85 	stb	r4,118(sp)
 400a9b4:	003da606 	br	400a050 <__alt_data_end+0xfc00a050>
 400a9b8:	d8c02303 	ldbu	r3,140(sp)
 400a9bc:	d8c01d85 	stb	r3,118(sp)
 400a9c0:	003c7606 	br	4009b9c <__alt_data_end+0xfc009b9c>
 400a9c4:	d8c02303 	ldbu	r3,140(sp)
 400a9c8:	d8c01d85 	stb	r3,118(sp)
 400a9cc:	003c6506 	br	4009b64 <__alt_data_end+0xfc009b64>
 400a9d0:	d9002303 	ldbu	r4,140(sp)
 400a9d4:	d9001d85 	stb	r4,118(sp)
 400a9d8:	003d3d06 	br	4009ed0 <__alt_data_end+0xfc009ed0>
 400a9dc:	d8c02303 	ldbu	r3,140(sp)
 400a9e0:	d8c01d85 	stb	r3,118(sp)
 400a9e4:	003d1d06 	br	4009e5c <__alt_data_end+0xfc009e5c>
 400a9e8:	d8c02303 	ldbu	r3,140(sp)
 400a9ec:	d8c01d85 	stb	r3,118(sp)
 400a9f0:	003d0306 	br	4009e00 <__alt_data_end+0xfc009e00>

0400a9f4 <__vfiprintf_internal>:
 400a9f4:	00810074 	movhi	r2,1025
 400a9f8:	108e5b04 	addi	r2,r2,14700
 400a9fc:	300f883a 	mov	r7,r6
 400aa00:	280d883a 	mov	r6,r5
 400aa04:	200b883a 	mov	r5,r4
 400aa08:	11000017 	ldw	r4,0(r2)
 400aa0c:	40094e81 	jmpi	40094e8 <___vfiprintf_internal_r>

0400aa10 <__sbprintf>:
 400aa10:	2880030b 	ldhu	r2,12(r5)
 400aa14:	2ac01917 	ldw	r11,100(r5)
 400aa18:	2a80038b 	ldhu	r10,14(r5)
 400aa1c:	2a400717 	ldw	r9,28(r5)
 400aa20:	2a000917 	ldw	r8,36(r5)
 400aa24:	defee204 	addi	sp,sp,-1144
 400aa28:	00c10004 	movi	r3,1024
 400aa2c:	dc011a15 	stw	r16,1128(sp)
 400aa30:	10bfff4c 	andi	r2,r2,65533
 400aa34:	2821883a 	mov	r16,r5
 400aa38:	d8cb883a 	add	r5,sp,r3
 400aa3c:	dc811c15 	stw	r18,1136(sp)
 400aa40:	dc411b15 	stw	r17,1132(sp)
 400aa44:	dfc11d15 	stw	ra,1140(sp)
 400aa48:	2025883a 	mov	r18,r4
 400aa4c:	d881030d 	sth	r2,1036(sp)
 400aa50:	dac11915 	stw	r11,1124(sp)
 400aa54:	da81038d 	sth	r10,1038(sp)
 400aa58:	da410715 	stw	r9,1052(sp)
 400aa5c:	da010915 	stw	r8,1060(sp)
 400aa60:	dec10015 	stw	sp,1024(sp)
 400aa64:	dec10415 	stw	sp,1040(sp)
 400aa68:	d8c10215 	stw	r3,1032(sp)
 400aa6c:	d8c10515 	stw	r3,1044(sp)
 400aa70:	d8010615 	stw	zero,1048(sp)
 400aa74:	40094e80 	call	40094e8 <___vfiprintf_internal_r>
 400aa78:	1023883a 	mov	r17,r2
 400aa7c:	10000416 	blt	r2,zero,400aa90 <__sbprintf+0x80>
 400aa80:	d9410004 	addi	r5,sp,1024
 400aa84:	9009883a 	mov	r4,r18
 400aa88:	4005cc40 	call	4005cc4 <_fflush_r>
 400aa8c:	10000d1e 	bne	r2,zero,400aac4 <__sbprintf+0xb4>
 400aa90:	d881030b 	ldhu	r2,1036(sp)
 400aa94:	1080100c 	andi	r2,r2,64
 400aa98:	10000326 	beq	r2,zero,400aaa8 <__sbprintf+0x98>
 400aa9c:	8080030b 	ldhu	r2,12(r16)
 400aaa0:	10801014 	ori	r2,r2,64
 400aaa4:	8080030d 	sth	r2,12(r16)
 400aaa8:	8805883a 	mov	r2,r17
 400aaac:	dfc11d17 	ldw	ra,1140(sp)
 400aab0:	dc811c17 	ldw	r18,1136(sp)
 400aab4:	dc411b17 	ldw	r17,1132(sp)
 400aab8:	dc011a17 	ldw	r16,1128(sp)
 400aabc:	dec11e04 	addi	sp,sp,1144
 400aac0:	f800283a 	ret
 400aac4:	047fffc4 	movi	r17,-1
 400aac8:	003ff106 	br	400aa90 <__alt_data_end+0xfc00aa90>

0400aacc <_write_r>:
 400aacc:	defffd04 	addi	sp,sp,-12
 400aad0:	2805883a 	mov	r2,r5
 400aad4:	dc000015 	stw	r16,0(sp)
 400aad8:	04010074 	movhi	r16,1025
 400aadc:	dc400115 	stw	r17,4(sp)
 400aae0:	300b883a 	mov	r5,r6
 400aae4:	84113604 	addi	r16,r16,17624
 400aae8:	2023883a 	mov	r17,r4
 400aaec:	380d883a 	mov	r6,r7
 400aaf0:	1009883a 	mov	r4,r2
 400aaf4:	dfc00215 	stw	ra,8(sp)
 400aaf8:	80000015 	stw	zero,0(r16)
 400aafc:	400f2600 	call	400f260 <write>
 400ab00:	00ffffc4 	movi	r3,-1
 400ab04:	10c00526 	beq	r2,r3,400ab1c <_write_r+0x50>
 400ab08:	dfc00217 	ldw	ra,8(sp)
 400ab0c:	dc400117 	ldw	r17,4(sp)
 400ab10:	dc000017 	ldw	r16,0(sp)
 400ab14:	dec00304 	addi	sp,sp,12
 400ab18:	f800283a 	ret
 400ab1c:	80c00017 	ldw	r3,0(r16)
 400ab20:	183ff926 	beq	r3,zero,400ab08 <__alt_data_end+0xfc00ab08>
 400ab24:	88c00015 	stw	r3,0(r17)
 400ab28:	003ff706 	br	400ab08 <__alt_data_end+0xfc00ab08>

0400ab2c <_close_r>:
 400ab2c:	defffd04 	addi	sp,sp,-12
 400ab30:	dc000015 	stw	r16,0(sp)
 400ab34:	04010074 	movhi	r16,1025
 400ab38:	dc400115 	stw	r17,4(sp)
 400ab3c:	84113604 	addi	r16,r16,17624
 400ab40:	2023883a 	mov	r17,r4
 400ab44:	2809883a 	mov	r4,r5
 400ab48:	dfc00215 	stw	ra,8(sp)
 400ab4c:	80000015 	stw	zero,0(r16)
 400ab50:	400ea080 	call	400ea08 <close>
 400ab54:	00ffffc4 	movi	r3,-1
 400ab58:	10c00526 	beq	r2,r3,400ab70 <_close_r+0x44>
 400ab5c:	dfc00217 	ldw	ra,8(sp)
 400ab60:	dc400117 	ldw	r17,4(sp)
 400ab64:	dc000017 	ldw	r16,0(sp)
 400ab68:	dec00304 	addi	sp,sp,12
 400ab6c:	f800283a 	ret
 400ab70:	80c00017 	ldw	r3,0(r16)
 400ab74:	183ff926 	beq	r3,zero,400ab5c <__alt_data_end+0xfc00ab5c>
 400ab78:	88c00015 	stw	r3,0(r17)
 400ab7c:	003ff706 	br	400ab5c <__alt_data_end+0xfc00ab5c>

0400ab80 <_calloc_r>:
 400ab80:	defffe04 	addi	sp,sp,-8
 400ab84:	2805883a 	mov	r2,r5
 400ab88:	dc000015 	stw	r16,0(sp)
 400ab8c:	300b883a 	mov	r5,r6
 400ab90:	2021883a 	mov	r16,r4
 400ab94:	1009883a 	mov	r4,r2
 400ab98:	dfc00115 	stw	ra,4(sp)
 400ab9c:	4000bd80 	call	4000bd8 <__mulsi3>
 400aba0:	100b883a 	mov	r5,r2
 400aba4:	8009883a 	mov	r4,r16
 400aba8:	4006e1c0 	call	4006e1c <_malloc_r>
 400abac:	10002926 	beq	r2,zero,400ac54 <_calloc_r+0xd4>
 400abb0:	11bfff17 	ldw	r6,-4(r2)
 400abb4:	1021883a 	mov	r16,r2
 400abb8:	00bfff04 	movi	r2,-4
 400abbc:	308c703a 	and	r6,r6,r2
 400abc0:	00c00904 	movi	r3,36
 400abc4:	308d883a 	add	r6,r6,r2
 400abc8:	19801636 	bltu	r3,r6,400ac24 <_calloc_r+0xa4>
 400abcc:	008004c4 	movi	r2,19
 400abd0:	11800b2e 	bgeu	r2,r6,400ac00 <_calloc_r+0x80>
 400abd4:	80000015 	stw	zero,0(r16)
 400abd8:	80000115 	stw	zero,4(r16)
 400abdc:	008006c4 	movi	r2,27
 400abe0:	11801a2e 	bgeu	r2,r6,400ac4c <_calloc_r+0xcc>
 400abe4:	80000215 	stw	zero,8(r16)
 400abe8:	80000315 	stw	zero,12(r16)
 400abec:	30c0151e 	bne	r6,r3,400ac44 <_calloc_r+0xc4>
 400abf0:	80000415 	stw	zero,16(r16)
 400abf4:	80800604 	addi	r2,r16,24
 400abf8:	80000515 	stw	zero,20(r16)
 400abfc:	00000106 	br	400ac04 <_calloc_r+0x84>
 400ac00:	8005883a 	mov	r2,r16
 400ac04:	10000015 	stw	zero,0(r2)
 400ac08:	10000115 	stw	zero,4(r2)
 400ac0c:	10000215 	stw	zero,8(r2)
 400ac10:	8005883a 	mov	r2,r16
 400ac14:	dfc00117 	ldw	ra,4(sp)
 400ac18:	dc000017 	ldw	r16,0(sp)
 400ac1c:	dec00204 	addi	sp,sp,8
 400ac20:	f800283a 	ret
 400ac24:	000b883a 	mov	r5,zero
 400ac28:	8009883a 	mov	r4,r16
 400ac2c:	40079b00 	call	40079b0 <memset>
 400ac30:	8005883a 	mov	r2,r16
 400ac34:	dfc00117 	ldw	ra,4(sp)
 400ac38:	dc000017 	ldw	r16,0(sp)
 400ac3c:	dec00204 	addi	sp,sp,8
 400ac40:	f800283a 	ret
 400ac44:	80800404 	addi	r2,r16,16
 400ac48:	003fee06 	br	400ac04 <__alt_data_end+0xfc00ac04>
 400ac4c:	80800204 	addi	r2,r16,8
 400ac50:	003fec06 	br	400ac04 <__alt_data_end+0xfc00ac04>
 400ac54:	0005883a 	mov	r2,zero
 400ac58:	003fee06 	br	400ac14 <__alt_data_end+0xfc00ac14>

0400ac5c <_fclose_r>:
 400ac5c:	28003926 	beq	r5,zero,400ad44 <_fclose_r+0xe8>
 400ac60:	defffc04 	addi	sp,sp,-16
 400ac64:	dc400115 	stw	r17,4(sp)
 400ac68:	dc000015 	stw	r16,0(sp)
 400ac6c:	dfc00315 	stw	ra,12(sp)
 400ac70:	dc800215 	stw	r18,8(sp)
 400ac74:	2023883a 	mov	r17,r4
 400ac78:	2821883a 	mov	r16,r5
 400ac7c:	20000226 	beq	r4,zero,400ac88 <_fclose_r+0x2c>
 400ac80:	20800e17 	ldw	r2,56(r4)
 400ac84:	10002726 	beq	r2,zero,400ad24 <_fclose_r+0xc8>
 400ac88:	8080030f 	ldh	r2,12(r16)
 400ac8c:	1000071e 	bne	r2,zero,400acac <_fclose_r+0x50>
 400ac90:	0005883a 	mov	r2,zero
 400ac94:	dfc00317 	ldw	ra,12(sp)
 400ac98:	dc800217 	ldw	r18,8(sp)
 400ac9c:	dc400117 	ldw	r17,4(sp)
 400aca0:	dc000017 	ldw	r16,0(sp)
 400aca4:	dec00404 	addi	sp,sp,16
 400aca8:	f800283a 	ret
 400acac:	800b883a 	mov	r5,r16
 400acb0:	8809883a 	mov	r4,r17
 400acb4:	4005aa80 	call	4005aa8 <__sflush_r>
 400acb8:	1025883a 	mov	r18,r2
 400acbc:	80800b17 	ldw	r2,44(r16)
 400acc0:	10000426 	beq	r2,zero,400acd4 <_fclose_r+0x78>
 400acc4:	81400717 	ldw	r5,28(r16)
 400acc8:	8809883a 	mov	r4,r17
 400accc:	103ee83a 	callr	r2
 400acd0:	10001616 	blt	r2,zero,400ad2c <_fclose_r+0xd0>
 400acd4:	8080030b 	ldhu	r2,12(r16)
 400acd8:	1080200c 	andi	r2,r2,128
 400acdc:	1000151e 	bne	r2,zero,400ad34 <_fclose_r+0xd8>
 400ace0:	81400c17 	ldw	r5,48(r16)
 400ace4:	28000526 	beq	r5,zero,400acfc <_fclose_r+0xa0>
 400ace8:	80801004 	addi	r2,r16,64
 400acec:	28800226 	beq	r5,r2,400acf8 <_fclose_r+0x9c>
 400acf0:	8809883a 	mov	r4,r17
 400acf4:	40062240 	call	4006224 <_free_r>
 400acf8:	80000c15 	stw	zero,48(r16)
 400acfc:	81401117 	ldw	r5,68(r16)
 400ad00:	28000326 	beq	r5,zero,400ad10 <_fclose_r+0xb4>
 400ad04:	8809883a 	mov	r4,r17
 400ad08:	40062240 	call	4006224 <_free_r>
 400ad0c:	80001115 	stw	zero,68(r16)
 400ad10:	40060c00 	call	40060c0 <__sfp_lock_acquire>
 400ad14:	8000030d 	sth	zero,12(r16)
 400ad18:	40060c40 	call	40060c4 <__sfp_lock_release>
 400ad1c:	9005883a 	mov	r2,r18
 400ad20:	003fdc06 	br	400ac94 <__alt_data_end+0xfc00ac94>
 400ad24:	40060b00 	call	40060b0 <__sinit>
 400ad28:	003fd706 	br	400ac88 <__alt_data_end+0xfc00ac88>
 400ad2c:	04bfffc4 	movi	r18,-1
 400ad30:	003fe806 	br	400acd4 <__alt_data_end+0xfc00acd4>
 400ad34:	81400417 	ldw	r5,16(r16)
 400ad38:	8809883a 	mov	r4,r17
 400ad3c:	40062240 	call	4006224 <_free_r>
 400ad40:	003fe706 	br	400ace0 <__alt_data_end+0xfc00ace0>
 400ad44:	0005883a 	mov	r2,zero
 400ad48:	f800283a 	ret

0400ad4c <fclose>:
 400ad4c:	00810074 	movhi	r2,1025
 400ad50:	108e5b04 	addi	r2,r2,14700
 400ad54:	200b883a 	mov	r5,r4
 400ad58:	11000017 	ldw	r4,0(r2)
 400ad5c:	400ac5c1 	jmpi	400ac5c <_fclose_r>

0400ad60 <__fputwc>:
 400ad60:	defff804 	addi	sp,sp,-32
 400ad64:	dcc00415 	stw	r19,16(sp)
 400ad68:	dc800315 	stw	r18,12(sp)
 400ad6c:	dc000115 	stw	r16,4(sp)
 400ad70:	dfc00715 	stw	ra,28(sp)
 400ad74:	dd400615 	stw	r21,24(sp)
 400ad78:	dd000515 	stw	r20,20(sp)
 400ad7c:	dc400215 	stw	r17,8(sp)
 400ad80:	2027883a 	mov	r19,r4
 400ad84:	2825883a 	mov	r18,r5
 400ad88:	3021883a 	mov	r16,r6
 400ad8c:	4006c0c0 	call	4006c0c <__locale_mb_cur_max>
 400ad90:	00c00044 	movi	r3,1
 400ad94:	10c03e26 	beq	r2,r3,400ae90 <__fputwc+0x130>
 400ad98:	81c01704 	addi	r7,r16,92
 400ad9c:	900d883a 	mov	r6,r18
 400ada0:	d80b883a 	mov	r5,sp
 400ada4:	9809883a 	mov	r4,r19
 400ada8:	400b2300 	call	400b230 <_wcrtomb_r>
 400adac:	1029883a 	mov	r20,r2
 400adb0:	00bfffc4 	movi	r2,-1
 400adb4:	a0802026 	beq	r20,r2,400ae38 <__fputwc+0xd8>
 400adb8:	d9400003 	ldbu	r5,0(sp)
 400adbc:	a0001c26 	beq	r20,zero,400ae30 <__fputwc+0xd0>
 400adc0:	0023883a 	mov	r17,zero
 400adc4:	05400284 	movi	r21,10
 400adc8:	00000906 	br	400adf0 <__fputwc+0x90>
 400adcc:	80800017 	ldw	r2,0(r16)
 400add0:	11400005 	stb	r5,0(r2)
 400add4:	80c00017 	ldw	r3,0(r16)
 400add8:	18c00044 	addi	r3,r3,1
 400addc:	80c00015 	stw	r3,0(r16)
 400ade0:	8c400044 	addi	r17,r17,1
 400ade4:	dc45883a 	add	r2,sp,r17
 400ade8:	8d00112e 	bgeu	r17,r20,400ae30 <__fputwc+0xd0>
 400adec:	11400003 	ldbu	r5,0(r2)
 400adf0:	80c00217 	ldw	r3,8(r16)
 400adf4:	18ffffc4 	addi	r3,r3,-1
 400adf8:	80c00215 	stw	r3,8(r16)
 400adfc:	183ff30e 	bge	r3,zero,400adcc <__alt_data_end+0xfc00adcc>
 400ae00:	80800617 	ldw	r2,24(r16)
 400ae04:	18801916 	blt	r3,r2,400ae6c <__fputwc+0x10c>
 400ae08:	80800017 	ldw	r2,0(r16)
 400ae0c:	11400005 	stb	r5,0(r2)
 400ae10:	80800017 	ldw	r2,0(r16)
 400ae14:	10c00003 	ldbu	r3,0(r2)
 400ae18:	10800044 	addi	r2,r2,1
 400ae1c:	1d402326 	beq	r3,r21,400aeac <__fputwc+0x14c>
 400ae20:	80800015 	stw	r2,0(r16)
 400ae24:	8c400044 	addi	r17,r17,1
 400ae28:	dc45883a 	add	r2,sp,r17
 400ae2c:	8d3fef36 	bltu	r17,r20,400adec <__alt_data_end+0xfc00adec>
 400ae30:	9005883a 	mov	r2,r18
 400ae34:	00000406 	br	400ae48 <__fputwc+0xe8>
 400ae38:	80c0030b 	ldhu	r3,12(r16)
 400ae3c:	a005883a 	mov	r2,r20
 400ae40:	18c01014 	ori	r3,r3,64
 400ae44:	80c0030d 	sth	r3,12(r16)
 400ae48:	dfc00717 	ldw	ra,28(sp)
 400ae4c:	dd400617 	ldw	r21,24(sp)
 400ae50:	dd000517 	ldw	r20,20(sp)
 400ae54:	dcc00417 	ldw	r19,16(sp)
 400ae58:	dc800317 	ldw	r18,12(sp)
 400ae5c:	dc400217 	ldw	r17,8(sp)
 400ae60:	dc000117 	ldw	r16,4(sp)
 400ae64:	dec00804 	addi	sp,sp,32
 400ae68:	f800283a 	ret
 400ae6c:	800d883a 	mov	r6,r16
 400ae70:	29403fcc 	andi	r5,r5,255
 400ae74:	9809883a 	mov	r4,r19
 400ae78:	400b0d80 	call	400b0d8 <__swbuf_r>
 400ae7c:	10bfffe0 	cmpeqi	r2,r2,-1
 400ae80:	10803fcc 	andi	r2,r2,255
 400ae84:	103fd626 	beq	r2,zero,400ade0 <__alt_data_end+0xfc00ade0>
 400ae88:	00bfffc4 	movi	r2,-1
 400ae8c:	003fee06 	br	400ae48 <__alt_data_end+0xfc00ae48>
 400ae90:	90ffffc4 	addi	r3,r18,-1
 400ae94:	01003f84 	movi	r4,254
 400ae98:	20ffbf36 	bltu	r4,r3,400ad98 <__alt_data_end+0xfc00ad98>
 400ae9c:	900b883a 	mov	r5,r18
 400aea0:	dc800005 	stb	r18,0(sp)
 400aea4:	1029883a 	mov	r20,r2
 400aea8:	003fc506 	br	400adc0 <__alt_data_end+0xfc00adc0>
 400aeac:	800d883a 	mov	r6,r16
 400aeb0:	a80b883a 	mov	r5,r21
 400aeb4:	9809883a 	mov	r4,r19
 400aeb8:	400b0d80 	call	400b0d8 <__swbuf_r>
 400aebc:	10bfffe0 	cmpeqi	r2,r2,-1
 400aec0:	003fef06 	br	400ae80 <__alt_data_end+0xfc00ae80>

0400aec4 <_fputwc_r>:
 400aec4:	3080030b 	ldhu	r2,12(r6)
 400aec8:	10c8000c 	andi	r3,r2,8192
 400aecc:	1800051e 	bne	r3,zero,400aee4 <_fputwc_r+0x20>
 400aed0:	30c01917 	ldw	r3,100(r6)
 400aed4:	10880014 	ori	r2,r2,8192
 400aed8:	3080030d 	sth	r2,12(r6)
 400aedc:	18880014 	ori	r2,r3,8192
 400aee0:	30801915 	stw	r2,100(r6)
 400aee4:	400ad601 	jmpi	400ad60 <__fputwc>

0400aee8 <fputwc>:
 400aee8:	00810074 	movhi	r2,1025
 400aeec:	defffc04 	addi	sp,sp,-16
 400aef0:	108e5b04 	addi	r2,r2,14700
 400aef4:	dc000115 	stw	r16,4(sp)
 400aef8:	14000017 	ldw	r16,0(r2)
 400aefc:	dc400215 	stw	r17,8(sp)
 400af00:	dfc00315 	stw	ra,12(sp)
 400af04:	2023883a 	mov	r17,r4
 400af08:	80000226 	beq	r16,zero,400af14 <fputwc+0x2c>
 400af0c:	80800e17 	ldw	r2,56(r16)
 400af10:	10001026 	beq	r2,zero,400af54 <fputwc+0x6c>
 400af14:	2880030b 	ldhu	r2,12(r5)
 400af18:	10c8000c 	andi	r3,r2,8192
 400af1c:	1800051e 	bne	r3,zero,400af34 <fputwc+0x4c>
 400af20:	28c01917 	ldw	r3,100(r5)
 400af24:	10880014 	ori	r2,r2,8192
 400af28:	2880030d 	sth	r2,12(r5)
 400af2c:	18880014 	ori	r2,r3,8192
 400af30:	28801915 	stw	r2,100(r5)
 400af34:	280d883a 	mov	r6,r5
 400af38:	8009883a 	mov	r4,r16
 400af3c:	880b883a 	mov	r5,r17
 400af40:	dfc00317 	ldw	ra,12(sp)
 400af44:	dc400217 	ldw	r17,8(sp)
 400af48:	dc000117 	ldw	r16,4(sp)
 400af4c:	dec00404 	addi	sp,sp,16
 400af50:	400ad601 	jmpi	400ad60 <__fputwc>
 400af54:	8009883a 	mov	r4,r16
 400af58:	d9400015 	stw	r5,0(sp)
 400af5c:	40060b00 	call	40060b0 <__sinit>
 400af60:	d9400017 	ldw	r5,0(sp)
 400af64:	003feb06 	br	400af14 <__alt_data_end+0xfc00af14>

0400af68 <_fstat_r>:
 400af68:	defffd04 	addi	sp,sp,-12
 400af6c:	2805883a 	mov	r2,r5
 400af70:	dc000015 	stw	r16,0(sp)
 400af74:	04010074 	movhi	r16,1025
 400af78:	dc400115 	stw	r17,4(sp)
 400af7c:	84113604 	addi	r16,r16,17624
 400af80:	2023883a 	mov	r17,r4
 400af84:	300b883a 	mov	r5,r6
 400af88:	1009883a 	mov	r4,r2
 400af8c:	dfc00215 	stw	ra,8(sp)
 400af90:	80000015 	stw	zero,0(r16)
 400af94:	400eb480 	call	400eb48 <fstat>
 400af98:	00ffffc4 	movi	r3,-1
 400af9c:	10c00526 	beq	r2,r3,400afb4 <_fstat_r+0x4c>
 400afa0:	dfc00217 	ldw	ra,8(sp)
 400afa4:	dc400117 	ldw	r17,4(sp)
 400afa8:	dc000017 	ldw	r16,0(sp)
 400afac:	dec00304 	addi	sp,sp,12
 400afb0:	f800283a 	ret
 400afb4:	80c00017 	ldw	r3,0(r16)
 400afb8:	183ff926 	beq	r3,zero,400afa0 <__alt_data_end+0xfc00afa0>
 400afbc:	88c00015 	stw	r3,0(r17)
 400afc0:	003ff706 	br	400afa0 <__alt_data_end+0xfc00afa0>

0400afc4 <_isatty_r>:
 400afc4:	defffd04 	addi	sp,sp,-12
 400afc8:	dc000015 	stw	r16,0(sp)
 400afcc:	04010074 	movhi	r16,1025
 400afd0:	dc400115 	stw	r17,4(sp)
 400afd4:	84113604 	addi	r16,r16,17624
 400afd8:	2023883a 	mov	r17,r4
 400afdc:	2809883a 	mov	r4,r5
 400afe0:	dfc00215 	stw	ra,8(sp)
 400afe4:	80000015 	stw	zero,0(r16)
 400afe8:	400ec3c0 	call	400ec3c <isatty>
 400afec:	00ffffc4 	movi	r3,-1
 400aff0:	10c00526 	beq	r2,r3,400b008 <_isatty_r+0x44>
 400aff4:	dfc00217 	ldw	ra,8(sp)
 400aff8:	dc400117 	ldw	r17,4(sp)
 400affc:	dc000017 	ldw	r16,0(sp)
 400b000:	dec00304 	addi	sp,sp,12
 400b004:	f800283a 	ret
 400b008:	80c00017 	ldw	r3,0(r16)
 400b00c:	183ff926 	beq	r3,zero,400aff4 <__alt_data_end+0xfc00aff4>
 400b010:	88c00015 	stw	r3,0(r17)
 400b014:	003ff706 	br	400aff4 <__alt_data_end+0xfc00aff4>

0400b018 <_lseek_r>:
 400b018:	defffd04 	addi	sp,sp,-12
 400b01c:	2805883a 	mov	r2,r5
 400b020:	dc000015 	stw	r16,0(sp)
 400b024:	04010074 	movhi	r16,1025
 400b028:	dc400115 	stw	r17,4(sp)
 400b02c:	300b883a 	mov	r5,r6
 400b030:	84113604 	addi	r16,r16,17624
 400b034:	2023883a 	mov	r17,r4
 400b038:	380d883a 	mov	r6,r7
 400b03c:	1009883a 	mov	r4,r2
 400b040:	dfc00215 	stw	ra,8(sp)
 400b044:	80000015 	stw	zero,0(r16)
 400b048:	400ee100 	call	400ee10 <lseek>
 400b04c:	00ffffc4 	movi	r3,-1
 400b050:	10c00526 	beq	r2,r3,400b068 <_lseek_r+0x50>
 400b054:	dfc00217 	ldw	ra,8(sp)
 400b058:	dc400117 	ldw	r17,4(sp)
 400b05c:	dc000017 	ldw	r16,0(sp)
 400b060:	dec00304 	addi	sp,sp,12
 400b064:	f800283a 	ret
 400b068:	80c00017 	ldw	r3,0(r16)
 400b06c:	183ff926 	beq	r3,zero,400b054 <__alt_data_end+0xfc00b054>
 400b070:	88c00015 	stw	r3,0(r17)
 400b074:	003ff706 	br	400b054 <__alt_data_end+0xfc00b054>

0400b078 <_read_r>:
 400b078:	defffd04 	addi	sp,sp,-12
 400b07c:	2805883a 	mov	r2,r5
 400b080:	dc000015 	stw	r16,0(sp)
 400b084:	04010074 	movhi	r16,1025
 400b088:	dc400115 	stw	r17,4(sp)
 400b08c:	300b883a 	mov	r5,r6
 400b090:	84113604 	addi	r16,r16,17624
 400b094:	2023883a 	mov	r17,r4
 400b098:	380d883a 	mov	r6,r7
 400b09c:	1009883a 	mov	r4,r2
 400b0a0:	dfc00215 	stw	ra,8(sp)
 400b0a4:	80000015 	stw	zero,0(r16)
 400b0a8:	400efec0 	call	400efec <read>
 400b0ac:	00ffffc4 	movi	r3,-1
 400b0b0:	10c00526 	beq	r2,r3,400b0c8 <_read_r+0x50>
 400b0b4:	dfc00217 	ldw	ra,8(sp)
 400b0b8:	dc400117 	ldw	r17,4(sp)
 400b0bc:	dc000017 	ldw	r16,0(sp)
 400b0c0:	dec00304 	addi	sp,sp,12
 400b0c4:	f800283a 	ret
 400b0c8:	80c00017 	ldw	r3,0(r16)
 400b0cc:	183ff926 	beq	r3,zero,400b0b4 <__alt_data_end+0xfc00b0b4>
 400b0d0:	88c00015 	stw	r3,0(r17)
 400b0d4:	003ff706 	br	400b0b4 <__alt_data_end+0xfc00b0b4>

0400b0d8 <__swbuf_r>:
 400b0d8:	defffb04 	addi	sp,sp,-20
 400b0dc:	dcc00315 	stw	r19,12(sp)
 400b0e0:	dc800215 	stw	r18,8(sp)
 400b0e4:	dc000015 	stw	r16,0(sp)
 400b0e8:	dfc00415 	stw	ra,16(sp)
 400b0ec:	dc400115 	stw	r17,4(sp)
 400b0f0:	2025883a 	mov	r18,r4
 400b0f4:	2827883a 	mov	r19,r5
 400b0f8:	3021883a 	mov	r16,r6
 400b0fc:	20000226 	beq	r4,zero,400b108 <__swbuf_r+0x30>
 400b100:	20800e17 	ldw	r2,56(r4)
 400b104:	10004226 	beq	r2,zero,400b210 <__swbuf_r+0x138>
 400b108:	80800617 	ldw	r2,24(r16)
 400b10c:	8100030b 	ldhu	r4,12(r16)
 400b110:	80800215 	stw	r2,8(r16)
 400b114:	2080020c 	andi	r2,r4,8
 400b118:	10003626 	beq	r2,zero,400b1f4 <__swbuf_r+0x11c>
 400b11c:	80c00417 	ldw	r3,16(r16)
 400b120:	18003426 	beq	r3,zero,400b1f4 <__swbuf_r+0x11c>
 400b124:	2088000c 	andi	r2,r4,8192
 400b128:	9c403fcc 	andi	r17,r19,255
 400b12c:	10001a26 	beq	r2,zero,400b198 <__swbuf_r+0xc0>
 400b130:	80800017 	ldw	r2,0(r16)
 400b134:	81000517 	ldw	r4,20(r16)
 400b138:	10c7c83a 	sub	r3,r2,r3
 400b13c:	1900200e 	bge	r3,r4,400b1c0 <__swbuf_r+0xe8>
 400b140:	18c00044 	addi	r3,r3,1
 400b144:	81000217 	ldw	r4,8(r16)
 400b148:	11400044 	addi	r5,r2,1
 400b14c:	81400015 	stw	r5,0(r16)
 400b150:	213fffc4 	addi	r4,r4,-1
 400b154:	81000215 	stw	r4,8(r16)
 400b158:	14c00005 	stb	r19,0(r2)
 400b15c:	80800517 	ldw	r2,20(r16)
 400b160:	10c01e26 	beq	r2,r3,400b1dc <__swbuf_r+0x104>
 400b164:	8080030b 	ldhu	r2,12(r16)
 400b168:	1080004c 	andi	r2,r2,1
 400b16c:	10000226 	beq	r2,zero,400b178 <__swbuf_r+0xa0>
 400b170:	00800284 	movi	r2,10
 400b174:	88801926 	beq	r17,r2,400b1dc <__swbuf_r+0x104>
 400b178:	8805883a 	mov	r2,r17
 400b17c:	dfc00417 	ldw	ra,16(sp)
 400b180:	dcc00317 	ldw	r19,12(sp)
 400b184:	dc800217 	ldw	r18,8(sp)
 400b188:	dc400117 	ldw	r17,4(sp)
 400b18c:	dc000017 	ldw	r16,0(sp)
 400b190:	dec00504 	addi	sp,sp,20
 400b194:	f800283a 	ret
 400b198:	81401917 	ldw	r5,100(r16)
 400b19c:	00b7ffc4 	movi	r2,-8193
 400b1a0:	21080014 	ori	r4,r4,8192
 400b1a4:	2884703a 	and	r2,r5,r2
 400b1a8:	80801915 	stw	r2,100(r16)
 400b1ac:	80800017 	ldw	r2,0(r16)
 400b1b0:	8100030d 	sth	r4,12(r16)
 400b1b4:	81000517 	ldw	r4,20(r16)
 400b1b8:	10c7c83a 	sub	r3,r2,r3
 400b1bc:	193fe016 	blt	r3,r4,400b140 <__alt_data_end+0xfc00b140>
 400b1c0:	800b883a 	mov	r5,r16
 400b1c4:	9009883a 	mov	r4,r18
 400b1c8:	4005cc40 	call	4005cc4 <_fflush_r>
 400b1cc:	1000071e 	bne	r2,zero,400b1ec <__swbuf_r+0x114>
 400b1d0:	80800017 	ldw	r2,0(r16)
 400b1d4:	00c00044 	movi	r3,1
 400b1d8:	003fda06 	br	400b144 <__alt_data_end+0xfc00b144>
 400b1dc:	800b883a 	mov	r5,r16
 400b1e0:	9009883a 	mov	r4,r18
 400b1e4:	4005cc40 	call	4005cc4 <_fflush_r>
 400b1e8:	103fe326 	beq	r2,zero,400b178 <__alt_data_end+0xfc00b178>
 400b1ec:	00bfffc4 	movi	r2,-1
 400b1f0:	003fe206 	br	400b17c <__alt_data_end+0xfc00b17c>
 400b1f4:	800b883a 	mov	r5,r16
 400b1f8:	9009883a 	mov	r4,r18
 400b1fc:	40040a40 	call	40040a4 <__swsetup_r>
 400b200:	103ffa1e 	bne	r2,zero,400b1ec <__alt_data_end+0xfc00b1ec>
 400b204:	8100030b 	ldhu	r4,12(r16)
 400b208:	80c00417 	ldw	r3,16(r16)
 400b20c:	003fc506 	br	400b124 <__alt_data_end+0xfc00b124>
 400b210:	40060b00 	call	40060b0 <__sinit>
 400b214:	003fbc06 	br	400b108 <__alt_data_end+0xfc00b108>

0400b218 <__swbuf>:
 400b218:	00810074 	movhi	r2,1025
 400b21c:	108e5b04 	addi	r2,r2,14700
 400b220:	280d883a 	mov	r6,r5
 400b224:	200b883a 	mov	r5,r4
 400b228:	11000017 	ldw	r4,0(r2)
 400b22c:	400b0d81 	jmpi	400b0d8 <__swbuf_r>

0400b230 <_wcrtomb_r>:
 400b230:	defff604 	addi	sp,sp,-40
 400b234:	00810074 	movhi	r2,1025
 400b238:	dc800815 	stw	r18,32(sp)
 400b23c:	dc400715 	stw	r17,28(sp)
 400b240:	dc000615 	stw	r16,24(sp)
 400b244:	108e5f04 	addi	r2,r2,14716
 400b248:	dfc00915 	stw	ra,36(sp)
 400b24c:	2021883a 	mov	r16,r4
 400b250:	3823883a 	mov	r17,r7
 400b254:	14800017 	ldw	r18,0(r2)
 400b258:	28001426 	beq	r5,zero,400b2ac <_wcrtomb_r+0x7c>
 400b25c:	d9400415 	stw	r5,16(sp)
 400b260:	d9800515 	stw	r6,20(sp)
 400b264:	4006c000 	call	4006c00 <__locale_charset>
 400b268:	d9800517 	ldw	r6,20(sp)
 400b26c:	d9400417 	ldw	r5,16(sp)
 400b270:	100f883a 	mov	r7,r2
 400b274:	dc400015 	stw	r17,0(sp)
 400b278:	8009883a 	mov	r4,r16
 400b27c:	903ee83a 	callr	r18
 400b280:	00ffffc4 	movi	r3,-1
 400b284:	10c0031e 	bne	r2,r3,400b294 <_wcrtomb_r+0x64>
 400b288:	88000015 	stw	zero,0(r17)
 400b28c:	00c02284 	movi	r3,138
 400b290:	80c00015 	stw	r3,0(r16)
 400b294:	dfc00917 	ldw	ra,36(sp)
 400b298:	dc800817 	ldw	r18,32(sp)
 400b29c:	dc400717 	ldw	r17,28(sp)
 400b2a0:	dc000617 	ldw	r16,24(sp)
 400b2a4:	dec00a04 	addi	sp,sp,40
 400b2a8:	f800283a 	ret
 400b2ac:	4006c000 	call	4006c00 <__locale_charset>
 400b2b0:	100f883a 	mov	r7,r2
 400b2b4:	dc400015 	stw	r17,0(sp)
 400b2b8:	000d883a 	mov	r6,zero
 400b2bc:	d9400104 	addi	r5,sp,4
 400b2c0:	8009883a 	mov	r4,r16
 400b2c4:	903ee83a 	callr	r18
 400b2c8:	003fed06 	br	400b280 <__alt_data_end+0xfc00b280>

0400b2cc <wcrtomb>:
 400b2cc:	defff604 	addi	sp,sp,-40
 400b2d0:	00810074 	movhi	r2,1025
 400b2d4:	dc800615 	stw	r18,24(sp)
 400b2d8:	dc400515 	stw	r17,20(sp)
 400b2dc:	108e5b04 	addi	r2,r2,14700
 400b2e0:	dfc00915 	stw	ra,36(sp)
 400b2e4:	dd000815 	stw	r20,32(sp)
 400b2e8:	dcc00715 	stw	r19,28(sp)
 400b2ec:	dc000415 	stw	r16,16(sp)
 400b2f0:	3025883a 	mov	r18,r6
 400b2f4:	14400017 	ldw	r17,0(r2)
 400b2f8:	20001926 	beq	r4,zero,400b360 <wcrtomb+0x94>
 400b2fc:	00810074 	movhi	r2,1025
 400b300:	108e5f04 	addi	r2,r2,14716
 400b304:	15000017 	ldw	r20,0(r2)
 400b308:	2021883a 	mov	r16,r4
 400b30c:	2827883a 	mov	r19,r5
 400b310:	4006c000 	call	4006c00 <__locale_charset>
 400b314:	100f883a 	mov	r7,r2
 400b318:	dc800015 	stw	r18,0(sp)
 400b31c:	980d883a 	mov	r6,r19
 400b320:	800b883a 	mov	r5,r16
 400b324:	8809883a 	mov	r4,r17
 400b328:	a03ee83a 	callr	r20
 400b32c:	00ffffc4 	movi	r3,-1
 400b330:	10c0031e 	bne	r2,r3,400b340 <wcrtomb+0x74>
 400b334:	90000015 	stw	zero,0(r18)
 400b338:	00c02284 	movi	r3,138
 400b33c:	88c00015 	stw	r3,0(r17)
 400b340:	dfc00917 	ldw	ra,36(sp)
 400b344:	dd000817 	ldw	r20,32(sp)
 400b348:	dcc00717 	ldw	r19,28(sp)
 400b34c:	dc800617 	ldw	r18,24(sp)
 400b350:	dc400517 	ldw	r17,20(sp)
 400b354:	dc000417 	ldw	r16,16(sp)
 400b358:	dec00a04 	addi	sp,sp,40
 400b35c:	f800283a 	ret
 400b360:	00810074 	movhi	r2,1025
 400b364:	108e5f04 	addi	r2,r2,14716
 400b368:	14000017 	ldw	r16,0(r2)
 400b36c:	4006c000 	call	4006c00 <__locale_charset>
 400b370:	100f883a 	mov	r7,r2
 400b374:	dc800015 	stw	r18,0(sp)
 400b378:	000d883a 	mov	r6,zero
 400b37c:	d9400104 	addi	r5,sp,4
 400b380:	8809883a 	mov	r4,r17
 400b384:	803ee83a 	callr	r16
 400b388:	003fe806 	br	400b32c <__alt_data_end+0xfc00b32c>

0400b38c <__ascii_wctomb>:
 400b38c:	28000526 	beq	r5,zero,400b3a4 <__ascii_wctomb+0x18>
 400b390:	00803fc4 	movi	r2,255
 400b394:	11800536 	bltu	r2,r6,400b3ac <__ascii_wctomb+0x20>
 400b398:	29800005 	stb	r6,0(r5)
 400b39c:	00800044 	movi	r2,1
 400b3a0:	f800283a 	ret
 400b3a4:	0005883a 	mov	r2,zero
 400b3a8:	f800283a 	ret
 400b3ac:	00802284 	movi	r2,138
 400b3b0:	20800015 	stw	r2,0(r4)
 400b3b4:	00bfffc4 	movi	r2,-1
 400b3b8:	f800283a 	ret

0400b3bc <_wctomb_r>:
 400b3bc:	00810074 	movhi	r2,1025
 400b3c0:	defff904 	addi	sp,sp,-28
 400b3c4:	108e5f04 	addi	r2,r2,14716
 400b3c8:	dfc00615 	stw	ra,24(sp)
 400b3cc:	dc400515 	stw	r17,20(sp)
 400b3d0:	dc000415 	stw	r16,16(sp)
 400b3d4:	3823883a 	mov	r17,r7
 400b3d8:	14000017 	ldw	r16,0(r2)
 400b3dc:	d9000115 	stw	r4,4(sp)
 400b3e0:	d9400215 	stw	r5,8(sp)
 400b3e4:	d9800315 	stw	r6,12(sp)
 400b3e8:	4006c000 	call	4006c00 <__locale_charset>
 400b3ec:	d9800317 	ldw	r6,12(sp)
 400b3f0:	d9400217 	ldw	r5,8(sp)
 400b3f4:	d9000117 	ldw	r4,4(sp)
 400b3f8:	100f883a 	mov	r7,r2
 400b3fc:	dc400015 	stw	r17,0(sp)
 400b400:	803ee83a 	callr	r16
 400b404:	dfc00617 	ldw	ra,24(sp)
 400b408:	dc400517 	ldw	r17,20(sp)
 400b40c:	dc000417 	ldw	r16,16(sp)
 400b410:	dec00704 	addi	sp,sp,28
 400b414:	f800283a 	ret

0400b418 <__udivdi3>:
 400b418:	defff404 	addi	sp,sp,-48
 400b41c:	dcc00515 	stw	r19,20(sp)
 400b420:	dc000215 	stw	r16,8(sp)
 400b424:	dfc00b15 	stw	ra,44(sp)
 400b428:	df000a15 	stw	fp,40(sp)
 400b42c:	ddc00915 	stw	r23,36(sp)
 400b430:	dd800815 	stw	r22,32(sp)
 400b434:	dd400715 	stw	r21,28(sp)
 400b438:	dd000615 	stw	r20,24(sp)
 400b43c:	dc800415 	stw	r18,16(sp)
 400b440:	dc400315 	stw	r17,12(sp)
 400b444:	2027883a 	mov	r19,r4
 400b448:	2821883a 	mov	r16,r5
 400b44c:	3800461e 	bne	r7,zero,400b568 <__udivdi3+0x150>
 400b450:	3023883a 	mov	r17,r6
 400b454:	2025883a 	mov	r18,r4
 400b458:	2980572e 	bgeu	r5,r6,400b5b8 <__udivdi3+0x1a0>
 400b45c:	00bfffd4 	movui	r2,65535
 400b460:	282d883a 	mov	r22,r5
 400b464:	1180b236 	bltu	r2,r6,400b730 <__udivdi3+0x318>
 400b468:	00803fc4 	movi	r2,255
 400b46c:	1185803a 	cmpltu	r2,r2,r6
 400b470:	100490fa 	slli	r2,r2,3
 400b474:	3086d83a 	srl	r3,r6,r2
 400b478:	01010074 	movhi	r4,1025
 400b47c:	210a0d04 	addi	r4,r4,10292
 400b480:	20c7883a 	add	r3,r4,r3
 400b484:	18c00003 	ldbu	r3,0(r3)
 400b488:	1885883a 	add	r2,r3,r2
 400b48c:	00c00804 	movi	r3,32
 400b490:	1887c83a 	sub	r3,r3,r2
 400b494:	18000526 	beq	r3,zero,400b4ac <__udivdi3+0x94>
 400b498:	80e0983a 	sll	r16,r16,r3
 400b49c:	9884d83a 	srl	r2,r19,r2
 400b4a0:	30e2983a 	sll	r17,r6,r3
 400b4a4:	98e4983a 	sll	r18,r19,r3
 400b4a8:	142cb03a 	or	r22,r2,r16
 400b4ac:	882ad43a 	srli	r21,r17,16
 400b4b0:	b009883a 	mov	r4,r22
 400b4b4:	8d3fffcc 	andi	r20,r17,65535
 400b4b8:	a80b883a 	mov	r5,r21
 400b4bc:	400c1340 	call	400c134 <__umodsi3>
 400b4c0:	b009883a 	mov	r4,r22
 400b4c4:	a80b883a 	mov	r5,r21
 400b4c8:	1027883a 	mov	r19,r2
 400b4cc:	400c0d00 	call	400c0d0 <__udivsi3>
 400b4d0:	100b883a 	mov	r5,r2
 400b4d4:	a009883a 	mov	r4,r20
 400b4d8:	102d883a 	mov	r22,r2
 400b4dc:	4000bd80 	call	4000bd8 <__mulsi3>
 400b4e0:	9826943a 	slli	r19,r19,16
 400b4e4:	9006d43a 	srli	r3,r18,16
 400b4e8:	1cc6b03a 	or	r3,r3,r19
 400b4ec:	1880052e 	bgeu	r3,r2,400b504 <__udivdi3+0xec>
 400b4f0:	1c47883a 	add	r3,r3,r17
 400b4f4:	b13fffc4 	addi	r4,r22,-1
 400b4f8:	1c400136 	bltu	r3,r17,400b500 <__udivdi3+0xe8>
 400b4fc:	18814236 	bltu	r3,r2,400ba08 <__udivdi3+0x5f0>
 400b500:	202d883a 	mov	r22,r4
 400b504:	18a1c83a 	sub	r16,r3,r2
 400b508:	8009883a 	mov	r4,r16
 400b50c:	a80b883a 	mov	r5,r21
 400b510:	400c1340 	call	400c134 <__umodsi3>
 400b514:	1027883a 	mov	r19,r2
 400b518:	8009883a 	mov	r4,r16
 400b51c:	a80b883a 	mov	r5,r21
 400b520:	9826943a 	slli	r19,r19,16
 400b524:	400c0d00 	call	400c0d0 <__udivsi3>
 400b528:	100b883a 	mov	r5,r2
 400b52c:	a009883a 	mov	r4,r20
 400b530:	94bfffcc 	andi	r18,r18,65535
 400b534:	1021883a 	mov	r16,r2
 400b538:	94e4b03a 	or	r18,r18,r19
 400b53c:	4000bd80 	call	4000bd8 <__mulsi3>
 400b540:	9080052e 	bgeu	r18,r2,400b558 <__udivdi3+0x140>
 400b544:	8ca5883a 	add	r18,r17,r18
 400b548:	80ffffc4 	addi	r3,r16,-1
 400b54c:	94410c36 	bltu	r18,r17,400b980 <__udivdi3+0x568>
 400b550:	90810b2e 	bgeu	r18,r2,400b980 <__udivdi3+0x568>
 400b554:	843fff84 	addi	r16,r16,-2
 400b558:	b004943a 	slli	r2,r22,16
 400b55c:	0007883a 	mov	r3,zero
 400b560:	1404b03a 	or	r2,r2,r16
 400b564:	00005e06 	br	400b6e0 <__udivdi3+0x2c8>
 400b568:	29c05b36 	bltu	r5,r7,400b6d8 <__udivdi3+0x2c0>
 400b56c:	00bfffd4 	movui	r2,65535
 400b570:	11c0672e 	bgeu	r2,r7,400b710 <__udivdi3+0x2f8>
 400b574:	00804034 	movhi	r2,256
 400b578:	10bfffc4 	addi	r2,r2,-1
 400b57c:	11c10a36 	bltu	r2,r7,400b9a8 <__udivdi3+0x590>
 400b580:	00800404 	movi	r2,16
 400b584:	3886d83a 	srl	r3,r7,r2
 400b588:	01010074 	movhi	r4,1025
 400b58c:	210a0d04 	addi	r4,r4,10292
 400b590:	20c7883a 	add	r3,r4,r3
 400b594:	18c00003 	ldbu	r3,0(r3)
 400b598:	05c00804 	movi	r23,32
 400b59c:	1885883a 	add	r2,r3,r2
 400b5a0:	b8afc83a 	sub	r23,r23,r2
 400b5a4:	b800671e 	bne	r23,zero,400b744 <__udivdi3+0x32c>
 400b5a8:	3c010536 	bltu	r7,r16,400b9c0 <__udivdi3+0x5a8>
 400b5ac:	9985403a 	cmpgeu	r2,r19,r6
 400b5b0:	0007883a 	mov	r3,zero
 400b5b4:	00004a06 	br	400b6e0 <__udivdi3+0x2c8>
 400b5b8:	3000041e 	bne	r6,zero,400b5cc <__udivdi3+0x1b4>
 400b5bc:	000b883a 	mov	r5,zero
 400b5c0:	01000044 	movi	r4,1
 400b5c4:	400c0d00 	call	400c0d0 <__udivsi3>
 400b5c8:	1023883a 	mov	r17,r2
 400b5cc:	00bfffd4 	movui	r2,65535
 400b5d0:	1440532e 	bgeu	r2,r17,400b720 <__udivdi3+0x308>
 400b5d4:	00804034 	movhi	r2,256
 400b5d8:	10bfffc4 	addi	r2,r2,-1
 400b5dc:	1440f436 	bltu	r2,r17,400b9b0 <__udivdi3+0x598>
 400b5e0:	00800404 	movi	r2,16
 400b5e4:	8886d83a 	srl	r3,r17,r2
 400b5e8:	01010074 	movhi	r4,1025
 400b5ec:	210a0d04 	addi	r4,r4,10292
 400b5f0:	20c7883a 	add	r3,r4,r3
 400b5f4:	18c00003 	ldbu	r3,0(r3)
 400b5f8:	1885883a 	add	r2,r3,r2
 400b5fc:	00c00804 	movi	r3,32
 400b600:	1887c83a 	sub	r3,r3,r2
 400b604:	1800a51e 	bne	r3,zero,400b89c <__udivdi3+0x484>
 400b608:	882ad43a 	srli	r21,r17,16
 400b60c:	8461c83a 	sub	r16,r16,r17
 400b610:	8d3fffcc 	andi	r20,r17,65535
 400b614:	00c00044 	movi	r3,1
 400b618:	a80b883a 	mov	r5,r21
 400b61c:	8009883a 	mov	r4,r16
 400b620:	d8c00115 	stw	r3,4(sp)
 400b624:	400c1340 	call	400c134 <__umodsi3>
 400b628:	a80b883a 	mov	r5,r21
 400b62c:	8009883a 	mov	r4,r16
 400b630:	1027883a 	mov	r19,r2
 400b634:	400c0d00 	call	400c0d0 <__udivsi3>
 400b638:	a00b883a 	mov	r5,r20
 400b63c:	1009883a 	mov	r4,r2
 400b640:	102d883a 	mov	r22,r2
 400b644:	4000bd80 	call	4000bd8 <__mulsi3>
 400b648:	9826943a 	slli	r19,r19,16
 400b64c:	900ed43a 	srli	r7,r18,16
 400b650:	d8c00117 	ldw	r3,4(sp)
 400b654:	3cceb03a 	or	r7,r7,r19
 400b658:	3880052e 	bgeu	r7,r2,400b670 <__udivdi3+0x258>
 400b65c:	3c4f883a 	add	r7,r7,r17
 400b660:	b13fffc4 	addi	r4,r22,-1
 400b664:	3c400136 	bltu	r7,r17,400b66c <__udivdi3+0x254>
 400b668:	3880e436 	bltu	r7,r2,400b9fc <__udivdi3+0x5e4>
 400b66c:	202d883a 	mov	r22,r4
 400b670:	38a1c83a 	sub	r16,r7,r2
 400b674:	8009883a 	mov	r4,r16
 400b678:	a80b883a 	mov	r5,r21
 400b67c:	d8c00115 	stw	r3,4(sp)
 400b680:	400c1340 	call	400c134 <__umodsi3>
 400b684:	1027883a 	mov	r19,r2
 400b688:	8009883a 	mov	r4,r16
 400b68c:	a80b883a 	mov	r5,r21
 400b690:	9826943a 	slli	r19,r19,16
 400b694:	400c0d00 	call	400c0d0 <__udivsi3>
 400b698:	a00b883a 	mov	r5,r20
 400b69c:	1009883a 	mov	r4,r2
 400b6a0:	94bfffcc 	andi	r18,r18,65535
 400b6a4:	1021883a 	mov	r16,r2
 400b6a8:	94e4b03a 	or	r18,r18,r19
 400b6ac:	4000bd80 	call	4000bd8 <__mulsi3>
 400b6b0:	d8c00117 	ldw	r3,4(sp)
 400b6b4:	9080052e 	bgeu	r18,r2,400b6cc <__udivdi3+0x2b4>
 400b6b8:	8ca5883a 	add	r18,r17,r18
 400b6bc:	813fffc4 	addi	r4,r16,-1
 400b6c0:	9440ad36 	bltu	r18,r17,400b978 <__udivdi3+0x560>
 400b6c4:	9080ac2e 	bgeu	r18,r2,400b978 <__udivdi3+0x560>
 400b6c8:	843fff84 	addi	r16,r16,-2
 400b6cc:	b004943a 	slli	r2,r22,16
 400b6d0:	1404b03a 	or	r2,r2,r16
 400b6d4:	00000206 	br	400b6e0 <__udivdi3+0x2c8>
 400b6d8:	0007883a 	mov	r3,zero
 400b6dc:	0005883a 	mov	r2,zero
 400b6e0:	dfc00b17 	ldw	ra,44(sp)
 400b6e4:	df000a17 	ldw	fp,40(sp)
 400b6e8:	ddc00917 	ldw	r23,36(sp)
 400b6ec:	dd800817 	ldw	r22,32(sp)
 400b6f0:	dd400717 	ldw	r21,28(sp)
 400b6f4:	dd000617 	ldw	r20,24(sp)
 400b6f8:	dcc00517 	ldw	r19,20(sp)
 400b6fc:	dc800417 	ldw	r18,16(sp)
 400b700:	dc400317 	ldw	r17,12(sp)
 400b704:	dc000217 	ldw	r16,8(sp)
 400b708:	dec00c04 	addi	sp,sp,48
 400b70c:	f800283a 	ret
 400b710:	00803fc4 	movi	r2,255
 400b714:	11c5803a 	cmpltu	r2,r2,r7
 400b718:	100490fa 	slli	r2,r2,3
 400b71c:	003f9906 	br	400b584 <__alt_data_end+0xfc00b584>
 400b720:	00803fc4 	movi	r2,255
 400b724:	1445803a 	cmpltu	r2,r2,r17
 400b728:	100490fa 	slli	r2,r2,3
 400b72c:	003fad06 	br	400b5e4 <__alt_data_end+0xfc00b5e4>
 400b730:	00804034 	movhi	r2,256
 400b734:	10bfffc4 	addi	r2,r2,-1
 400b738:	11809f36 	bltu	r2,r6,400b9b8 <__udivdi3+0x5a0>
 400b73c:	00800404 	movi	r2,16
 400b740:	003f4c06 	br	400b474 <__alt_data_end+0xfc00b474>
 400b744:	3dce983a 	sll	r7,r7,r23
 400b748:	30b8d83a 	srl	fp,r6,r2
 400b74c:	80a2d83a 	srl	r17,r16,r2
 400b750:	35cc983a 	sll	r6,r6,r23
 400b754:	3f38b03a 	or	fp,r7,fp
 400b758:	e024d43a 	srli	r18,fp,16
 400b75c:	9884d83a 	srl	r2,r19,r2
 400b760:	85e0983a 	sll	r16,r16,r23
 400b764:	8809883a 	mov	r4,r17
 400b768:	900b883a 	mov	r5,r18
 400b76c:	d9800015 	stw	r6,0(sp)
 400b770:	1420b03a 	or	r16,r2,r16
 400b774:	400c1340 	call	400c134 <__umodsi3>
 400b778:	900b883a 	mov	r5,r18
 400b77c:	8809883a 	mov	r4,r17
 400b780:	1029883a 	mov	r20,r2
 400b784:	e5bfffcc 	andi	r22,fp,65535
 400b788:	400c0d00 	call	400c0d0 <__udivsi3>
 400b78c:	100b883a 	mov	r5,r2
 400b790:	b009883a 	mov	r4,r22
 400b794:	102b883a 	mov	r21,r2
 400b798:	4000bd80 	call	4000bd8 <__mulsi3>
 400b79c:	a028943a 	slli	r20,r20,16
 400b7a0:	8006d43a 	srli	r3,r16,16
 400b7a4:	1d06b03a 	or	r3,r3,r20
 400b7a8:	1880042e 	bgeu	r3,r2,400b7bc <__udivdi3+0x3a4>
 400b7ac:	1f07883a 	add	r3,r3,fp
 400b7b0:	a93fffc4 	addi	r4,r21,-1
 400b7b4:	1f00892e 	bgeu	r3,fp,400b9dc <__udivdi3+0x5c4>
 400b7b8:	202b883a 	mov	r21,r4
 400b7bc:	18a3c83a 	sub	r17,r3,r2
 400b7c0:	8809883a 	mov	r4,r17
 400b7c4:	900b883a 	mov	r5,r18
 400b7c8:	400c1340 	call	400c134 <__umodsi3>
 400b7cc:	1029883a 	mov	r20,r2
 400b7d0:	8809883a 	mov	r4,r17
 400b7d4:	900b883a 	mov	r5,r18
 400b7d8:	a028943a 	slli	r20,r20,16
 400b7dc:	400c0d00 	call	400c0d0 <__udivsi3>
 400b7e0:	100b883a 	mov	r5,r2
 400b7e4:	b009883a 	mov	r4,r22
 400b7e8:	843fffcc 	andi	r16,r16,65535
 400b7ec:	1023883a 	mov	r17,r2
 400b7f0:	8520b03a 	or	r16,r16,r20
 400b7f4:	4000bd80 	call	4000bd8 <__mulsi3>
 400b7f8:	8080042e 	bgeu	r16,r2,400b80c <__udivdi3+0x3f4>
 400b7fc:	8721883a 	add	r16,r16,fp
 400b800:	88ffffc4 	addi	r3,r17,-1
 400b804:	8700712e 	bgeu	r16,fp,400b9cc <__udivdi3+0x5b4>
 400b808:	1823883a 	mov	r17,r3
 400b80c:	a80e943a 	slli	r7,r21,16
 400b810:	d8c00017 	ldw	r3,0(sp)
 400b814:	80a1c83a 	sub	r16,r16,r2
 400b818:	3c64b03a 	or	r18,r7,r17
 400b81c:	1d3fffcc 	andi	r20,r3,65535
 400b820:	9022d43a 	srli	r17,r18,16
 400b824:	95bfffcc 	andi	r22,r18,65535
 400b828:	a00b883a 	mov	r5,r20
 400b82c:	b009883a 	mov	r4,r22
 400b830:	182ad43a 	srli	r21,r3,16
 400b834:	4000bd80 	call	4000bd8 <__mulsi3>
 400b838:	a00b883a 	mov	r5,r20
 400b83c:	8809883a 	mov	r4,r17
 400b840:	1039883a 	mov	fp,r2
 400b844:	4000bd80 	call	4000bd8 <__mulsi3>
 400b848:	8809883a 	mov	r4,r17
 400b84c:	a80b883a 	mov	r5,r21
 400b850:	1029883a 	mov	r20,r2
 400b854:	4000bd80 	call	4000bd8 <__mulsi3>
 400b858:	a80b883a 	mov	r5,r21
 400b85c:	b009883a 	mov	r4,r22
 400b860:	1023883a 	mov	r17,r2
 400b864:	4000bd80 	call	4000bd8 <__mulsi3>
 400b868:	e006d43a 	srli	r3,fp,16
 400b86c:	1505883a 	add	r2,r2,r20
 400b870:	1887883a 	add	r3,r3,r2
 400b874:	1d00022e 	bgeu	r3,r20,400b880 <__udivdi3+0x468>
 400b878:	00800074 	movhi	r2,1
 400b87c:	88a3883a 	add	r17,r17,r2
 400b880:	1804d43a 	srli	r2,r3,16
 400b884:	1463883a 	add	r17,r2,r17
 400b888:	84404436 	bltu	r16,r17,400b99c <__udivdi3+0x584>
 400b88c:	84403e26 	beq	r16,r17,400b988 <__udivdi3+0x570>
 400b890:	9005883a 	mov	r2,r18
 400b894:	0007883a 	mov	r3,zero
 400b898:	003f9106 	br	400b6e0 <__alt_data_end+0xfc00b6e0>
 400b89c:	88e2983a 	sll	r17,r17,r3
 400b8a0:	80aed83a 	srl	r23,r16,r2
 400b8a4:	80e0983a 	sll	r16,r16,r3
 400b8a8:	882ad43a 	srli	r21,r17,16
 400b8ac:	9884d83a 	srl	r2,r19,r2
 400b8b0:	b809883a 	mov	r4,r23
 400b8b4:	a80b883a 	mov	r5,r21
 400b8b8:	98e4983a 	sll	r18,r19,r3
 400b8bc:	142cb03a 	or	r22,r2,r16
 400b8c0:	400c1340 	call	400c134 <__umodsi3>
 400b8c4:	b809883a 	mov	r4,r23
 400b8c8:	a80b883a 	mov	r5,r21
 400b8cc:	1027883a 	mov	r19,r2
 400b8d0:	8d3fffcc 	andi	r20,r17,65535
 400b8d4:	400c0d00 	call	400c0d0 <__udivsi3>
 400b8d8:	a009883a 	mov	r4,r20
 400b8dc:	100b883a 	mov	r5,r2
 400b8e0:	102f883a 	mov	r23,r2
 400b8e4:	4000bd80 	call	4000bd8 <__mulsi3>
 400b8e8:	9826943a 	slli	r19,r19,16
 400b8ec:	b008d43a 	srli	r4,r22,16
 400b8f0:	24c8b03a 	or	r4,r4,r19
 400b8f4:	2080062e 	bgeu	r4,r2,400b910 <__udivdi3+0x4f8>
 400b8f8:	2449883a 	add	r4,r4,r17
 400b8fc:	b8ffffc4 	addi	r3,r23,-1
 400b900:	24403c36 	bltu	r4,r17,400b9f4 <__udivdi3+0x5dc>
 400b904:	20803b2e 	bgeu	r4,r2,400b9f4 <__udivdi3+0x5dc>
 400b908:	bdffff84 	addi	r23,r23,-2
 400b90c:	2449883a 	add	r4,r4,r17
 400b910:	20a1c83a 	sub	r16,r4,r2
 400b914:	a80b883a 	mov	r5,r21
 400b918:	8009883a 	mov	r4,r16
 400b91c:	400c1340 	call	400c134 <__umodsi3>
 400b920:	a80b883a 	mov	r5,r21
 400b924:	8009883a 	mov	r4,r16
 400b928:	1027883a 	mov	r19,r2
 400b92c:	400c0d00 	call	400c0d0 <__udivsi3>
 400b930:	a009883a 	mov	r4,r20
 400b934:	100b883a 	mov	r5,r2
 400b938:	9826943a 	slli	r19,r19,16
 400b93c:	1039883a 	mov	fp,r2
 400b940:	4000bd80 	call	4000bd8 <__mulsi3>
 400b944:	b13fffcc 	andi	r4,r22,65535
 400b948:	24c8b03a 	or	r4,r4,r19
 400b94c:	2080062e 	bgeu	r4,r2,400b968 <__udivdi3+0x550>
 400b950:	2449883a 	add	r4,r4,r17
 400b954:	e0ffffc4 	addi	r3,fp,-1
 400b958:	24402436 	bltu	r4,r17,400b9ec <__udivdi3+0x5d4>
 400b95c:	2080232e 	bgeu	r4,r2,400b9ec <__udivdi3+0x5d4>
 400b960:	e73fff84 	addi	fp,fp,-2
 400b964:	2449883a 	add	r4,r4,r17
 400b968:	b82e943a 	slli	r23,r23,16
 400b96c:	20a1c83a 	sub	r16,r4,r2
 400b970:	bf06b03a 	or	r3,r23,fp
 400b974:	003f2806 	br	400b618 <__alt_data_end+0xfc00b618>
 400b978:	2021883a 	mov	r16,r4
 400b97c:	003f5306 	br	400b6cc <__alt_data_end+0xfc00b6cc>
 400b980:	1821883a 	mov	r16,r3
 400b984:	003ef406 	br	400b558 <__alt_data_end+0xfc00b558>
 400b988:	1806943a 	slli	r3,r3,16
 400b98c:	9de6983a 	sll	r19,r19,r23
 400b990:	e73fffcc 	andi	fp,fp,65535
 400b994:	1f07883a 	add	r3,r3,fp
 400b998:	98ffbd2e 	bgeu	r19,r3,400b890 <__alt_data_end+0xfc00b890>
 400b99c:	90bfffc4 	addi	r2,r18,-1
 400b9a0:	0007883a 	mov	r3,zero
 400b9a4:	003f4e06 	br	400b6e0 <__alt_data_end+0xfc00b6e0>
 400b9a8:	00800604 	movi	r2,24
 400b9ac:	003ef506 	br	400b584 <__alt_data_end+0xfc00b584>
 400b9b0:	00800604 	movi	r2,24
 400b9b4:	003f0b06 	br	400b5e4 <__alt_data_end+0xfc00b5e4>
 400b9b8:	00800604 	movi	r2,24
 400b9bc:	003ead06 	br	400b474 <__alt_data_end+0xfc00b474>
 400b9c0:	0007883a 	mov	r3,zero
 400b9c4:	00800044 	movi	r2,1
 400b9c8:	003f4506 	br	400b6e0 <__alt_data_end+0xfc00b6e0>
 400b9cc:	80bf8e2e 	bgeu	r16,r2,400b808 <__alt_data_end+0xfc00b808>
 400b9d0:	8c7fff84 	addi	r17,r17,-2
 400b9d4:	8721883a 	add	r16,r16,fp
 400b9d8:	003f8c06 	br	400b80c <__alt_data_end+0xfc00b80c>
 400b9dc:	18bf762e 	bgeu	r3,r2,400b7b8 <__alt_data_end+0xfc00b7b8>
 400b9e0:	ad7fff84 	addi	r21,r21,-2
 400b9e4:	1f07883a 	add	r3,r3,fp
 400b9e8:	003f7406 	br	400b7bc <__alt_data_end+0xfc00b7bc>
 400b9ec:	1839883a 	mov	fp,r3
 400b9f0:	003fdd06 	br	400b968 <__alt_data_end+0xfc00b968>
 400b9f4:	182f883a 	mov	r23,r3
 400b9f8:	003fc506 	br	400b910 <__alt_data_end+0xfc00b910>
 400b9fc:	b5bfff84 	addi	r22,r22,-2
 400ba00:	3c4f883a 	add	r7,r7,r17
 400ba04:	003f1a06 	br	400b670 <__alt_data_end+0xfc00b670>
 400ba08:	b5bfff84 	addi	r22,r22,-2
 400ba0c:	1c47883a 	add	r3,r3,r17
 400ba10:	003ebc06 	br	400b504 <__alt_data_end+0xfc00b504>

0400ba14 <__umoddi3>:
 400ba14:	defff304 	addi	sp,sp,-52
 400ba18:	df000b15 	stw	fp,44(sp)
 400ba1c:	dc400415 	stw	r17,16(sp)
 400ba20:	dc000315 	stw	r16,12(sp)
 400ba24:	dfc00c15 	stw	ra,48(sp)
 400ba28:	ddc00a15 	stw	r23,40(sp)
 400ba2c:	dd800915 	stw	r22,36(sp)
 400ba30:	dd400815 	stw	r21,32(sp)
 400ba34:	dd000715 	stw	r20,28(sp)
 400ba38:	dcc00615 	stw	r19,24(sp)
 400ba3c:	dc800515 	stw	r18,20(sp)
 400ba40:	2021883a 	mov	r16,r4
 400ba44:	2823883a 	mov	r17,r5
 400ba48:	2839883a 	mov	fp,r5
 400ba4c:	3800401e 	bne	r7,zero,400bb50 <__umoddi3+0x13c>
 400ba50:	3027883a 	mov	r19,r6
 400ba54:	2029883a 	mov	r20,r4
 400ba58:	2980552e 	bgeu	r5,r6,400bbb0 <__umoddi3+0x19c>
 400ba5c:	00bfffd4 	movui	r2,65535
 400ba60:	1180a236 	bltu	r2,r6,400bcec <__umoddi3+0x2d8>
 400ba64:	01003fc4 	movi	r4,255
 400ba68:	2189803a 	cmpltu	r4,r4,r6
 400ba6c:	200890fa 	slli	r4,r4,3
 400ba70:	3104d83a 	srl	r2,r6,r4
 400ba74:	00c10074 	movhi	r3,1025
 400ba78:	18ca0d04 	addi	r3,r3,10292
 400ba7c:	1885883a 	add	r2,r3,r2
 400ba80:	10c00003 	ldbu	r3,0(r2)
 400ba84:	00800804 	movi	r2,32
 400ba88:	1909883a 	add	r4,r3,r4
 400ba8c:	1125c83a 	sub	r18,r2,r4
 400ba90:	90000526 	beq	r18,zero,400baa8 <__umoddi3+0x94>
 400ba94:	8ca2983a 	sll	r17,r17,r18
 400ba98:	8108d83a 	srl	r4,r16,r4
 400ba9c:	34a6983a 	sll	r19,r6,r18
 400baa0:	84a8983a 	sll	r20,r16,r18
 400baa4:	2478b03a 	or	fp,r4,r17
 400baa8:	982cd43a 	srli	r22,r19,16
 400baac:	e009883a 	mov	r4,fp
 400bab0:	9dffffcc 	andi	r23,r19,65535
 400bab4:	b00b883a 	mov	r5,r22
 400bab8:	400c1340 	call	400c134 <__umodsi3>
 400babc:	b00b883a 	mov	r5,r22
 400bac0:	e009883a 	mov	r4,fp
 400bac4:	102b883a 	mov	r21,r2
 400bac8:	400c0d00 	call	400c0d0 <__udivsi3>
 400bacc:	100b883a 	mov	r5,r2
 400bad0:	b809883a 	mov	r4,r23
 400bad4:	4000bd80 	call	4000bd8 <__mulsi3>
 400bad8:	a82a943a 	slli	r21,r21,16
 400badc:	a006d43a 	srli	r3,r20,16
 400bae0:	1d46b03a 	or	r3,r3,r21
 400bae4:	1880032e 	bgeu	r3,r2,400baf4 <__umoddi3+0xe0>
 400bae8:	1cc7883a 	add	r3,r3,r19
 400baec:	1cc00136 	bltu	r3,r19,400baf4 <__umoddi3+0xe0>
 400baf0:	18813136 	bltu	r3,r2,400bfb8 <__umoddi3+0x5a4>
 400baf4:	18a1c83a 	sub	r16,r3,r2
 400baf8:	b00b883a 	mov	r5,r22
 400bafc:	8009883a 	mov	r4,r16
 400bb00:	400c1340 	call	400c134 <__umodsi3>
 400bb04:	b00b883a 	mov	r5,r22
 400bb08:	8009883a 	mov	r4,r16
 400bb0c:	1023883a 	mov	r17,r2
 400bb10:	400c0d00 	call	400c0d0 <__udivsi3>
 400bb14:	100b883a 	mov	r5,r2
 400bb18:	b809883a 	mov	r4,r23
 400bb1c:	8822943a 	slli	r17,r17,16
 400bb20:	4000bd80 	call	4000bd8 <__mulsi3>
 400bb24:	a0ffffcc 	andi	r3,r20,65535
 400bb28:	1c46b03a 	or	r3,r3,r17
 400bb2c:	1880042e 	bgeu	r3,r2,400bb40 <__umoddi3+0x12c>
 400bb30:	1cc7883a 	add	r3,r3,r19
 400bb34:	1cc00236 	bltu	r3,r19,400bb40 <__umoddi3+0x12c>
 400bb38:	1880012e 	bgeu	r3,r2,400bb40 <__umoddi3+0x12c>
 400bb3c:	1cc7883a 	add	r3,r3,r19
 400bb40:	1885c83a 	sub	r2,r3,r2
 400bb44:	1484d83a 	srl	r2,r2,r18
 400bb48:	0007883a 	mov	r3,zero
 400bb4c:	00005306 	br	400bc9c <__umoddi3+0x288>
 400bb50:	29c05036 	bltu	r5,r7,400bc94 <__umoddi3+0x280>
 400bb54:	00bfffd4 	movui	r2,65535
 400bb58:	11c05c2e 	bgeu	r2,r7,400bccc <__umoddi3+0x2b8>
 400bb5c:	00804034 	movhi	r2,256
 400bb60:	10bfffc4 	addi	r2,r2,-1
 400bb64:	11c10636 	bltu	r2,r7,400bf80 <__umoddi3+0x56c>
 400bb68:	01000404 	movi	r4,16
 400bb6c:	3904d83a 	srl	r2,r7,r4
 400bb70:	00c10074 	movhi	r3,1025
 400bb74:	18ca0d04 	addi	r3,r3,10292
 400bb78:	1885883a 	add	r2,r3,r2
 400bb7c:	14c00003 	ldbu	r19,0(r2)
 400bb80:	00c00804 	movi	r3,32
 400bb84:	9927883a 	add	r19,r19,r4
 400bb88:	1ce9c83a 	sub	r20,r3,r19
 400bb8c:	a0005c1e 	bne	r20,zero,400bd00 <__umoddi3+0x2ec>
 400bb90:	3c400136 	bltu	r7,r17,400bb98 <__umoddi3+0x184>
 400bb94:	81810a36 	bltu	r16,r6,400bfc0 <__umoddi3+0x5ac>
 400bb98:	8185c83a 	sub	r2,r16,r6
 400bb9c:	89e3c83a 	sub	r17,r17,r7
 400bba0:	8089803a 	cmpltu	r4,r16,r2
 400bba4:	8939c83a 	sub	fp,r17,r4
 400bba8:	e007883a 	mov	r3,fp
 400bbac:	00003b06 	br	400bc9c <__umoddi3+0x288>
 400bbb0:	3000041e 	bne	r6,zero,400bbc4 <__umoddi3+0x1b0>
 400bbb4:	000b883a 	mov	r5,zero
 400bbb8:	01000044 	movi	r4,1
 400bbbc:	400c0d00 	call	400c0d0 <__udivsi3>
 400bbc0:	1027883a 	mov	r19,r2
 400bbc4:	00bfffd4 	movui	r2,65535
 400bbc8:	14c0442e 	bgeu	r2,r19,400bcdc <__umoddi3+0x2c8>
 400bbcc:	00804034 	movhi	r2,256
 400bbd0:	10bfffc4 	addi	r2,r2,-1
 400bbd4:	14c0ec36 	bltu	r2,r19,400bf88 <__umoddi3+0x574>
 400bbd8:	00800404 	movi	r2,16
 400bbdc:	9886d83a 	srl	r3,r19,r2
 400bbe0:	01010074 	movhi	r4,1025
 400bbe4:	210a0d04 	addi	r4,r4,10292
 400bbe8:	20c7883a 	add	r3,r4,r3
 400bbec:	18c00003 	ldbu	r3,0(r3)
 400bbf0:	1887883a 	add	r3,r3,r2
 400bbf4:	00800804 	movi	r2,32
 400bbf8:	10e5c83a 	sub	r18,r2,r3
 400bbfc:	9000ab1e 	bne	r18,zero,400beac <__umoddi3+0x498>
 400bc00:	982cd43a 	srli	r22,r19,16
 400bc04:	8ce3c83a 	sub	r17,r17,r19
 400bc08:	9dffffcc 	andi	r23,r19,65535
 400bc0c:	b00b883a 	mov	r5,r22
 400bc10:	8809883a 	mov	r4,r17
 400bc14:	400c1340 	call	400c134 <__umodsi3>
 400bc18:	b00b883a 	mov	r5,r22
 400bc1c:	8809883a 	mov	r4,r17
 400bc20:	102b883a 	mov	r21,r2
 400bc24:	400c0d00 	call	400c0d0 <__udivsi3>
 400bc28:	b80b883a 	mov	r5,r23
 400bc2c:	1009883a 	mov	r4,r2
 400bc30:	4000bd80 	call	4000bd8 <__mulsi3>
 400bc34:	a82a943a 	slli	r21,r21,16
 400bc38:	a006d43a 	srli	r3,r20,16
 400bc3c:	1d46b03a 	or	r3,r3,r21
 400bc40:	1880042e 	bgeu	r3,r2,400bc54 <__umoddi3+0x240>
 400bc44:	1cc7883a 	add	r3,r3,r19
 400bc48:	1cc00236 	bltu	r3,r19,400bc54 <__umoddi3+0x240>
 400bc4c:	1880012e 	bgeu	r3,r2,400bc54 <__umoddi3+0x240>
 400bc50:	1cc7883a 	add	r3,r3,r19
 400bc54:	18a1c83a 	sub	r16,r3,r2
 400bc58:	b00b883a 	mov	r5,r22
 400bc5c:	8009883a 	mov	r4,r16
 400bc60:	400c1340 	call	400c134 <__umodsi3>
 400bc64:	1023883a 	mov	r17,r2
 400bc68:	b00b883a 	mov	r5,r22
 400bc6c:	8009883a 	mov	r4,r16
 400bc70:	400c0d00 	call	400c0d0 <__udivsi3>
 400bc74:	8822943a 	slli	r17,r17,16
 400bc78:	b80b883a 	mov	r5,r23
 400bc7c:	1009883a 	mov	r4,r2
 400bc80:	4000bd80 	call	4000bd8 <__mulsi3>
 400bc84:	a53fffcc 	andi	r20,r20,65535
 400bc88:	a446b03a 	or	r3,r20,r17
 400bc8c:	18bfac2e 	bgeu	r3,r2,400bb40 <__alt_data_end+0xfc00bb40>
 400bc90:	003fa706 	br	400bb30 <__alt_data_end+0xfc00bb30>
 400bc94:	2005883a 	mov	r2,r4
 400bc98:	2807883a 	mov	r3,r5
 400bc9c:	dfc00c17 	ldw	ra,48(sp)
 400bca0:	df000b17 	ldw	fp,44(sp)
 400bca4:	ddc00a17 	ldw	r23,40(sp)
 400bca8:	dd800917 	ldw	r22,36(sp)
 400bcac:	dd400817 	ldw	r21,32(sp)
 400bcb0:	dd000717 	ldw	r20,28(sp)
 400bcb4:	dcc00617 	ldw	r19,24(sp)
 400bcb8:	dc800517 	ldw	r18,20(sp)
 400bcbc:	dc400417 	ldw	r17,16(sp)
 400bcc0:	dc000317 	ldw	r16,12(sp)
 400bcc4:	dec00d04 	addi	sp,sp,52
 400bcc8:	f800283a 	ret
 400bccc:	04c03fc4 	movi	r19,255
 400bcd0:	99c9803a 	cmpltu	r4,r19,r7
 400bcd4:	200890fa 	slli	r4,r4,3
 400bcd8:	003fa406 	br	400bb6c <__alt_data_end+0xfc00bb6c>
 400bcdc:	00803fc4 	movi	r2,255
 400bce0:	14c5803a 	cmpltu	r2,r2,r19
 400bce4:	100490fa 	slli	r2,r2,3
 400bce8:	003fbc06 	br	400bbdc <__alt_data_end+0xfc00bbdc>
 400bcec:	00804034 	movhi	r2,256
 400bcf0:	10bfffc4 	addi	r2,r2,-1
 400bcf4:	1180a636 	bltu	r2,r6,400bf90 <__umoddi3+0x57c>
 400bcf8:	01000404 	movi	r4,16
 400bcfc:	003f5c06 	br	400ba70 <__alt_data_end+0xfc00ba70>
 400bd00:	3d0e983a 	sll	r7,r7,r20
 400bd04:	34ead83a 	srl	r21,r6,r19
 400bd08:	8cc6d83a 	srl	r3,r17,r19
 400bd0c:	8d10983a 	sll	r8,r17,r20
 400bd10:	3d6ab03a 	or	r21,r7,r21
 400bd14:	a82cd43a 	srli	r22,r21,16
 400bd18:	84e2d83a 	srl	r17,r16,r19
 400bd1c:	1809883a 	mov	r4,r3
 400bd20:	b00b883a 	mov	r5,r22
 400bd24:	8a22b03a 	or	r17,r17,r8
 400bd28:	3524983a 	sll	r18,r6,r20
 400bd2c:	dc400015 	stw	r17,0(sp)
 400bd30:	d8c00115 	stw	r3,4(sp)
 400bd34:	400c1340 	call	400c134 <__umodsi3>
 400bd38:	d8c00117 	ldw	r3,4(sp)
 400bd3c:	b00b883a 	mov	r5,r22
 400bd40:	1039883a 	mov	fp,r2
 400bd44:	1809883a 	mov	r4,r3
 400bd48:	400c0d00 	call	400c0d0 <__udivsi3>
 400bd4c:	adffffcc 	andi	r23,r21,65535
 400bd50:	100b883a 	mov	r5,r2
 400bd54:	b809883a 	mov	r4,r23
 400bd58:	1023883a 	mov	r17,r2
 400bd5c:	4000bd80 	call	4000bd8 <__mulsi3>
 400bd60:	d9400017 	ldw	r5,0(sp)
 400bd64:	e008943a 	slli	r4,fp,16
 400bd68:	8520983a 	sll	r16,r16,r20
 400bd6c:	2806d43a 	srli	r3,r5,16
 400bd70:	1906b03a 	or	r3,r3,r4
 400bd74:	1880042e 	bgeu	r3,r2,400bd88 <__umoddi3+0x374>
 400bd78:	1d47883a 	add	r3,r3,r21
 400bd7c:	893fffc4 	addi	r4,r17,-1
 400bd80:	1d40892e 	bgeu	r3,r21,400bfa8 <__umoddi3+0x594>
 400bd84:	2023883a 	mov	r17,r4
 400bd88:	18b9c83a 	sub	fp,r3,r2
 400bd8c:	b00b883a 	mov	r5,r22
 400bd90:	e009883a 	mov	r4,fp
 400bd94:	400c1340 	call	400c134 <__umodsi3>
 400bd98:	b00b883a 	mov	r5,r22
 400bd9c:	e009883a 	mov	r4,fp
 400bda0:	d8800215 	stw	r2,8(sp)
 400bda4:	400c0d00 	call	400c0d0 <__udivsi3>
 400bda8:	100b883a 	mov	r5,r2
 400bdac:	b809883a 	mov	r4,r23
 400bdb0:	102d883a 	mov	r22,r2
 400bdb4:	4000bd80 	call	4000bd8 <__mulsi3>
 400bdb8:	d9800217 	ldw	r6,8(sp)
 400bdbc:	d8c00017 	ldw	r3,0(sp)
 400bdc0:	300c943a 	slli	r6,r6,16
 400bdc4:	1a3fffcc 	andi	r8,r3,65535
 400bdc8:	4190b03a 	or	r8,r8,r6
 400bdcc:	4080042e 	bgeu	r8,r2,400bde0 <__umoddi3+0x3cc>
 400bdd0:	4551883a 	add	r8,r8,r21
 400bdd4:	b0ffffc4 	addi	r3,r22,-1
 400bdd8:	45406f2e 	bgeu	r8,r21,400bf98 <__umoddi3+0x584>
 400bddc:	182d883a 	mov	r22,r3
 400bde0:	880e943a 	slli	r7,r17,16
 400bde4:	9006d43a 	srli	r3,r18,16
 400bde8:	91bfffcc 	andi	r6,r18,65535
 400bdec:	3dacb03a 	or	r22,r7,r22
 400bdf0:	b02ed43a 	srli	r23,r22,16
 400bdf4:	b5bfffcc 	andi	r22,r22,65535
 400bdf8:	300b883a 	mov	r5,r6
 400bdfc:	b009883a 	mov	r4,r22
 400be00:	40a3c83a 	sub	r17,r8,r2
 400be04:	d8c00115 	stw	r3,4(sp)
 400be08:	d9800215 	stw	r6,8(sp)
 400be0c:	4000bd80 	call	4000bd8 <__mulsi3>
 400be10:	d9800217 	ldw	r6,8(sp)
 400be14:	b809883a 	mov	r4,r23
 400be18:	1039883a 	mov	fp,r2
 400be1c:	300b883a 	mov	r5,r6
 400be20:	4000bd80 	call	4000bd8 <__mulsi3>
 400be24:	d8c00117 	ldw	r3,4(sp)
 400be28:	b809883a 	mov	r4,r23
 400be2c:	d8800215 	stw	r2,8(sp)
 400be30:	180b883a 	mov	r5,r3
 400be34:	4000bd80 	call	4000bd8 <__mulsi3>
 400be38:	d8c00117 	ldw	r3,4(sp)
 400be3c:	b009883a 	mov	r4,r22
 400be40:	102f883a 	mov	r23,r2
 400be44:	180b883a 	mov	r5,r3
 400be48:	4000bd80 	call	4000bd8 <__mulsi3>
 400be4c:	d9800217 	ldw	r6,8(sp)
 400be50:	e006d43a 	srli	r3,fp,16
 400be54:	1185883a 	add	r2,r2,r6
 400be58:	1885883a 	add	r2,r3,r2
 400be5c:	1180022e 	bgeu	r2,r6,400be68 <__umoddi3+0x454>
 400be60:	00c00074 	movhi	r3,1
 400be64:	b8ef883a 	add	r23,r23,r3
 400be68:	1006d43a 	srli	r3,r2,16
 400be6c:	1004943a 	slli	r2,r2,16
 400be70:	e73fffcc 	andi	fp,fp,65535
 400be74:	1dc7883a 	add	r3,r3,r23
 400be78:	1739883a 	add	fp,r2,fp
 400be7c:	88c03a36 	bltu	r17,r3,400bf68 <__umoddi3+0x554>
 400be80:	88c05126 	beq	r17,r3,400bfc8 <__umoddi3+0x5b4>
 400be84:	88c9c83a 	sub	r4,r17,r3
 400be88:	e00f883a 	mov	r7,fp
 400be8c:	81cfc83a 	sub	r7,r16,r7
 400be90:	81c7803a 	cmpltu	r3,r16,r7
 400be94:	20c7c83a 	sub	r3,r4,r3
 400be98:	1cc4983a 	sll	r2,r3,r19
 400be9c:	3d0ed83a 	srl	r7,r7,r20
 400bea0:	1d06d83a 	srl	r3,r3,r20
 400bea4:	11c4b03a 	or	r2,r2,r7
 400bea8:	003f7c06 	br	400bc9c <__alt_data_end+0xfc00bc9c>
 400beac:	9ca6983a 	sll	r19,r19,r18
 400beb0:	88f8d83a 	srl	fp,r17,r3
 400beb4:	80c4d83a 	srl	r2,r16,r3
 400beb8:	982cd43a 	srli	r22,r19,16
 400bebc:	8ca2983a 	sll	r17,r17,r18
 400bec0:	e009883a 	mov	r4,fp
 400bec4:	b00b883a 	mov	r5,r22
 400bec8:	146ab03a 	or	r21,r2,r17
 400becc:	400c1340 	call	400c134 <__umodsi3>
 400bed0:	b00b883a 	mov	r5,r22
 400bed4:	e009883a 	mov	r4,fp
 400bed8:	1029883a 	mov	r20,r2
 400bedc:	9dffffcc 	andi	r23,r19,65535
 400bee0:	400c0d00 	call	400c0d0 <__udivsi3>
 400bee4:	b809883a 	mov	r4,r23
 400bee8:	100b883a 	mov	r5,r2
 400beec:	4000bd80 	call	4000bd8 <__mulsi3>
 400bef0:	a008943a 	slli	r4,r20,16
 400bef4:	a806d43a 	srli	r3,r21,16
 400bef8:	84a8983a 	sll	r20,r16,r18
 400befc:	1906b03a 	or	r3,r3,r4
 400bf00:	1880042e 	bgeu	r3,r2,400bf14 <__umoddi3+0x500>
 400bf04:	1cc7883a 	add	r3,r3,r19
 400bf08:	1cc00236 	bltu	r3,r19,400bf14 <__umoddi3+0x500>
 400bf0c:	1880012e 	bgeu	r3,r2,400bf14 <__umoddi3+0x500>
 400bf10:	1cc7883a 	add	r3,r3,r19
 400bf14:	18a3c83a 	sub	r17,r3,r2
 400bf18:	b00b883a 	mov	r5,r22
 400bf1c:	8809883a 	mov	r4,r17
 400bf20:	400c1340 	call	400c134 <__umodsi3>
 400bf24:	b00b883a 	mov	r5,r22
 400bf28:	8809883a 	mov	r4,r17
 400bf2c:	1021883a 	mov	r16,r2
 400bf30:	400c0d00 	call	400c0d0 <__udivsi3>
 400bf34:	100b883a 	mov	r5,r2
 400bf38:	b809883a 	mov	r4,r23
 400bf3c:	8020943a 	slli	r16,r16,16
 400bf40:	4000bd80 	call	4000bd8 <__mulsi3>
 400bf44:	a8ffffcc 	andi	r3,r21,65535
 400bf48:	1c06b03a 	or	r3,r3,r16
 400bf4c:	1880042e 	bgeu	r3,r2,400bf60 <__umoddi3+0x54c>
 400bf50:	1cc7883a 	add	r3,r3,r19
 400bf54:	1cc00236 	bltu	r3,r19,400bf60 <__umoddi3+0x54c>
 400bf58:	1880012e 	bgeu	r3,r2,400bf60 <__umoddi3+0x54c>
 400bf5c:	1cc7883a 	add	r3,r3,r19
 400bf60:	18a3c83a 	sub	r17,r3,r2
 400bf64:	003f2906 	br	400bc0c <__alt_data_end+0xfc00bc0c>
 400bf68:	e48fc83a 	sub	r7,fp,r18
 400bf6c:	1d49c83a 	sub	r4,r3,r21
 400bf70:	e1f9803a 	cmpltu	fp,fp,r7
 400bf74:	2739c83a 	sub	fp,r4,fp
 400bf78:	8f09c83a 	sub	r4,r17,fp
 400bf7c:	003fc306 	br	400be8c <__alt_data_end+0xfc00be8c>
 400bf80:	01000604 	movi	r4,24
 400bf84:	003ef906 	br	400bb6c <__alt_data_end+0xfc00bb6c>
 400bf88:	00800604 	movi	r2,24
 400bf8c:	003f1306 	br	400bbdc <__alt_data_end+0xfc00bbdc>
 400bf90:	01000604 	movi	r4,24
 400bf94:	003eb606 	br	400ba70 <__alt_data_end+0xfc00ba70>
 400bf98:	40bf902e 	bgeu	r8,r2,400bddc <__alt_data_end+0xfc00bddc>
 400bf9c:	b5bfff84 	addi	r22,r22,-2
 400bfa0:	4551883a 	add	r8,r8,r21
 400bfa4:	003f8e06 	br	400bde0 <__alt_data_end+0xfc00bde0>
 400bfa8:	18bf762e 	bgeu	r3,r2,400bd84 <__alt_data_end+0xfc00bd84>
 400bfac:	8c7fff84 	addi	r17,r17,-2
 400bfb0:	1d47883a 	add	r3,r3,r21
 400bfb4:	003f7406 	br	400bd88 <__alt_data_end+0xfc00bd88>
 400bfb8:	1cc7883a 	add	r3,r3,r19
 400bfbc:	003ecd06 	br	400baf4 <__alt_data_end+0xfc00baf4>
 400bfc0:	8005883a 	mov	r2,r16
 400bfc4:	003ef806 	br	400bba8 <__alt_data_end+0xfc00bba8>
 400bfc8:	873fe736 	bltu	r16,fp,400bf68 <__alt_data_end+0xfc00bf68>
 400bfcc:	e00f883a 	mov	r7,fp
 400bfd0:	0009883a 	mov	r4,zero
 400bfd4:	003fad06 	br	400be8c <__alt_data_end+0xfc00be8c>

0400bfd8 <__divsi3>:
 400bfd8:	20001b16 	blt	r4,zero,400c048 <__divsi3+0x70>
 400bfdc:	000f883a 	mov	r7,zero
 400bfe0:	28001616 	blt	r5,zero,400c03c <__divsi3+0x64>
 400bfe4:	200d883a 	mov	r6,r4
 400bfe8:	29001a2e 	bgeu	r5,r4,400c054 <__divsi3+0x7c>
 400bfec:	00800804 	movi	r2,32
 400bff0:	00c00044 	movi	r3,1
 400bff4:	00000106 	br	400bffc <__divsi3+0x24>
 400bff8:	10000d26 	beq	r2,zero,400c030 <__divsi3+0x58>
 400bffc:	294b883a 	add	r5,r5,r5
 400c000:	10bfffc4 	addi	r2,r2,-1
 400c004:	18c7883a 	add	r3,r3,r3
 400c008:	293ffb36 	bltu	r5,r4,400bff8 <__alt_data_end+0xfc00bff8>
 400c00c:	0005883a 	mov	r2,zero
 400c010:	18000726 	beq	r3,zero,400c030 <__divsi3+0x58>
 400c014:	0005883a 	mov	r2,zero
 400c018:	31400236 	bltu	r6,r5,400c024 <__divsi3+0x4c>
 400c01c:	314dc83a 	sub	r6,r6,r5
 400c020:	10c4b03a 	or	r2,r2,r3
 400c024:	1806d07a 	srli	r3,r3,1
 400c028:	280ad07a 	srli	r5,r5,1
 400c02c:	183ffa1e 	bne	r3,zero,400c018 <__alt_data_end+0xfc00c018>
 400c030:	38000126 	beq	r7,zero,400c038 <__divsi3+0x60>
 400c034:	0085c83a 	sub	r2,zero,r2
 400c038:	f800283a 	ret
 400c03c:	014bc83a 	sub	r5,zero,r5
 400c040:	39c0005c 	xori	r7,r7,1
 400c044:	003fe706 	br	400bfe4 <__alt_data_end+0xfc00bfe4>
 400c048:	0109c83a 	sub	r4,zero,r4
 400c04c:	01c00044 	movi	r7,1
 400c050:	003fe306 	br	400bfe0 <__alt_data_end+0xfc00bfe0>
 400c054:	00c00044 	movi	r3,1
 400c058:	003fee06 	br	400c014 <__alt_data_end+0xfc00c014>

0400c05c <__modsi3>:
 400c05c:	20001716 	blt	r4,zero,400c0bc <__modsi3+0x60>
 400c060:	000f883a 	mov	r7,zero
 400c064:	2005883a 	mov	r2,r4
 400c068:	28001216 	blt	r5,zero,400c0b4 <__modsi3+0x58>
 400c06c:	2900162e 	bgeu	r5,r4,400c0c8 <__modsi3+0x6c>
 400c070:	01800804 	movi	r6,32
 400c074:	00c00044 	movi	r3,1
 400c078:	00000106 	br	400c080 <__modsi3+0x24>
 400c07c:	30000a26 	beq	r6,zero,400c0a8 <__modsi3+0x4c>
 400c080:	294b883a 	add	r5,r5,r5
 400c084:	31bfffc4 	addi	r6,r6,-1
 400c088:	18c7883a 	add	r3,r3,r3
 400c08c:	293ffb36 	bltu	r5,r4,400c07c <__alt_data_end+0xfc00c07c>
 400c090:	18000526 	beq	r3,zero,400c0a8 <__modsi3+0x4c>
 400c094:	1806d07a 	srli	r3,r3,1
 400c098:	11400136 	bltu	r2,r5,400c0a0 <__modsi3+0x44>
 400c09c:	1145c83a 	sub	r2,r2,r5
 400c0a0:	280ad07a 	srli	r5,r5,1
 400c0a4:	183ffb1e 	bne	r3,zero,400c094 <__alt_data_end+0xfc00c094>
 400c0a8:	38000126 	beq	r7,zero,400c0b0 <__modsi3+0x54>
 400c0ac:	0085c83a 	sub	r2,zero,r2
 400c0b0:	f800283a 	ret
 400c0b4:	014bc83a 	sub	r5,zero,r5
 400c0b8:	003fec06 	br	400c06c <__alt_data_end+0xfc00c06c>
 400c0bc:	0109c83a 	sub	r4,zero,r4
 400c0c0:	01c00044 	movi	r7,1
 400c0c4:	003fe706 	br	400c064 <__alt_data_end+0xfc00c064>
 400c0c8:	00c00044 	movi	r3,1
 400c0cc:	003ff106 	br	400c094 <__alt_data_end+0xfc00c094>

0400c0d0 <__udivsi3>:
 400c0d0:	200d883a 	mov	r6,r4
 400c0d4:	2900152e 	bgeu	r5,r4,400c12c <__udivsi3+0x5c>
 400c0d8:	28001416 	blt	r5,zero,400c12c <__udivsi3+0x5c>
 400c0dc:	00800804 	movi	r2,32
 400c0e0:	00c00044 	movi	r3,1
 400c0e4:	00000206 	br	400c0f0 <__udivsi3+0x20>
 400c0e8:	10000e26 	beq	r2,zero,400c124 <__udivsi3+0x54>
 400c0ec:	28000516 	blt	r5,zero,400c104 <__udivsi3+0x34>
 400c0f0:	294b883a 	add	r5,r5,r5
 400c0f4:	10bfffc4 	addi	r2,r2,-1
 400c0f8:	18c7883a 	add	r3,r3,r3
 400c0fc:	293ffa36 	bltu	r5,r4,400c0e8 <__alt_data_end+0xfc00c0e8>
 400c100:	18000826 	beq	r3,zero,400c124 <__udivsi3+0x54>
 400c104:	0005883a 	mov	r2,zero
 400c108:	31400236 	bltu	r6,r5,400c114 <__udivsi3+0x44>
 400c10c:	314dc83a 	sub	r6,r6,r5
 400c110:	10c4b03a 	or	r2,r2,r3
 400c114:	1806d07a 	srli	r3,r3,1
 400c118:	280ad07a 	srli	r5,r5,1
 400c11c:	183ffa1e 	bne	r3,zero,400c108 <__alt_data_end+0xfc00c108>
 400c120:	f800283a 	ret
 400c124:	0005883a 	mov	r2,zero
 400c128:	f800283a 	ret
 400c12c:	00c00044 	movi	r3,1
 400c130:	003ff406 	br	400c104 <__alt_data_end+0xfc00c104>

0400c134 <__umodsi3>:
 400c134:	2005883a 	mov	r2,r4
 400c138:	2900122e 	bgeu	r5,r4,400c184 <__umodsi3+0x50>
 400c13c:	28001116 	blt	r5,zero,400c184 <__umodsi3+0x50>
 400c140:	01800804 	movi	r6,32
 400c144:	00c00044 	movi	r3,1
 400c148:	00000206 	br	400c154 <__umodsi3+0x20>
 400c14c:	30000c26 	beq	r6,zero,400c180 <__umodsi3+0x4c>
 400c150:	28000516 	blt	r5,zero,400c168 <__umodsi3+0x34>
 400c154:	294b883a 	add	r5,r5,r5
 400c158:	31bfffc4 	addi	r6,r6,-1
 400c15c:	18c7883a 	add	r3,r3,r3
 400c160:	293ffa36 	bltu	r5,r4,400c14c <__alt_data_end+0xfc00c14c>
 400c164:	18000626 	beq	r3,zero,400c180 <__umodsi3+0x4c>
 400c168:	1806d07a 	srli	r3,r3,1
 400c16c:	11400136 	bltu	r2,r5,400c174 <__umodsi3+0x40>
 400c170:	1145c83a 	sub	r2,r2,r5
 400c174:	280ad07a 	srli	r5,r5,1
 400c178:	183ffb1e 	bne	r3,zero,400c168 <__alt_data_end+0xfc00c168>
 400c17c:	f800283a 	ret
 400c180:	f800283a 	ret
 400c184:	00c00044 	movi	r3,1
 400c188:	003ff706 	br	400c168 <__alt_data_end+0xfc00c168>

0400c18c <__adddf3>:
 400c18c:	02c00434 	movhi	r11,16
 400c190:	5affffc4 	addi	r11,r11,-1
 400c194:	2806d7fa 	srli	r3,r5,31
 400c198:	2ad4703a 	and	r10,r5,r11
 400c19c:	3ad2703a 	and	r9,r7,r11
 400c1a0:	3804d53a 	srli	r2,r7,20
 400c1a4:	3018d77a 	srli	r12,r6,29
 400c1a8:	280ad53a 	srli	r5,r5,20
 400c1ac:	501490fa 	slli	r10,r10,3
 400c1b0:	2010d77a 	srli	r8,r4,29
 400c1b4:	481290fa 	slli	r9,r9,3
 400c1b8:	380ed7fa 	srli	r7,r7,31
 400c1bc:	defffb04 	addi	sp,sp,-20
 400c1c0:	dc800215 	stw	r18,8(sp)
 400c1c4:	dc400115 	stw	r17,4(sp)
 400c1c8:	dc000015 	stw	r16,0(sp)
 400c1cc:	dfc00415 	stw	ra,16(sp)
 400c1d0:	dcc00315 	stw	r19,12(sp)
 400c1d4:	1c803fcc 	andi	r18,r3,255
 400c1d8:	2c01ffcc 	andi	r16,r5,2047
 400c1dc:	5210b03a 	or	r8,r10,r8
 400c1e0:	202290fa 	slli	r17,r4,3
 400c1e4:	1081ffcc 	andi	r2,r2,2047
 400c1e8:	4b12b03a 	or	r9,r9,r12
 400c1ec:	300c90fa 	slli	r6,r6,3
 400c1f0:	91c07526 	beq	r18,r7,400c3c8 <__adddf3+0x23c>
 400c1f4:	8087c83a 	sub	r3,r16,r2
 400c1f8:	00c0ab0e 	bge	zero,r3,400c4a8 <__adddf3+0x31c>
 400c1fc:	10002a1e 	bne	r2,zero,400c2a8 <__adddf3+0x11c>
 400c200:	4984b03a 	or	r2,r9,r6
 400c204:	1000961e 	bne	r2,zero,400c460 <__adddf3+0x2d4>
 400c208:	888001cc 	andi	r2,r17,7
 400c20c:	10000726 	beq	r2,zero,400c22c <__adddf3+0xa0>
 400c210:	888003cc 	andi	r2,r17,15
 400c214:	00c00104 	movi	r3,4
 400c218:	10c00426 	beq	r2,r3,400c22c <__adddf3+0xa0>
 400c21c:	88c7883a 	add	r3,r17,r3
 400c220:	1c63803a 	cmpltu	r17,r3,r17
 400c224:	4451883a 	add	r8,r8,r17
 400c228:	1823883a 	mov	r17,r3
 400c22c:	4080202c 	andhi	r2,r8,128
 400c230:	10005926 	beq	r2,zero,400c398 <__adddf3+0x20c>
 400c234:	84000044 	addi	r16,r16,1
 400c238:	0081ffc4 	movi	r2,2047
 400c23c:	8080ba26 	beq	r16,r2,400c528 <__adddf3+0x39c>
 400c240:	00bfe034 	movhi	r2,65408
 400c244:	10bfffc4 	addi	r2,r2,-1
 400c248:	4090703a 	and	r8,r8,r2
 400c24c:	4004977a 	slli	r2,r8,29
 400c250:	4010927a 	slli	r8,r8,9
 400c254:	8822d0fa 	srli	r17,r17,3
 400c258:	8401ffcc 	andi	r16,r16,2047
 400c25c:	4010d33a 	srli	r8,r8,12
 400c260:	9007883a 	mov	r3,r18
 400c264:	1444b03a 	or	r2,r2,r17
 400c268:	8401ffcc 	andi	r16,r16,2047
 400c26c:	8020953a 	slli	r16,r16,20
 400c270:	18c03fcc 	andi	r3,r3,255
 400c274:	01000434 	movhi	r4,16
 400c278:	213fffc4 	addi	r4,r4,-1
 400c27c:	180697fa 	slli	r3,r3,31
 400c280:	4110703a 	and	r8,r8,r4
 400c284:	4410b03a 	or	r8,r8,r16
 400c288:	40c6b03a 	or	r3,r8,r3
 400c28c:	dfc00417 	ldw	ra,16(sp)
 400c290:	dcc00317 	ldw	r19,12(sp)
 400c294:	dc800217 	ldw	r18,8(sp)
 400c298:	dc400117 	ldw	r17,4(sp)
 400c29c:	dc000017 	ldw	r16,0(sp)
 400c2a0:	dec00504 	addi	sp,sp,20
 400c2a4:	f800283a 	ret
 400c2a8:	0081ffc4 	movi	r2,2047
 400c2ac:	80bfd626 	beq	r16,r2,400c208 <__alt_data_end+0xfc00c208>
 400c2b0:	4a402034 	orhi	r9,r9,128
 400c2b4:	00800e04 	movi	r2,56
 400c2b8:	10c09f16 	blt	r2,r3,400c538 <__adddf3+0x3ac>
 400c2bc:	008007c4 	movi	r2,31
 400c2c0:	10c0c216 	blt	r2,r3,400c5cc <__adddf3+0x440>
 400c2c4:	00800804 	movi	r2,32
 400c2c8:	10c5c83a 	sub	r2,r2,r3
 400c2cc:	488a983a 	sll	r5,r9,r2
 400c2d0:	30c8d83a 	srl	r4,r6,r3
 400c2d4:	3084983a 	sll	r2,r6,r2
 400c2d8:	48c6d83a 	srl	r3,r9,r3
 400c2dc:	290cb03a 	or	r6,r5,r4
 400c2e0:	1004c03a 	cmpne	r2,r2,zero
 400c2e4:	308cb03a 	or	r6,r6,r2
 400c2e8:	898dc83a 	sub	r6,r17,r6
 400c2ec:	89a3803a 	cmpltu	r17,r17,r6
 400c2f0:	40d1c83a 	sub	r8,r8,r3
 400c2f4:	4451c83a 	sub	r8,r8,r17
 400c2f8:	3023883a 	mov	r17,r6
 400c2fc:	4080202c 	andhi	r2,r8,128
 400c300:	10002326 	beq	r2,zero,400c390 <__adddf3+0x204>
 400c304:	04c02034 	movhi	r19,128
 400c308:	9cffffc4 	addi	r19,r19,-1
 400c30c:	44e6703a 	and	r19,r8,r19
 400c310:	98007626 	beq	r19,zero,400c4ec <__adddf3+0x360>
 400c314:	9809883a 	mov	r4,r19
 400c318:	4001ab40 	call	4001ab4 <__clzsi2>
 400c31c:	10fffe04 	addi	r3,r2,-8
 400c320:	010007c4 	movi	r4,31
 400c324:	20c07716 	blt	r4,r3,400c504 <__adddf3+0x378>
 400c328:	00800804 	movi	r2,32
 400c32c:	10c5c83a 	sub	r2,r2,r3
 400c330:	8884d83a 	srl	r2,r17,r2
 400c334:	98d0983a 	sll	r8,r19,r3
 400c338:	88e2983a 	sll	r17,r17,r3
 400c33c:	1204b03a 	or	r2,r2,r8
 400c340:	1c007416 	blt	r3,r16,400c514 <__adddf3+0x388>
 400c344:	1c21c83a 	sub	r16,r3,r16
 400c348:	82000044 	addi	r8,r16,1
 400c34c:	00c007c4 	movi	r3,31
 400c350:	1a009116 	blt	r3,r8,400c598 <__adddf3+0x40c>
 400c354:	00c00804 	movi	r3,32
 400c358:	1a07c83a 	sub	r3,r3,r8
 400c35c:	8a08d83a 	srl	r4,r17,r8
 400c360:	88e2983a 	sll	r17,r17,r3
 400c364:	10c6983a 	sll	r3,r2,r3
 400c368:	1210d83a 	srl	r8,r2,r8
 400c36c:	8804c03a 	cmpne	r2,r17,zero
 400c370:	1906b03a 	or	r3,r3,r4
 400c374:	18a2b03a 	or	r17,r3,r2
 400c378:	0021883a 	mov	r16,zero
 400c37c:	003fa206 	br	400c208 <__alt_data_end+0xfc00c208>
 400c380:	1890b03a 	or	r8,r3,r2
 400c384:	40017d26 	beq	r8,zero,400c97c <__adddf3+0x7f0>
 400c388:	1011883a 	mov	r8,r2
 400c38c:	1823883a 	mov	r17,r3
 400c390:	888001cc 	andi	r2,r17,7
 400c394:	103f9e1e 	bne	r2,zero,400c210 <__alt_data_end+0xfc00c210>
 400c398:	4004977a 	slli	r2,r8,29
 400c39c:	8822d0fa 	srli	r17,r17,3
 400c3a0:	4010d0fa 	srli	r8,r8,3
 400c3a4:	9007883a 	mov	r3,r18
 400c3a8:	1444b03a 	or	r2,r2,r17
 400c3ac:	0101ffc4 	movi	r4,2047
 400c3b0:	81002426 	beq	r16,r4,400c444 <__adddf3+0x2b8>
 400c3b4:	8120703a 	and	r16,r16,r4
 400c3b8:	01000434 	movhi	r4,16
 400c3bc:	213fffc4 	addi	r4,r4,-1
 400c3c0:	4110703a 	and	r8,r8,r4
 400c3c4:	003fa806 	br	400c268 <__alt_data_end+0xfc00c268>
 400c3c8:	8089c83a 	sub	r4,r16,r2
 400c3cc:	01005e0e 	bge	zero,r4,400c548 <__adddf3+0x3bc>
 400c3d0:	10002b26 	beq	r2,zero,400c480 <__adddf3+0x2f4>
 400c3d4:	0081ffc4 	movi	r2,2047
 400c3d8:	80bf8b26 	beq	r16,r2,400c208 <__alt_data_end+0xfc00c208>
 400c3dc:	4a402034 	orhi	r9,r9,128
 400c3e0:	00800e04 	movi	r2,56
 400c3e4:	1100a40e 	bge	r2,r4,400c678 <__adddf3+0x4ec>
 400c3e8:	498cb03a 	or	r6,r9,r6
 400c3ec:	300ac03a 	cmpne	r5,r6,zero
 400c3f0:	0013883a 	mov	r9,zero
 400c3f4:	2c4b883a 	add	r5,r5,r17
 400c3f8:	2c63803a 	cmpltu	r17,r5,r17
 400c3fc:	4a11883a 	add	r8,r9,r8
 400c400:	8a11883a 	add	r8,r17,r8
 400c404:	2823883a 	mov	r17,r5
 400c408:	4080202c 	andhi	r2,r8,128
 400c40c:	103fe026 	beq	r2,zero,400c390 <__alt_data_end+0xfc00c390>
 400c410:	84000044 	addi	r16,r16,1
 400c414:	0081ffc4 	movi	r2,2047
 400c418:	8080d226 	beq	r16,r2,400c764 <__adddf3+0x5d8>
 400c41c:	00bfe034 	movhi	r2,65408
 400c420:	10bfffc4 	addi	r2,r2,-1
 400c424:	4090703a 	and	r8,r8,r2
 400c428:	880ad07a 	srli	r5,r17,1
 400c42c:	400897fa 	slli	r4,r8,31
 400c430:	88c0004c 	andi	r3,r17,1
 400c434:	28e2b03a 	or	r17,r5,r3
 400c438:	4010d07a 	srli	r8,r8,1
 400c43c:	2462b03a 	or	r17,r4,r17
 400c440:	003f7106 	br	400c208 <__alt_data_end+0xfc00c208>
 400c444:	4088b03a 	or	r4,r8,r2
 400c448:	20014526 	beq	r4,zero,400c960 <__adddf3+0x7d4>
 400c44c:	01000434 	movhi	r4,16
 400c450:	42000234 	orhi	r8,r8,8
 400c454:	213fffc4 	addi	r4,r4,-1
 400c458:	4110703a 	and	r8,r8,r4
 400c45c:	003f8206 	br	400c268 <__alt_data_end+0xfc00c268>
 400c460:	18ffffc4 	addi	r3,r3,-1
 400c464:	1800491e 	bne	r3,zero,400c58c <__adddf3+0x400>
 400c468:	898bc83a 	sub	r5,r17,r6
 400c46c:	8963803a 	cmpltu	r17,r17,r5
 400c470:	4251c83a 	sub	r8,r8,r9
 400c474:	4451c83a 	sub	r8,r8,r17
 400c478:	2823883a 	mov	r17,r5
 400c47c:	003f9f06 	br	400c2fc <__alt_data_end+0xfc00c2fc>
 400c480:	4984b03a 	or	r2,r9,r6
 400c484:	103f6026 	beq	r2,zero,400c208 <__alt_data_end+0xfc00c208>
 400c488:	213fffc4 	addi	r4,r4,-1
 400c48c:	2000931e 	bne	r4,zero,400c6dc <__adddf3+0x550>
 400c490:	898d883a 	add	r6,r17,r6
 400c494:	3463803a 	cmpltu	r17,r6,r17
 400c498:	4251883a 	add	r8,r8,r9
 400c49c:	8a11883a 	add	r8,r17,r8
 400c4a0:	3023883a 	mov	r17,r6
 400c4a4:	003fd806 	br	400c408 <__alt_data_end+0xfc00c408>
 400c4a8:	1800541e 	bne	r3,zero,400c5fc <__adddf3+0x470>
 400c4ac:	80800044 	addi	r2,r16,1
 400c4b0:	1081ffcc 	andi	r2,r2,2047
 400c4b4:	00c00044 	movi	r3,1
 400c4b8:	1880a00e 	bge	r3,r2,400c73c <__adddf3+0x5b0>
 400c4bc:	8989c83a 	sub	r4,r17,r6
 400c4c0:	8905803a 	cmpltu	r2,r17,r4
 400c4c4:	4267c83a 	sub	r19,r8,r9
 400c4c8:	98a7c83a 	sub	r19,r19,r2
 400c4cc:	9880202c 	andhi	r2,r19,128
 400c4d0:	10006326 	beq	r2,zero,400c660 <__adddf3+0x4d4>
 400c4d4:	3463c83a 	sub	r17,r6,r17
 400c4d8:	4a07c83a 	sub	r3,r9,r8
 400c4dc:	344d803a 	cmpltu	r6,r6,r17
 400c4e0:	19a7c83a 	sub	r19,r3,r6
 400c4e4:	3825883a 	mov	r18,r7
 400c4e8:	983f8a1e 	bne	r19,zero,400c314 <__alt_data_end+0xfc00c314>
 400c4ec:	8809883a 	mov	r4,r17
 400c4f0:	4001ab40 	call	4001ab4 <__clzsi2>
 400c4f4:	10800804 	addi	r2,r2,32
 400c4f8:	10fffe04 	addi	r3,r2,-8
 400c4fc:	010007c4 	movi	r4,31
 400c500:	20ff890e 	bge	r4,r3,400c328 <__alt_data_end+0xfc00c328>
 400c504:	10bff604 	addi	r2,r2,-40
 400c508:	8884983a 	sll	r2,r17,r2
 400c50c:	0023883a 	mov	r17,zero
 400c510:	1c3f8c0e 	bge	r3,r16,400c344 <__alt_data_end+0xfc00c344>
 400c514:	023fe034 	movhi	r8,65408
 400c518:	423fffc4 	addi	r8,r8,-1
 400c51c:	80e1c83a 	sub	r16,r16,r3
 400c520:	1210703a 	and	r8,r2,r8
 400c524:	003f3806 	br	400c208 <__alt_data_end+0xfc00c208>
 400c528:	9007883a 	mov	r3,r18
 400c52c:	0011883a 	mov	r8,zero
 400c530:	0005883a 	mov	r2,zero
 400c534:	003f4c06 	br	400c268 <__alt_data_end+0xfc00c268>
 400c538:	498cb03a 	or	r6,r9,r6
 400c53c:	300cc03a 	cmpne	r6,r6,zero
 400c540:	0007883a 	mov	r3,zero
 400c544:	003f6806 	br	400c2e8 <__alt_data_end+0xfc00c2e8>
 400c548:	20009c1e 	bne	r4,zero,400c7bc <__adddf3+0x630>
 400c54c:	80800044 	addi	r2,r16,1
 400c550:	1141ffcc 	andi	r5,r2,2047
 400c554:	01000044 	movi	r4,1
 400c558:	2140670e 	bge	r4,r5,400c6f8 <__adddf3+0x56c>
 400c55c:	0101ffc4 	movi	r4,2047
 400c560:	11007f26 	beq	r2,r4,400c760 <__adddf3+0x5d4>
 400c564:	898d883a 	add	r6,r17,r6
 400c568:	4247883a 	add	r3,r8,r9
 400c56c:	3451803a 	cmpltu	r8,r6,r17
 400c570:	40d1883a 	add	r8,r8,r3
 400c574:	402297fa 	slli	r17,r8,31
 400c578:	300cd07a 	srli	r6,r6,1
 400c57c:	4010d07a 	srli	r8,r8,1
 400c580:	1021883a 	mov	r16,r2
 400c584:	89a2b03a 	or	r17,r17,r6
 400c588:	003f1f06 	br	400c208 <__alt_data_end+0xfc00c208>
 400c58c:	0081ffc4 	movi	r2,2047
 400c590:	80bf481e 	bne	r16,r2,400c2b4 <__alt_data_end+0xfc00c2b4>
 400c594:	003f1c06 	br	400c208 <__alt_data_end+0xfc00c208>
 400c598:	843ff844 	addi	r16,r16,-31
 400c59c:	01000804 	movi	r4,32
 400c5a0:	1406d83a 	srl	r3,r2,r16
 400c5a4:	41005026 	beq	r8,r4,400c6e8 <__adddf3+0x55c>
 400c5a8:	01001004 	movi	r4,64
 400c5ac:	2211c83a 	sub	r8,r4,r8
 400c5b0:	1204983a 	sll	r2,r2,r8
 400c5b4:	88a2b03a 	or	r17,r17,r2
 400c5b8:	8822c03a 	cmpne	r17,r17,zero
 400c5bc:	1c62b03a 	or	r17,r3,r17
 400c5c0:	0011883a 	mov	r8,zero
 400c5c4:	0021883a 	mov	r16,zero
 400c5c8:	003f7106 	br	400c390 <__alt_data_end+0xfc00c390>
 400c5cc:	193ff804 	addi	r4,r3,-32
 400c5d0:	00800804 	movi	r2,32
 400c5d4:	4908d83a 	srl	r4,r9,r4
 400c5d8:	18804526 	beq	r3,r2,400c6f0 <__adddf3+0x564>
 400c5dc:	00801004 	movi	r2,64
 400c5e0:	10c5c83a 	sub	r2,r2,r3
 400c5e4:	4886983a 	sll	r3,r9,r2
 400c5e8:	198cb03a 	or	r6,r3,r6
 400c5ec:	300cc03a 	cmpne	r6,r6,zero
 400c5f0:	218cb03a 	or	r6,r4,r6
 400c5f4:	0007883a 	mov	r3,zero
 400c5f8:	003f3b06 	br	400c2e8 <__alt_data_end+0xfc00c2e8>
 400c5fc:	80002a26 	beq	r16,zero,400c6a8 <__adddf3+0x51c>
 400c600:	0101ffc4 	movi	r4,2047
 400c604:	11006826 	beq	r2,r4,400c7a8 <__adddf3+0x61c>
 400c608:	00c7c83a 	sub	r3,zero,r3
 400c60c:	42002034 	orhi	r8,r8,128
 400c610:	01000e04 	movi	r4,56
 400c614:	20c07c16 	blt	r4,r3,400c808 <__adddf3+0x67c>
 400c618:	010007c4 	movi	r4,31
 400c61c:	20c0da16 	blt	r4,r3,400c988 <__adddf3+0x7fc>
 400c620:	01000804 	movi	r4,32
 400c624:	20c9c83a 	sub	r4,r4,r3
 400c628:	4114983a 	sll	r10,r8,r4
 400c62c:	88cad83a 	srl	r5,r17,r3
 400c630:	8908983a 	sll	r4,r17,r4
 400c634:	40c6d83a 	srl	r3,r8,r3
 400c638:	5162b03a 	or	r17,r10,r5
 400c63c:	2008c03a 	cmpne	r4,r4,zero
 400c640:	8922b03a 	or	r17,r17,r4
 400c644:	3463c83a 	sub	r17,r6,r17
 400c648:	48c7c83a 	sub	r3,r9,r3
 400c64c:	344d803a 	cmpltu	r6,r6,r17
 400c650:	1991c83a 	sub	r8,r3,r6
 400c654:	1021883a 	mov	r16,r2
 400c658:	3825883a 	mov	r18,r7
 400c65c:	003f2706 	br	400c2fc <__alt_data_end+0xfc00c2fc>
 400c660:	24d0b03a 	or	r8,r4,r19
 400c664:	40001b1e 	bne	r8,zero,400c6d4 <__adddf3+0x548>
 400c668:	0005883a 	mov	r2,zero
 400c66c:	0007883a 	mov	r3,zero
 400c670:	0021883a 	mov	r16,zero
 400c674:	003f4d06 	br	400c3ac <__alt_data_end+0xfc00c3ac>
 400c678:	008007c4 	movi	r2,31
 400c67c:	11003c16 	blt	r2,r4,400c770 <__adddf3+0x5e4>
 400c680:	00800804 	movi	r2,32
 400c684:	1105c83a 	sub	r2,r2,r4
 400c688:	488e983a 	sll	r7,r9,r2
 400c68c:	310ad83a 	srl	r5,r6,r4
 400c690:	3084983a 	sll	r2,r6,r2
 400c694:	4912d83a 	srl	r9,r9,r4
 400c698:	394ab03a 	or	r5,r7,r5
 400c69c:	1004c03a 	cmpne	r2,r2,zero
 400c6a0:	288ab03a 	or	r5,r5,r2
 400c6a4:	003f5306 	br	400c3f4 <__alt_data_end+0xfc00c3f4>
 400c6a8:	4448b03a 	or	r4,r8,r17
 400c6ac:	20003e26 	beq	r4,zero,400c7a8 <__adddf3+0x61c>
 400c6b0:	00c6303a 	nor	r3,zero,r3
 400c6b4:	18003a1e 	bne	r3,zero,400c7a0 <__adddf3+0x614>
 400c6b8:	3463c83a 	sub	r17,r6,r17
 400c6bc:	4a07c83a 	sub	r3,r9,r8
 400c6c0:	344d803a 	cmpltu	r6,r6,r17
 400c6c4:	1991c83a 	sub	r8,r3,r6
 400c6c8:	1021883a 	mov	r16,r2
 400c6cc:	3825883a 	mov	r18,r7
 400c6d0:	003f0a06 	br	400c2fc <__alt_data_end+0xfc00c2fc>
 400c6d4:	2023883a 	mov	r17,r4
 400c6d8:	003f0d06 	br	400c310 <__alt_data_end+0xfc00c310>
 400c6dc:	0081ffc4 	movi	r2,2047
 400c6e0:	80bf3f1e 	bne	r16,r2,400c3e0 <__alt_data_end+0xfc00c3e0>
 400c6e4:	003ec806 	br	400c208 <__alt_data_end+0xfc00c208>
 400c6e8:	0005883a 	mov	r2,zero
 400c6ec:	003fb106 	br	400c5b4 <__alt_data_end+0xfc00c5b4>
 400c6f0:	0007883a 	mov	r3,zero
 400c6f4:	003fbc06 	br	400c5e8 <__alt_data_end+0xfc00c5e8>
 400c6f8:	4444b03a 	or	r2,r8,r17
 400c6fc:	8000871e 	bne	r16,zero,400c91c <__adddf3+0x790>
 400c700:	1000ba26 	beq	r2,zero,400c9ec <__adddf3+0x860>
 400c704:	4984b03a 	or	r2,r9,r6
 400c708:	103ebf26 	beq	r2,zero,400c208 <__alt_data_end+0xfc00c208>
 400c70c:	8985883a 	add	r2,r17,r6
 400c710:	4247883a 	add	r3,r8,r9
 400c714:	1451803a 	cmpltu	r8,r2,r17
 400c718:	40d1883a 	add	r8,r8,r3
 400c71c:	40c0202c 	andhi	r3,r8,128
 400c720:	1023883a 	mov	r17,r2
 400c724:	183f1a26 	beq	r3,zero,400c390 <__alt_data_end+0xfc00c390>
 400c728:	00bfe034 	movhi	r2,65408
 400c72c:	10bfffc4 	addi	r2,r2,-1
 400c730:	2021883a 	mov	r16,r4
 400c734:	4090703a 	and	r8,r8,r2
 400c738:	003eb306 	br	400c208 <__alt_data_end+0xfc00c208>
 400c73c:	4444b03a 	or	r2,r8,r17
 400c740:	8000291e 	bne	r16,zero,400c7e8 <__adddf3+0x65c>
 400c744:	10004b1e 	bne	r2,zero,400c874 <__adddf3+0x6e8>
 400c748:	4990b03a 	or	r8,r9,r6
 400c74c:	40008b26 	beq	r8,zero,400c97c <__adddf3+0x7f0>
 400c750:	4811883a 	mov	r8,r9
 400c754:	3023883a 	mov	r17,r6
 400c758:	3825883a 	mov	r18,r7
 400c75c:	003eaa06 	br	400c208 <__alt_data_end+0xfc00c208>
 400c760:	1021883a 	mov	r16,r2
 400c764:	0011883a 	mov	r8,zero
 400c768:	0005883a 	mov	r2,zero
 400c76c:	003f0f06 	br	400c3ac <__alt_data_end+0xfc00c3ac>
 400c770:	217ff804 	addi	r5,r4,-32
 400c774:	00800804 	movi	r2,32
 400c778:	494ad83a 	srl	r5,r9,r5
 400c77c:	20807d26 	beq	r4,r2,400c974 <__adddf3+0x7e8>
 400c780:	00801004 	movi	r2,64
 400c784:	1109c83a 	sub	r4,r2,r4
 400c788:	4912983a 	sll	r9,r9,r4
 400c78c:	498cb03a 	or	r6,r9,r6
 400c790:	300cc03a 	cmpne	r6,r6,zero
 400c794:	298ab03a 	or	r5,r5,r6
 400c798:	0013883a 	mov	r9,zero
 400c79c:	003f1506 	br	400c3f4 <__alt_data_end+0xfc00c3f4>
 400c7a0:	0101ffc4 	movi	r4,2047
 400c7a4:	113f9a1e 	bne	r2,r4,400c610 <__alt_data_end+0xfc00c610>
 400c7a8:	4811883a 	mov	r8,r9
 400c7ac:	3023883a 	mov	r17,r6
 400c7b0:	1021883a 	mov	r16,r2
 400c7b4:	3825883a 	mov	r18,r7
 400c7b8:	003e9306 	br	400c208 <__alt_data_end+0xfc00c208>
 400c7bc:	8000161e 	bne	r16,zero,400c818 <__adddf3+0x68c>
 400c7c0:	444ab03a 	or	r5,r8,r17
 400c7c4:	28005126 	beq	r5,zero,400c90c <__adddf3+0x780>
 400c7c8:	0108303a 	nor	r4,zero,r4
 400c7cc:	20004d1e 	bne	r4,zero,400c904 <__adddf3+0x778>
 400c7d0:	89a3883a 	add	r17,r17,r6
 400c7d4:	4253883a 	add	r9,r8,r9
 400c7d8:	898d803a 	cmpltu	r6,r17,r6
 400c7dc:	3251883a 	add	r8,r6,r9
 400c7e0:	1021883a 	mov	r16,r2
 400c7e4:	003f0806 	br	400c408 <__alt_data_end+0xfc00c408>
 400c7e8:	1000301e 	bne	r2,zero,400c8ac <__adddf3+0x720>
 400c7ec:	4984b03a 	or	r2,r9,r6
 400c7f0:	10007126 	beq	r2,zero,400c9b8 <__adddf3+0x82c>
 400c7f4:	4811883a 	mov	r8,r9
 400c7f8:	3023883a 	mov	r17,r6
 400c7fc:	3825883a 	mov	r18,r7
 400c800:	0401ffc4 	movi	r16,2047
 400c804:	003e8006 	br	400c208 <__alt_data_end+0xfc00c208>
 400c808:	4462b03a 	or	r17,r8,r17
 400c80c:	8822c03a 	cmpne	r17,r17,zero
 400c810:	0007883a 	mov	r3,zero
 400c814:	003f8b06 	br	400c644 <__alt_data_end+0xfc00c644>
 400c818:	0141ffc4 	movi	r5,2047
 400c81c:	11403b26 	beq	r2,r5,400c90c <__adddf3+0x780>
 400c820:	0109c83a 	sub	r4,zero,r4
 400c824:	42002034 	orhi	r8,r8,128
 400c828:	01400e04 	movi	r5,56
 400c82c:	29006716 	blt	r5,r4,400c9cc <__adddf3+0x840>
 400c830:	014007c4 	movi	r5,31
 400c834:	29007016 	blt	r5,r4,400c9f8 <__adddf3+0x86c>
 400c838:	01400804 	movi	r5,32
 400c83c:	290bc83a 	sub	r5,r5,r4
 400c840:	4154983a 	sll	r10,r8,r5
 400c844:	890ed83a 	srl	r7,r17,r4
 400c848:	894a983a 	sll	r5,r17,r5
 400c84c:	4108d83a 	srl	r4,r8,r4
 400c850:	51e2b03a 	or	r17,r10,r7
 400c854:	280ac03a 	cmpne	r5,r5,zero
 400c858:	8962b03a 	or	r17,r17,r5
 400c85c:	89a3883a 	add	r17,r17,r6
 400c860:	2253883a 	add	r9,r4,r9
 400c864:	898d803a 	cmpltu	r6,r17,r6
 400c868:	3251883a 	add	r8,r6,r9
 400c86c:	1021883a 	mov	r16,r2
 400c870:	003ee506 	br	400c408 <__alt_data_end+0xfc00c408>
 400c874:	4984b03a 	or	r2,r9,r6
 400c878:	103e6326 	beq	r2,zero,400c208 <__alt_data_end+0xfc00c208>
 400c87c:	8987c83a 	sub	r3,r17,r6
 400c880:	88c9803a 	cmpltu	r4,r17,r3
 400c884:	4245c83a 	sub	r2,r8,r9
 400c888:	1105c83a 	sub	r2,r2,r4
 400c88c:	1100202c 	andhi	r4,r2,128
 400c890:	203ebb26 	beq	r4,zero,400c380 <__alt_data_end+0xfc00c380>
 400c894:	3463c83a 	sub	r17,r6,r17
 400c898:	4a07c83a 	sub	r3,r9,r8
 400c89c:	344d803a 	cmpltu	r6,r6,r17
 400c8a0:	1991c83a 	sub	r8,r3,r6
 400c8a4:	3825883a 	mov	r18,r7
 400c8a8:	003e5706 	br	400c208 <__alt_data_end+0xfc00c208>
 400c8ac:	4984b03a 	or	r2,r9,r6
 400c8b0:	10002e26 	beq	r2,zero,400c96c <__adddf3+0x7e0>
 400c8b4:	4004d0fa 	srli	r2,r8,3
 400c8b8:	8822d0fa 	srli	r17,r17,3
 400c8bc:	4010977a 	slli	r8,r8,29
 400c8c0:	10c0022c 	andhi	r3,r2,8
 400c8c4:	4462b03a 	or	r17,r8,r17
 400c8c8:	18000826 	beq	r3,zero,400c8ec <__adddf3+0x760>
 400c8cc:	4808d0fa 	srli	r4,r9,3
 400c8d0:	20c0022c 	andhi	r3,r4,8
 400c8d4:	1800051e 	bne	r3,zero,400c8ec <__adddf3+0x760>
 400c8d8:	300cd0fa 	srli	r6,r6,3
 400c8dc:	4806977a 	slli	r3,r9,29
 400c8e0:	2005883a 	mov	r2,r4
 400c8e4:	3825883a 	mov	r18,r7
 400c8e8:	19a2b03a 	or	r17,r3,r6
 400c8ec:	8810d77a 	srli	r8,r17,29
 400c8f0:	100490fa 	slli	r2,r2,3
 400c8f4:	882290fa 	slli	r17,r17,3
 400c8f8:	0401ffc4 	movi	r16,2047
 400c8fc:	4090b03a 	or	r8,r8,r2
 400c900:	003e4106 	br	400c208 <__alt_data_end+0xfc00c208>
 400c904:	0141ffc4 	movi	r5,2047
 400c908:	117fc71e 	bne	r2,r5,400c828 <__alt_data_end+0xfc00c828>
 400c90c:	4811883a 	mov	r8,r9
 400c910:	3023883a 	mov	r17,r6
 400c914:	1021883a 	mov	r16,r2
 400c918:	003e3b06 	br	400c208 <__alt_data_end+0xfc00c208>
 400c91c:	10002f26 	beq	r2,zero,400c9dc <__adddf3+0x850>
 400c920:	4984b03a 	or	r2,r9,r6
 400c924:	10001126 	beq	r2,zero,400c96c <__adddf3+0x7e0>
 400c928:	4004d0fa 	srli	r2,r8,3
 400c92c:	8822d0fa 	srli	r17,r17,3
 400c930:	4010977a 	slli	r8,r8,29
 400c934:	10c0022c 	andhi	r3,r2,8
 400c938:	4462b03a 	or	r17,r8,r17
 400c93c:	183feb26 	beq	r3,zero,400c8ec <__alt_data_end+0xfc00c8ec>
 400c940:	4808d0fa 	srli	r4,r9,3
 400c944:	20c0022c 	andhi	r3,r4,8
 400c948:	183fe81e 	bne	r3,zero,400c8ec <__alt_data_end+0xfc00c8ec>
 400c94c:	300cd0fa 	srli	r6,r6,3
 400c950:	4806977a 	slli	r3,r9,29
 400c954:	2005883a 	mov	r2,r4
 400c958:	19a2b03a 	or	r17,r3,r6
 400c95c:	003fe306 	br	400c8ec <__alt_data_end+0xfc00c8ec>
 400c960:	0011883a 	mov	r8,zero
 400c964:	0005883a 	mov	r2,zero
 400c968:	003e3f06 	br	400c268 <__alt_data_end+0xfc00c268>
 400c96c:	0401ffc4 	movi	r16,2047
 400c970:	003e2506 	br	400c208 <__alt_data_end+0xfc00c208>
 400c974:	0013883a 	mov	r9,zero
 400c978:	003f8406 	br	400c78c <__alt_data_end+0xfc00c78c>
 400c97c:	0005883a 	mov	r2,zero
 400c980:	0007883a 	mov	r3,zero
 400c984:	003e8906 	br	400c3ac <__alt_data_end+0xfc00c3ac>
 400c988:	197ff804 	addi	r5,r3,-32
 400c98c:	01000804 	movi	r4,32
 400c990:	414ad83a 	srl	r5,r8,r5
 400c994:	19002426 	beq	r3,r4,400ca28 <__adddf3+0x89c>
 400c998:	01001004 	movi	r4,64
 400c99c:	20c7c83a 	sub	r3,r4,r3
 400c9a0:	40c6983a 	sll	r3,r8,r3
 400c9a4:	1c46b03a 	or	r3,r3,r17
 400c9a8:	1806c03a 	cmpne	r3,r3,zero
 400c9ac:	28e2b03a 	or	r17,r5,r3
 400c9b0:	0007883a 	mov	r3,zero
 400c9b4:	003f2306 	br	400c644 <__alt_data_end+0xfc00c644>
 400c9b8:	0007883a 	mov	r3,zero
 400c9bc:	5811883a 	mov	r8,r11
 400c9c0:	00bfffc4 	movi	r2,-1
 400c9c4:	0401ffc4 	movi	r16,2047
 400c9c8:	003e7806 	br	400c3ac <__alt_data_end+0xfc00c3ac>
 400c9cc:	4462b03a 	or	r17,r8,r17
 400c9d0:	8822c03a 	cmpne	r17,r17,zero
 400c9d4:	0009883a 	mov	r4,zero
 400c9d8:	003fa006 	br	400c85c <__alt_data_end+0xfc00c85c>
 400c9dc:	4811883a 	mov	r8,r9
 400c9e0:	3023883a 	mov	r17,r6
 400c9e4:	0401ffc4 	movi	r16,2047
 400c9e8:	003e0706 	br	400c208 <__alt_data_end+0xfc00c208>
 400c9ec:	4811883a 	mov	r8,r9
 400c9f0:	3023883a 	mov	r17,r6
 400c9f4:	003e0406 	br	400c208 <__alt_data_end+0xfc00c208>
 400c9f8:	21fff804 	addi	r7,r4,-32
 400c9fc:	01400804 	movi	r5,32
 400ca00:	41ced83a 	srl	r7,r8,r7
 400ca04:	21400a26 	beq	r4,r5,400ca30 <__adddf3+0x8a4>
 400ca08:	01401004 	movi	r5,64
 400ca0c:	2909c83a 	sub	r4,r5,r4
 400ca10:	4108983a 	sll	r4,r8,r4
 400ca14:	2448b03a 	or	r4,r4,r17
 400ca18:	2008c03a 	cmpne	r4,r4,zero
 400ca1c:	3922b03a 	or	r17,r7,r4
 400ca20:	0009883a 	mov	r4,zero
 400ca24:	003f8d06 	br	400c85c <__alt_data_end+0xfc00c85c>
 400ca28:	0007883a 	mov	r3,zero
 400ca2c:	003fdd06 	br	400c9a4 <__alt_data_end+0xfc00c9a4>
 400ca30:	0009883a 	mov	r4,zero
 400ca34:	003ff706 	br	400ca14 <__alt_data_end+0xfc00ca14>

0400ca38 <__divdf3>:
 400ca38:	defff004 	addi	sp,sp,-64
 400ca3c:	dc800815 	stw	r18,32(sp)
 400ca40:	2824d53a 	srli	r18,r5,20
 400ca44:	dd800c15 	stw	r22,48(sp)
 400ca48:	282cd7fa 	srli	r22,r5,31
 400ca4c:	dc000615 	stw	r16,24(sp)
 400ca50:	04000434 	movhi	r16,16
 400ca54:	843fffc4 	addi	r16,r16,-1
 400ca58:	dfc00f15 	stw	ra,60(sp)
 400ca5c:	df000e15 	stw	fp,56(sp)
 400ca60:	ddc00d15 	stw	r23,52(sp)
 400ca64:	dd400b15 	stw	r21,44(sp)
 400ca68:	dd000a15 	stw	r20,40(sp)
 400ca6c:	dcc00915 	stw	r19,36(sp)
 400ca70:	dc400715 	stw	r17,28(sp)
 400ca74:	9481ffcc 	andi	r18,r18,2047
 400ca78:	2c20703a 	and	r16,r5,r16
 400ca7c:	b2003fcc 	andi	r8,r22,255
 400ca80:	90006126 	beq	r18,zero,400cc08 <__divdf3+0x1d0>
 400ca84:	0081ffc4 	movi	r2,2047
 400ca88:	202b883a 	mov	r21,r4
 400ca8c:	90803726 	beq	r18,r2,400cb6c <__divdf3+0x134>
 400ca90:	80800434 	orhi	r2,r16,16
 400ca94:	100490fa 	slli	r2,r2,3
 400ca98:	2020d77a 	srli	r16,r4,29
 400ca9c:	202a90fa 	slli	r21,r4,3
 400caa0:	94bf0044 	addi	r18,r18,-1023
 400caa4:	80a0b03a 	or	r16,r16,r2
 400caa8:	0013883a 	mov	r9,zero
 400caac:	000b883a 	mov	r5,zero
 400cab0:	3806d53a 	srli	r3,r7,20
 400cab4:	382ed7fa 	srli	r23,r7,31
 400cab8:	04400434 	movhi	r17,16
 400cabc:	8c7fffc4 	addi	r17,r17,-1
 400cac0:	18c1ffcc 	andi	r3,r3,2047
 400cac4:	3029883a 	mov	r20,r6
 400cac8:	3c62703a 	and	r17,r7,r17
 400cacc:	bf003fcc 	andi	fp,r23,255
 400cad0:	18006e26 	beq	r3,zero,400cc8c <__divdf3+0x254>
 400cad4:	0081ffc4 	movi	r2,2047
 400cad8:	18806626 	beq	r3,r2,400cc74 <__divdf3+0x23c>
 400cadc:	88800434 	orhi	r2,r17,16
 400cae0:	100490fa 	slli	r2,r2,3
 400cae4:	3022d77a 	srli	r17,r6,29
 400cae8:	302890fa 	slli	r20,r6,3
 400caec:	18ff0044 	addi	r3,r3,-1023
 400caf0:	88a2b03a 	or	r17,r17,r2
 400caf4:	000f883a 	mov	r7,zero
 400caf8:	b5e6f03a 	xor	r19,r22,r23
 400cafc:	3a4cb03a 	or	r6,r7,r9
 400cb00:	008003c4 	movi	r2,15
 400cb04:	9809883a 	mov	r4,r19
 400cb08:	90c7c83a 	sub	r3,r18,r3
 400cb0c:	9cc03fcc 	andi	r19,r19,255
 400cb10:	11809636 	bltu	r2,r6,400cd6c <__divdf3+0x334>
 400cb14:	300c90ba 	slli	r6,r6,2
 400cb18:	00810074 	movhi	r2,1025
 400cb1c:	10b2cb04 	addi	r2,r2,-13524
 400cb20:	308d883a 	add	r6,r6,r2
 400cb24:	30800017 	ldw	r2,0(r6)
 400cb28:	1000683a 	jmp	r2
 400cb2c:	0400cd6c 	andhi	r16,zero,821
 400cb30:	0400cba4 	muli	r16,zero,814
 400cb34:	0400cd5c 	xori	r16,zero,821
 400cb38:	0400cb98 	cmpnei	r16,zero,814
 400cb3c:	0400cd5c 	xori	r16,zero,821
 400cb40:	0400cd30 	cmpltui	r16,zero,820
 400cb44:	0400cd5c 	xori	r16,zero,821
 400cb48:	0400cb98 	cmpnei	r16,zero,814
 400cb4c:	0400cba4 	muli	r16,zero,814
 400cb50:	0400cba4 	muli	r16,zero,814
 400cb54:	0400cd30 	cmpltui	r16,zero,820
 400cb58:	0400cb98 	cmpnei	r16,zero,814
 400cb5c:	0400cb88 	cmpgei	r16,zero,814
 400cb60:	0400cb88 	cmpgei	r16,zero,814
 400cb64:	0400cb88 	cmpgei	r16,zero,814
 400cb68:	0400d0f4 	movhi	r16,835
 400cb6c:	2404b03a 	or	r2,r4,r16
 400cb70:	10006c1e 	bne	r2,zero,400cd24 <__divdf3+0x2ec>
 400cb74:	02400204 	movi	r9,8
 400cb78:	0021883a 	mov	r16,zero
 400cb7c:	002b883a 	mov	r21,zero
 400cb80:	01400084 	movi	r5,2
 400cb84:	003fca06 	br	400cab0 <__alt_data_end+0xfc00cab0>
 400cb88:	8023883a 	mov	r17,r16
 400cb8c:	a829883a 	mov	r20,r21
 400cb90:	4039883a 	mov	fp,r8
 400cb94:	280f883a 	mov	r7,r5
 400cb98:	00800084 	movi	r2,2
 400cb9c:	3881601e 	bne	r7,r2,400d120 <__divdf3+0x6e8>
 400cba0:	e027883a 	mov	r19,fp
 400cba4:	9900004c 	andi	r4,r19,1
 400cba8:	0081ffc4 	movi	r2,2047
 400cbac:	0021883a 	mov	r16,zero
 400cbb0:	002b883a 	mov	r21,zero
 400cbb4:	1004953a 	slli	r2,r2,20
 400cbb8:	20c03fcc 	andi	r3,r4,255
 400cbbc:	01400434 	movhi	r5,16
 400cbc0:	297fffc4 	addi	r5,r5,-1
 400cbc4:	180697fa 	slli	r3,r3,31
 400cbc8:	8160703a 	and	r16,r16,r5
 400cbcc:	80a0b03a 	or	r16,r16,r2
 400cbd0:	80c6b03a 	or	r3,r16,r3
 400cbd4:	a805883a 	mov	r2,r21
 400cbd8:	dfc00f17 	ldw	ra,60(sp)
 400cbdc:	df000e17 	ldw	fp,56(sp)
 400cbe0:	ddc00d17 	ldw	r23,52(sp)
 400cbe4:	dd800c17 	ldw	r22,48(sp)
 400cbe8:	dd400b17 	ldw	r21,44(sp)
 400cbec:	dd000a17 	ldw	r20,40(sp)
 400cbf0:	dcc00917 	ldw	r19,36(sp)
 400cbf4:	dc800817 	ldw	r18,32(sp)
 400cbf8:	dc400717 	ldw	r17,28(sp)
 400cbfc:	dc000617 	ldw	r16,24(sp)
 400cc00:	dec01004 	addi	sp,sp,64
 400cc04:	f800283a 	ret
 400cc08:	2404b03a 	or	r2,r4,r16
 400cc0c:	2023883a 	mov	r17,r4
 400cc10:	10003f26 	beq	r2,zero,400cd10 <__divdf3+0x2d8>
 400cc14:	80015e26 	beq	r16,zero,400d190 <__divdf3+0x758>
 400cc18:	8009883a 	mov	r4,r16
 400cc1c:	d9800215 	stw	r6,8(sp)
 400cc20:	d9c00515 	stw	r7,20(sp)
 400cc24:	da000415 	stw	r8,16(sp)
 400cc28:	4001ab40 	call	4001ab4 <__clzsi2>
 400cc2c:	d9800217 	ldw	r6,8(sp)
 400cc30:	d9c00517 	ldw	r7,20(sp)
 400cc34:	da000417 	ldw	r8,16(sp)
 400cc38:	113ffd44 	addi	r4,r2,-11
 400cc3c:	00c00704 	movi	r3,28
 400cc40:	19014f16 	blt	r3,r4,400d180 <__divdf3+0x748>
 400cc44:	00c00744 	movi	r3,29
 400cc48:	157ffe04 	addi	r21,r2,-8
 400cc4c:	1907c83a 	sub	r3,r3,r4
 400cc50:	8560983a 	sll	r16,r16,r21
 400cc54:	88c6d83a 	srl	r3,r17,r3
 400cc58:	8d6a983a 	sll	r21,r17,r21
 400cc5c:	1c20b03a 	or	r16,r3,r16
 400cc60:	1080fcc4 	addi	r2,r2,1011
 400cc64:	00a5c83a 	sub	r18,zero,r2
 400cc68:	0013883a 	mov	r9,zero
 400cc6c:	000b883a 	mov	r5,zero
 400cc70:	003f8f06 	br	400cab0 <__alt_data_end+0xfc00cab0>
 400cc74:	3444b03a 	or	r2,r6,r17
 400cc78:	1000231e 	bne	r2,zero,400cd08 <__divdf3+0x2d0>
 400cc7c:	0023883a 	mov	r17,zero
 400cc80:	0029883a 	mov	r20,zero
 400cc84:	01c00084 	movi	r7,2
 400cc88:	003f9b06 	br	400caf8 <__alt_data_end+0xfc00caf8>
 400cc8c:	3444b03a 	or	r2,r6,r17
 400cc90:	10001926 	beq	r2,zero,400ccf8 <__divdf3+0x2c0>
 400cc94:	88014b26 	beq	r17,zero,400d1c4 <__divdf3+0x78c>
 400cc98:	8809883a 	mov	r4,r17
 400cc9c:	d9400115 	stw	r5,4(sp)
 400cca0:	d9800215 	stw	r6,8(sp)
 400cca4:	da000415 	stw	r8,16(sp)
 400cca8:	da400315 	stw	r9,12(sp)
 400ccac:	4001ab40 	call	4001ab4 <__clzsi2>
 400ccb0:	d9400117 	ldw	r5,4(sp)
 400ccb4:	d9800217 	ldw	r6,8(sp)
 400ccb8:	da000417 	ldw	r8,16(sp)
 400ccbc:	da400317 	ldw	r9,12(sp)
 400ccc0:	113ffd44 	addi	r4,r2,-11
 400ccc4:	00c00704 	movi	r3,28
 400ccc8:	19013a16 	blt	r3,r4,400d1b4 <__divdf3+0x77c>
 400cccc:	00c00744 	movi	r3,29
 400ccd0:	153ffe04 	addi	r20,r2,-8
 400ccd4:	1907c83a 	sub	r3,r3,r4
 400ccd8:	8d22983a 	sll	r17,r17,r20
 400ccdc:	30c6d83a 	srl	r3,r6,r3
 400cce0:	3528983a 	sll	r20,r6,r20
 400cce4:	1c62b03a 	or	r17,r3,r17
 400cce8:	1080fcc4 	addi	r2,r2,1011
 400ccec:	0087c83a 	sub	r3,zero,r2
 400ccf0:	000f883a 	mov	r7,zero
 400ccf4:	003f8006 	br	400caf8 <__alt_data_end+0xfc00caf8>
 400ccf8:	0023883a 	mov	r17,zero
 400ccfc:	0029883a 	mov	r20,zero
 400cd00:	01c00044 	movi	r7,1
 400cd04:	003f7c06 	br	400caf8 <__alt_data_end+0xfc00caf8>
 400cd08:	01c000c4 	movi	r7,3
 400cd0c:	003f7a06 	br	400caf8 <__alt_data_end+0xfc00caf8>
 400cd10:	02400104 	movi	r9,4
 400cd14:	0021883a 	mov	r16,zero
 400cd18:	002b883a 	mov	r21,zero
 400cd1c:	01400044 	movi	r5,1
 400cd20:	003f6306 	br	400cab0 <__alt_data_end+0xfc00cab0>
 400cd24:	02400304 	movi	r9,12
 400cd28:	014000c4 	movi	r5,3
 400cd2c:	003f6006 	br	400cab0 <__alt_data_end+0xfc00cab0>
 400cd30:	04000434 	movhi	r16,16
 400cd34:	0009883a 	mov	r4,zero
 400cd38:	843fffc4 	addi	r16,r16,-1
 400cd3c:	057fffc4 	movi	r21,-1
 400cd40:	0081ffc4 	movi	r2,2047
 400cd44:	003f9b06 	br	400cbb4 <__alt_data_end+0xfc00cbb4>
 400cd48:	00c00044 	movi	r3,1
 400cd4c:	1887c83a 	sub	r3,r3,r2
 400cd50:	01000e04 	movi	r4,56
 400cd54:	20c1530e 	bge	r4,r3,400d2a4 <__divdf3+0x86c>
 400cd58:	9900004c 	andi	r4,r19,1
 400cd5c:	0005883a 	mov	r2,zero
 400cd60:	0021883a 	mov	r16,zero
 400cd64:	002b883a 	mov	r21,zero
 400cd68:	003f9206 	br	400cbb4 <__alt_data_end+0xfc00cbb4>
 400cd6c:	8c012e36 	bltu	r17,r16,400d228 <__divdf3+0x7f0>
 400cd70:	84412c26 	beq	r16,r17,400d224 <__divdf3+0x7ec>
 400cd74:	a82f883a 	mov	r23,r21
 400cd78:	18ffffc4 	addi	r3,r3,-1
 400cd7c:	002b883a 	mov	r21,zero
 400cd80:	a004d63a 	srli	r2,r20,24
 400cd84:	8822923a 	slli	r17,r17,8
 400cd88:	a028923a 	slli	r20,r20,8
 400cd8c:	8009883a 	mov	r4,r16
 400cd90:	88acb03a 	or	r22,r17,r2
 400cd94:	dd000015 	stw	r20,0(sp)
 400cd98:	b028d43a 	srli	r20,r22,16
 400cd9c:	d8c00215 	stw	r3,8(sp)
 400cda0:	b4bfffcc 	andi	r18,r22,65535
 400cda4:	a00b883a 	mov	r5,r20
 400cda8:	400c0d00 	call	400c0d0 <__udivsi3>
 400cdac:	100b883a 	mov	r5,r2
 400cdb0:	9009883a 	mov	r4,r18
 400cdb4:	1023883a 	mov	r17,r2
 400cdb8:	4000bd80 	call	4000bd8 <__mulsi3>
 400cdbc:	8009883a 	mov	r4,r16
 400cdc0:	a00b883a 	mov	r5,r20
 400cdc4:	1039883a 	mov	fp,r2
 400cdc8:	400c1340 	call	400c134 <__umodsi3>
 400cdcc:	1004943a 	slli	r2,r2,16
 400cdd0:	b808d43a 	srli	r4,r23,16
 400cdd4:	d8c00217 	ldw	r3,8(sp)
 400cdd8:	2084b03a 	or	r2,r4,r2
 400cddc:	1700062e 	bgeu	r2,fp,400cdf8 <__divdf3+0x3c0>
 400cde0:	1585883a 	add	r2,r2,r22
 400cde4:	893fffc4 	addi	r4,r17,-1
 400cde8:	15811d36 	bltu	r2,r22,400d260 <__divdf3+0x828>
 400cdec:	17011c2e 	bgeu	r2,fp,400d260 <__divdf3+0x828>
 400cdf0:	8c7fff84 	addi	r17,r17,-2
 400cdf4:	1585883a 	add	r2,r2,r22
 400cdf8:	1739c83a 	sub	fp,r2,fp
 400cdfc:	a00b883a 	mov	r5,r20
 400ce00:	e009883a 	mov	r4,fp
 400ce04:	d8c00215 	stw	r3,8(sp)
 400ce08:	400c0d00 	call	400c0d0 <__udivsi3>
 400ce0c:	100b883a 	mov	r5,r2
 400ce10:	9009883a 	mov	r4,r18
 400ce14:	1021883a 	mov	r16,r2
 400ce18:	4000bd80 	call	4000bd8 <__mulsi3>
 400ce1c:	a00b883a 	mov	r5,r20
 400ce20:	e009883a 	mov	r4,fp
 400ce24:	d8800415 	stw	r2,16(sp)
 400ce28:	400c1340 	call	400c134 <__umodsi3>
 400ce2c:	1004943a 	slli	r2,r2,16
 400ce30:	da000417 	ldw	r8,16(sp)
 400ce34:	bdffffcc 	andi	r23,r23,65535
 400ce38:	b884b03a 	or	r2,r23,r2
 400ce3c:	d8c00217 	ldw	r3,8(sp)
 400ce40:	1200062e 	bgeu	r2,r8,400ce5c <__divdf3+0x424>
 400ce44:	1585883a 	add	r2,r2,r22
 400ce48:	813fffc4 	addi	r4,r16,-1
 400ce4c:	15810236 	bltu	r2,r22,400d258 <__divdf3+0x820>
 400ce50:	1201012e 	bgeu	r2,r8,400d258 <__divdf3+0x820>
 400ce54:	843fff84 	addi	r16,r16,-2
 400ce58:	1585883a 	add	r2,r2,r22
 400ce5c:	8822943a 	slli	r17,r17,16
 400ce60:	d9800017 	ldw	r6,0(sp)
 400ce64:	1211c83a 	sub	r8,r2,r8
 400ce68:	8c22b03a 	or	r17,r17,r16
 400ce6c:	373fffcc 	andi	fp,r6,65535
 400ce70:	8abfffcc 	andi	r10,r17,65535
 400ce74:	8820d43a 	srli	r16,r17,16
 400ce78:	5009883a 	mov	r4,r10
 400ce7c:	e00b883a 	mov	r5,fp
 400ce80:	302ed43a 	srli	r23,r6,16
 400ce84:	d8c00215 	stw	r3,8(sp)
 400ce88:	da000415 	stw	r8,16(sp)
 400ce8c:	da800115 	stw	r10,4(sp)
 400ce90:	4000bd80 	call	4000bd8 <__mulsi3>
 400ce94:	800b883a 	mov	r5,r16
 400ce98:	e009883a 	mov	r4,fp
 400ce9c:	d8800515 	stw	r2,20(sp)
 400cea0:	4000bd80 	call	4000bd8 <__mulsi3>
 400cea4:	8009883a 	mov	r4,r16
 400cea8:	b80b883a 	mov	r5,r23
 400ceac:	d8800315 	stw	r2,12(sp)
 400ceb0:	4000bd80 	call	4000bd8 <__mulsi3>
 400ceb4:	da800117 	ldw	r10,4(sp)
 400ceb8:	b80b883a 	mov	r5,r23
 400cebc:	1021883a 	mov	r16,r2
 400cec0:	5009883a 	mov	r4,r10
 400cec4:	4000bd80 	call	4000bd8 <__mulsi3>
 400cec8:	d9c00517 	ldw	r7,20(sp)
 400cecc:	da400317 	ldw	r9,12(sp)
 400ced0:	d8c00217 	ldw	r3,8(sp)
 400ced4:	3808d43a 	srli	r4,r7,16
 400ced8:	1245883a 	add	r2,r2,r9
 400cedc:	da000417 	ldw	r8,16(sp)
 400cee0:	2085883a 	add	r2,r4,r2
 400cee4:	1240022e 	bgeu	r2,r9,400cef0 <__divdf3+0x4b8>
 400cee8:	01000074 	movhi	r4,1
 400ceec:	8121883a 	add	r16,r16,r4
 400cef0:	1008d43a 	srli	r4,r2,16
 400cef4:	1004943a 	slli	r2,r2,16
 400cef8:	39ffffcc 	andi	r7,r7,65535
 400cefc:	2409883a 	add	r4,r4,r16
 400cf00:	11c5883a 	add	r2,r2,r7
 400cf04:	4100bb36 	bltu	r8,r4,400d1f4 <__divdf3+0x7bc>
 400cf08:	4100d726 	beq	r8,r4,400d268 <__divdf3+0x830>
 400cf0c:	4109c83a 	sub	r4,r8,r4
 400cf10:	a8a1c83a 	sub	r16,r21,r2
 400cf14:	ac2b803a 	cmpltu	r21,r21,r16
 400cf18:	256bc83a 	sub	r21,r4,r21
 400cf1c:	b540d926 	beq	r22,r21,400d284 <__divdf3+0x84c>
 400cf20:	a00b883a 	mov	r5,r20
 400cf24:	a809883a 	mov	r4,r21
 400cf28:	d8c00215 	stw	r3,8(sp)
 400cf2c:	400c0d00 	call	400c0d0 <__udivsi3>
 400cf30:	100b883a 	mov	r5,r2
 400cf34:	9009883a 	mov	r4,r18
 400cf38:	d8800515 	stw	r2,20(sp)
 400cf3c:	4000bd80 	call	4000bd8 <__mulsi3>
 400cf40:	a809883a 	mov	r4,r21
 400cf44:	a00b883a 	mov	r5,r20
 400cf48:	d8800415 	stw	r2,16(sp)
 400cf4c:	400c1340 	call	400c134 <__umodsi3>
 400cf50:	1004943a 	slli	r2,r2,16
 400cf54:	8008d43a 	srli	r4,r16,16
 400cf58:	da000417 	ldw	r8,16(sp)
 400cf5c:	d8c00217 	ldw	r3,8(sp)
 400cf60:	2084b03a 	or	r2,r4,r2
 400cf64:	d9c00517 	ldw	r7,20(sp)
 400cf68:	1200062e 	bgeu	r2,r8,400cf84 <__divdf3+0x54c>
 400cf6c:	1585883a 	add	r2,r2,r22
 400cf70:	393fffc4 	addi	r4,r7,-1
 400cf74:	1580c536 	bltu	r2,r22,400d28c <__divdf3+0x854>
 400cf78:	1200c42e 	bgeu	r2,r8,400d28c <__divdf3+0x854>
 400cf7c:	39ffff84 	addi	r7,r7,-2
 400cf80:	1585883a 	add	r2,r2,r22
 400cf84:	122bc83a 	sub	r21,r2,r8
 400cf88:	a00b883a 	mov	r5,r20
 400cf8c:	a809883a 	mov	r4,r21
 400cf90:	d8c00215 	stw	r3,8(sp)
 400cf94:	d9c00515 	stw	r7,20(sp)
 400cf98:	400c0d00 	call	400c0d0 <__udivsi3>
 400cf9c:	9009883a 	mov	r4,r18
 400cfa0:	100b883a 	mov	r5,r2
 400cfa4:	d8800415 	stw	r2,16(sp)
 400cfa8:	4000bd80 	call	4000bd8 <__mulsi3>
 400cfac:	a809883a 	mov	r4,r21
 400cfb0:	a00b883a 	mov	r5,r20
 400cfb4:	1025883a 	mov	r18,r2
 400cfb8:	400c1340 	call	400c134 <__umodsi3>
 400cfbc:	1004943a 	slli	r2,r2,16
 400cfc0:	813fffcc 	andi	r4,r16,65535
 400cfc4:	d8c00217 	ldw	r3,8(sp)
 400cfc8:	20a0b03a 	or	r16,r4,r2
 400cfcc:	d9c00517 	ldw	r7,20(sp)
 400cfd0:	da000417 	ldw	r8,16(sp)
 400cfd4:	8480062e 	bgeu	r16,r18,400cff0 <__divdf3+0x5b8>
 400cfd8:	85a1883a 	add	r16,r16,r22
 400cfdc:	40bfffc4 	addi	r2,r8,-1
 400cfe0:	8580ac36 	bltu	r16,r22,400d294 <__divdf3+0x85c>
 400cfe4:	8480ab2e 	bgeu	r16,r18,400d294 <__divdf3+0x85c>
 400cfe8:	423fff84 	addi	r8,r8,-2
 400cfec:	85a1883a 	add	r16,r16,r22
 400cff0:	3804943a 	slli	r2,r7,16
 400cff4:	84a1c83a 	sub	r16,r16,r18
 400cff8:	e009883a 	mov	r4,fp
 400cffc:	1228b03a 	or	r20,r2,r8
 400d000:	a1ffffcc 	andi	r7,r20,65535
 400d004:	a024d43a 	srli	r18,r20,16
 400d008:	380b883a 	mov	r5,r7
 400d00c:	d8c00215 	stw	r3,8(sp)
 400d010:	d9c00515 	stw	r7,20(sp)
 400d014:	4000bd80 	call	4000bd8 <__mulsi3>
 400d018:	900b883a 	mov	r5,r18
 400d01c:	e009883a 	mov	r4,fp
 400d020:	102b883a 	mov	r21,r2
 400d024:	4000bd80 	call	4000bd8 <__mulsi3>
 400d028:	900b883a 	mov	r5,r18
 400d02c:	b809883a 	mov	r4,r23
 400d030:	1039883a 	mov	fp,r2
 400d034:	4000bd80 	call	4000bd8 <__mulsi3>
 400d038:	d9c00517 	ldw	r7,20(sp)
 400d03c:	b80b883a 	mov	r5,r23
 400d040:	1025883a 	mov	r18,r2
 400d044:	3809883a 	mov	r4,r7
 400d048:	4000bd80 	call	4000bd8 <__mulsi3>
 400d04c:	a808d43a 	srli	r4,r21,16
 400d050:	1705883a 	add	r2,r2,fp
 400d054:	d8c00217 	ldw	r3,8(sp)
 400d058:	2085883a 	add	r2,r4,r2
 400d05c:	1700022e 	bgeu	r2,fp,400d068 <__divdf3+0x630>
 400d060:	01000074 	movhi	r4,1
 400d064:	9125883a 	add	r18,r18,r4
 400d068:	1008d43a 	srli	r4,r2,16
 400d06c:	1004943a 	slli	r2,r2,16
 400d070:	ad7fffcc 	andi	r21,r21,65535
 400d074:	2489883a 	add	r4,r4,r18
 400d078:	1545883a 	add	r2,r2,r21
 400d07c:	81003836 	bltu	r16,r4,400d160 <__divdf3+0x728>
 400d080:	81003626 	beq	r16,r4,400d15c <__divdf3+0x724>
 400d084:	a5000054 	ori	r20,r20,1
 400d088:	1880ffc4 	addi	r2,r3,1023
 400d08c:	00bf2e0e 	bge	zero,r2,400cd48 <__alt_data_end+0xfc00cd48>
 400d090:	a10001cc 	andi	r4,r20,7
 400d094:	20000726 	beq	r4,zero,400d0b4 <__divdf3+0x67c>
 400d098:	a10003cc 	andi	r4,r20,15
 400d09c:	01400104 	movi	r5,4
 400d0a0:	21400426 	beq	r4,r5,400d0b4 <__divdf3+0x67c>
 400d0a4:	a149883a 	add	r4,r20,r5
 400d0a8:	2529803a 	cmpltu	r20,r4,r20
 400d0ac:	8d23883a 	add	r17,r17,r20
 400d0b0:	2029883a 	mov	r20,r4
 400d0b4:	8900402c 	andhi	r4,r17,256
 400d0b8:	20000426 	beq	r4,zero,400d0cc <__divdf3+0x694>
 400d0bc:	18810004 	addi	r2,r3,1024
 400d0c0:	00ffc034 	movhi	r3,65280
 400d0c4:	18ffffc4 	addi	r3,r3,-1
 400d0c8:	88e2703a 	and	r17,r17,r3
 400d0cc:	00c1ff84 	movi	r3,2046
 400d0d0:	18beb416 	blt	r3,r2,400cba4 <__alt_data_end+0xfc00cba4>
 400d0d4:	a028d0fa 	srli	r20,r20,3
 400d0d8:	882a977a 	slli	r21,r17,29
 400d0dc:	8820927a 	slli	r16,r17,9
 400d0e0:	1081ffcc 	andi	r2,r2,2047
 400d0e4:	ad2ab03a 	or	r21,r21,r20
 400d0e8:	8020d33a 	srli	r16,r16,12
 400d0ec:	9900004c 	andi	r4,r19,1
 400d0f0:	003eb006 	br	400cbb4 <__alt_data_end+0xfc00cbb4>
 400d0f4:	8080022c 	andhi	r2,r16,8
 400d0f8:	10001226 	beq	r2,zero,400d144 <__divdf3+0x70c>
 400d0fc:	8880022c 	andhi	r2,r17,8
 400d100:	1000101e 	bne	r2,zero,400d144 <__divdf3+0x70c>
 400d104:	00800434 	movhi	r2,16
 400d108:	8c000234 	orhi	r16,r17,8
 400d10c:	10bfffc4 	addi	r2,r2,-1
 400d110:	b809883a 	mov	r4,r23
 400d114:	80a0703a 	and	r16,r16,r2
 400d118:	a02b883a 	mov	r21,r20
 400d11c:	003f0806 	br	400cd40 <__alt_data_end+0xfc00cd40>
 400d120:	008000c4 	movi	r2,3
 400d124:	3880b126 	beq	r7,r2,400d3ec <__divdf3+0x9b4>
 400d128:	00800044 	movi	r2,1
 400d12c:	38805b1e 	bne	r7,r2,400d29c <__divdf3+0x864>
 400d130:	e009883a 	mov	r4,fp
 400d134:	0005883a 	mov	r2,zero
 400d138:	0021883a 	mov	r16,zero
 400d13c:	002b883a 	mov	r21,zero
 400d140:	003e9c06 	br	400cbb4 <__alt_data_end+0xfc00cbb4>
 400d144:	00800434 	movhi	r2,16
 400d148:	84000234 	orhi	r16,r16,8
 400d14c:	10bfffc4 	addi	r2,r2,-1
 400d150:	b009883a 	mov	r4,r22
 400d154:	80a0703a 	and	r16,r16,r2
 400d158:	003ef906 	br	400cd40 <__alt_data_end+0xfc00cd40>
 400d15c:	103fca26 	beq	r2,zero,400d088 <__alt_data_end+0xfc00d088>
 400d160:	b421883a 	add	r16,r22,r16
 400d164:	a17fffc4 	addi	r5,r20,-1
 400d168:	8580422e 	bgeu	r16,r22,400d274 <__divdf3+0x83c>
 400d16c:	2829883a 	mov	r20,r5
 400d170:	813fc41e 	bne	r16,r4,400d084 <__alt_data_end+0xfc00d084>
 400d174:	d9800017 	ldw	r6,0(sp)
 400d178:	30bfc21e 	bne	r6,r2,400d084 <__alt_data_end+0xfc00d084>
 400d17c:	003fc206 	br	400d088 <__alt_data_end+0xfc00d088>
 400d180:	143ff604 	addi	r16,r2,-40
 400d184:	8c20983a 	sll	r16,r17,r16
 400d188:	002b883a 	mov	r21,zero
 400d18c:	003eb406 	br	400cc60 <__alt_data_end+0xfc00cc60>
 400d190:	d9800215 	stw	r6,8(sp)
 400d194:	d9c00515 	stw	r7,20(sp)
 400d198:	da000415 	stw	r8,16(sp)
 400d19c:	4001ab40 	call	4001ab4 <__clzsi2>
 400d1a0:	10800804 	addi	r2,r2,32
 400d1a4:	da000417 	ldw	r8,16(sp)
 400d1a8:	d9c00517 	ldw	r7,20(sp)
 400d1ac:	d9800217 	ldw	r6,8(sp)
 400d1b0:	003ea106 	br	400cc38 <__alt_data_end+0xfc00cc38>
 400d1b4:	147ff604 	addi	r17,r2,-40
 400d1b8:	3462983a 	sll	r17,r6,r17
 400d1bc:	0029883a 	mov	r20,zero
 400d1c0:	003ec906 	br	400cce8 <__alt_data_end+0xfc00cce8>
 400d1c4:	3009883a 	mov	r4,r6
 400d1c8:	d9400115 	stw	r5,4(sp)
 400d1cc:	d9800215 	stw	r6,8(sp)
 400d1d0:	da000415 	stw	r8,16(sp)
 400d1d4:	da400315 	stw	r9,12(sp)
 400d1d8:	4001ab40 	call	4001ab4 <__clzsi2>
 400d1dc:	10800804 	addi	r2,r2,32
 400d1e0:	da400317 	ldw	r9,12(sp)
 400d1e4:	da000417 	ldw	r8,16(sp)
 400d1e8:	d9800217 	ldw	r6,8(sp)
 400d1ec:	d9400117 	ldw	r5,4(sp)
 400d1f0:	003eb306 	br	400ccc0 <__alt_data_end+0xfc00ccc0>
 400d1f4:	d9800017 	ldw	r6,0(sp)
 400d1f8:	a9ab883a 	add	r21,r21,r6
 400d1fc:	a98b803a 	cmpltu	r5,r21,r6
 400d200:	2d8b883a 	add	r5,r5,r22
 400d204:	2a11883a 	add	r8,r5,r8
 400d208:	897fffc4 	addi	r5,r17,-1
 400d20c:	b2000c2e 	bgeu	r22,r8,400d240 <__divdf3+0x808>
 400d210:	41003f36 	bltu	r8,r4,400d310 <__divdf3+0x8d8>
 400d214:	22006c26 	beq	r4,r8,400d3c8 <__divdf3+0x990>
 400d218:	4109c83a 	sub	r4,r8,r4
 400d21c:	2823883a 	mov	r17,r5
 400d220:	003f3b06 	br	400cf10 <__alt_data_end+0xfc00cf10>
 400d224:	ad3ed336 	bltu	r21,r20,400cd74 <__alt_data_end+0xfc00cd74>
 400d228:	a804d07a 	srli	r2,r21,1
 400d22c:	802e97fa 	slli	r23,r16,31
 400d230:	a82a97fa 	slli	r21,r21,31
 400d234:	8020d07a 	srli	r16,r16,1
 400d238:	b8aeb03a 	or	r23,r23,r2
 400d23c:	003ed006 	br	400cd80 <__alt_data_end+0xfc00cd80>
 400d240:	b23ff51e 	bne	r22,r8,400d218 <__alt_data_end+0xfc00d218>
 400d244:	d9800017 	ldw	r6,0(sp)
 400d248:	a9bff12e 	bgeu	r21,r6,400d210 <__alt_data_end+0xfc00d210>
 400d24c:	b109c83a 	sub	r4,r22,r4
 400d250:	2823883a 	mov	r17,r5
 400d254:	003f2e06 	br	400cf10 <__alt_data_end+0xfc00cf10>
 400d258:	2021883a 	mov	r16,r4
 400d25c:	003eff06 	br	400ce5c <__alt_data_end+0xfc00ce5c>
 400d260:	2023883a 	mov	r17,r4
 400d264:	003ee406 	br	400cdf8 <__alt_data_end+0xfc00cdf8>
 400d268:	a8bfe236 	bltu	r21,r2,400d1f4 <__alt_data_end+0xfc00d1f4>
 400d26c:	0009883a 	mov	r4,zero
 400d270:	003f2706 	br	400cf10 <__alt_data_end+0xfc00cf10>
 400d274:	81002d36 	bltu	r16,r4,400d32c <__divdf3+0x8f4>
 400d278:	24005626 	beq	r4,r16,400d3d4 <__divdf3+0x99c>
 400d27c:	2829883a 	mov	r20,r5
 400d280:	003f8006 	br	400d084 <__alt_data_end+0xfc00d084>
 400d284:	053fffc4 	movi	r20,-1
 400d288:	003f7f06 	br	400d088 <__alt_data_end+0xfc00d088>
 400d28c:	200f883a 	mov	r7,r4
 400d290:	003f3c06 	br	400cf84 <__alt_data_end+0xfc00cf84>
 400d294:	1011883a 	mov	r8,r2
 400d298:	003f5506 	br	400cff0 <__alt_data_end+0xfc00cff0>
 400d29c:	e027883a 	mov	r19,fp
 400d2a0:	003f7906 	br	400d088 <__alt_data_end+0xfc00d088>
 400d2a4:	010007c4 	movi	r4,31
 400d2a8:	20c02816 	blt	r4,r3,400d34c <__divdf3+0x914>
 400d2ac:	00800804 	movi	r2,32
 400d2b0:	10c5c83a 	sub	r2,r2,r3
 400d2b4:	888a983a 	sll	r5,r17,r2
 400d2b8:	a0c8d83a 	srl	r4,r20,r3
 400d2bc:	a084983a 	sll	r2,r20,r2
 400d2c0:	88e2d83a 	srl	r17,r17,r3
 400d2c4:	2906b03a 	or	r3,r5,r4
 400d2c8:	1004c03a 	cmpne	r2,r2,zero
 400d2cc:	1886b03a 	or	r3,r3,r2
 400d2d0:	188001cc 	andi	r2,r3,7
 400d2d4:	10000726 	beq	r2,zero,400d2f4 <__divdf3+0x8bc>
 400d2d8:	188003cc 	andi	r2,r3,15
 400d2dc:	01000104 	movi	r4,4
 400d2e0:	11000426 	beq	r2,r4,400d2f4 <__divdf3+0x8bc>
 400d2e4:	1805883a 	mov	r2,r3
 400d2e8:	10c00104 	addi	r3,r2,4
 400d2ec:	1885803a 	cmpltu	r2,r3,r2
 400d2f0:	88a3883a 	add	r17,r17,r2
 400d2f4:	8880202c 	andhi	r2,r17,128
 400d2f8:	10002926 	beq	r2,zero,400d3a0 <__divdf3+0x968>
 400d2fc:	9900004c 	andi	r4,r19,1
 400d300:	00800044 	movi	r2,1
 400d304:	0021883a 	mov	r16,zero
 400d308:	002b883a 	mov	r21,zero
 400d30c:	003e2906 	br	400cbb4 <__alt_data_end+0xfc00cbb4>
 400d310:	d9800017 	ldw	r6,0(sp)
 400d314:	8c7fff84 	addi	r17,r17,-2
 400d318:	a9ab883a 	add	r21,r21,r6
 400d31c:	a98b803a 	cmpltu	r5,r21,r6
 400d320:	2d8b883a 	add	r5,r5,r22
 400d324:	2a11883a 	add	r8,r5,r8
 400d328:	003ef806 	br	400cf0c <__alt_data_end+0xfc00cf0c>
 400d32c:	d9800017 	ldw	r6,0(sp)
 400d330:	318f883a 	add	r7,r6,r6
 400d334:	398b803a 	cmpltu	r5,r7,r6
 400d338:	2d8d883a 	add	r6,r5,r22
 400d33c:	81a1883a 	add	r16,r16,r6
 400d340:	a17fff84 	addi	r5,r20,-2
 400d344:	d9c00015 	stw	r7,0(sp)
 400d348:	003f8806 	br	400d16c <__alt_data_end+0xfc00d16c>
 400d34c:	013ff844 	movi	r4,-31
 400d350:	2085c83a 	sub	r2,r4,r2
 400d354:	8888d83a 	srl	r4,r17,r2
 400d358:	00800804 	movi	r2,32
 400d35c:	18802126 	beq	r3,r2,400d3e4 <__divdf3+0x9ac>
 400d360:	04001004 	movi	r16,64
 400d364:	80c7c83a 	sub	r3,r16,r3
 400d368:	88e0983a 	sll	r16,r17,r3
 400d36c:	8504b03a 	or	r2,r16,r20
 400d370:	1004c03a 	cmpne	r2,r2,zero
 400d374:	2084b03a 	or	r2,r4,r2
 400d378:	144001cc 	andi	r17,r2,7
 400d37c:	88000d1e 	bne	r17,zero,400d3b4 <__divdf3+0x97c>
 400d380:	0021883a 	mov	r16,zero
 400d384:	102ad0fa 	srli	r21,r2,3
 400d388:	9900004c 	andi	r4,r19,1
 400d38c:	0005883a 	mov	r2,zero
 400d390:	ac6ab03a 	or	r21,r21,r17
 400d394:	003e0706 	br	400cbb4 <__alt_data_end+0xfc00cbb4>
 400d398:	1007883a 	mov	r3,r2
 400d39c:	0023883a 	mov	r17,zero
 400d3a0:	8820927a 	slli	r16,r17,9
 400d3a4:	1805883a 	mov	r2,r3
 400d3a8:	8822977a 	slli	r17,r17,29
 400d3ac:	8020d33a 	srli	r16,r16,12
 400d3b0:	003ff406 	br	400d384 <__alt_data_end+0xfc00d384>
 400d3b4:	10c003cc 	andi	r3,r2,15
 400d3b8:	01000104 	movi	r4,4
 400d3bc:	193ff626 	beq	r3,r4,400d398 <__alt_data_end+0xfc00d398>
 400d3c0:	0023883a 	mov	r17,zero
 400d3c4:	003fc806 	br	400d2e8 <__alt_data_end+0xfc00d2e8>
 400d3c8:	a8bfd136 	bltu	r21,r2,400d310 <__alt_data_end+0xfc00d310>
 400d3cc:	2823883a 	mov	r17,r5
 400d3d0:	003fa606 	br	400d26c <__alt_data_end+0xfc00d26c>
 400d3d4:	d9800017 	ldw	r6,0(sp)
 400d3d8:	30bfd436 	bltu	r6,r2,400d32c <__alt_data_end+0xfc00d32c>
 400d3dc:	2829883a 	mov	r20,r5
 400d3e0:	003f6406 	br	400d174 <__alt_data_end+0xfc00d174>
 400d3e4:	0021883a 	mov	r16,zero
 400d3e8:	003fe006 	br	400d36c <__alt_data_end+0xfc00d36c>
 400d3ec:	00800434 	movhi	r2,16
 400d3f0:	8c000234 	orhi	r16,r17,8
 400d3f4:	10bfffc4 	addi	r2,r2,-1
 400d3f8:	e009883a 	mov	r4,fp
 400d3fc:	80a0703a 	and	r16,r16,r2
 400d400:	a02b883a 	mov	r21,r20
 400d404:	003e4e06 	br	400cd40 <__alt_data_end+0xfc00cd40>

0400d408 <__eqdf2>:
 400d408:	2804d53a 	srli	r2,r5,20
 400d40c:	3806d53a 	srli	r3,r7,20
 400d410:	02000434 	movhi	r8,16
 400d414:	423fffc4 	addi	r8,r8,-1
 400d418:	1081ffcc 	andi	r2,r2,2047
 400d41c:	0281ffc4 	movi	r10,2047
 400d420:	2a12703a 	and	r9,r5,r8
 400d424:	18c1ffcc 	andi	r3,r3,2047
 400d428:	3a10703a 	and	r8,r7,r8
 400d42c:	280ad7fa 	srli	r5,r5,31
 400d430:	380ed7fa 	srli	r7,r7,31
 400d434:	12801026 	beq	r2,r10,400d478 <__eqdf2+0x70>
 400d438:	0281ffc4 	movi	r10,2047
 400d43c:	1a800a26 	beq	r3,r10,400d468 <__eqdf2+0x60>
 400d440:	10c00226 	beq	r2,r3,400d44c <__eqdf2+0x44>
 400d444:	00800044 	movi	r2,1
 400d448:	f800283a 	ret
 400d44c:	4a3ffd1e 	bne	r9,r8,400d444 <__alt_data_end+0xfc00d444>
 400d450:	21bffc1e 	bne	r4,r6,400d444 <__alt_data_end+0xfc00d444>
 400d454:	29c00c26 	beq	r5,r7,400d488 <__eqdf2+0x80>
 400d458:	103ffa1e 	bne	r2,zero,400d444 <__alt_data_end+0xfc00d444>
 400d45c:	2244b03a 	or	r2,r4,r9
 400d460:	1004c03a 	cmpne	r2,r2,zero
 400d464:	f800283a 	ret
 400d468:	3214b03a 	or	r10,r6,r8
 400d46c:	503ff426 	beq	r10,zero,400d440 <__alt_data_end+0xfc00d440>
 400d470:	00800044 	movi	r2,1
 400d474:	f800283a 	ret
 400d478:	2254b03a 	or	r10,r4,r9
 400d47c:	503fee26 	beq	r10,zero,400d438 <__alt_data_end+0xfc00d438>
 400d480:	00800044 	movi	r2,1
 400d484:	f800283a 	ret
 400d488:	0005883a 	mov	r2,zero
 400d48c:	f800283a 	ret

0400d490 <__gedf2>:
 400d490:	2804d53a 	srli	r2,r5,20
 400d494:	3806d53a 	srli	r3,r7,20
 400d498:	02000434 	movhi	r8,16
 400d49c:	423fffc4 	addi	r8,r8,-1
 400d4a0:	1081ffcc 	andi	r2,r2,2047
 400d4a4:	0241ffc4 	movi	r9,2047
 400d4a8:	2a14703a 	and	r10,r5,r8
 400d4ac:	18c1ffcc 	andi	r3,r3,2047
 400d4b0:	3a10703a 	and	r8,r7,r8
 400d4b4:	280ad7fa 	srli	r5,r5,31
 400d4b8:	380ed7fa 	srli	r7,r7,31
 400d4bc:	12401d26 	beq	r2,r9,400d534 <__gedf2+0xa4>
 400d4c0:	0241ffc4 	movi	r9,2047
 400d4c4:	1a401226 	beq	r3,r9,400d510 <__gedf2+0x80>
 400d4c8:	1000081e 	bne	r2,zero,400d4ec <__gedf2+0x5c>
 400d4cc:	2296b03a 	or	r11,r4,r10
 400d4d0:	5813003a 	cmpeq	r9,r11,zero
 400d4d4:	1800091e 	bne	r3,zero,400d4fc <__gedf2+0x6c>
 400d4d8:	3218b03a 	or	r12,r6,r8
 400d4dc:	6000071e 	bne	r12,zero,400d4fc <__gedf2+0x6c>
 400d4e0:	0005883a 	mov	r2,zero
 400d4e4:	5800101e 	bne	r11,zero,400d528 <__gedf2+0x98>
 400d4e8:	f800283a 	ret
 400d4ec:	18000c1e 	bne	r3,zero,400d520 <__gedf2+0x90>
 400d4f0:	3212b03a 	or	r9,r6,r8
 400d4f4:	48000c26 	beq	r9,zero,400d528 <__gedf2+0x98>
 400d4f8:	0013883a 	mov	r9,zero
 400d4fc:	39c03fcc 	andi	r7,r7,255
 400d500:	48000826 	beq	r9,zero,400d524 <__gedf2+0x94>
 400d504:	38000926 	beq	r7,zero,400d52c <__gedf2+0x9c>
 400d508:	00800044 	movi	r2,1
 400d50c:	f800283a 	ret
 400d510:	3212b03a 	or	r9,r6,r8
 400d514:	483fec26 	beq	r9,zero,400d4c8 <__alt_data_end+0xfc00d4c8>
 400d518:	00bfff84 	movi	r2,-2
 400d51c:	f800283a 	ret
 400d520:	39c03fcc 	andi	r7,r7,255
 400d524:	29c00626 	beq	r5,r7,400d540 <__gedf2+0xb0>
 400d528:	283ff726 	beq	r5,zero,400d508 <__alt_data_end+0xfc00d508>
 400d52c:	00bfffc4 	movi	r2,-1
 400d530:	f800283a 	ret
 400d534:	2292b03a 	or	r9,r4,r10
 400d538:	483fe126 	beq	r9,zero,400d4c0 <__alt_data_end+0xfc00d4c0>
 400d53c:	003ff606 	br	400d518 <__alt_data_end+0xfc00d518>
 400d540:	18bff916 	blt	r3,r2,400d528 <__alt_data_end+0xfc00d528>
 400d544:	10c00316 	blt	r2,r3,400d554 <__gedf2+0xc4>
 400d548:	42bff736 	bltu	r8,r10,400d528 <__alt_data_end+0xfc00d528>
 400d54c:	52000326 	beq	r10,r8,400d55c <__gedf2+0xcc>
 400d550:	5200042e 	bgeu	r10,r8,400d564 <__gedf2+0xd4>
 400d554:	283fec1e 	bne	r5,zero,400d508 <__alt_data_end+0xfc00d508>
 400d558:	003ff406 	br	400d52c <__alt_data_end+0xfc00d52c>
 400d55c:	313ff236 	bltu	r6,r4,400d528 <__alt_data_end+0xfc00d528>
 400d560:	21bffc36 	bltu	r4,r6,400d554 <__alt_data_end+0xfc00d554>
 400d564:	0005883a 	mov	r2,zero
 400d568:	f800283a 	ret

0400d56c <__ledf2>:
 400d56c:	2804d53a 	srli	r2,r5,20
 400d570:	3810d53a 	srli	r8,r7,20
 400d574:	00c00434 	movhi	r3,16
 400d578:	18ffffc4 	addi	r3,r3,-1
 400d57c:	1081ffcc 	andi	r2,r2,2047
 400d580:	0241ffc4 	movi	r9,2047
 400d584:	28d4703a 	and	r10,r5,r3
 400d588:	4201ffcc 	andi	r8,r8,2047
 400d58c:	38c6703a 	and	r3,r7,r3
 400d590:	280ad7fa 	srli	r5,r5,31
 400d594:	380ed7fa 	srli	r7,r7,31
 400d598:	12401f26 	beq	r2,r9,400d618 <__ledf2+0xac>
 400d59c:	0241ffc4 	movi	r9,2047
 400d5a0:	42401426 	beq	r8,r9,400d5f4 <__ledf2+0x88>
 400d5a4:	1000091e 	bne	r2,zero,400d5cc <__ledf2+0x60>
 400d5a8:	2296b03a 	or	r11,r4,r10
 400d5ac:	5813003a 	cmpeq	r9,r11,zero
 400d5b0:	29403fcc 	andi	r5,r5,255
 400d5b4:	40000a1e 	bne	r8,zero,400d5e0 <__ledf2+0x74>
 400d5b8:	30d8b03a 	or	r12,r6,r3
 400d5bc:	6000081e 	bne	r12,zero,400d5e0 <__ledf2+0x74>
 400d5c0:	0005883a 	mov	r2,zero
 400d5c4:	5800111e 	bne	r11,zero,400d60c <__ledf2+0xa0>
 400d5c8:	f800283a 	ret
 400d5cc:	29403fcc 	andi	r5,r5,255
 400d5d0:	40000c1e 	bne	r8,zero,400d604 <__ledf2+0x98>
 400d5d4:	30d2b03a 	or	r9,r6,r3
 400d5d8:	48000c26 	beq	r9,zero,400d60c <__ledf2+0xa0>
 400d5dc:	0013883a 	mov	r9,zero
 400d5e0:	39c03fcc 	andi	r7,r7,255
 400d5e4:	48000826 	beq	r9,zero,400d608 <__ledf2+0x9c>
 400d5e8:	38001126 	beq	r7,zero,400d630 <__ledf2+0xc4>
 400d5ec:	00800044 	movi	r2,1
 400d5f0:	f800283a 	ret
 400d5f4:	30d2b03a 	or	r9,r6,r3
 400d5f8:	483fea26 	beq	r9,zero,400d5a4 <__alt_data_end+0xfc00d5a4>
 400d5fc:	00800084 	movi	r2,2
 400d600:	f800283a 	ret
 400d604:	39c03fcc 	andi	r7,r7,255
 400d608:	39400726 	beq	r7,r5,400d628 <__ledf2+0xbc>
 400d60c:	2800081e 	bne	r5,zero,400d630 <__ledf2+0xc4>
 400d610:	00800044 	movi	r2,1
 400d614:	f800283a 	ret
 400d618:	2292b03a 	or	r9,r4,r10
 400d61c:	483fdf26 	beq	r9,zero,400d59c <__alt_data_end+0xfc00d59c>
 400d620:	00800084 	movi	r2,2
 400d624:	f800283a 	ret
 400d628:	4080030e 	bge	r8,r2,400d638 <__ledf2+0xcc>
 400d62c:	383fef26 	beq	r7,zero,400d5ec <__alt_data_end+0xfc00d5ec>
 400d630:	00bfffc4 	movi	r2,-1
 400d634:	f800283a 	ret
 400d638:	123feb16 	blt	r2,r8,400d5e8 <__alt_data_end+0xfc00d5e8>
 400d63c:	1abff336 	bltu	r3,r10,400d60c <__alt_data_end+0xfc00d60c>
 400d640:	50c00326 	beq	r10,r3,400d650 <__ledf2+0xe4>
 400d644:	50c0042e 	bgeu	r10,r3,400d658 <__ledf2+0xec>
 400d648:	283fe81e 	bne	r5,zero,400d5ec <__alt_data_end+0xfc00d5ec>
 400d64c:	003ff806 	br	400d630 <__alt_data_end+0xfc00d630>
 400d650:	313fee36 	bltu	r6,r4,400d60c <__alt_data_end+0xfc00d60c>
 400d654:	21bffc36 	bltu	r4,r6,400d648 <__alt_data_end+0xfc00d648>
 400d658:	0005883a 	mov	r2,zero
 400d65c:	f800283a 	ret

0400d660 <__muldf3>:
 400d660:	deffee04 	addi	sp,sp,-72
 400d664:	dd000c15 	stw	r20,48(sp)
 400d668:	2828d53a 	srli	r20,r5,20
 400d66c:	ddc00f15 	stw	r23,60(sp)
 400d670:	282ed7fa 	srli	r23,r5,31
 400d674:	dc000815 	stw	r16,32(sp)
 400d678:	04000434 	movhi	r16,16
 400d67c:	dcc00b15 	stw	r19,44(sp)
 400d680:	843fffc4 	addi	r16,r16,-1
 400d684:	dfc01115 	stw	ra,68(sp)
 400d688:	df001015 	stw	fp,64(sp)
 400d68c:	dd800e15 	stw	r22,56(sp)
 400d690:	dd400d15 	stw	r21,52(sp)
 400d694:	dc800a15 	stw	r18,40(sp)
 400d698:	dc400915 	stw	r17,36(sp)
 400d69c:	a501ffcc 	andi	r20,r20,2047
 400d6a0:	2c20703a 	and	r16,r5,r16
 400d6a4:	b827883a 	mov	r19,r23
 400d6a8:	ba403fcc 	andi	r9,r23,255
 400d6ac:	a0006026 	beq	r20,zero,400d830 <__muldf3+0x1d0>
 400d6b0:	0081ffc4 	movi	r2,2047
 400d6b4:	202d883a 	mov	r22,r4
 400d6b8:	a0803626 	beq	r20,r2,400d794 <__muldf3+0x134>
 400d6bc:	84000434 	orhi	r16,r16,16
 400d6c0:	200ad77a 	srli	r5,r4,29
 400d6c4:	800490fa 	slli	r2,r16,3
 400d6c8:	202c90fa 	slli	r22,r4,3
 400d6cc:	a53f0044 	addi	r20,r20,-1023
 400d6d0:	28a0b03a 	or	r16,r5,r2
 400d6d4:	002b883a 	mov	r21,zero
 400d6d8:	000b883a 	mov	r5,zero
 400d6dc:	3804d53a 	srli	r2,r7,20
 400d6e0:	3838d7fa 	srli	fp,r7,31
 400d6e4:	04400434 	movhi	r17,16
 400d6e8:	8c7fffc4 	addi	r17,r17,-1
 400d6ec:	1081ffcc 	andi	r2,r2,2047
 400d6f0:	3025883a 	mov	r18,r6
 400d6f4:	3c62703a 	and	r17,r7,r17
 400d6f8:	e2803fcc 	andi	r10,fp,255
 400d6fc:	10006d26 	beq	r2,zero,400d8b4 <__muldf3+0x254>
 400d700:	00c1ffc4 	movi	r3,2047
 400d704:	10c06526 	beq	r2,r3,400d89c <__muldf3+0x23c>
 400d708:	8c400434 	orhi	r17,r17,16
 400d70c:	300ed77a 	srli	r7,r6,29
 400d710:	880690fa 	slli	r3,r17,3
 400d714:	302490fa 	slli	r18,r6,3
 400d718:	10bf0044 	addi	r2,r2,-1023
 400d71c:	38e2b03a 	or	r17,r7,r3
 400d720:	000f883a 	mov	r7,zero
 400d724:	a087883a 	add	r3,r20,r2
 400d728:	010003c4 	movi	r4,15
 400d72c:	3d44b03a 	or	r2,r7,r21
 400d730:	e5ccf03a 	xor	r6,fp,r23
 400d734:	1a000044 	addi	r8,r3,1
 400d738:	20809b36 	bltu	r4,r2,400d9a8 <__muldf3+0x348>
 400d73c:	100490ba 	slli	r2,r2,2
 400d740:	01010074 	movhi	r4,1025
 400d744:	2135d504 	addi	r4,r4,-10412
 400d748:	1105883a 	add	r2,r2,r4
 400d74c:	10800017 	ldw	r2,0(r2)
 400d750:	1000683a 	jmp	r2
 400d754:	0400d9a8 	cmpgeui	r16,zero,870
 400d758:	0400d7b4 	movhi	r16,862
 400d75c:	0400d7b4 	movhi	r16,862
 400d760:	0400d7b0 	cmpltui	r16,zero,862
 400d764:	0400d984 	movi	r16,870
 400d768:	0400d984 	movi	r16,870
 400d76c:	0400d96c 	andhi	r16,zero,869
 400d770:	0400d7b0 	cmpltui	r16,zero,862
 400d774:	0400d984 	movi	r16,870
 400d778:	0400d96c 	andhi	r16,zero,869
 400d77c:	0400d984 	movi	r16,870
 400d780:	0400d7b0 	cmpltui	r16,zero,862
 400d784:	0400d994 	movui	r16,870
 400d788:	0400d994 	movui	r16,870
 400d78c:	0400d994 	movui	r16,870
 400d790:	0400dcf4 	movhi	r16,883
 400d794:	2404b03a 	or	r2,r4,r16
 400d798:	1000711e 	bne	r2,zero,400d960 <__muldf3+0x300>
 400d79c:	05400204 	movi	r21,8
 400d7a0:	0021883a 	mov	r16,zero
 400d7a4:	002d883a 	mov	r22,zero
 400d7a8:	01400084 	movi	r5,2
 400d7ac:	003fcb06 	br	400d6dc <__alt_data_end+0xfc00d6dc>
 400d7b0:	500d883a 	mov	r6,r10
 400d7b4:	00800084 	movi	r2,2
 400d7b8:	38805926 	beq	r7,r2,400d920 <__muldf3+0x2c0>
 400d7bc:	008000c4 	movi	r2,3
 400d7c0:	3881bb26 	beq	r7,r2,400deb0 <__muldf3+0x850>
 400d7c4:	00800044 	movi	r2,1
 400d7c8:	3881961e 	bne	r7,r2,400de24 <__muldf3+0x7c4>
 400d7cc:	3027883a 	mov	r19,r6
 400d7d0:	0005883a 	mov	r2,zero
 400d7d4:	0021883a 	mov	r16,zero
 400d7d8:	002d883a 	mov	r22,zero
 400d7dc:	1004953a 	slli	r2,r2,20
 400d7e0:	98c03fcc 	andi	r3,r19,255
 400d7e4:	04400434 	movhi	r17,16
 400d7e8:	8c7fffc4 	addi	r17,r17,-1
 400d7ec:	180697fa 	slli	r3,r3,31
 400d7f0:	8460703a 	and	r16,r16,r17
 400d7f4:	80a0b03a 	or	r16,r16,r2
 400d7f8:	80c6b03a 	or	r3,r16,r3
 400d7fc:	b005883a 	mov	r2,r22
 400d800:	dfc01117 	ldw	ra,68(sp)
 400d804:	df001017 	ldw	fp,64(sp)
 400d808:	ddc00f17 	ldw	r23,60(sp)
 400d80c:	dd800e17 	ldw	r22,56(sp)
 400d810:	dd400d17 	ldw	r21,52(sp)
 400d814:	dd000c17 	ldw	r20,48(sp)
 400d818:	dcc00b17 	ldw	r19,44(sp)
 400d81c:	dc800a17 	ldw	r18,40(sp)
 400d820:	dc400917 	ldw	r17,36(sp)
 400d824:	dc000817 	ldw	r16,32(sp)
 400d828:	dec01204 	addi	sp,sp,72
 400d82c:	f800283a 	ret
 400d830:	2404b03a 	or	r2,r4,r16
 400d834:	202b883a 	mov	r21,r4
 400d838:	10004426 	beq	r2,zero,400d94c <__muldf3+0x2ec>
 400d83c:	80015126 	beq	r16,zero,400dd84 <__muldf3+0x724>
 400d840:	8009883a 	mov	r4,r16
 400d844:	d9800715 	stw	r6,28(sp)
 400d848:	d9c00215 	stw	r7,8(sp)
 400d84c:	da400415 	stw	r9,16(sp)
 400d850:	4001ab40 	call	4001ab4 <__clzsi2>
 400d854:	d9800717 	ldw	r6,28(sp)
 400d858:	d9c00217 	ldw	r7,8(sp)
 400d85c:	da400417 	ldw	r9,16(sp)
 400d860:	113ffd44 	addi	r4,r2,-11
 400d864:	00c00704 	movi	r3,28
 400d868:	19014216 	blt	r3,r4,400dd74 <__muldf3+0x714>
 400d86c:	00c00744 	movi	r3,29
 400d870:	15bffe04 	addi	r22,r2,-8
 400d874:	1907c83a 	sub	r3,r3,r4
 400d878:	85a0983a 	sll	r16,r16,r22
 400d87c:	a8c6d83a 	srl	r3,r21,r3
 400d880:	adac983a 	sll	r22,r21,r22
 400d884:	1c20b03a 	or	r16,r3,r16
 400d888:	1080fcc4 	addi	r2,r2,1011
 400d88c:	00a9c83a 	sub	r20,zero,r2
 400d890:	002b883a 	mov	r21,zero
 400d894:	000b883a 	mov	r5,zero
 400d898:	003f9006 	br	400d6dc <__alt_data_end+0xfc00d6dc>
 400d89c:	3446b03a 	or	r3,r6,r17
 400d8a0:	1800281e 	bne	r3,zero,400d944 <__muldf3+0x2e4>
 400d8a4:	0023883a 	mov	r17,zero
 400d8a8:	0025883a 	mov	r18,zero
 400d8ac:	01c00084 	movi	r7,2
 400d8b0:	003f9c06 	br	400d724 <__alt_data_end+0xfc00d724>
 400d8b4:	3446b03a 	or	r3,r6,r17
 400d8b8:	18001e26 	beq	r3,zero,400d934 <__muldf3+0x2d4>
 400d8bc:	88012126 	beq	r17,zero,400dd44 <__muldf3+0x6e4>
 400d8c0:	8809883a 	mov	r4,r17
 400d8c4:	d9400215 	stw	r5,8(sp)
 400d8c8:	d9800715 	stw	r6,28(sp)
 400d8cc:	da400415 	stw	r9,16(sp)
 400d8d0:	da800315 	stw	r10,12(sp)
 400d8d4:	4001ab40 	call	4001ab4 <__clzsi2>
 400d8d8:	d9400217 	ldw	r5,8(sp)
 400d8dc:	d9800717 	ldw	r6,28(sp)
 400d8e0:	da400417 	ldw	r9,16(sp)
 400d8e4:	da800317 	ldw	r10,12(sp)
 400d8e8:	113ffd44 	addi	r4,r2,-11
 400d8ec:	00c00704 	movi	r3,28
 400d8f0:	19011016 	blt	r3,r4,400dd34 <__muldf3+0x6d4>
 400d8f4:	00c00744 	movi	r3,29
 400d8f8:	14bffe04 	addi	r18,r2,-8
 400d8fc:	1907c83a 	sub	r3,r3,r4
 400d900:	8ca2983a 	sll	r17,r17,r18
 400d904:	30c6d83a 	srl	r3,r6,r3
 400d908:	34a4983a 	sll	r18,r6,r18
 400d90c:	1c62b03a 	or	r17,r3,r17
 400d910:	1080fcc4 	addi	r2,r2,1011
 400d914:	0085c83a 	sub	r2,zero,r2
 400d918:	000f883a 	mov	r7,zero
 400d91c:	003f8106 	br	400d724 <__alt_data_end+0xfc00d724>
 400d920:	3027883a 	mov	r19,r6
 400d924:	0081ffc4 	movi	r2,2047
 400d928:	0021883a 	mov	r16,zero
 400d92c:	002d883a 	mov	r22,zero
 400d930:	003faa06 	br	400d7dc <__alt_data_end+0xfc00d7dc>
 400d934:	0023883a 	mov	r17,zero
 400d938:	0025883a 	mov	r18,zero
 400d93c:	01c00044 	movi	r7,1
 400d940:	003f7806 	br	400d724 <__alt_data_end+0xfc00d724>
 400d944:	01c000c4 	movi	r7,3
 400d948:	003f7606 	br	400d724 <__alt_data_end+0xfc00d724>
 400d94c:	05400104 	movi	r21,4
 400d950:	0021883a 	mov	r16,zero
 400d954:	002d883a 	mov	r22,zero
 400d958:	01400044 	movi	r5,1
 400d95c:	003f5f06 	br	400d6dc <__alt_data_end+0xfc00d6dc>
 400d960:	05400304 	movi	r21,12
 400d964:	014000c4 	movi	r5,3
 400d968:	003f5c06 	br	400d6dc <__alt_data_end+0xfc00d6dc>
 400d96c:	04000434 	movhi	r16,16
 400d970:	0027883a 	mov	r19,zero
 400d974:	843fffc4 	addi	r16,r16,-1
 400d978:	05bfffc4 	movi	r22,-1
 400d97c:	0081ffc4 	movi	r2,2047
 400d980:	003f9606 	br	400d7dc <__alt_data_end+0xfc00d7dc>
 400d984:	8023883a 	mov	r17,r16
 400d988:	b025883a 	mov	r18,r22
 400d98c:	280f883a 	mov	r7,r5
 400d990:	003f8806 	br	400d7b4 <__alt_data_end+0xfc00d7b4>
 400d994:	8023883a 	mov	r17,r16
 400d998:	b025883a 	mov	r18,r22
 400d99c:	480d883a 	mov	r6,r9
 400d9a0:	280f883a 	mov	r7,r5
 400d9a4:	003f8306 	br	400d7b4 <__alt_data_end+0xfc00d7b4>
 400d9a8:	b026d43a 	srli	r19,r22,16
 400d9ac:	902ed43a 	srli	r23,r18,16
 400d9b0:	b5bfffcc 	andi	r22,r22,65535
 400d9b4:	94bfffcc 	andi	r18,r18,65535
 400d9b8:	b00b883a 	mov	r5,r22
 400d9bc:	9009883a 	mov	r4,r18
 400d9c0:	d8c00515 	stw	r3,20(sp)
 400d9c4:	d9800715 	stw	r6,28(sp)
 400d9c8:	da000615 	stw	r8,24(sp)
 400d9cc:	4000bd80 	call	4000bd8 <__mulsi3>
 400d9d0:	980b883a 	mov	r5,r19
 400d9d4:	9009883a 	mov	r4,r18
 400d9d8:	1029883a 	mov	r20,r2
 400d9dc:	4000bd80 	call	4000bd8 <__mulsi3>
 400d9e0:	b80b883a 	mov	r5,r23
 400d9e4:	9809883a 	mov	r4,r19
 400d9e8:	102b883a 	mov	r21,r2
 400d9ec:	4000bd80 	call	4000bd8 <__mulsi3>
 400d9f0:	b809883a 	mov	r4,r23
 400d9f4:	b00b883a 	mov	r5,r22
 400d9f8:	1039883a 	mov	fp,r2
 400d9fc:	4000bd80 	call	4000bd8 <__mulsi3>
 400da00:	a008d43a 	srli	r4,r20,16
 400da04:	1545883a 	add	r2,r2,r21
 400da08:	d8c00517 	ldw	r3,20(sp)
 400da0c:	2085883a 	add	r2,r4,r2
 400da10:	d9800717 	ldw	r6,28(sp)
 400da14:	da000617 	ldw	r8,24(sp)
 400da18:	1540022e 	bgeu	r2,r21,400da24 <__muldf3+0x3c4>
 400da1c:	01000074 	movhi	r4,1
 400da20:	e139883a 	add	fp,fp,r4
 400da24:	100e943a 	slli	r7,r2,16
 400da28:	1004d43a 	srli	r2,r2,16
 400da2c:	882ad43a 	srli	r21,r17,16
 400da30:	a53fffcc 	andi	r20,r20,65535
 400da34:	8c7fffcc 	andi	r17,r17,65535
 400da38:	3d29883a 	add	r20,r7,r20
 400da3c:	b00b883a 	mov	r5,r22
 400da40:	8809883a 	mov	r4,r17
 400da44:	d8c00515 	stw	r3,20(sp)
 400da48:	d9800715 	stw	r6,28(sp)
 400da4c:	da000615 	stw	r8,24(sp)
 400da50:	dd000115 	stw	r20,4(sp)
 400da54:	d8800015 	stw	r2,0(sp)
 400da58:	4000bd80 	call	4000bd8 <__mulsi3>
 400da5c:	980b883a 	mov	r5,r19
 400da60:	8809883a 	mov	r4,r17
 400da64:	d8800215 	stw	r2,8(sp)
 400da68:	4000bd80 	call	4000bd8 <__mulsi3>
 400da6c:	9809883a 	mov	r4,r19
 400da70:	a80b883a 	mov	r5,r21
 400da74:	1029883a 	mov	r20,r2
 400da78:	4000bd80 	call	4000bd8 <__mulsi3>
 400da7c:	b00b883a 	mov	r5,r22
 400da80:	a809883a 	mov	r4,r21
 400da84:	d8800415 	stw	r2,16(sp)
 400da88:	4000bd80 	call	4000bd8 <__mulsi3>
 400da8c:	d9c00217 	ldw	r7,8(sp)
 400da90:	1505883a 	add	r2,r2,r20
 400da94:	d8c00517 	ldw	r3,20(sp)
 400da98:	3826d43a 	srli	r19,r7,16
 400da9c:	d9800717 	ldw	r6,28(sp)
 400daa0:	da000617 	ldw	r8,24(sp)
 400daa4:	9885883a 	add	r2,r19,r2
 400daa8:	da400417 	ldw	r9,16(sp)
 400daac:	1500022e 	bgeu	r2,r20,400dab8 <__muldf3+0x458>
 400dab0:	01000074 	movhi	r4,1
 400dab4:	4913883a 	add	r9,r9,r4
 400dab8:	1028d43a 	srli	r20,r2,16
 400dabc:	1004943a 	slli	r2,r2,16
 400dac0:	802cd43a 	srli	r22,r16,16
 400dac4:	843fffcc 	andi	r16,r16,65535
 400dac8:	3cffffcc 	andi	r19,r7,65535
 400dacc:	9009883a 	mov	r4,r18
 400dad0:	800b883a 	mov	r5,r16
 400dad4:	a269883a 	add	r20,r20,r9
 400dad8:	d8c00515 	stw	r3,20(sp)
 400dadc:	d9800715 	stw	r6,28(sp)
 400dae0:	da000615 	stw	r8,24(sp)
 400dae4:	14e7883a 	add	r19,r2,r19
 400dae8:	4000bd80 	call	4000bd8 <__mulsi3>
 400daec:	9009883a 	mov	r4,r18
 400daf0:	b00b883a 	mov	r5,r22
 400daf4:	d8800315 	stw	r2,12(sp)
 400daf8:	4000bd80 	call	4000bd8 <__mulsi3>
 400dafc:	b809883a 	mov	r4,r23
 400db00:	b00b883a 	mov	r5,r22
 400db04:	d8800215 	stw	r2,8(sp)
 400db08:	4000bd80 	call	4000bd8 <__mulsi3>
 400db0c:	b80b883a 	mov	r5,r23
 400db10:	8009883a 	mov	r4,r16
 400db14:	d8800415 	stw	r2,16(sp)
 400db18:	4000bd80 	call	4000bd8 <__mulsi3>
 400db1c:	da800317 	ldw	r10,12(sp)
 400db20:	d9c00217 	ldw	r7,8(sp)
 400db24:	d9000017 	ldw	r4,0(sp)
 400db28:	502ed43a 	srli	r23,r10,16
 400db2c:	11c5883a 	add	r2,r2,r7
 400db30:	24e5883a 	add	r18,r4,r19
 400db34:	b885883a 	add	r2,r23,r2
 400db38:	d8c00517 	ldw	r3,20(sp)
 400db3c:	d9800717 	ldw	r6,28(sp)
 400db40:	da000617 	ldw	r8,24(sp)
 400db44:	da400417 	ldw	r9,16(sp)
 400db48:	11c0022e 	bgeu	r2,r7,400db54 <__muldf3+0x4f4>
 400db4c:	01000074 	movhi	r4,1
 400db50:	4913883a 	add	r9,r9,r4
 400db54:	100ed43a 	srli	r7,r2,16
 400db58:	1004943a 	slli	r2,r2,16
 400db5c:	55ffffcc 	andi	r23,r10,65535
 400db60:	3a53883a 	add	r9,r7,r9
 400db64:	8809883a 	mov	r4,r17
 400db68:	800b883a 	mov	r5,r16
 400db6c:	d8c00515 	stw	r3,20(sp)
 400db70:	d9800715 	stw	r6,28(sp)
 400db74:	da000615 	stw	r8,24(sp)
 400db78:	da400415 	stw	r9,16(sp)
 400db7c:	15ef883a 	add	r23,r2,r23
 400db80:	4000bd80 	call	4000bd8 <__mulsi3>
 400db84:	8809883a 	mov	r4,r17
 400db88:	b00b883a 	mov	r5,r22
 400db8c:	d8800215 	stw	r2,8(sp)
 400db90:	4000bd80 	call	4000bd8 <__mulsi3>
 400db94:	b00b883a 	mov	r5,r22
 400db98:	a809883a 	mov	r4,r21
 400db9c:	d8800315 	stw	r2,12(sp)
 400dba0:	4000bd80 	call	4000bd8 <__mulsi3>
 400dba4:	8009883a 	mov	r4,r16
 400dba8:	a80b883a 	mov	r5,r21
 400dbac:	1023883a 	mov	r17,r2
 400dbb0:	4000bd80 	call	4000bd8 <__mulsi3>
 400dbb4:	d9c00217 	ldw	r7,8(sp)
 400dbb8:	da800317 	ldw	r10,12(sp)
 400dbbc:	d8c00517 	ldw	r3,20(sp)
 400dbc0:	3808d43a 	srli	r4,r7,16
 400dbc4:	1285883a 	add	r2,r2,r10
 400dbc8:	d9800717 	ldw	r6,28(sp)
 400dbcc:	2085883a 	add	r2,r4,r2
 400dbd0:	da000617 	ldw	r8,24(sp)
 400dbd4:	da400417 	ldw	r9,16(sp)
 400dbd8:	1280022e 	bgeu	r2,r10,400dbe4 <__muldf3+0x584>
 400dbdc:	01000074 	movhi	r4,1
 400dbe0:	8923883a 	add	r17,r17,r4
 400dbe4:	1008943a 	slli	r4,r2,16
 400dbe8:	39ffffcc 	andi	r7,r7,65535
 400dbec:	e4b9883a 	add	fp,fp,r18
 400dbf0:	21cf883a 	add	r7,r4,r7
 400dbf4:	e4e7803a 	cmpltu	r19,fp,r19
 400dbf8:	3d0f883a 	add	r7,r7,r20
 400dbfc:	bf39883a 	add	fp,r23,fp
 400dc00:	99c9883a 	add	r4,r19,r7
 400dc04:	e5ef803a 	cmpltu	r23,fp,r23
 400dc08:	490b883a 	add	r5,r9,r4
 400dc0c:	1004d43a 	srli	r2,r2,16
 400dc10:	b965883a 	add	r18,r23,r5
 400dc14:	24c9803a 	cmpltu	r4,r4,r19
 400dc18:	3d29803a 	cmpltu	r20,r7,r20
 400dc1c:	a128b03a 	or	r20,r20,r4
 400dc20:	95ef803a 	cmpltu	r23,r18,r23
 400dc24:	2a53803a 	cmpltu	r9,r5,r9
 400dc28:	a0a9883a 	add	r20,r20,r2
 400dc2c:	4deeb03a 	or	r23,r9,r23
 400dc30:	a5ef883a 	add	r23,r20,r23
 400dc34:	bc63883a 	add	r17,r23,r17
 400dc38:	e004927a 	slli	r2,fp,9
 400dc3c:	d9000117 	ldw	r4,4(sp)
 400dc40:	882e927a 	slli	r23,r17,9
 400dc44:	9022d5fa 	srli	r17,r18,23
 400dc48:	e038d5fa 	srli	fp,fp,23
 400dc4c:	1104b03a 	or	r2,r2,r4
 400dc50:	9024927a 	slli	r18,r18,9
 400dc54:	1004c03a 	cmpne	r2,r2,zero
 400dc58:	bc62b03a 	or	r17,r23,r17
 400dc5c:	1738b03a 	or	fp,r2,fp
 400dc60:	8880402c 	andhi	r2,r17,256
 400dc64:	e4a4b03a 	or	r18,fp,r18
 400dc68:	10000726 	beq	r2,zero,400dc88 <__muldf3+0x628>
 400dc6c:	9006d07a 	srli	r3,r18,1
 400dc70:	880497fa 	slli	r2,r17,31
 400dc74:	9480004c 	andi	r18,r18,1
 400dc78:	8822d07a 	srli	r17,r17,1
 400dc7c:	1ca4b03a 	or	r18,r3,r18
 400dc80:	14a4b03a 	or	r18,r2,r18
 400dc84:	4007883a 	mov	r3,r8
 400dc88:	1880ffc4 	addi	r2,r3,1023
 400dc8c:	0080460e 	bge	zero,r2,400dda8 <__muldf3+0x748>
 400dc90:	910001cc 	andi	r4,r18,7
 400dc94:	20000726 	beq	r4,zero,400dcb4 <__muldf3+0x654>
 400dc98:	910003cc 	andi	r4,r18,15
 400dc9c:	01400104 	movi	r5,4
 400dca0:	21400426 	beq	r4,r5,400dcb4 <__muldf3+0x654>
 400dca4:	9149883a 	add	r4,r18,r5
 400dca8:	24a5803a 	cmpltu	r18,r4,r18
 400dcac:	8ca3883a 	add	r17,r17,r18
 400dcb0:	2025883a 	mov	r18,r4
 400dcb4:	8900402c 	andhi	r4,r17,256
 400dcb8:	20000426 	beq	r4,zero,400dccc <__muldf3+0x66c>
 400dcbc:	18810004 	addi	r2,r3,1024
 400dcc0:	00ffc034 	movhi	r3,65280
 400dcc4:	18ffffc4 	addi	r3,r3,-1
 400dcc8:	88e2703a 	and	r17,r17,r3
 400dccc:	00c1ff84 	movi	r3,2046
 400dcd0:	18bf1316 	blt	r3,r2,400d920 <__alt_data_end+0xfc00d920>
 400dcd4:	882c977a 	slli	r22,r17,29
 400dcd8:	9024d0fa 	srli	r18,r18,3
 400dcdc:	8822927a 	slli	r17,r17,9
 400dce0:	1081ffcc 	andi	r2,r2,2047
 400dce4:	b4acb03a 	or	r22,r22,r18
 400dce8:	8820d33a 	srli	r16,r17,12
 400dcec:	3027883a 	mov	r19,r6
 400dcf0:	003eba06 	br	400d7dc <__alt_data_end+0xfc00d7dc>
 400dcf4:	8080022c 	andhi	r2,r16,8
 400dcf8:	10000926 	beq	r2,zero,400dd20 <__muldf3+0x6c0>
 400dcfc:	8880022c 	andhi	r2,r17,8
 400dd00:	1000071e 	bne	r2,zero,400dd20 <__muldf3+0x6c0>
 400dd04:	00800434 	movhi	r2,16
 400dd08:	8c000234 	orhi	r16,r17,8
 400dd0c:	10bfffc4 	addi	r2,r2,-1
 400dd10:	e027883a 	mov	r19,fp
 400dd14:	80a0703a 	and	r16,r16,r2
 400dd18:	902d883a 	mov	r22,r18
 400dd1c:	003f1706 	br	400d97c <__alt_data_end+0xfc00d97c>
 400dd20:	00800434 	movhi	r2,16
 400dd24:	84000234 	orhi	r16,r16,8
 400dd28:	10bfffc4 	addi	r2,r2,-1
 400dd2c:	80a0703a 	and	r16,r16,r2
 400dd30:	003f1206 	br	400d97c <__alt_data_end+0xfc00d97c>
 400dd34:	147ff604 	addi	r17,r2,-40
 400dd38:	3462983a 	sll	r17,r6,r17
 400dd3c:	0025883a 	mov	r18,zero
 400dd40:	003ef306 	br	400d910 <__alt_data_end+0xfc00d910>
 400dd44:	3009883a 	mov	r4,r6
 400dd48:	d9400215 	stw	r5,8(sp)
 400dd4c:	d9800715 	stw	r6,28(sp)
 400dd50:	da400415 	stw	r9,16(sp)
 400dd54:	da800315 	stw	r10,12(sp)
 400dd58:	4001ab40 	call	4001ab4 <__clzsi2>
 400dd5c:	10800804 	addi	r2,r2,32
 400dd60:	da800317 	ldw	r10,12(sp)
 400dd64:	da400417 	ldw	r9,16(sp)
 400dd68:	d9800717 	ldw	r6,28(sp)
 400dd6c:	d9400217 	ldw	r5,8(sp)
 400dd70:	003edd06 	br	400d8e8 <__alt_data_end+0xfc00d8e8>
 400dd74:	143ff604 	addi	r16,r2,-40
 400dd78:	ac20983a 	sll	r16,r21,r16
 400dd7c:	002d883a 	mov	r22,zero
 400dd80:	003ec106 	br	400d888 <__alt_data_end+0xfc00d888>
 400dd84:	d9800715 	stw	r6,28(sp)
 400dd88:	d9c00215 	stw	r7,8(sp)
 400dd8c:	da400415 	stw	r9,16(sp)
 400dd90:	4001ab40 	call	4001ab4 <__clzsi2>
 400dd94:	10800804 	addi	r2,r2,32
 400dd98:	da400417 	ldw	r9,16(sp)
 400dd9c:	d9c00217 	ldw	r7,8(sp)
 400dda0:	d9800717 	ldw	r6,28(sp)
 400dda4:	003eae06 	br	400d860 <__alt_data_end+0xfc00d860>
 400dda8:	00c00044 	movi	r3,1
 400ddac:	1887c83a 	sub	r3,r3,r2
 400ddb0:	01000e04 	movi	r4,56
 400ddb4:	20fe8516 	blt	r4,r3,400d7cc <__alt_data_end+0xfc00d7cc>
 400ddb8:	010007c4 	movi	r4,31
 400ddbc:	20c01b16 	blt	r4,r3,400de2c <__muldf3+0x7cc>
 400ddc0:	00800804 	movi	r2,32
 400ddc4:	10c5c83a 	sub	r2,r2,r3
 400ddc8:	888a983a 	sll	r5,r17,r2
 400ddcc:	90c8d83a 	srl	r4,r18,r3
 400ddd0:	9084983a 	sll	r2,r18,r2
 400ddd4:	88e2d83a 	srl	r17,r17,r3
 400ddd8:	2906b03a 	or	r3,r5,r4
 400dddc:	1004c03a 	cmpne	r2,r2,zero
 400dde0:	1886b03a 	or	r3,r3,r2
 400dde4:	188001cc 	andi	r2,r3,7
 400dde8:	10000726 	beq	r2,zero,400de08 <__muldf3+0x7a8>
 400ddec:	188003cc 	andi	r2,r3,15
 400ddf0:	01000104 	movi	r4,4
 400ddf4:	11000426 	beq	r2,r4,400de08 <__muldf3+0x7a8>
 400ddf8:	1805883a 	mov	r2,r3
 400ddfc:	10c00104 	addi	r3,r2,4
 400de00:	1885803a 	cmpltu	r2,r3,r2
 400de04:	88a3883a 	add	r17,r17,r2
 400de08:	8880202c 	andhi	r2,r17,128
 400de0c:	10001c26 	beq	r2,zero,400de80 <__muldf3+0x820>
 400de10:	3027883a 	mov	r19,r6
 400de14:	00800044 	movi	r2,1
 400de18:	0021883a 	mov	r16,zero
 400de1c:	002d883a 	mov	r22,zero
 400de20:	003e6e06 	br	400d7dc <__alt_data_end+0xfc00d7dc>
 400de24:	4007883a 	mov	r3,r8
 400de28:	003f9706 	br	400dc88 <__alt_data_end+0xfc00dc88>
 400de2c:	017ff844 	movi	r5,-31
 400de30:	2885c83a 	sub	r2,r5,r2
 400de34:	888ad83a 	srl	r5,r17,r2
 400de38:	00800804 	movi	r2,32
 400de3c:	18801a26 	beq	r3,r2,400dea8 <__muldf3+0x848>
 400de40:	01001004 	movi	r4,64
 400de44:	20c7c83a 	sub	r3,r4,r3
 400de48:	88e2983a 	sll	r17,r17,r3
 400de4c:	8ca4b03a 	or	r18,r17,r18
 400de50:	9004c03a 	cmpne	r2,r18,zero
 400de54:	2884b03a 	or	r2,r5,r2
 400de58:	144001cc 	andi	r17,r2,7
 400de5c:	88000d1e 	bne	r17,zero,400de94 <__muldf3+0x834>
 400de60:	0021883a 	mov	r16,zero
 400de64:	102cd0fa 	srli	r22,r2,3
 400de68:	3027883a 	mov	r19,r6
 400de6c:	0005883a 	mov	r2,zero
 400de70:	b46cb03a 	or	r22,r22,r17
 400de74:	003e5906 	br	400d7dc <__alt_data_end+0xfc00d7dc>
 400de78:	1007883a 	mov	r3,r2
 400de7c:	0023883a 	mov	r17,zero
 400de80:	8820927a 	slli	r16,r17,9
 400de84:	1805883a 	mov	r2,r3
 400de88:	8822977a 	slli	r17,r17,29
 400de8c:	8020d33a 	srli	r16,r16,12
 400de90:	003ff406 	br	400de64 <__alt_data_end+0xfc00de64>
 400de94:	10c003cc 	andi	r3,r2,15
 400de98:	01000104 	movi	r4,4
 400de9c:	193ff626 	beq	r3,r4,400de78 <__alt_data_end+0xfc00de78>
 400dea0:	0023883a 	mov	r17,zero
 400dea4:	003fd506 	br	400ddfc <__alt_data_end+0xfc00ddfc>
 400dea8:	0023883a 	mov	r17,zero
 400deac:	003fe706 	br	400de4c <__alt_data_end+0xfc00de4c>
 400deb0:	00800434 	movhi	r2,16
 400deb4:	8c000234 	orhi	r16,r17,8
 400deb8:	10bfffc4 	addi	r2,r2,-1
 400debc:	3027883a 	mov	r19,r6
 400dec0:	80a0703a 	and	r16,r16,r2
 400dec4:	902d883a 	mov	r22,r18
 400dec8:	003eac06 	br	400d97c <__alt_data_end+0xfc00d97c>

0400decc <__subdf3>:
 400decc:	02000434 	movhi	r8,16
 400ded0:	423fffc4 	addi	r8,r8,-1
 400ded4:	defffb04 	addi	sp,sp,-20
 400ded8:	2a14703a 	and	r10,r5,r8
 400dedc:	3812d53a 	srli	r9,r7,20
 400dee0:	3a10703a 	and	r8,r7,r8
 400dee4:	2006d77a 	srli	r3,r4,29
 400dee8:	3004d77a 	srli	r2,r6,29
 400deec:	dc000015 	stw	r16,0(sp)
 400def0:	501490fa 	slli	r10,r10,3
 400def4:	2820d53a 	srli	r16,r5,20
 400def8:	401090fa 	slli	r8,r8,3
 400defc:	dc800215 	stw	r18,8(sp)
 400df00:	dc400115 	stw	r17,4(sp)
 400df04:	dfc00415 	stw	ra,16(sp)
 400df08:	202290fa 	slli	r17,r4,3
 400df0c:	dcc00315 	stw	r19,12(sp)
 400df10:	4a41ffcc 	andi	r9,r9,2047
 400df14:	0101ffc4 	movi	r4,2047
 400df18:	2824d7fa 	srli	r18,r5,31
 400df1c:	8401ffcc 	andi	r16,r16,2047
 400df20:	50c6b03a 	or	r3,r10,r3
 400df24:	380ed7fa 	srli	r7,r7,31
 400df28:	408ab03a 	or	r5,r8,r2
 400df2c:	300c90fa 	slli	r6,r6,3
 400df30:	49009626 	beq	r9,r4,400e18c <__subdf3+0x2c0>
 400df34:	39c0005c 	xori	r7,r7,1
 400df38:	8245c83a 	sub	r2,r16,r9
 400df3c:	3c807426 	beq	r7,r18,400e110 <__subdf3+0x244>
 400df40:	0080af0e 	bge	zero,r2,400e200 <__subdf3+0x334>
 400df44:	48002a1e 	bne	r9,zero,400dff0 <__subdf3+0x124>
 400df48:	2988b03a 	or	r4,r5,r6
 400df4c:	20009a1e 	bne	r4,zero,400e1b8 <__subdf3+0x2ec>
 400df50:	888001cc 	andi	r2,r17,7
 400df54:	10000726 	beq	r2,zero,400df74 <__subdf3+0xa8>
 400df58:	888003cc 	andi	r2,r17,15
 400df5c:	01000104 	movi	r4,4
 400df60:	11000426 	beq	r2,r4,400df74 <__subdf3+0xa8>
 400df64:	890b883a 	add	r5,r17,r4
 400df68:	2c63803a 	cmpltu	r17,r5,r17
 400df6c:	1c47883a 	add	r3,r3,r17
 400df70:	2823883a 	mov	r17,r5
 400df74:	1880202c 	andhi	r2,r3,128
 400df78:	10005926 	beq	r2,zero,400e0e0 <__subdf3+0x214>
 400df7c:	84000044 	addi	r16,r16,1
 400df80:	0081ffc4 	movi	r2,2047
 400df84:	8080be26 	beq	r16,r2,400e280 <__subdf3+0x3b4>
 400df88:	017fe034 	movhi	r5,65408
 400df8c:	297fffc4 	addi	r5,r5,-1
 400df90:	1946703a 	and	r3,r3,r5
 400df94:	1804977a 	slli	r2,r3,29
 400df98:	1806927a 	slli	r3,r3,9
 400df9c:	8822d0fa 	srli	r17,r17,3
 400dfa0:	8401ffcc 	andi	r16,r16,2047
 400dfa4:	180ad33a 	srli	r5,r3,12
 400dfa8:	9100004c 	andi	r4,r18,1
 400dfac:	1444b03a 	or	r2,r2,r17
 400dfb0:	80c1ffcc 	andi	r3,r16,2047
 400dfb4:	1820953a 	slli	r16,r3,20
 400dfb8:	20c03fcc 	andi	r3,r4,255
 400dfbc:	180897fa 	slli	r4,r3,31
 400dfc0:	00c00434 	movhi	r3,16
 400dfc4:	18ffffc4 	addi	r3,r3,-1
 400dfc8:	28c6703a 	and	r3,r5,r3
 400dfcc:	1c06b03a 	or	r3,r3,r16
 400dfd0:	1906b03a 	or	r3,r3,r4
 400dfd4:	dfc00417 	ldw	ra,16(sp)
 400dfd8:	dcc00317 	ldw	r19,12(sp)
 400dfdc:	dc800217 	ldw	r18,8(sp)
 400dfe0:	dc400117 	ldw	r17,4(sp)
 400dfe4:	dc000017 	ldw	r16,0(sp)
 400dfe8:	dec00504 	addi	sp,sp,20
 400dfec:	f800283a 	ret
 400dff0:	0101ffc4 	movi	r4,2047
 400dff4:	813fd626 	beq	r16,r4,400df50 <__alt_data_end+0xfc00df50>
 400dff8:	29402034 	orhi	r5,r5,128
 400dffc:	01000e04 	movi	r4,56
 400e000:	2080a316 	blt	r4,r2,400e290 <__subdf3+0x3c4>
 400e004:	010007c4 	movi	r4,31
 400e008:	2080c616 	blt	r4,r2,400e324 <__subdf3+0x458>
 400e00c:	01000804 	movi	r4,32
 400e010:	2089c83a 	sub	r4,r4,r2
 400e014:	2910983a 	sll	r8,r5,r4
 400e018:	308ed83a 	srl	r7,r6,r2
 400e01c:	3108983a 	sll	r4,r6,r4
 400e020:	2884d83a 	srl	r2,r5,r2
 400e024:	41ccb03a 	or	r6,r8,r7
 400e028:	2008c03a 	cmpne	r4,r4,zero
 400e02c:	310cb03a 	or	r6,r6,r4
 400e030:	898dc83a 	sub	r6,r17,r6
 400e034:	89a3803a 	cmpltu	r17,r17,r6
 400e038:	1887c83a 	sub	r3,r3,r2
 400e03c:	1c47c83a 	sub	r3,r3,r17
 400e040:	3023883a 	mov	r17,r6
 400e044:	1880202c 	andhi	r2,r3,128
 400e048:	10002326 	beq	r2,zero,400e0d8 <__subdf3+0x20c>
 400e04c:	04c02034 	movhi	r19,128
 400e050:	9cffffc4 	addi	r19,r19,-1
 400e054:	1ce6703a 	and	r19,r3,r19
 400e058:	98007a26 	beq	r19,zero,400e244 <__subdf3+0x378>
 400e05c:	9809883a 	mov	r4,r19
 400e060:	4001ab40 	call	4001ab4 <__clzsi2>
 400e064:	113ffe04 	addi	r4,r2,-8
 400e068:	00c007c4 	movi	r3,31
 400e06c:	19007b16 	blt	r3,r4,400e25c <__subdf3+0x390>
 400e070:	00800804 	movi	r2,32
 400e074:	1105c83a 	sub	r2,r2,r4
 400e078:	8884d83a 	srl	r2,r17,r2
 400e07c:	9906983a 	sll	r3,r19,r4
 400e080:	8922983a 	sll	r17,r17,r4
 400e084:	10c4b03a 	or	r2,r2,r3
 400e088:	24007816 	blt	r4,r16,400e26c <__subdf3+0x3a0>
 400e08c:	2421c83a 	sub	r16,r4,r16
 400e090:	80c00044 	addi	r3,r16,1
 400e094:	010007c4 	movi	r4,31
 400e098:	20c09516 	blt	r4,r3,400e2f0 <__subdf3+0x424>
 400e09c:	01400804 	movi	r5,32
 400e0a0:	28cbc83a 	sub	r5,r5,r3
 400e0a4:	88c8d83a 	srl	r4,r17,r3
 400e0a8:	8962983a 	sll	r17,r17,r5
 400e0ac:	114a983a 	sll	r5,r2,r5
 400e0b0:	10c6d83a 	srl	r3,r2,r3
 400e0b4:	8804c03a 	cmpne	r2,r17,zero
 400e0b8:	290ab03a 	or	r5,r5,r4
 400e0bc:	28a2b03a 	or	r17,r5,r2
 400e0c0:	0021883a 	mov	r16,zero
 400e0c4:	003fa206 	br	400df50 <__alt_data_end+0xfc00df50>
 400e0c8:	2090b03a 	or	r8,r4,r2
 400e0cc:	40018e26 	beq	r8,zero,400e708 <__subdf3+0x83c>
 400e0d0:	1007883a 	mov	r3,r2
 400e0d4:	2023883a 	mov	r17,r4
 400e0d8:	888001cc 	andi	r2,r17,7
 400e0dc:	103f9e1e 	bne	r2,zero,400df58 <__alt_data_end+0xfc00df58>
 400e0e0:	1804977a 	slli	r2,r3,29
 400e0e4:	8822d0fa 	srli	r17,r17,3
 400e0e8:	1810d0fa 	srli	r8,r3,3
 400e0ec:	9100004c 	andi	r4,r18,1
 400e0f0:	1444b03a 	or	r2,r2,r17
 400e0f4:	00c1ffc4 	movi	r3,2047
 400e0f8:	80c02826 	beq	r16,r3,400e19c <__subdf3+0x2d0>
 400e0fc:	01400434 	movhi	r5,16
 400e100:	297fffc4 	addi	r5,r5,-1
 400e104:	80e0703a 	and	r16,r16,r3
 400e108:	414a703a 	and	r5,r8,r5
 400e10c:	003fa806 	br	400dfb0 <__alt_data_end+0xfc00dfb0>
 400e110:	0080630e 	bge	zero,r2,400e2a0 <__subdf3+0x3d4>
 400e114:	48003026 	beq	r9,zero,400e1d8 <__subdf3+0x30c>
 400e118:	0101ffc4 	movi	r4,2047
 400e11c:	813f8c26 	beq	r16,r4,400df50 <__alt_data_end+0xfc00df50>
 400e120:	29402034 	orhi	r5,r5,128
 400e124:	01000e04 	movi	r4,56
 400e128:	2080a90e 	bge	r4,r2,400e3d0 <__subdf3+0x504>
 400e12c:	298cb03a 	or	r6,r5,r6
 400e130:	3012c03a 	cmpne	r9,r6,zero
 400e134:	0005883a 	mov	r2,zero
 400e138:	4c53883a 	add	r9,r9,r17
 400e13c:	4c63803a 	cmpltu	r17,r9,r17
 400e140:	10c7883a 	add	r3,r2,r3
 400e144:	88c7883a 	add	r3,r17,r3
 400e148:	4823883a 	mov	r17,r9
 400e14c:	1880202c 	andhi	r2,r3,128
 400e150:	1000d026 	beq	r2,zero,400e494 <__subdf3+0x5c8>
 400e154:	84000044 	addi	r16,r16,1
 400e158:	0081ffc4 	movi	r2,2047
 400e15c:	8080fe26 	beq	r16,r2,400e558 <__subdf3+0x68c>
 400e160:	00bfe034 	movhi	r2,65408
 400e164:	10bfffc4 	addi	r2,r2,-1
 400e168:	1886703a 	and	r3,r3,r2
 400e16c:	880ad07a 	srli	r5,r17,1
 400e170:	180497fa 	slli	r2,r3,31
 400e174:	8900004c 	andi	r4,r17,1
 400e178:	2922b03a 	or	r17,r5,r4
 400e17c:	1806d07a 	srli	r3,r3,1
 400e180:	1462b03a 	or	r17,r2,r17
 400e184:	3825883a 	mov	r18,r7
 400e188:	003f7106 	br	400df50 <__alt_data_end+0xfc00df50>
 400e18c:	2984b03a 	or	r2,r5,r6
 400e190:	103f6826 	beq	r2,zero,400df34 <__alt_data_end+0xfc00df34>
 400e194:	39c03fcc 	andi	r7,r7,255
 400e198:	003f6706 	br	400df38 <__alt_data_end+0xfc00df38>
 400e19c:	4086b03a 	or	r3,r8,r2
 400e1a0:	18015226 	beq	r3,zero,400e6ec <__subdf3+0x820>
 400e1a4:	00c00434 	movhi	r3,16
 400e1a8:	41400234 	orhi	r5,r8,8
 400e1ac:	18ffffc4 	addi	r3,r3,-1
 400e1b0:	28ca703a 	and	r5,r5,r3
 400e1b4:	003f7e06 	br	400dfb0 <__alt_data_end+0xfc00dfb0>
 400e1b8:	10bfffc4 	addi	r2,r2,-1
 400e1bc:	1000491e 	bne	r2,zero,400e2e4 <__subdf3+0x418>
 400e1c0:	898fc83a 	sub	r7,r17,r6
 400e1c4:	89e3803a 	cmpltu	r17,r17,r7
 400e1c8:	1947c83a 	sub	r3,r3,r5
 400e1cc:	1c47c83a 	sub	r3,r3,r17
 400e1d0:	3823883a 	mov	r17,r7
 400e1d4:	003f9b06 	br	400e044 <__alt_data_end+0xfc00e044>
 400e1d8:	2988b03a 	or	r4,r5,r6
 400e1dc:	203f5c26 	beq	r4,zero,400df50 <__alt_data_end+0xfc00df50>
 400e1e0:	10bfffc4 	addi	r2,r2,-1
 400e1e4:	1000931e 	bne	r2,zero,400e434 <__subdf3+0x568>
 400e1e8:	898d883a 	add	r6,r17,r6
 400e1ec:	3463803a 	cmpltu	r17,r6,r17
 400e1f0:	1947883a 	add	r3,r3,r5
 400e1f4:	88c7883a 	add	r3,r17,r3
 400e1f8:	3023883a 	mov	r17,r6
 400e1fc:	003fd306 	br	400e14c <__alt_data_end+0xfc00e14c>
 400e200:	1000541e 	bne	r2,zero,400e354 <__subdf3+0x488>
 400e204:	80800044 	addi	r2,r16,1
 400e208:	1081ffcc 	andi	r2,r2,2047
 400e20c:	01000044 	movi	r4,1
 400e210:	2080a20e 	bge	r4,r2,400e49c <__subdf3+0x5d0>
 400e214:	8989c83a 	sub	r4,r17,r6
 400e218:	8905803a 	cmpltu	r2,r17,r4
 400e21c:	1967c83a 	sub	r19,r3,r5
 400e220:	98a7c83a 	sub	r19,r19,r2
 400e224:	9880202c 	andhi	r2,r19,128
 400e228:	10006326 	beq	r2,zero,400e3b8 <__subdf3+0x4ec>
 400e22c:	3463c83a 	sub	r17,r6,r17
 400e230:	28c7c83a 	sub	r3,r5,r3
 400e234:	344d803a 	cmpltu	r6,r6,r17
 400e238:	19a7c83a 	sub	r19,r3,r6
 400e23c:	3825883a 	mov	r18,r7
 400e240:	983f861e 	bne	r19,zero,400e05c <__alt_data_end+0xfc00e05c>
 400e244:	8809883a 	mov	r4,r17
 400e248:	4001ab40 	call	4001ab4 <__clzsi2>
 400e24c:	10800804 	addi	r2,r2,32
 400e250:	113ffe04 	addi	r4,r2,-8
 400e254:	00c007c4 	movi	r3,31
 400e258:	193f850e 	bge	r3,r4,400e070 <__alt_data_end+0xfc00e070>
 400e25c:	10bff604 	addi	r2,r2,-40
 400e260:	8884983a 	sll	r2,r17,r2
 400e264:	0023883a 	mov	r17,zero
 400e268:	243f880e 	bge	r4,r16,400e08c <__alt_data_end+0xfc00e08c>
 400e26c:	00ffe034 	movhi	r3,65408
 400e270:	18ffffc4 	addi	r3,r3,-1
 400e274:	8121c83a 	sub	r16,r16,r4
 400e278:	10c6703a 	and	r3,r2,r3
 400e27c:	003f3406 	br	400df50 <__alt_data_end+0xfc00df50>
 400e280:	9100004c 	andi	r4,r18,1
 400e284:	000b883a 	mov	r5,zero
 400e288:	0005883a 	mov	r2,zero
 400e28c:	003f4806 	br	400dfb0 <__alt_data_end+0xfc00dfb0>
 400e290:	298cb03a 	or	r6,r5,r6
 400e294:	300cc03a 	cmpne	r6,r6,zero
 400e298:	0005883a 	mov	r2,zero
 400e29c:	003f6406 	br	400e030 <__alt_data_end+0xfc00e030>
 400e2a0:	10009a1e 	bne	r2,zero,400e50c <__subdf3+0x640>
 400e2a4:	82400044 	addi	r9,r16,1
 400e2a8:	4881ffcc 	andi	r2,r9,2047
 400e2ac:	02800044 	movi	r10,1
 400e2b0:	5080670e 	bge	r10,r2,400e450 <__subdf3+0x584>
 400e2b4:	0081ffc4 	movi	r2,2047
 400e2b8:	4880af26 	beq	r9,r2,400e578 <__subdf3+0x6ac>
 400e2bc:	898d883a 	add	r6,r17,r6
 400e2c0:	1945883a 	add	r2,r3,r5
 400e2c4:	3447803a 	cmpltu	r3,r6,r17
 400e2c8:	1887883a 	add	r3,r3,r2
 400e2cc:	182297fa 	slli	r17,r3,31
 400e2d0:	300cd07a 	srli	r6,r6,1
 400e2d4:	1806d07a 	srli	r3,r3,1
 400e2d8:	4821883a 	mov	r16,r9
 400e2dc:	89a2b03a 	or	r17,r17,r6
 400e2e0:	003f1b06 	br	400df50 <__alt_data_end+0xfc00df50>
 400e2e4:	0101ffc4 	movi	r4,2047
 400e2e8:	813f441e 	bne	r16,r4,400dffc <__alt_data_end+0xfc00dffc>
 400e2ec:	003f1806 	br	400df50 <__alt_data_end+0xfc00df50>
 400e2f0:	843ff844 	addi	r16,r16,-31
 400e2f4:	01400804 	movi	r5,32
 400e2f8:	1408d83a 	srl	r4,r2,r16
 400e2fc:	19405026 	beq	r3,r5,400e440 <__subdf3+0x574>
 400e300:	01401004 	movi	r5,64
 400e304:	28c7c83a 	sub	r3,r5,r3
 400e308:	10c4983a 	sll	r2,r2,r3
 400e30c:	88a2b03a 	or	r17,r17,r2
 400e310:	8822c03a 	cmpne	r17,r17,zero
 400e314:	2462b03a 	or	r17,r4,r17
 400e318:	0007883a 	mov	r3,zero
 400e31c:	0021883a 	mov	r16,zero
 400e320:	003f6d06 	br	400e0d8 <__alt_data_end+0xfc00e0d8>
 400e324:	11fff804 	addi	r7,r2,-32
 400e328:	01000804 	movi	r4,32
 400e32c:	29ced83a 	srl	r7,r5,r7
 400e330:	11004526 	beq	r2,r4,400e448 <__subdf3+0x57c>
 400e334:	01001004 	movi	r4,64
 400e338:	2089c83a 	sub	r4,r4,r2
 400e33c:	2904983a 	sll	r2,r5,r4
 400e340:	118cb03a 	or	r6,r2,r6
 400e344:	300cc03a 	cmpne	r6,r6,zero
 400e348:	398cb03a 	or	r6,r7,r6
 400e34c:	0005883a 	mov	r2,zero
 400e350:	003f3706 	br	400e030 <__alt_data_end+0xfc00e030>
 400e354:	80002a26 	beq	r16,zero,400e400 <__subdf3+0x534>
 400e358:	0101ffc4 	movi	r4,2047
 400e35c:	49006626 	beq	r9,r4,400e4f8 <__subdf3+0x62c>
 400e360:	0085c83a 	sub	r2,zero,r2
 400e364:	18c02034 	orhi	r3,r3,128
 400e368:	01000e04 	movi	r4,56
 400e36c:	20807e16 	blt	r4,r2,400e568 <__subdf3+0x69c>
 400e370:	010007c4 	movi	r4,31
 400e374:	2080e716 	blt	r4,r2,400e714 <__subdf3+0x848>
 400e378:	01000804 	movi	r4,32
 400e37c:	2089c83a 	sub	r4,r4,r2
 400e380:	1914983a 	sll	r10,r3,r4
 400e384:	8890d83a 	srl	r8,r17,r2
 400e388:	8908983a 	sll	r4,r17,r4
 400e38c:	1884d83a 	srl	r2,r3,r2
 400e390:	5222b03a 	or	r17,r10,r8
 400e394:	2006c03a 	cmpne	r3,r4,zero
 400e398:	88e2b03a 	or	r17,r17,r3
 400e39c:	3463c83a 	sub	r17,r6,r17
 400e3a0:	2885c83a 	sub	r2,r5,r2
 400e3a4:	344d803a 	cmpltu	r6,r6,r17
 400e3a8:	1187c83a 	sub	r3,r2,r6
 400e3ac:	4821883a 	mov	r16,r9
 400e3b0:	3825883a 	mov	r18,r7
 400e3b4:	003f2306 	br	400e044 <__alt_data_end+0xfc00e044>
 400e3b8:	24d0b03a 	or	r8,r4,r19
 400e3bc:	40001b1e 	bne	r8,zero,400e42c <__subdf3+0x560>
 400e3c0:	0005883a 	mov	r2,zero
 400e3c4:	0009883a 	mov	r4,zero
 400e3c8:	0021883a 	mov	r16,zero
 400e3cc:	003f4906 	br	400e0f4 <__alt_data_end+0xfc00e0f4>
 400e3d0:	010007c4 	movi	r4,31
 400e3d4:	20803a16 	blt	r4,r2,400e4c0 <__subdf3+0x5f4>
 400e3d8:	01000804 	movi	r4,32
 400e3dc:	2089c83a 	sub	r4,r4,r2
 400e3e0:	2912983a 	sll	r9,r5,r4
 400e3e4:	3090d83a 	srl	r8,r6,r2
 400e3e8:	3108983a 	sll	r4,r6,r4
 400e3ec:	2884d83a 	srl	r2,r5,r2
 400e3f0:	4a12b03a 	or	r9,r9,r8
 400e3f4:	2008c03a 	cmpne	r4,r4,zero
 400e3f8:	4912b03a 	or	r9,r9,r4
 400e3fc:	003f4e06 	br	400e138 <__alt_data_end+0xfc00e138>
 400e400:	1c48b03a 	or	r4,r3,r17
 400e404:	20003c26 	beq	r4,zero,400e4f8 <__subdf3+0x62c>
 400e408:	0084303a 	nor	r2,zero,r2
 400e40c:	1000381e 	bne	r2,zero,400e4f0 <__subdf3+0x624>
 400e410:	3463c83a 	sub	r17,r6,r17
 400e414:	28c5c83a 	sub	r2,r5,r3
 400e418:	344d803a 	cmpltu	r6,r6,r17
 400e41c:	1187c83a 	sub	r3,r2,r6
 400e420:	4821883a 	mov	r16,r9
 400e424:	3825883a 	mov	r18,r7
 400e428:	003f0606 	br	400e044 <__alt_data_end+0xfc00e044>
 400e42c:	2023883a 	mov	r17,r4
 400e430:	003f0906 	br	400e058 <__alt_data_end+0xfc00e058>
 400e434:	0101ffc4 	movi	r4,2047
 400e438:	813f3a1e 	bne	r16,r4,400e124 <__alt_data_end+0xfc00e124>
 400e43c:	003ec406 	br	400df50 <__alt_data_end+0xfc00df50>
 400e440:	0005883a 	mov	r2,zero
 400e444:	003fb106 	br	400e30c <__alt_data_end+0xfc00e30c>
 400e448:	0005883a 	mov	r2,zero
 400e44c:	003fbc06 	br	400e340 <__alt_data_end+0xfc00e340>
 400e450:	1c44b03a 	or	r2,r3,r17
 400e454:	80008e1e 	bne	r16,zero,400e690 <__subdf3+0x7c4>
 400e458:	1000c826 	beq	r2,zero,400e77c <__subdf3+0x8b0>
 400e45c:	2984b03a 	or	r2,r5,r6
 400e460:	103ebb26 	beq	r2,zero,400df50 <__alt_data_end+0xfc00df50>
 400e464:	8989883a 	add	r4,r17,r6
 400e468:	1945883a 	add	r2,r3,r5
 400e46c:	2447803a 	cmpltu	r3,r4,r17
 400e470:	1887883a 	add	r3,r3,r2
 400e474:	1880202c 	andhi	r2,r3,128
 400e478:	2023883a 	mov	r17,r4
 400e47c:	103f1626 	beq	r2,zero,400e0d8 <__alt_data_end+0xfc00e0d8>
 400e480:	00bfe034 	movhi	r2,65408
 400e484:	10bfffc4 	addi	r2,r2,-1
 400e488:	5021883a 	mov	r16,r10
 400e48c:	1886703a 	and	r3,r3,r2
 400e490:	003eaf06 	br	400df50 <__alt_data_end+0xfc00df50>
 400e494:	3825883a 	mov	r18,r7
 400e498:	003f0f06 	br	400e0d8 <__alt_data_end+0xfc00e0d8>
 400e49c:	1c44b03a 	or	r2,r3,r17
 400e4a0:	8000251e 	bne	r16,zero,400e538 <__subdf3+0x66c>
 400e4a4:	1000661e 	bne	r2,zero,400e640 <__subdf3+0x774>
 400e4a8:	2990b03a 	or	r8,r5,r6
 400e4ac:	40009626 	beq	r8,zero,400e708 <__subdf3+0x83c>
 400e4b0:	2807883a 	mov	r3,r5
 400e4b4:	3023883a 	mov	r17,r6
 400e4b8:	3825883a 	mov	r18,r7
 400e4bc:	003ea406 	br	400df50 <__alt_data_end+0xfc00df50>
 400e4c0:	127ff804 	addi	r9,r2,-32
 400e4c4:	01000804 	movi	r4,32
 400e4c8:	2a52d83a 	srl	r9,r5,r9
 400e4cc:	11008c26 	beq	r2,r4,400e700 <__subdf3+0x834>
 400e4d0:	01001004 	movi	r4,64
 400e4d4:	2085c83a 	sub	r2,r4,r2
 400e4d8:	2884983a 	sll	r2,r5,r2
 400e4dc:	118cb03a 	or	r6,r2,r6
 400e4e0:	300cc03a 	cmpne	r6,r6,zero
 400e4e4:	4992b03a 	or	r9,r9,r6
 400e4e8:	0005883a 	mov	r2,zero
 400e4ec:	003f1206 	br	400e138 <__alt_data_end+0xfc00e138>
 400e4f0:	0101ffc4 	movi	r4,2047
 400e4f4:	493f9c1e 	bne	r9,r4,400e368 <__alt_data_end+0xfc00e368>
 400e4f8:	2807883a 	mov	r3,r5
 400e4fc:	3023883a 	mov	r17,r6
 400e500:	4821883a 	mov	r16,r9
 400e504:	3825883a 	mov	r18,r7
 400e508:	003e9106 	br	400df50 <__alt_data_end+0xfc00df50>
 400e50c:	80001f1e 	bne	r16,zero,400e58c <__subdf3+0x6c0>
 400e510:	1c48b03a 	or	r4,r3,r17
 400e514:	20005a26 	beq	r4,zero,400e680 <__subdf3+0x7b4>
 400e518:	0084303a 	nor	r2,zero,r2
 400e51c:	1000561e 	bne	r2,zero,400e678 <__subdf3+0x7ac>
 400e520:	89a3883a 	add	r17,r17,r6
 400e524:	1945883a 	add	r2,r3,r5
 400e528:	898d803a 	cmpltu	r6,r17,r6
 400e52c:	3087883a 	add	r3,r6,r2
 400e530:	4821883a 	mov	r16,r9
 400e534:	003f0506 	br	400e14c <__alt_data_end+0xfc00e14c>
 400e538:	10002b1e 	bne	r2,zero,400e5e8 <__subdf3+0x71c>
 400e53c:	2984b03a 	or	r2,r5,r6
 400e540:	10008026 	beq	r2,zero,400e744 <__subdf3+0x878>
 400e544:	2807883a 	mov	r3,r5
 400e548:	3023883a 	mov	r17,r6
 400e54c:	3825883a 	mov	r18,r7
 400e550:	0401ffc4 	movi	r16,2047
 400e554:	003e7e06 	br	400df50 <__alt_data_end+0xfc00df50>
 400e558:	3809883a 	mov	r4,r7
 400e55c:	0011883a 	mov	r8,zero
 400e560:	0005883a 	mov	r2,zero
 400e564:	003ee306 	br	400e0f4 <__alt_data_end+0xfc00e0f4>
 400e568:	1c62b03a 	or	r17,r3,r17
 400e56c:	8822c03a 	cmpne	r17,r17,zero
 400e570:	0005883a 	mov	r2,zero
 400e574:	003f8906 	br	400e39c <__alt_data_end+0xfc00e39c>
 400e578:	3809883a 	mov	r4,r7
 400e57c:	4821883a 	mov	r16,r9
 400e580:	0011883a 	mov	r8,zero
 400e584:	0005883a 	mov	r2,zero
 400e588:	003eda06 	br	400e0f4 <__alt_data_end+0xfc00e0f4>
 400e58c:	0101ffc4 	movi	r4,2047
 400e590:	49003b26 	beq	r9,r4,400e680 <__subdf3+0x7b4>
 400e594:	0085c83a 	sub	r2,zero,r2
 400e598:	18c02034 	orhi	r3,r3,128
 400e59c:	01000e04 	movi	r4,56
 400e5a0:	20806e16 	blt	r4,r2,400e75c <__subdf3+0x890>
 400e5a4:	010007c4 	movi	r4,31
 400e5a8:	20807716 	blt	r4,r2,400e788 <__subdf3+0x8bc>
 400e5ac:	01000804 	movi	r4,32
 400e5b0:	2089c83a 	sub	r4,r4,r2
 400e5b4:	1914983a 	sll	r10,r3,r4
 400e5b8:	8890d83a 	srl	r8,r17,r2
 400e5bc:	8908983a 	sll	r4,r17,r4
 400e5c0:	1884d83a 	srl	r2,r3,r2
 400e5c4:	5222b03a 	or	r17,r10,r8
 400e5c8:	2006c03a 	cmpne	r3,r4,zero
 400e5cc:	88e2b03a 	or	r17,r17,r3
 400e5d0:	89a3883a 	add	r17,r17,r6
 400e5d4:	1145883a 	add	r2,r2,r5
 400e5d8:	898d803a 	cmpltu	r6,r17,r6
 400e5dc:	3087883a 	add	r3,r6,r2
 400e5e0:	4821883a 	mov	r16,r9
 400e5e4:	003ed906 	br	400e14c <__alt_data_end+0xfc00e14c>
 400e5e8:	2984b03a 	or	r2,r5,r6
 400e5ec:	10004226 	beq	r2,zero,400e6f8 <__subdf3+0x82c>
 400e5f0:	1808d0fa 	srli	r4,r3,3
 400e5f4:	8822d0fa 	srli	r17,r17,3
 400e5f8:	1806977a 	slli	r3,r3,29
 400e5fc:	2080022c 	andhi	r2,r4,8
 400e600:	1c62b03a 	or	r17,r3,r17
 400e604:	10000826 	beq	r2,zero,400e628 <__subdf3+0x75c>
 400e608:	2812d0fa 	srli	r9,r5,3
 400e60c:	4880022c 	andhi	r2,r9,8
 400e610:	1000051e 	bne	r2,zero,400e628 <__subdf3+0x75c>
 400e614:	300cd0fa 	srli	r6,r6,3
 400e618:	2804977a 	slli	r2,r5,29
 400e61c:	4809883a 	mov	r4,r9
 400e620:	3825883a 	mov	r18,r7
 400e624:	11a2b03a 	or	r17,r2,r6
 400e628:	8806d77a 	srli	r3,r17,29
 400e62c:	200890fa 	slli	r4,r4,3
 400e630:	882290fa 	slli	r17,r17,3
 400e634:	0401ffc4 	movi	r16,2047
 400e638:	1906b03a 	or	r3,r3,r4
 400e63c:	003e4406 	br	400df50 <__alt_data_end+0xfc00df50>
 400e640:	2984b03a 	or	r2,r5,r6
 400e644:	103e4226 	beq	r2,zero,400df50 <__alt_data_end+0xfc00df50>
 400e648:	8989c83a 	sub	r4,r17,r6
 400e64c:	8911803a 	cmpltu	r8,r17,r4
 400e650:	1945c83a 	sub	r2,r3,r5
 400e654:	1205c83a 	sub	r2,r2,r8
 400e658:	1200202c 	andhi	r8,r2,128
 400e65c:	403e9a26 	beq	r8,zero,400e0c8 <__alt_data_end+0xfc00e0c8>
 400e660:	3463c83a 	sub	r17,r6,r17
 400e664:	28c5c83a 	sub	r2,r5,r3
 400e668:	344d803a 	cmpltu	r6,r6,r17
 400e66c:	1187c83a 	sub	r3,r2,r6
 400e670:	3825883a 	mov	r18,r7
 400e674:	003e3606 	br	400df50 <__alt_data_end+0xfc00df50>
 400e678:	0101ffc4 	movi	r4,2047
 400e67c:	493fc71e 	bne	r9,r4,400e59c <__alt_data_end+0xfc00e59c>
 400e680:	2807883a 	mov	r3,r5
 400e684:	3023883a 	mov	r17,r6
 400e688:	4821883a 	mov	r16,r9
 400e68c:	003e3006 	br	400df50 <__alt_data_end+0xfc00df50>
 400e690:	10003626 	beq	r2,zero,400e76c <__subdf3+0x8a0>
 400e694:	2984b03a 	or	r2,r5,r6
 400e698:	10001726 	beq	r2,zero,400e6f8 <__subdf3+0x82c>
 400e69c:	1808d0fa 	srli	r4,r3,3
 400e6a0:	8822d0fa 	srli	r17,r17,3
 400e6a4:	1806977a 	slli	r3,r3,29
 400e6a8:	2080022c 	andhi	r2,r4,8
 400e6ac:	1c62b03a 	or	r17,r3,r17
 400e6b0:	10000726 	beq	r2,zero,400e6d0 <__subdf3+0x804>
 400e6b4:	2812d0fa 	srli	r9,r5,3
 400e6b8:	4880022c 	andhi	r2,r9,8
 400e6bc:	1000041e 	bne	r2,zero,400e6d0 <__subdf3+0x804>
 400e6c0:	300cd0fa 	srli	r6,r6,3
 400e6c4:	2804977a 	slli	r2,r5,29
 400e6c8:	4809883a 	mov	r4,r9
 400e6cc:	11a2b03a 	or	r17,r2,r6
 400e6d0:	8806d77a 	srli	r3,r17,29
 400e6d4:	200890fa 	slli	r4,r4,3
 400e6d8:	882290fa 	slli	r17,r17,3
 400e6dc:	3825883a 	mov	r18,r7
 400e6e0:	1906b03a 	or	r3,r3,r4
 400e6e4:	0401ffc4 	movi	r16,2047
 400e6e8:	003e1906 	br	400df50 <__alt_data_end+0xfc00df50>
 400e6ec:	000b883a 	mov	r5,zero
 400e6f0:	0005883a 	mov	r2,zero
 400e6f4:	003e2e06 	br	400dfb0 <__alt_data_end+0xfc00dfb0>
 400e6f8:	0401ffc4 	movi	r16,2047
 400e6fc:	003e1406 	br	400df50 <__alt_data_end+0xfc00df50>
 400e700:	0005883a 	mov	r2,zero
 400e704:	003f7506 	br	400e4dc <__alt_data_end+0xfc00e4dc>
 400e708:	0005883a 	mov	r2,zero
 400e70c:	0009883a 	mov	r4,zero
 400e710:	003e7806 	br	400e0f4 <__alt_data_end+0xfc00e0f4>
 400e714:	123ff804 	addi	r8,r2,-32
 400e718:	01000804 	movi	r4,32
 400e71c:	1a10d83a 	srl	r8,r3,r8
 400e720:	11002526 	beq	r2,r4,400e7b8 <__subdf3+0x8ec>
 400e724:	01001004 	movi	r4,64
 400e728:	2085c83a 	sub	r2,r4,r2
 400e72c:	1884983a 	sll	r2,r3,r2
 400e730:	1444b03a 	or	r2,r2,r17
 400e734:	1004c03a 	cmpne	r2,r2,zero
 400e738:	40a2b03a 	or	r17,r8,r2
 400e73c:	0005883a 	mov	r2,zero
 400e740:	003f1606 	br	400e39c <__alt_data_end+0xfc00e39c>
 400e744:	02000434 	movhi	r8,16
 400e748:	0009883a 	mov	r4,zero
 400e74c:	423fffc4 	addi	r8,r8,-1
 400e750:	00bfffc4 	movi	r2,-1
 400e754:	0401ffc4 	movi	r16,2047
 400e758:	003e6606 	br	400e0f4 <__alt_data_end+0xfc00e0f4>
 400e75c:	1c62b03a 	or	r17,r3,r17
 400e760:	8822c03a 	cmpne	r17,r17,zero
 400e764:	0005883a 	mov	r2,zero
 400e768:	003f9906 	br	400e5d0 <__alt_data_end+0xfc00e5d0>
 400e76c:	2807883a 	mov	r3,r5
 400e770:	3023883a 	mov	r17,r6
 400e774:	0401ffc4 	movi	r16,2047
 400e778:	003df506 	br	400df50 <__alt_data_end+0xfc00df50>
 400e77c:	2807883a 	mov	r3,r5
 400e780:	3023883a 	mov	r17,r6
 400e784:	003df206 	br	400df50 <__alt_data_end+0xfc00df50>
 400e788:	123ff804 	addi	r8,r2,-32
 400e78c:	01000804 	movi	r4,32
 400e790:	1a10d83a 	srl	r8,r3,r8
 400e794:	11000a26 	beq	r2,r4,400e7c0 <__subdf3+0x8f4>
 400e798:	01001004 	movi	r4,64
 400e79c:	2085c83a 	sub	r2,r4,r2
 400e7a0:	1884983a 	sll	r2,r3,r2
 400e7a4:	1444b03a 	or	r2,r2,r17
 400e7a8:	1004c03a 	cmpne	r2,r2,zero
 400e7ac:	40a2b03a 	or	r17,r8,r2
 400e7b0:	0005883a 	mov	r2,zero
 400e7b4:	003f8606 	br	400e5d0 <__alt_data_end+0xfc00e5d0>
 400e7b8:	0005883a 	mov	r2,zero
 400e7bc:	003fdc06 	br	400e730 <__alt_data_end+0xfc00e730>
 400e7c0:	0005883a 	mov	r2,zero
 400e7c4:	003ff706 	br	400e7a4 <__alt_data_end+0xfc00e7a4>

0400e7c8 <__fixdfsi>:
 400e7c8:	280cd53a 	srli	r6,r5,20
 400e7cc:	00c00434 	movhi	r3,16
 400e7d0:	18ffffc4 	addi	r3,r3,-1
 400e7d4:	3181ffcc 	andi	r6,r6,2047
 400e7d8:	01c0ff84 	movi	r7,1022
 400e7dc:	28c6703a 	and	r3,r5,r3
 400e7e0:	280ad7fa 	srli	r5,r5,31
 400e7e4:	3980120e 	bge	r7,r6,400e830 <__fixdfsi+0x68>
 400e7e8:	00810744 	movi	r2,1053
 400e7ec:	11800c16 	blt	r2,r6,400e820 <__fixdfsi+0x58>
 400e7f0:	00810cc4 	movi	r2,1075
 400e7f4:	1185c83a 	sub	r2,r2,r6
 400e7f8:	01c007c4 	movi	r7,31
 400e7fc:	18c00434 	orhi	r3,r3,16
 400e800:	38800d16 	blt	r7,r2,400e838 <__fixdfsi+0x70>
 400e804:	31befb44 	addi	r6,r6,-1043
 400e808:	2084d83a 	srl	r2,r4,r2
 400e80c:	1986983a 	sll	r3,r3,r6
 400e810:	1884b03a 	or	r2,r3,r2
 400e814:	28000726 	beq	r5,zero,400e834 <__fixdfsi+0x6c>
 400e818:	0085c83a 	sub	r2,zero,r2
 400e81c:	f800283a 	ret
 400e820:	00a00034 	movhi	r2,32768
 400e824:	10bfffc4 	addi	r2,r2,-1
 400e828:	2885883a 	add	r2,r5,r2
 400e82c:	f800283a 	ret
 400e830:	0005883a 	mov	r2,zero
 400e834:	f800283a 	ret
 400e838:	008104c4 	movi	r2,1043
 400e83c:	1185c83a 	sub	r2,r2,r6
 400e840:	1884d83a 	srl	r2,r3,r2
 400e844:	003ff306 	br	400e814 <__alt_data_end+0xfc00e814>

0400e848 <__floatsidf>:
 400e848:	defffd04 	addi	sp,sp,-12
 400e84c:	dfc00215 	stw	ra,8(sp)
 400e850:	dc400115 	stw	r17,4(sp)
 400e854:	dc000015 	stw	r16,0(sp)
 400e858:	20002b26 	beq	r4,zero,400e908 <__floatsidf+0xc0>
 400e85c:	2023883a 	mov	r17,r4
 400e860:	2020d7fa 	srli	r16,r4,31
 400e864:	20002d16 	blt	r4,zero,400e91c <__floatsidf+0xd4>
 400e868:	8809883a 	mov	r4,r17
 400e86c:	4001ab40 	call	4001ab4 <__clzsi2>
 400e870:	01410784 	movi	r5,1054
 400e874:	288bc83a 	sub	r5,r5,r2
 400e878:	01010cc4 	movi	r4,1075
 400e87c:	2149c83a 	sub	r4,r4,r5
 400e880:	00c007c4 	movi	r3,31
 400e884:	1900160e 	bge	r3,r4,400e8e0 <__floatsidf+0x98>
 400e888:	00c104c4 	movi	r3,1043
 400e88c:	1947c83a 	sub	r3,r3,r5
 400e890:	88c6983a 	sll	r3,r17,r3
 400e894:	00800434 	movhi	r2,16
 400e898:	10bfffc4 	addi	r2,r2,-1
 400e89c:	1886703a 	and	r3,r3,r2
 400e8a0:	2941ffcc 	andi	r5,r5,2047
 400e8a4:	800d883a 	mov	r6,r16
 400e8a8:	0005883a 	mov	r2,zero
 400e8ac:	280a953a 	slli	r5,r5,20
 400e8b0:	31803fcc 	andi	r6,r6,255
 400e8b4:	01000434 	movhi	r4,16
 400e8b8:	300c97fa 	slli	r6,r6,31
 400e8bc:	213fffc4 	addi	r4,r4,-1
 400e8c0:	1906703a 	and	r3,r3,r4
 400e8c4:	1946b03a 	or	r3,r3,r5
 400e8c8:	1986b03a 	or	r3,r3,r6
 400e8cc:	dfc00217 	ldw	ra,8(sp)
 400e8d0:	dc400117 	ldw	r17,4(sp)
 400e8d4:	dc000017 	ldw	r16,0(sp)
 400e8d8:	dec00304 	addi	sp,sp,12
 400e8dc:	f800283a 	ret
 400e8e0:	00c002c4 	movi	r3,11
 400e8e4:	1887c83a 	sub	r3,r3,r2
 400e8e8:	88c6d83a 	srl	r3,r17,r3
 400e8ec:	8904983a 	sll	r2,r17,r4
 400e8f0:	01000434 	movhi	r4,16
 400e8f4:	213fffc4 	addi	r4,r4,-1
 400e8f8:	2941ffcc 	andi	r5,r5,2047
 400e8fc:	1906703a 	and	r3,r3,r4
 400e900:	800d883a 	mov	r6,r16
 400e904:	003fe906 	br	400e8ac <__alt_data_end+0xfc00e8ac>
 400e908:	000d883a 	mov	r6,zero
 400e90c:	000b883a 	mov	r5,zero
 400e910:	0007883a 	mov	r3,zero
 400e914:	0005883a 	mov	r2,zero
 400e918:	003fe406 	br	400e8ac <__alt_data_end+0xfc00e8ac>
 400e91c:	0123c83a 	sub	r17,zero,r4
 400e920:	003fd106 	br	400e868 <__alt_data_end+0xfc00e868>

0400e924 <__floatunsidf>:
 400e924:	defffe04 	addi	sp,sp,-8
 400e928:	dc000015 	stw	r16,0(sp)
 400e92c:	dfc00115 	stw	ra,4(sp)
 400e930:	2021883a 	mov	r16,r4
 400e934:	20002226 	beq	r4,zero,400e9c0 <__floatunsidf+0x9c>
 400e938:	4001ab40 	call	4001ab4 <__clzsi2>
 400e93c:	01010784 	movi	r4,1054
 400e940:	2089c83a 	sub	r4,r4,r2
 400e944:	01810cc4 	movi	r6,1075
 400e948:	310dc83a 	sub	r6,r6,r4
 400e94c:	00c007c4 	movi	r3,31
 400e950:	1980120e 	bge	r3,r6,400e99c <__floatunsidf+0x78>
 400e954:	00c104c4 	movi	r3,1043
 400e958:	1907c83a 	sub	r3,r3,r4
 400e95c:	80ca983a 	sll	r5,r16,r3
 400e960:	00800434 	movhi	r2,16
 400e964:	10bfffc4 	addi	r2,r2,-1
 400e968:	2101ffcc 	andi	r4,r4,2047
 400e96c:	0021883a 	mov	r16,zero
 400e970:	288a703a 	and	r5,r5,r2
 400e974:	2008953a 	slli	r4,r4,20
 400e978:	00c00434 	movhi	r3,16
 400e97c:	18ffffc4 	addi	r3,r3,-1
 400e980:	28c6703a 	and	r3,r5,r3
 400e984:	8005883a 	mov	r2,r16
 400e988:	1906b03a 	or	r3,r3,r4
 400e98c:	dfc00117 	ldw	ra,4(sp)
 400e990:	dc000017 	ldw	r16,0(sp)
 400e994:	dec00204 	addi	sp,sp,8
 400e998:	f800283a 	ret
 400e99c:	00c002c4 	movi	r3,11
 400e9a0:	188bc83a 	sub	r5,r3,r2
 400e9a4:	814ad83a 	srl	r5,r16,r5
 400e9a8:	00c00434 	movhi	r3,16
 400e9ac:	18ffffc4 	addi	r3,r3,-1
 400e9b0:	81a0983a 	sll	r16,r16,r6
 400e9b4:	2101ffcc 	andi	r4,r4,2047
 400e9b8:	28ca703a 	and	r5,r5,r3
 400e9bc:	003fed06 	br	400e974 <__alt_data_end+0xfc00e974>
 400e9c0:	0009883a 	mov	r4,zero
 400e9c4:	000b883a 	mov	r5,zero
 400e9c8:	003fea06 	br	400e974 <__alt_data_end+0xfc00e974>

0400e9cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400e9cc:	defffe04 	addi	sp,sp,-8
 400e9d0:	dfc00115 	stw	ra,4(sp)
 400e9d4:	df000015 	stw	fp,0(sp)
 400e9d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400e9dc:	d0a01117 	ldw	r2,-32700(gp)
 400e9e0:	10000326 	beq	r2,zero,400e9f0 <alt_get_errno+0x24>
 400e9e4:	d0a01117 	ldw	r2,-32700(gp)
 400e9e8:	103ee83a 	callr	r2
 400e9ec:	00000106 	br	400e9f4 <alt_get_errno+0x28>
 400e9f0:	d0a2e204 	addi	r2,gp,-29816
}
 400e9f4:	e037883a 	mov	sp,fp
 400e9f8:	dfc00117 	ldw	ra,4(sp)
 400e9fc:	df000017 	ldw	fp,0(sp)
 400ea00:	dec00204 	addi	sp,sp,8
 400ea04:	f800283a 	ret

0400ea08 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 400ea08:	defffb04 	addi	sp,sp,-20
 400ea0c:	dfc00415 	stw	ra,16(sp)
 400ea10:	df000315 	stw	fp,12(sp)
 400ea14:	df000304 	addi	fp,sp,12
 400ea18:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 400ea1c:	e0bfff17 	ldw	r2,-4(fp)
 400ea20:	10000816 	blt	r2,zero,400ea44 <close+0x3c>
 400ea24:	01400304 	movi	r5,12
 400ea28:	e13fff17 	ldw	r4,-4(fp)
 400ea2c:	4000bd80 	call	4000bd8 <__mulsi3>
 400ea30:	1007883a 	mov	r3,r2
 400ea34:	00810074 	movhi	r2,1025
 400ea38:	108dda04 	addi	r2,r2,14184
 400ea3c:	1885883a 	add	r2,r3,r2
 400ea40:	00000106 	br	400ea48 <close+0x40>
 400ea44:	0005883a 	mov	r2,zero
 400ea48:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 400ea4c:	e0bffd17 	ldw	r2,-12(fp)
 400ea50:	10001926 	beq	r2,zero,400eab8 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 400ea54:	e0bffd17 	ldw	r2,-12(fp)
 400ea58:	10800017 	ldw	r2,0(r2)
 400ea5c:	10800417 	ldw	r2,16(r2)
 400ea60:	10000626 	beq	r2,zero,400ea7c <close+0x74>
 400ea64:	e0bffd17 	ldw	r2,-12(fp)
 400ea68:	10800017 	ldw	r2,0(r2)
 400ea6c:	10800417 	ldw	r2,16(r2)
 400ea70:	e13ffd17 	ldw	r4,-12(fp)
 400ea74:	103ee83a 	callr	r2
 400ea78:	00000106 	br	400ea80 <close+0x78>
 400ea7c:	0005883a 	mov	r2,zero
 400ea80:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 400ea84:	e13fff17 	ldw	r4,-4(fp)
 400ea88:	400f0f00 	call	400f0f0 <alt_release_fd>
    if (rval < 0)
 400ea8c:	e0bffe17 	ldw	r2,-8(fp)
 400ea90:	1000070e 	bge	r2,zero,400eab0 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 400ea94:	400e9cc0 	call	400e9cc <alt_get_errno>
 400ea98:	1007883a 	mov	r3,r2
 400ea9c:	e0bffe17 	ldw	r2,-8(fp)
 400eaa0:	0085c83a 	sub	r2,zero,r2
 400eaa4:	18800015 	stw	r2,0(r3)
      return -1;
 400eaa8:	00bfffc4 	movi	r2,-1
 400eaac:	00000706 	br	400eacc <close+0xc4>
    }
    return 0;
 400eab0:	0005883a 	mov	r2,zero
 400eab4:	00000506 	br	400eacc <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400eab8:	400e9cc0 	call	400e9cc <alt_get_errno>
 400eabc:	1007883a 	mov	r3,r2
 400eac0:	00801444 	movi	r2,81
 400eac4:	18800015 	stw	r2,0(r3)
    return -1;
 400eac8:	00bfffc4 	movi	r2,-1
  }
}
 400eacc:	e037883a 	mov	sp,fp
 400ead0:	dfc00117 	ldw	ra,4(sp)
 400ead4:	df000017 	ldw	fp,0(sp)
 400ead8:	dec00204 	addi	sp,sp,8
 400eadc:	f800283a 	ret

0400eae0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 400eae0:	defffc04 	addi	sp,sp,-16
 400eae4:	df000315 	stw	fp,12(sp)
 400eae8:	df000304 	addi	fp,sp,12
 400eaec:	e13ffd15 	stw	r4,-12(fp)
 400eaf0:	e17ffe15 	stw	r5,-8(fp)
 400eaf4:	e1bfff15 	stw	r6,-4(fp)
  return len;
 400eaf8:	e0bfff17 	ldw	r2,-4(fp)
}
 400eafc:	e037883a 	mov	sp,fp
 400eb00:	df000017 	ldw	fp,0(sp)
 400eb04:	dec00104 	addi	sp,sp,4
 400eb08:	f800283a 	ret

0400eb0c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400eb0c:	defffe04 	addi	sp,sp,-8
 400eb10:	dfc00115 	stw	ra,4(sp)
 400eb14:	df000015 	stw	fp,0(sp)
 400eb18:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400eb1c:	d0a01117 	ldw	r2,-32700(gp)
 400eb20:	10000326 	beq	r2,zero,400eb30 <alt_get_errno+0x24>
 400eb24:	d0a01117 	ldw	r2,-32700(gp)
 400eb28:	103ee83a 	callr	r2
 400eb2c:	00000106 	br	400eb34 <alt_get_errno+0x28>
 400eb30:	d0a2e204 	addi	r2,gp,-29816
}
 400eb34:	e037883a 	mov	sp,fp
 400eb38:	dfc00117 	ldw	ra,4(sp)
 400eb3c:	df000017 	ldw	fp,0(sp)
 400eb40:	dec00204 	addi	sp,sp,8
 400eb44:	f800283a 	ret

0400eb48 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 400eb48:	defffb04 	addi	sp,sp,-20
 400eb4c:	dfc00415 	stw	ra,16(sp)
 400eb50:	df000315 	stw	fp,12(sp)
 400eb54:	df000304 	addi	fp,sp,12
 400eb58:	e13ffe15 	stw	r4,-8(fp)
 400eb5c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400eb60:	e0bffe17 	ldw	r2,-8(fp)
 400eb64:	10000816 	blt	r2,zero,400eb88 <fstat+0x40>
 400eb68:	01400304 	movi	r5,12
 400eb6c:	e13ffe17 	ldw	r4,-8(fp)
 400eb70:	4000bd80 	call	4000bd8 <__mulsi3>
 400eb74:	1007883a 	mov	r3,r2
 400eb78:	00810074 	movhi	r2,1025
 400eb7c:	108dda04 	addi	r2,r2,14184
 400eb80:	1885883a 	add	r2,r3,r2
 400eb84:	00000106 	br	400eb8c <fstat+0x44>
 400eb88:	0005883a 	mov	r2,zero
 400eb8c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 400eb90:	e0bffd17 	ldw	r2,-12(fp)
 400eb94:	10001026 	beq	r2,zero,400ebd8 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 400eb98:	e0bffd17 	ldw	r2,-12(fp)
 400eb9c:	10800017 	ldw	r2,0(r2)
 400eba0:	10800817 	ldw	r2,32(r2)
 400eba4:	10000726 	beq	r2,zero,400ebc4 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 400eba8:	e0bffd17 	ldw	r2,-12(fp)
 400ebac:	10800017 	ldw	r2,0(r2)
 400ebb0:	10800817 	ldw	r2,32(r2)
 400ebb4:	e17fff17 	ldw	r5,-4(fp)
 400ebb8:	e13ffd17 	ldw	r4,-12(fp)
 400ebbc:	103ee83a 	callr	r2
 400ebc0:	00000a06 	br	400ebec <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 400ebc4:	e0bfff17 	ldw	r2,-4(fp)
 400ebc8:	00c80004 	movi	r3,8192
 400ebcc:	10c00115 	stw	r3,4(r2)
      return 0;
 400ebd0:	0005883a 	mov	r2,zero
 400ebd4:	00000506 	br	400ebec <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400ebd8:	400eb0c0 	call	400eb0c <alt_get_errno>
 400ebdc:	1007883a 	mov	r3,r2
 400ebe0:	00801444 	movi	r2,81
 400ebe4:	18800015 	stw	r2,0(r3)
    return -1;
 400ebe8:	00bfffc4 	movi	r2,-1
  }
}
 400ebec:	e037883a 	mov	sp,fp
 400ebf0:	dfc00117 	ldw	ra,4(sp)
 400ebf4:	df000017 	ldw	fp,0(sp)
 400ebf8:	dec00204 	addi	sp,sp,8
 400ebfc:	f800283a 	ret

0400ec00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400ec00:	defffe04 	addi	sp,sp,-8
 400ec04:	dfc00115 	stw	ra,4(sp)
 400ec08:	df000015 	stw	fp,0(sp)
 400ec0c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400ec10:	d0a01117 	ldw	r2,-32700(gp)
 400ec14:	10000326 	beq	r2,zero,400ec24 <alt_get_errno+0x24>
 400ec18:	d0a01117 	ldw	r2,-32700(gp)
 400ec1c:	103ee83a 	callr	r2
 400ec20:	00000106 	br	400ec28 <alt_get_errno+0x28>
 400ec24:	d0a2e204 	addi	r2,gp,-29816
}
 400ec28:	e037883a 	mov	sp,fp
 400ec2c:	dfc00117 	ldw	ra,4(sp)
 400ec30:	df000017 	ldw	fp,0(sp)
 400ec34:	dec00204 	addi	sp,sp,8
 400ec38:	f800283a 	ret

0400ec3c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 400ec3c:	deffed04 	addi	sp,sp,-76
 400ec40:	dfc01215 	stw	ra,72(sp)
 400ec44:	df001115 	stw	fp,68(sp)
 400ec48:	df001104 	addi	fp,sp,68
 400ec4c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400ec50:	e0bfff17 	ldw	r2,-4(fp)
 400ec54:	10000816 	blt	r2,zero,400ec78 <isatty+0x3c>
 400ec58:	01400304 	movi	r5,12
 400ec5c:	e13fff17 	ldw	r4,-4(fp)
 400ec60:	4000bd80 	call	4000bd8 <__mulsi3>
 400ec64:	1007883a 	mov	r3,r2
 400ec68:	00810074 	movhi	r2,1025
 400ec6c:	108dda04 	addi	r2,r2,14184
 400ec70:	1885883a 	add	r2,r3,r2
 400ec74:	00000106 	br	400ec7c <isatty+0x40>
 400ec78:	0005883a 	mov	r2,zero
 400ec7c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 400ec80:	e0bfef17 	ldw	r2,-68(fp)
 400ec84:	10000e26 	beq	r2,zero,400ecc0 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 400ec88:	e0bfef17 	ldw	r2,-68(fp)
 400ec8c:	10800017 	ldw	r2,0(r2)
 400ec90:	10800817 	ldw	r2,32(r2)
 400ec94:	1000021e 	bne	r2,zero,400eca0 <isatty+0x64>
    {
      return 1;
 400ec98:	00800044 	movi	r2,1
 400ec9c:	00000d06 	br	400ecd4 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 400eca0:	e0bff004 	addi	r2,fp,-64
 400eca4:	100b883a 	mov	r5,r2
 400eca8:	e13fff17 	ldw	r4,-4(fp)
 400ecac:	400eb480 	call	400eb48 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 400ecb0:	e0bff117 	ldw	r2,-60(fp)
 400ecb4:	10880020 	cmpeqi	r2,r2,8192
 400ecb8:	10803fcc 	andi	r2,r2,255
 400ecbc:	00000506 	br	400ecd4 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400ecc0:	400ec000 	call	400ec00 <alt_get_errno>
 400ecc4:	1007883a 	mov	r3,r2
 400ecc8:	00801444 	movi	r2,81
 400eccc:	18800015 	stw	r2,0(r3)
    return 0;
 400ecd0:	0005883a 	mov	r2,zero
  }
}
 400ecd4:	e037883a 	mov	sp,fp
 400ecd8:	dfc00117 	ldw	ra,4(sp)
 400ecdc:	df000017 	ldw	fp,0(sp)
 400ece0:	dec00204 	addi	sp,sp,8
 400ece4:	f800283a 	ret

0400ece8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 400ece8:	defffc04 	addi	sp,sp,-16
 400ecec:	df000315 	stw	fp,12(sp)
 400ecf0:	df000304 	addi	fp,sp,12
 400ecf4:	e13ffd15 	stw	r4,-12(fp)
 400ecf8:	e17ffe15 	stw	r5,-8(fp)
 400ecfc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 400ed00:	e0fffe17 	ldw	r3,-8(fp)
 400ed04:	e0bffd17 	ldw	r2,-12(fp)
 400ed08:	18800c26 	beq	r3,r2,400ed3c <alt_load_section+0x54>
  {
    while( to != end )
 400ed0c:	00000806 	br	400ed30 <alt_load_section+0x48>
    {
      *to++ = *from++;
 400ed10:	e0bffe17 	ldw	r2,-8(fp)
 400ed14:	10c00104 	addi	r3,r2,4
 400ed18:	e0fffe15 	stw	r3,-8(fp)
 400ed1c:	e0fffd17 	ldw	r3,-12(fp)
 400ed20:	19000104 	addi	r4,r3,4
 400ed24:	e13ffd15 	stw	r4,-12(fp)
 400ed28:	18c00017 	ldw	r3,0(r3)
 400ed2c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 400ed30:	e0fffe17 	ldw	r3,-8(fp)
 400ed34:	e0bfff17 	ldw	r2,-4(fp)
 400ed38:	18bff51e 	bne	r3,r2,400ed10 <__alt_data_end+0xfc00ed10>
    {
      *to++ = *from++;
    }
  }
}
 400ed3c:	0001883a 	nop
 400ed40:	e037883a 	mov	sp,fp
 400ed44:	df000017 	ldw	fp,0(sp)
 400ed48:	dec00104 	addi	sp,sp,4
 400ed4c:	f800283a 	ret

0400ed50 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 400ed50:	defffe04 	addi	sp,sp,-8
 400ed54:	dfc00115 	stw	ra,4(sp)
 400ed58:	df000015 	stw	fp,0(sp)
 400ed5c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 400ed60:	01810074 	movhi	r6,1025
 400ed64:	318e6a04 	addi	r6,r6,14760
 400ed68:	01410074 	movhi	r5,1025
 400ed6c:	294ba704 	addi	r5,r5,11932
 400ed70:	01010074 	movhi	r4,1025
 400ed74:	210e6a04 	addi	r4,r4,14760
 400ed78:	400ece80 	call	400ece8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 400ed7c:	01810034 	movhi	r6,1024
 400ed80:	3180a704 	addi	r6,r6,668
 400ed84:	01410034 	movhi	r5,1024
 400ed88:	29400804 	addi	r5,r5,32
 400ed8c:	01010034 	movhi	r4,1024
 400ed90:	21000804 	addi	r4,r4,32
 400ed94:	400ece80 	call	400ece8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 400ed98:	01810074 	movhi	r6,1025
 400ed9c:	318ba704 	addi	r6,r6,11932
 400eda0:	01410074 	movhi	r5,1025
 400eda4:	29498504 	addi	r5,r5,9748
 400eda8:	01010074 	movhi	r4,1025
 400edac:	21098504 	addi	r4,r4,9748
 400edb0:	400ece80 	call	400ece8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 400edb4:	401152c0 	call	401152c <alt_dcache_flush_all>
  alt_icache_flush_all();
 400edb8:	401177c0 	call	401177c <alt_icache_flush_all>
}
 400edbc:	0001883a 	nop
 400edc0:	e037883a 	mov	sp,fp
 400edc4:	dfc00117 	ldw	ra,4(sp)
 400edc8:	df000017 	ldw	fp,0(sp)
 400edcc:	dec00204 	addi	sp,sp,8
 400edd0:	f800283a 	ret

0400edd4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400edd4:	defffe04 	addi	sp,sp,-8
 400edd8:	dfc00115 	stw	ra,4(sp)
 400eddc:	df000015 	stw	fp,0(sp)
 400ede0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400ede4:	d0a01117 	ldw	r2,-32700(gp)
 400ede8:	10000326 	beq	r2,zero,400edf8 <alt_get_errno+0x24>
 400edec:	d0a01117 	ldw	r2,-32700(gp)
 400edf0:	103ee83a 	callr	r2
 400edf4:	00000106 	br	400edfc <alt_get_errno+0x28>
 400edf8:	d0a2e204 	addi	r2,gp,-29816
}
 400edfc:	e037883a 	mov	sp,fp
 400ee00:	dfc00117 	ldw	ra,4(sp)
 400ee04:	df000017 	ldw	fp,0(sp)
 400ee08:	dec00204 	addi	sp,sp,8
 400ee0c:	f800283a 	ret

0400ee10 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 400ee10:	defff904 	addi	sp,sp,-28
 400ee14:	dfc00615 	stw	ra,24(sp)
 400ee18:	df000515 	stw	fp,20(sp)
 400ee1c:	df000504 	addi	fp,sp,20
 400ee20:	e13ffd15 	stw	r4,-12(fp)
 400ee24:	e17ffe15 	stw	r5,-8(fp)
 400ee28:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 400ee2c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400ee30:	e0bffd17 	ldw	r2,-12(fp)
 400ee34:	10000816 	blt	r2,zero,400ee58 <lseek+0x48>
 400ee38:	01400304 	movi	r5,12
 400ee3c:	e13ffd17 	ldw	r4,-12(fp)
 400ee40:	4000bd80 	call	4000bd8 <__mulsi3>
 400ee44:	1007883a 	mov	r3,r2
 400ee48:	00810074 	movhi	r2,1025
 400ee4c:	108dda04 	addi	r2,r2,14184
 400ee50:	1885883a 	add	r2,r3,r2
 400ee54:	00000106 	br	400ee5c <lseek+0x4c>
 400ee58:	0005883a 	mov	r2,zero
 400ee5c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 400ee60:	e0bffc17 	ldw	r2,-16(fp)
 400ee64:	10001026 	beq	r2,zero,400eea8 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 400ee68:	e0bffc17 	ldw	r2,-16(fp)
 400ee6c:	10800017 	ldw	r2,0(r2)
 400ee70:	10800717 	ldw	r2,28(r2)
 400ee74:	10000926 	beq	r2,zero,400ee9c <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 400ee78:	e0bffc17 	ldw	r2,-16(fp)
 400ee7c:	10800017 	ldw	r2,0(r2)
 400ee80:	10800717 	ldw	r2,28(r2)
 400ee84:	e1bfff17 	ldw	r6,-4(fp)
 400ee88:	e17ffe17 	ldw	r5,-8(fp)
 400ee8c:	e13ffc17 	ldw	r4,-16(fp)
 400ee90:	103ee83a 	callr	r2
 400ee94:	e0bffb15 	stw	r2,-20(fp)
 400ee98:	00000506 	br	400eeb0 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 400ee9c:	00bfde84 	movi	r2,-134
 400eea0:	e0bffb15 	stw	r2,-20(fp)
 400eea4:	00000206 	br	400eeb0 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 400eea8:	00bfebc4 	movi	r2,-81
 400eeac:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 400eeb0:	e0bffb17 	ldw	r2,-20(fp)
 400eeb4:	1000070e 	bge	r2,zero,400eed4 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 400eeb8:	400edd40 	call	400edd4 <alt_get_errno>
 400eebc:	1007883a 	mov	r3,r2
 400eec0:	e0bffb17 	ldw	r2,-20(fp)
 400eec4:	0085c83a 	sub	r2,zero,r2
 400eec8:	18800015 	stw	r2,0(r3)
    rc = -1;
 400eecc:	00bfffc4 	movi	r2,-1
 400eed0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 400eed4:	e0bffb17 	ldw	r2,-20(fp)
}
 400eed8:	e037883a 	mov	sp,fp
 400eedc:	dfc00117 	ldw	ra,4(sp)
 400eee0:	df000017 	ldw	fp,0(sp)
 400eee4:	dec00204 	addi	sp,sp,8
 400eee8:	f800283a 	ret

0400eeec <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 400eeec:	defffd04 	addi	sp,sp,-12
 400eef0:	dfc00215 	stw	ra,8(sp)
 400eef4:	df000115 	stw	fp,4(sp)
 400eef8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 400eefc:	0009883a 	mov	r4,zero
 400ef00:	400f3940 	call	400f394 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 400ef04:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 400ef08:	400f3cc0 	call	400f3cc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 400ef0c:	01810074 	movhi	r6,1025
 400ef10:	318ac304 	addi	r6,r6,11020
 400ef14:	01410074 	movhi	r5,1025
 400ef18:	294ac304 	addi	r5,r5,11020
 400ef1c:	01010074 	movhi	r4,1025
 400ef20:	210ac304 	addi	r4,r4,11020
 400ef24:	4011b200 	call	4011b20 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 400ef28:	401162c0 	call	401162c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 400ef2c:	01010074 	movhi	r4,1025
 400ef30:	2105a304 	addi	r4,r4,5772
 400ef34:	40122800 	call	4012280 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 400ef38:	d0a2e317 	ldw	r2,-29812(gp)
 400ef3c:	d0e2e417 	ldw	r3,-29808(gp)
 400ef40:	d122e517 	ldw	r4,-29804(gp)
 400ef44:	200d883a 	mov	r6,r4
 400ef48:	180b883a 	mov	r5,r3
 400ef4c:	1009883a 	mov	r4,r2
 400ef50:	40004900 	call	4000490 <main>
 400ef54:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 400ef58:	01000044 	movi	r4,1
 400ef5c:	400ea080 	call	400ea08 <close>
  exit (result);
 400ef60:	e13fff17 	ldw	r4,-4(fp)
 400ef64:	40122940 	call	4012294 <exit>

0400ef68 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 400ef68:	defffe04 	addi	sp,sp,-8
 400ef6c:	df000115 	stw	fp,4(sp)
 400ef70:	df000104 	addi	fp,sp,4
 400ef74:	e13fff15 	stw	r4,-4(fp)
}
 400ef78:	0001883a 	nop
 400ef7c:	e037883a 	mov	sp,fp
 400ef80:	df000017 	ldw	fp,0(sp)
 400ef84:	dec00104 	addi	sp,sp,4
 400ef88:	f800283a 	ret

0400ef8c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 400ef8c:	defffe04 	addi	sp,sp,-8
 400ef90:	df000115 	stw	fp,4(sp)
 400ef94:	df000104 	addi	fp,sp,4
 400ef98:	e13fff15 	stw	r4,-4(fp)
}
 400ef9c:	0001883a 	nop
 400efa0:	e037883a 	mov	sp,fp
 400efa4:	df000017 	ldw	fp,0(sp)
 400efa8:	dec00104 	addi	sp,sp,4
 400efac:	f800283a 	ret

0400efb0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400efb0:	defffe04 	addi	sp,sp,-8
 400efb4:	dfc00115 	stw	ra,4(sp)
 400efb8:	df000015 	stw	fp,0(sp)
 400efbc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400efc0:	d0a01117 	ldw	r2,-32700(gp)
 400efc4:	10000326 	beq	r2,zero,400efd4 <alt_get_errno+0x24>
 400efc8:	d0a01117 	ldw	r2,-32700(gp)
 400efcc:	103ee83a 	callr	r2
 400efd0:	00000106 	br	400efd8 <alt_get_errno+0x28>
 400efd4:	d0a2e204 	addi	r2,gp,-29816
}
 400efd8:	e037883a 	mov	sp,fp
 400efdc:	dfc00117 	ldw	ra,4(sp)
 400efe0:	df000017 	ldw	fp,0(sp)
 400efe4:	dec00204 	addi	sp,sp,8
 400efe8:	f800283a 	ret

0400efec <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 400efec:	defff904 	addi	sp,sp,-28
 400eff0:	dfc00615 	stw	ra,24(sp)
 400eff4:	df000515 	stw	fp,20(sp)
 400eff8:	df000504 	addi	fp,sp,20
 400effc:	e13ffd15 	stw	r4,-12(fp)
 400f000:	e17ffe15 	stw	r5,-8(fp)
 400f004:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400f008:	e0bffd17 	ldw	r2,-12(fp)
 400f00c:	10000816 	blt	r2,zero,400f030 <read+0x44>
 400f010:	01400304 	movi	r5,12
 400f014:	e13ffd17 	ldw	r4,-12(fp)
 400f018:	4000bd80 	call	4000bd8 <__mulsi3>
 400f01c:	1007883a 	mov	r3,r2
 400f020:	00810074 	movhi	r2,1025
 400f024:	108dda04 	addi	r2,r2,14184
 400f028:	1885883a 	add	r2,r3,r2
 400f02c:	00000106 	br	400f034 <read+0x48>
 400f030:	0005883a 	mov	r2,zero
 400f034:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 400f038:	e0bffb17 	ldw	r2,-20(fp)
 400f03c:	10002226 	beq	r2,zero,400f0c8 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 400f040:	e0bffb17 	ldw	r2,-20(fp)
 400f044:	10800217 	ldw	r2,8(r2)
 400f048:	108000cc 	andi	r2,r2,3
 400f04c:	10800060 	cmpeqi	r2,r2,1
 400f050:	1000181e 	bne	r2,zero,400f0b4 <read+0xc8>
        (fd->dev->read))
 400f054:	e0bffb17 	ldw	r2,-20(fp)
 400f058:	10800017 	ldw	r2,0(r2)
 400f05c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 400f060:	10001426 	beq	r2,zero,400f0b4 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 400f064:	e0bffb17 	ldw	r2,-20(fp)
 400f068:	10800017 	ldw	r2,0(r2)
 400f06c:	10800517 	ldw	r2,20(r2)
 400f070:	e0ffff17 	ldw	r3,-4(fp)
 400f074:	180d883a 	mov	r6,r3
 400f078:	e17ffe17 	ldw	r5,-8(fp)
 400f07c:	e13ffb17 	ldw	r4,-20(fp)
 400f080:	103ee83a 	callr	r2
 400f084:	e0bffc15 	stw	r2,-16(fp)
 400f088:	e0bffc17 	ldw	r2,-16(fp)
 400f08c:	1000070e 	bge	r2,zero,400f0ac <read+0xc0>
        {
          ALT_ERRNO = -rval;
 400f090:	400efb00 	call	400efb0 <alt_get_errno>
 400f094:	1007883a 	mov	r3,r2
 400f098:	e0bffc17 	ldw	r2,-16(fp)
 400f09c:	0085c83a 	sub	r2,zero,r2
 400f0a0:	18800015 	stw	r2,0(r3)
          return -1;
 400f0a4:	00bfffc4 	movi	r2,-1
 400f0a8:	00000c06 	br	400f0dc <read+0xf0>
        }
        return rval;
 400f0ac:	e0bffc17 	ldw	r2,-16(fp)
 400f0b0:	00000a06 	br	400f0dc <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 400f0b4:	400efb00 	call	400efb0 <alt_get_errno>
 400f0b8:	1007883a 	mov	r3,r2
 400f0bc:	00800344 	movi	r2,13
 400f0c0:	18800015 	stw	r2,0(r3)
 400f0c4:	00000406 	br	400f0d8 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 400f0c8:	400efb00 	call	400efb0 <alt_get_errno>
 400f0cc:	1007883a 	mov	r3,r2
 400f0d0:	00801444 	movi	r2,81
 400f0d4:	18800015 	stw	r2,0(r3)
  }
  return -1;
 400f0d8:	00bfffc4 	movi	r2,-1
}
 400f0dc:	e037883a 	mov	sp,fp
 400f0e0:	dfc00117 	ldw	ra,4(sp)
 400f0e4:	df000017 	ldw	fp,0(sp)
 400f0e8:	dec00204 	addi	sp,sp,8
 400f0ec:	f800283a 	ret

0400f0f0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 400f0f0:	defffc04 	addi	sp,sp,-16
 400f0f4:	dfc00315 	stw	ra,12(sp)
 400f0f8:	df000215 	stw	fp,8(sp)
 400f0fc:	dc000115 	stw	r16,4(sp)
 400f100:	df000204 	addi	fp,sp,8
 400f104:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 400f108:	e0bffe17 	ldw	r2,-8(fp)
 400f10c:	108000d0 	cmplti	r2,r2,3
 400f110:	1000111e 	bne	r2,zero,400f158 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 400f114:	04010074 	movhi	r16,1025
 400f118:	840dda04 	addi	r16,r16,14184
 400f11c:	e0bffe17 	ldw	r2,-8(fp)
 400f120:	01400304 	movi	r5,12
 400f124:	1009883a 	mov	r4,r2
 400f128:	4000bd80 	call	4000bd8 <__mulsi3>
 400f12c:	8085883a 	add	r2,r16,r2
 400f130:	10800204 	addi	r2,r2,8
 400f134:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 400f138:	04010074 	movhi	r16,1025
 400f13c:	840dda04 	addi	r16,r16,14184
 400f140:	e0bffe17 	ldw	r2,-8(fp)
 400f144:	01400304 	movi	r5,12
 400f148:	1009883a 	mov	r4,r2
 400f14c:	4000bd80 	call	4000bd8 <__mulsi3>
 400f150:	8085883a 	add	r2,r16,r2
 400f154:	10000015 	stw	zero,0(r2)
  }
}
 400f158:	0001883a 	nop
 400f15c:	e6ffff04 	addi	sp,fp,-4
 400f160:	dfc00217 	ldw	ra,8(sp)
 400f164:	df000117 	ldw	fp,4(sp)
 400f168:	dc000017 	ldw	r16,0(sp)
 400f16c:	dec00304 	addi	sp,sp,12
 400f170:	f800283a 	ret

0400f174 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 400f174:	defff904 	addi	sp,sp,-28
 400f178:	df000615 	stw	fp,24(sp)
 400f17c:	df000604 	addi	fp,sp,24
 400f180:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400f184:	0005303a 	rdctl	r2,status
 400f188:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400f18c:	e0fffe17 	ldw	r3,-8(fp)
 400f190:	00bfff84 	movi	r2,-2
 400f194:	1884703a 	and	r2,r3,r2
 400f198:	1001703a 	wrctl	status,r2
  
  return context;
 400f19c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 400f1a0:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 400f1a4:	d0a01217 	ldw	r2,-32696(gp)
 400f1a8:	10c000c4 	addi	r3,r2,3
 400f1ac:	00bfff04 	movi	r2,-4
 400f1b0:	1884703a 	and	r2,r3,r2
 400f1b4:	d0a01215 	stw	r2,-32696(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 400f1b8:	d0e01217 	ldw	r3,-32696(gp)
 400f1bc:	e0bfff17 	ldw	r2,-4(fp)
 400f1c0:	1887883a 	add	r3,r3,r2
 400f1c4:	00820034 	movhi	r2,2048
 400f1c8:	10800004 	addi	r2,r2,0
 400f1cc:	10c0062e 	bgeu	r2,r3,400f1e8 <sbrk+0x74>
 400f1d0:	e0bffb17 	ldw	r2,-20(fp)
 400f1d4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400f1d8:	e0bffa17 	ldw	r2,-24(fp)
 400f1dc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 400f1e0:	00bfffc4 	movi	r2,-1
 400f1e4:	00000b06 	br	400f214 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 400f1e8:	d0a01217 	ldw	r2,-32696(gp)
 400f1ec:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 400f1f0:	d0e01217 	ldw	r3,-32696(gp)
 400f1f4:	e0bfff17 	ldw	r2,-4(fp)
 400f1f8:	1885883a 	add	r2,r3,r2
 400f1fc:	d0a01215 	stw	r2,-32696(gp)
 400f200:	e0bffb17 	ldw	r2,-20(fp)
 400f204:	e0bffc15 	stw	r2,-16(fp)
 400f208:	e0bffc17 	ldw	r2,-16(fp)
 400f20c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 400f210:	e0bffd17 	ldw	r2,-12(fp)
} 
 400f214:	e037883a 	mov	sp,fp
 400f218:	df000017 	ldw	fp,0(sp)
 400f21c:	dec00104 	addi	sp,sp,4
 400f220:	f800283a 	ret

0400f224 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400f224:	defffe04 	addi	sp,sp,-8
 400f228:	dfc00115 	stw	ra,4(sp)
 400f22c:	df000015 	stw	fp,0(sp)
 400f230:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400f234:	d0a01117 	ldw	r2,-32700(gp)
 400f238:	10000326 	beq	r2,zero,400f248 <alt_get_errno+0x24>
 400f23c:	d0a01117 	ldw	r2,-32700(gp)
 400f240:	103ee83a 	callr	r2
 400f244:	00000106 	br	400f24c <alt_get_errno+0x28>
 400f248:	d0a2e204 	addi	r2,gp,-29816
}
 400f24c:	e037883a 	mov	sp,fp
 400f250:	dfc00117 	ldw	ra,4(sp)
 400f254:	df000017 	ldw	fp,0(sp)
 400f258:	dec00204 	addi	sp,sp,8
 400f25c:	f800283a 	ret

0400f260 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 400f260:	defff904 	addi	sp,sp,-28
 400f264:	dfc00615 	stw	ra,24(sp)
 400f268:	df000515 	stw	fp,20(sp)
 400f26c:	df000504 	addi	fp,sp,20
 400f270:	e13ffd15 	stw	r4,-12(fp)
 400f274:	e17ffe15 	stw	r5,-8(fp)
 400f278:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400f27c:	e0bffd17 	ldw	r2,-12(fp)
 400f280:	10000816 	blt	r2,zero,400f2a4 <write+0x44>
 400f284:	01400304 	movi	r5,12
 400f288:	e13ffd17 	ldw	r4,-12(fp)
 400f28c:	4000bd80 	call	4000bd8 <__mulsi3>
 400f290:	1007883a 	mov	r3,r2
 400f294:	00810074 	movhi	r2,1025
 400f298:	108dda04 	addi	r2,r2,14184
 400f29c:	1885883a 	add	r2,r3,r2
 400f2a0:	00000106 	br	400f2a8 <write+0x48>
 400f2a4:	0005883a 	mov	r2,zero
 400f2a8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 400f2ac:	e0bffb17 	ldw	r2,-20(fp)
 400f2b0:	10002126 	beq	r2,zero,400f338 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 400f2b4:	e0bffb17 	ldw	r2,-20(fp)
 400f2b8:	10800217 	ldw	r2,8(r2)
 400f2bc:	108000cc 	andi	r2,r2,3
 400f2c0:	10001826 	beq	r2,zero,400f324 <write+0xc4>
 400f2c4:	e0bffb17 	ldw	r2,-20(fp)
 400f2c8:	10800017 	ldw	r2,0(r2)
 400f2cc:	10800617 	ldw	r2,24(r2)
 400f2d0:	10001426 	beq	r2,zero,400f324 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 400f2d4:	e0bffb17 	ldw	r2,-20(fp)
 400f2d8:	10800017 	ldw	r2,0(r2)
 400f2dc:	10800617 	ldw	r2,24(r2)
 400f2e0:	e0ffff17 	ldw	r3,-4(fp)
 400f2e4:	180d883a 	mov	r6,r3
 400f2e8:	e17ffe17 	ldw	r5,-8(fp)
 400f2ec:	e13ffb17 	ldw	r4,-20(fp)
 400f2f0:	103ee83a 	callr	r2
 400f2f4:	e0bffc15 	stw	r2,-16(fp)
 400f2f8:	e0bffc17 	ldw	r2,-16(fp)
 400f2fc:	1000070e 	bge	r2,zero,400f31c <write+0xbc>
      {
        ALT_ERRNO = -rval;
 400f300:	400f2240 	call	400f224 <alt_get_errno>
 400f304:	1007883a 	mov	r3,r2
 400f308:	e0bffc17 	ldw	r2,-16(fp)
 400f30c:	0085c83a 	sub	r2,zero,r2
 400f310:	18800015 	stw	r2,0(r3)
        return -1;
 400f314:	00bfffc4 	movi	r2,-1
 400f318:	00000c06 	br	400f34c <write+0xec>
      }
      return rval;
 400f31c:	e0bffc17 	ldw	r2,-16(fp)
 400f320:	00000a06 	br	400f34c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 400f324:	400f2240 	call	400f224 <alt_get_errno>
 400f328:	1007883a 	mov	r3,r2
 400f32c:	00800344 	movi	r2,13
 400f330:	18800015 	stw	r2,0(r3)
 400f334:	00000406 	br	400f348 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 400f338:	400f2240 	call	400f224 <alt_get_errno>
 400f33c:	1007883a 	mov	r3,r2
 400f340:	00801444 	movi	r2,81
 400f344:	18800015 	stw	r2,0(r3)
  }
  return -1;
 400f348:	00bfffc4 	movi	r2,-1
}
 400f34c:	e037883a 	mov	sp,fp
 400f350:	dfc00117 	ldw	ra,4(sp)
 400f354:	df000017 	ldw	fp,0(sp)
 400f358:	dec00204 	addi	sp,sp,8
 400f35c:	f800283a 	ret

0400f360 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 400f360:	defffd04 	addi	sp,sp,-12
 400f364:	dfc00215 	stw	ra,8(sp)
 400f368:	df000115 	stw	fp,4(sp)
 400f36c:	df000104 	addi	fp,sp,4
 400f370:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 400f374:	d1600e04 	addi	r5,gp,-32712
 400f378:	e13fff17 	ldw	r4,-4(fp)
 400f37c:	40115880 	call	4011588 <alt_dev_llist_insert>
}
 400f380:	e037883a 	mov	sp,fp
 400f384:	dfc00117 	ldw	ra,4(sp)
 400f388:	df000017 	ldw	fp,0(sp)
 400f38c:	dec00204 	addi	sp,sp,8
 400f390:	f800283a 	ret

0400f394 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 400f394:	defffd04 	addi	sp,sp,-12
 400f398:	dfc00215 	stw	ra,8(sp)
 400f39c:	df000115 	stw	fp,4(sp)
 400f3a0:	df000104 	addi	fp,sp,4
 400f3a4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
 400f3a8:	4011fa00 	call	4011fa0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 400f3ac:	00800044 	movi	r2,1
 400f3b0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 400f3b4:	0001883a 	nop
 400f3b8:	e037883a 	mov	sp,fp
 400f3bc:	dfc00117 	ldw	ra,4(sp)
 400f3c0:	df000017 	ldw	fp,0(sp)
 400f3c4:	dec00204 	addi	sp,sp,8
 400f3c8:	f800283a 	ret

0400f3cc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 400f3cc:	defffe04 	addi	sp,sp,-8
 400f3d0:	dfc00115 	stw	ra,4(sp)
 400f3d4:	df000015 	stw	fp,0(sp)
 400f3d8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 400f3dc:	01010074 	movhi	r4,1025
 400f3e0:	210e3a04 	addi	r4,r4,14568
 400f3e4:	400f3600 	call	400f360 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 400f3e8:	0001883a 	nop
    ALTERA_MODULAR_ADC_INIT ( MODULAR_ADC_0, modular_adc_0);
 400f3ec:	01800084 	movi	r6,2
 400f3f0:	000b883a 	mov	r5,zero
 400f3f4:	01010074 	movhi	r4,1025
 400f3f8:	210e4504 	addi	r4,r4,14612
 400f3fc:	400f7ac0 	call	400f7ac <altera_modular_adc_init>
}
 400f400:	0001883a 	nop
 400f404:	e037883a 	mov	sp,fp
 400f408:	dfc00117 	ldw	ra,4(sp)
 400f40c:	df000017 	ldw	fp,0(sp)
 400f410:	dec00204 	addi	sp,sp,8
 400f414:	f800283a 	ret

0400f418 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 400f418:	defffa04 	addi	sp,sp,-24
 400f41c:	dfc00515 	stw	ra,20(sp)
 400f420:	df000415 	stw	fp,16(sp)
 400f424:	df000404 	addi	fp,sp,16
 400f428:	e13ffd15 	stw	r4,-12(fp)
 400f42c:	e17ffe15 	stw	r5,-8(fp)
 400f430:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400f434:	e0bffd17 	ldw	r2,-12(fp)
 400f438:	10800017 	ldw	r2,0(r2)
 400f43c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 400f440:	e0bffc17 	ldw	r2,-16(fp)
 400f444:	10c00a04 	addi	r3,r2,40
 400f448:	e0bffd17 	ldw	r2,-12(fp)
 400f44c:	10800217 	ldw	r2,8(r2)
 400f450:	100f883a 	mov	r7,r2
 400f454:	e1bfff17 	ldw	r6,-4(fp)
 400f458:	e17ffe17 	ldw	r5,-8(fp)
 400f45c:	1809883a 	mov	r4,r3
 400f460:	400f4d80 	call	400f4d8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 400f464:	e037883a 	mov	sp,fp
 400f468:	dfc00117 	ldw	ra,4(sp)
 400f46c:	df000017 	ldw	fp,0(sp)
 400f470:	dec00204 	addi	sp,sp,8
 400f474:	f800283a 	ret

0400f478 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 400f478:	defffa04 	addi	sp,sp,-24
 400f47c:	dfc00515 	stw	ra,20(sp)
 400f480:	df000415 	stw	fp,16(sp)
 400f484:	df000404 	addi	fp,sp,16
 400f488:	e13ffd15 	stw	r4,-12(fp)
 400f48c:	e17ffe15 	stw	r5,-8(fp)
 400f490:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400f494:	e0bffd17 	ldw	r2,-12(fp)
 400f498:	10800017 	ldw	r2,0(r2)
 400f49c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 400f4a0:	e0bffc17 	ldw	r2,-16(fp)
 400f4a4:	10c00a04 	addi	r3,r2,40
 400f4a8:	e0bffd17 	ldw	r2,-12(fp)
 400f4ac:	10800217 	ldw	r2,8(r2)
 400f4b0:	100f883a 	mov	r7,r2
 400f4b4:	e1bfff17 	ldw	r6,-4(fp)
 400f4b8:	e17ffe17 	ldw	r5,-8(fp)
 400f4bc:	1809883a 	mov	r4,r3
 400f4c0:	400f5c40 	call	400f5c4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 400f4c4:	e037883a 	mov	sp,fp
 400f4c8:	dfc00117 	ldw	ra,4(sp)
 400f4cc:	df000017 	ldw	fp,0(sp)
 400f4d0:	dec00204 	addi	sp,sp,8
 400f4d4:	f800283a 	ret

0400f4d8 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
 400f4d8:	defff704 	addi	sp,sp,-36
 400f4dc:	df000815 	stw	fp,32(sp)
 400f4e0:	df000804 	addi	fp,sp,32
 400f4e4:	e13ffc15 	stw	r4,-16(fp)
 400f4e8:	e17ffd15 	stw	r5,-12(fp)
 400f4ec:	e1bffe15 	stw	r6,-8(fp)
 400f4f0:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
 400f4f4:	e0bffc17 	ldw	r2,-16(fp)
 400f4f8:	10800017 	ldw	r2,0(r2)
 400f4fc:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
 400f500:	e0bffd17 	ldw	r2,-12(fp)
 400f504:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
 400f508:	e0bffe17 	ldw	r2,-8(fp)
 400f50c:	e0fffd17 	ldw	r3,-12(fp)
 400f510:	1885883a 	add	r2,r3,r2
 400f514:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
 400f518:	00001206 	br	400f564 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 400f51c:	e0bff917 	ldw	r2,-28(fp)
 400f520:	10800037 	ldwio	r2,0(r2)
 400f524:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
 400f528:	e0bffb17 	ldw	r2,-20(fp)
 400f52c:	10a0000c 	andi	r2,r2,32768
 400f530:	10000626 	beq	r2,zero,400f54c <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 400f534:	e0bff817 	ldw	r2,-32(fp)
 400f538:	10c00044 	addi	r3,r2,1
 400f53c:	e0fff815 	stw	r3,-32(fp)
 400f540:	e0fffb17 	ldw	r3,-20(fp)
 400f544:	10c00005 	stb	r3,0(r2)
 400f548:	00000606 	br	400f564 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
 400f54c:	e0fff817 	ldw	r3,-32(fp)
 400f550:	e0bffd17 	ldw	r2,-12(fp)
 400f554:	1880071e 	bne	r3,r2,400f574 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
 400f558:	e0bfff17 	ldw	r2,-4(fp)
 400f55c:	1090000c 	andi	r2,r2,16384
 400f560:	1000061e 	bne	r2,zero,400f57c <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
 400f564:	e0fff817 	ldw	r3,-32(fp)
 400f568:	e0bffa17 	ldw	r2,-24(fp)
 400f56c:	18bfeb36 	bltu	r3,r2,400f51c <__alt_data_end+0xfc00f51c>
 400f570:	00000306 	br	400f580 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
 400f574:	0001883a 	nop
 400f578:	00000106 	br	400f580 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
 400f57c:	0001883a 	nop
    
  }

  if (ptr != buffer)
 400f580:	e0fff817 	ldw	r3,-32(fp)
 400f584:	e0bffd17 	ldw	r2,-12(fp)
 400f588:	18800426 	beq	r3,r2,400f59c <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
 400f58c:	e0fff817 	ldw	r3,-32(fp)
 400f590:	e0bffd17 	ldw	r2,-12(fp)
 400f594:	1885c83a 	sub	r2,r3,r2
 400f598:	00000606 	br	400f5b4 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
 400f59c:	e0bfff17 	ldw	r2,-4(fp)
 400f5a0:	1090000c 	andi	r2,r2,16384
 400f5a4:	10000226 	beq	r2,zero,400f5b0 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
 400f5a8:	00bffd44 	movi	r2,-11
 400f5ac:	00000106 	br	400f5b4 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
 400f5b0:	00bffec4 	movi	r2,-5
}
 400f5b4:	e037883a 	mov	sp,fp
 400f5b8:	df000017 	ldw	fp,0(sp)
 400f5bc:	dec00104 	addi	sp,sp,4
 400f5c0:	f800283a 	ret

0400f5c4 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 400f5c4:	defff904 	addi	sp,sp,-28
 400f5c8:	df000615 	stw	fp,24(sp)
 400f5cc:	df000604 	addi	fp,sp,24
 400f5d0:	e13ffc15 	stw	r4,-16(fp)
 400f5d4:	e17ffd15 	stw	r5,-12(fp)
 400f5d8:	e1bffe15 	stw	r6,-8(fp)
 400f5dc:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
 400f5e0:	e0bffc17 	ldw	r2,-16(fp)
 400f5e4:	10800017 	ldw	r2,0(r2)
 400f5e8:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
 400f5ec:	e0bffe17 	ldw	r2,-8(fp)
 400f5f0:	e0fffd17 	ldw	r3,-12(fp)
 400f5f4:	1885883a 	add	r2,r3,r2
 400f5f8:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
 400f5fc:	00000e06 	br	400f638 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 400f600:	e0bffa17 	ldw	r2,-24(fp)
 400f604:	10800104 	addi	r2,r2,4
 400f608:	10800037 	ldwio	r2,0(r2)
 400f60c:	10bfffec 	andhi	r2,r2,65535
 400f610:	10000926 	beq	r2,zero,400f638 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 400f614:	e0fffa17 	ldw	r3,-24(fp)
 400f618:	e0bffd17 	ldw	r2,-12(fp)
 400f61c:	11000044 	addi	r4,r2,1
 400f620:	e13ffd15 	stw	r4,-12(fp)
 400f624:	10800003 	ldbu	r2,0(r2)
 400f628:	10803fcc 	andi	r2,r2,255
 400f62c:	1080201c 	xori	r2,r2,128
 400f630:	10bfe004 	addi	r2,r2,-128
 400f634:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 400f638:	e0fffd17 	ldw	r3,-12(fp)
 400f63c:	e0bffb17 	ldw	r2,-20(fp)
 400f640:	18bfef36 	bltu	r3,r2,400f600 <__alt_data_end+0xfc00f600>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
 400f644:	e0bffe17 	ldw	r2,-8(fp)
}
 400f648:	e037883a 	mov	sp,fp
 400f64c:	df000017 	ldw	fp,0(sp)
 400f650:	dec00104 	addi	sp,sp,4
 400f654:	f800283a 	ret

0400f658 <alt_adc_irq>:
 * alt_adc_irq()
 *
 * Interrupt handler for the altera modular adc.
 */
static void alt_adc_irq(void *context)
{
 400f658:	defff904 	addi	sp,sp,-28
 400f65c:	dfc00615 	stw	ra,24(sp)
 400f660:	df000515 	stw	fp,20(sp)
 400f664:	df000504 	addi	fp,sp,20
 400f668:	e13fff15 	stw	r4,-4(fp)
    alt_modular_adc_dev *dev = (alt_modular_adc_dev *) context;
 400f66c:	e0bfff17 	ldw	r2,-4(fp)
 400f670:	e0bffb15 	stw	r2,-20(fp)
    alt_irq_context cpu_sr = 0;
 400f674:	e03ffc15 	stw	zero,-16(fp)

	if(NULL != dev)
 400f678:	e0bffb17 	ldw	r2,-20(fp)
 400f67c:	10001a26 	beq	r2,zero,400f6e8 <alt_adc_irq+0x90>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400f680:	0005303a 	rdctl	r2,status
 400f684:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400f688:	e0fffe17 	ldw	r3,-8(fp)
 400f68c:	00bfff84 	movi	r2,-2
 400f690:	1884703a 	and	r2,r3,r2
 400f694:	1001703a 	wrctl	status,r2
  
  return context;
 400f698:	e0bffe17 	ldw	r2,-8(fp)
	{
	    cpu_sr = alt_irq_disable_all();
 400f69c:	e0bffc15 	stw	r2,-16(fp)
		* Other interrupts are explicitly disabled if callbacks
		* are registered because there is no guarantee that they are 
		* pre-emption-safe. This allows the driver to support 
		* interrupt pre-emption.
		*/
		if(dev->callback) 
 400f6a0:	e0bffb17 	ldw	r2,-20(fp)
 400f6a4:	10800a17 	ldw	r2,40(r2)
 400f6a8:	10000626 	beq	r2,zero,400f6c4 <alt_adc_irq+0x6c>
		{
			dev->callback (dev->callback_context);
 400f6ac:	e0bffb17 	ldw	r2,-20(fp)
 400f6b0:	10800a17 	ldw	r2,40(r2)
 400f6b4:	e0fffb17 	ldw	r3,-20(fp)
 400f6b8:	18c00b17 	ldw	r3,44(r3)
 400f6bc:	1809883a 	mov	r4,r3
 400f6c0:	103ee83a 	callr	r2
		}
    
		/* clear the IRQ status */
		adc_clear_interrupt_status(dev->sample_store_base);
 400f6c4:	e0bffb17 	ldw	r2,-20(fp)
 400f6c8:	10800c17 	ldw	r2,48(r2)
 400f6cc:	1009883a 	mov	r4,r2
 400f6d0:	400fb040 	call	400fb04 <adc_clear_interrupt_status>
 400f6d4:	e0bffc17 	ldw	r2,-16(fp)
 400f6d8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400f6dc:	e0bffd17 	ldw	r2,-12(fp)
 400f6e0:	1001703a 	wrctl	status,r2
	    
		alt_irq_enable_all(cpu_sr);
	}
	
    return;
 400f6e4:	0001883a 	nop
 400f6e8:	0001883a 	nop
}
 400f6ec:	e037883a 	mov	sp,fp
 400f6f0:	dfc00117 	ldw	ra,4(sp)
 400f6f4:	df000017 	ldw	fp,0(sp)
 400f6f8:	dec00204 	addi	sp,sp,8
 400f6fc:	f800283a 	ret

0400f700 <alt_adc_word_read>:
 * Returns:
 * 0 -> success
 * -EINVAL -> Invalid arguments
**/
int alt_adc_word_read (alt_u32 sample_store_base, alt_u32* dest_ptr, alt_u32 len)
{
 400f700:	defff804 	addi	sp,sp,-32
 400f704:	df000715 	stw	fp,28(sp)
 400f708:	df000704 	addi	fp,sp,28
 400f70c:	e13ffd15 	stw	r4,-12(fp)
 400f710:	e17ffe15 	stw	r5,-8(fp)
 400f714:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 word = 0;
 400f718:	e03ff915 	stw	zero,-28(fp)
    alt_u32 word_length = len;
 400f71c:	e0bfff17 	ldw	r2,-4(fp)
 400f720:	e0bffb15 	stw	r2,-20(fp)
    alt_u32* dest_buf = dest_ptr;
 400f724:	e0bffe17 	ldw	r2,-8(fp)
 400f728:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 base = sample_store_base;
 400f72c:	e0bffd17 	ldw	r2,-12(fp)
 400f730:	e0bffc15 	stw	r2,-16(fp)
     
    /* return -EINVAL if invalid arguments passed into function */
    if(NULL == dest_buf)
 400f734:	e0bffa17 	ldw	r2,-24(fp)
 400f738:	1000021e 	bne	r2,zero,400f744 <alt_adc_word_read+0x44>
    {
    	return -EINVAL;
 400f73c:	00bffa84 	movi	r2,-22
 400f740:	00001606 	br	400f79c <alt_adc_word_read+0x9c>
    }

    for(word = 0; word < word_length; word++)
 400f744:	e03ff915 	stw	zero,-28(fp)
 400f748:	00001006 	br	400f78c <alt_adc_word_read+0x8c>
    {
       *dest_buf = IORD_32DIRECT((base + (word * 4)),0);
 400f74c:	e0bff917 	ldw	r2,-28(fp)
 400f750:	1085883a 	add	r2,r2,r2
 400f754:	1085883a 	add	r2,r2,r2
 400f758:	1007883a 	mov	r3,r2
 400f75c:	e0bffc17 	ldw	r2,-16(fp)
 400f760:	1885883a 	add	r2,r3,r2
 400f764:	10800037 	ldwio	r2,0(r2)
 400f768:	1007883a 	mov	r3,r2
 400f76c:	e0bffa17 	ldw	r2,-24(fp)
 400f770:	10c00015 	stw	r3,0(r2)

       dest_buf++;
 400f774:	e0bffa17 	ldw	r2,-24(fp)
 400f778:	10800104 	addi	r2,r2,4
 400f77c:	e0bffa15 	stw	r2,-24(fp)
    if(NULL == dest_buf)
    {
    	return -EINVAL;
    }

    for(word = 0; word < word_length; word++)
 400f780:	e0bff917 	ldw	r2,-28(fp)
 400f784:	10800044 	addi	r2,r2,1
 400f788:	e0bff915 	stw	r2,-28(fp)
 400f78c:	e0fff917 	ldw	r3,-28(fp)
 400f790:	e0bffb17 	ldw	r2,-20(fp)
 400f794:	18bfed36 	bltu	r3,r2,400f74c <__alt_data_end+0xfc00f74c>
       *dest_buf = IORD_32DIRECT((base + (word * 4)),0);

       dest_buf++;
    }

    return 0;
 400f798:	0005883a 	mov	r2,zero

}
 400f79c:	e037883a 	mov	sp,fp
 400f7a0:	df000017 	ldw	fp,0(sp)
 400f7a4:	dec00104 	addi	sp,sp,4
 400f7a8:	f800283a 	ret

0400f7ac <altera_modular_adc_init>:


void altera_modular_adc_init(alt_modular_adc_dev* dev, alt_32 ic_id, alt_32 irq)
{
 400f7ac:	defffa04 	addi	sp,sp,-24
 400f7b0:	dfc00515 	stw	ra,20(sp)
 400f7b4:	df000415 	stw	fp,16(sp)
 400f7b8:	df000404 	addi	fp,sp,16
 400f7bc:	e13ffd15 	stw	r4,-12(fp)
 400f7c0:	e17ffe15 	stw	r5,-8(fp)
 400f7c4:	e1bfff15 	stw	r6,-4(fp)
    extern alt_llist altera_modular_adc_list;
    alt_dev_llist_insert((alt_dev_llist*) dev, &altera_modular_adc_list);
 400f7c8:	d1601304 	addi	r5,gp,-32692
 400f7cc:	e13ffd17 	ldw	r4,-12(fp)
 400f7d0:	40115880 	call	4011588 <alt_dev_llist_insert>
	
	if ((0 <= ic_id) && (0 <= irq))
 400f7d4:	e0bffe17 	ldw	r2,-8(fp)
 400f7d8:	10000b16 	blt	r2,zero,400f808 <altera_modular_adc_init+0x5c>
 400f7dc:	e0bfff17 	ldw	r2,-4(fp)
 400f7e0:	10000916 	blt	r2,zero,400f808 <altera_modular_adc_init+0x5c>
	{
          /* Install IRQ handler */
	  #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
              alt_ic_isr_register(ic_id, irq, alt_adc_irq, 
 400f7e4:	e0bffe17 	ldw	r2,-8(fp)
 400f7e8:	e0ffff17 	ldw	r3,-4(fp)
 400f7ec:	d8000015 	stw	zero,0(sp)
 400f7f0:	e1fffd17 	ldw	r7,-12(fp)
 400f7f4:	01810074 	movhi	r6,1025
 400f7f8:	31bd9604 	addi	r6,r6,-2472
 400f7fc:	180b883a 	mov	r5,r3
 400f800:	1009883a 	mov	r4,r2
 400f804:	401179c0 	call	401179c <alt_ic_isr_register>
                      dev, NULL);
          #else
             alt_irq_register(irq, dev, alt_adc_irq);
          #endif 
	}
}
 400f808:	0001883a 	nop
 400f80c:	e037883a 	mov	sp,fp
 400f810:	dfc00117 	ldw	ra,4(sp)
 400f814:	df000017 	ldw	fp,0(sp)
 400f818:	dec00204 	addi	sp,sp,8
 400f81c:	f800283a 	ret

0400f820 <alt_adc_register_callback>:
void alt_adc_register_callback(
	alt_modular_adc_dev *dev,
	alt_adc_callback callback,
	void *context,
	alt_u32 sample_store_base)
{
 400f820:	defffa04 	addi	sp,sp,-24
 400f824:	dfc00515 	stw	ra,20(sp)
 400f828:	df000415 	stw	fp,16(sp)
 400f82c:	df000404 	addi	fp,sp,16
 400f830:	e13ffc15 	stw	r4,-16(fp)
 400f834:	e17ffd15 	stw	r5,-12(fp)
 400f838:	e1bffe15 	stw	r6,-8(fp)
 400f83c:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
 400f840:	e0bffc17 	ldw	r2,-16(fp)
 400f844:	e0fffd17 	ldw	r3,-12(fp)
 400f848:	10c00a15 	stw	r3,40(r2)
    dev->callback_context = context;
 400f84c:	e0bffc17 	ldw	r2,-16(fp)
 400f850:	e0fffe17 	ldw	r3,-8(fp)
 400f854:	10c00b15 	stw	r3,44(r2)
    dev->sample_store_base = sample_store_base;
 400f858:	e0bffc17 	ldw	r2,-16(fp)
 400f85c:	e0ffff17 	ldw	r3,-4(fp)
 400f860:	10c00c15 	stw	r3,48(r2)
	
	if(NULL != callback)
 400f864:	e0bffd17 	ldw	r2,-12(fp)
 400f868:	10000726 	beq	r2,zero,400f888 <alt_adc_register_callback+0x68>
	{
                adc_clear_interrupt_status(sample_store_base);
 400f86c:	e0bfff17 	ldw	r2,-4(fp)
 400f870:	1009883a 	mov	r4,r2
 400f874:	400fb040 	call	400fb04 <adc_clear_interrupt_status>
		adc_interrupt_enable(sample_store_base);
 400f878:	e0bfff17 	ldw	r2,-4(fp)
 400f87c:	1009883a 	mov	r4,r2
 400f880:	400fa780 	call	400fa78 <adc_interrupt_enable>
                adc_clear_interrupt_status(sample_store_base);
	}
	
    
	
    return ;
 400f884:	00000706 	br	400f8a4 <alt_adc_register_callback+0x84>
                adc_clear_interrupt_status(sample_store_base);
		adc_interrupt_enable(sample_store_base);
	}
	else
	{
		adc_interrupt_disable(sample_store_base);
 400f888:	e0bfff17 	ldw	r2,-4(fp)
 400f88c:	1009883a 	mov	r4,r2
 400f890:	400fabc0 	call	400fabc <adc_interrupt_disable>
                adc_clear_interrupt_status(sample_store_base);
 400f894:	e0bfff17 	ldw	r2,-4(fp)
 400f898:	1009883a 	mov	r4,r2
 400f89c:	400fb040 	call	400fb04 <adc_clear_interrupt_status>
	}
	
    
	
    return ;
 400f8a0:	0001883a 	nop
}
 400f8a4:	e037883a 	mov	sp,fp
 400f8a8:	dfc00117 	ldw	ra,4(sp)
 400f8ac:	df000017 	ldw	fp,0(sp)
 400f8b0:	dec00204 	addi	sp,sp,8
 400f8b4:	f800283a 	ret

0400f8b8 <altera_modular_adc_open>:

alt_modular_adc_dev* altera_modular_adc_open (const char *name)
{
 400f8b8:	defffc04 	addi	sp,sp,-16
 400f8bc:	dfc00315 	stw	ra,12(sp)
 400f8c0:	df000215 	stw	fp,8(sp)
 400f8c4:	df000204 	addi	fp,sp,8
 400f8c8:	e13fff15 	stw	r4,-4(fp)
    alt_modular_adc_dev *dev = NULL;
 400f8cc:	e03ffe15 	stw	zero,-8(fp)

    /* Find requested device */
    dev = (alt_modular_adc_dev*) alt_find_dev (name, &altera_modular_adc_list);
 400f8d0:	d1601304 	addi	r5,gp,-32692
 400f8d4:	e13fff17 	ldw	r4,-4(fp)
 400f8d8:	40116ec0 	call	40116ec <alt_find_dev>
 400f8dc:	e0bffe15 	stw	r2,-8(fp)

    return dev;
 400f8e0:	e0bffe17 	ldw	r2,-8(fp)
}
 400f8e4:	e037883a 	mov	sp,fp
 400f8e8:	dfc00117 	ldw	ra,4(sp)
 400f8ec:	df000017 	ldw	fp,0(sp)
 400f8f0:	dec00204 	addi	sp,sp,8
 400f8f4:	f800283a 	ret

0400f8f8 <adc_stop>:

void adc_stop(int sequencer_base)
{
 400f8f8:	defffe04 	addi	sp,sp,-8
 400f8fc:	df000115 	stw	fp,4(sp)
 400f900:	df000104 	addi	fp,sp,4
 400f904:	e13fff15 	stw	r4,-4(fp)
    ALTERA_MODULAR_ADC_SEQUENCER_STOP(sequencer_base);
 400f908:	e0bfff17 	ldw	r2,-4(fp)
 400f90c:	e0ffff17 	ldw	r3,-4(fp)
 400f910:	19000037 	ldwio	r4,0(r3)
 400f914:	00ffff84 	movi	r3,-2
 400f918:	20c6703a 	and	r3,r4,r3
 400f91c:	10c00035 	stwio	r3,0(r2)
 400f920:	0001883a 	nop
 400f924:	e0bfff17 	ldw	r2,-4(fp)
 400f928:	10800037 	ldwio	r2,0(r2)
 400f92c:	1080004c 	andi	r2,r2,1
 400f930:	103ffc1e 	bne	r2,zero,400f924 <__alt_data_end+0xfc00f924>
}
 400f934:	0001883a 	nop
 400f938:	e037883a 	mov	sp,fp
 400f93c:	df000017 	ldw	fp,0(sp)
 400f940:	dec00104 	addi	sp,sp,4
 400f944:	f800283a 	ret

0400f948 <adc_start>:

void adc_start(int sequencer_base)
{
 400f948:	defffe04 	addi	sp,sp,-8
 400f94c:	df000115 	stw	fp,4(sp)
 400f950:	df000104 	addi	fp,sp,4
 400f954:	e13fff15 	stw	r4,-4(fp)
    ALTERA_MODULAR_ADC_SEQUENCER_START(sequencer_base);
 400f958:	e0bfff17 	ldw	r2,-4(fp)
 400f95c:	e0ffff17 	ldw	r3,-4(fp)
 400f960:	18c00037 	ldwio	r3,0(r3)
 400f964:	18c00054 	ori	r3,r3,1
 400f968:	10c00035 	stwio	r3,0(r2)
}
 400f96c:	0001883a 	nop
 400f970:	e037883a 	mov	sp,fp
 400f974:	df000017 	ldw	fp,0(sp)
 400f978:	dec00104 	addi	sp,sp,4
 400f97c:	f800283a 	ret

0400f980 <adc_set_mode_run_once>:

void adc_set_mode_run_once(int sequencer_base)
{
 400f980:	defffe04 	addi	sp,sp,-8
 400f984:	df000115 	stw	fp,4(sp)
 400f988:	df000104 	addi	fp,sp,4
 400f98c:	e13fff15 	stw	r4,-4(fp)
    /* Note: Stop the ADC before calling this function,
       changing ADC mode while RUN bit is set has no effect. */
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_ONCE(sequencer_base);
 400f990:	e0bfff17 	ldw	r2,-4(fp)
 400f994:	e0ffff17 	ldw	r3,-4(fp)
 400f998:	19000037 	ldwio	r4,0(r3)
 400f99c:	00fffc44 	movi	r3,-15
 400f9a0:	20c6703a 	and	r3,r4,r3
 400f9a4:	18c00094 	ori	r3,r3,2
 400f9a8:	10c00035 	stwio	r3,0(r2)
}
 400f9ac:	0001883a 	nop
 400f9b0:	e037883a 	mov	sp,fp
 400f9b4:	df000017 	ldw	fp,0(sp)
 400f9b8:	dec00104 	addi	sp,sp,4
 400f9bc:	f800283a 	ret

0400f9c0 <adc_set_mode_run_continuously>:

void adc_set_mode_run_continuously(int sequencer_base)
{
 400f9c0:	defffe04 	addi	sp,sp,-8
 400f9c4:	df000115 	stw	fp,4(sp)
 400f9c8:	df000104 	addi	fp,sp,4
 400f9cc:	e13fff15 	stw	r4,-4(fp)
    /* Note: Stop the ADC before calling this function,
       changing ADC mode while RUN bit is set has no effect. */
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_CONTINUOUSLY(sequencer_base);
 400f9d0:	e0bfff17 	ldw	r2,-4(fp)
 400f9d4:	e0ffff17 	ldw	r3,-4(fp)
 400f9d8:	19000037 	ldwio	r4,0(r3)
 400f9dc:	00fffc44 	movi	r3,-15
 400f9e0:	20c6703a 	and	r3,r4,r3
 400f9e4:	10c00035 	stwio	r3,0(r2)
}
 400f9e8:	0001883a 	nop
 400f9ec:	e037883a 	mov	sp,fp
 400f9f0:	df000017 	ldw	fp,0(sp)
 400f9f4:	dec00104 	addi	sp,sp,4
 400f9f8:	f800283a 	ret

0400f9fc <adc_recalibrate>:

void adc_recalibrate(int sequencer_base)
{
 400f9fc:	defffc04 	addi	sp,sp,-16
 400fa00:	dfc00315 	stw	ra,12(sp)
 400fa04:	df000215 	stw	fp,8(sp)
 400fa08:	df000204 	addi	fp,sp,8
 400fa0c:	e13fff15 	stw	r4,-4(fp)
         2. Start the ADC Sequencer Core.
         5. Poll for RUN bit to be clear
         6. Restore CMD register
     */
    alt_u32 backup_cmd_reg;
    backup_cmd_reg = IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base);
 400fa10:	e0bfff17 	ldw	r2,-4(fp)
 400fa14:	10800037 	ldwio	r2,0(r2)
 400fa18:	e0bffe15 	stw	r2,-8(fp)
    adc_stop(sequencer_base);
 400fa1c:	e13fff17 	ldw	r4,-4(fp)
 400fa20:	400f8f80 	call	400f8f8 <adc_stop>
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_RECALIBRATION(sequencer_base);
 400fa24:	e0bfff17 	ldw	r2,-4(fp)
 400fa28:	e0ffff17 	ldw	r3,-4(fp)
 400fa2c:	18c00037 	ldwio	r3,0(r3)
 400fa30:	18c00394 	ori	r3,r3,14
 400fa34:	10c00035 	stwio	r3,0(r2)
    adc_start(sequencer_base);
 400fa38:	e13fff17 	ldw	r4,-4(fp)
 400fa3c:	400f9480 	call	400f948 <adc_start>
    while(IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base)
 400fa40:	0001883a 	nop
 400fa44:	e0bfff17 	ldw	r2,-4(fp)
 400fa48:	10800037 	ldwio	r2,0(r2)
             & ALTERA_MODULAR_ADC_SEQUENCER_CMD_RUN_MSK);
 400fa4c:	1080004c 	andi	r2,r2,1
    alt_u32 backup_cmd_reg;
    backup_cmd_reg = IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base);
    adc_stop(sequencer_base);
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_RECALIBRATION(sequencer_base);
    adc_start(sequencer_base);
    while(IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base)
 400fa50:	103ffc1e 	bne	r2,zero,400fa44 <__alt_data_end+0xfc00fa44>
             & ALTERA_MODULAR_ADC_SEQUENCER_CMD_RUN_MSK);
    IOWR_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base, backup_cmd_reg);
 400fa54:	e0bfff17 	ldw	r2,-4(fp)
 400fa58:	e0fffe17 	ldw	r3,-8(fp)
 400fa5c:	10c00035 	stwio	r3,0(r2)
}
 400fa60:	0001883a 	nop
 400fa64:	e037883a 	mov	sp,fp
 400fa68:	dfc00117 	ldw	ra,4(sp)
 400fa6c:	df000017 	ldw	fp,0(sp)
 400fa70:	dec00204 	addi	sp,sp,8
 400fa74:	f800283a 	ret

0400fa78 <adc_interrupt_enable>:

void adc_interrupt_enable(int sample_store_base)
{
 400fa78:	defffe04 	addi	sp,sp,-8
 400fa7c:	df000115 	stw	fp,4(sp)
 400fa80:	df000104 	addi	fp,sp,4
 400fa84:	e13fff15 	stw	r4,-4(fp)
    ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_ENABLE(sample_store_base);
 400fa88:	e0bfff17 	ldw	r2,-4(fp)
 400fa8c:	10804004 	addi	r2,r2,256
 400fa90:	1007883a 	mov	r3,r2
 400fa94:	e0bfff17 	ldw	r2,-4(fp)
 400fa98:	10804004 	addi	r2,r2,256
 400fa9c:	10800037 	ldwio	r2,0(r2)
 400faa0:	10800054 	ori	r2,r2,1
 400faa4:	18800035 	stwio	r2,0(r3)
}
 400faa8:	0001883a 	nop
 400faac:	e037883a 	mov	sp,fp
 400fab0:	df000017 	ldw	fp,0(sp)
 400fab4:	dec00104 	addi	sp,sp,4
 400fab8:	f800283a 	ret

0400fabc <adc_interrupt_disable>:

void adc_interrupt_disable(int sample_store_base)
{
 400fabc:	defffe04 	addi	sp,sp,-8
 400fac0:	df000115 	stw	fp,4(sp)
 400fac4:	df000104 	addi	fp,sp,4
 400fac8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_DISABLE(sample_store_base);
 400facc:	e0bfff17 	ldw	r2,-4(fp)
 400fad0:	10804004 	addi	r2,r2,256
 400fad4:	1009883a 	mov	r4,r2
 400fad8:	e0bfff17 	ldw	r2,-4(fp)
 400fadc:	10804004 	addi	r2,r2,256
 400fae0:	10c00037 	ldwio	r3,0(r2)
 400fae4:	00bfff84 	movi	r2,-2
 400fae8:	1884703a 	and	r2,r3,r2
 400faec:	20800035 	stwio	r2,0(r4)
}
 400faf0:	0001883a 	nop
 400faf4:	e037883a 	mov	sp,fp
 400faf8:	df000017 	ldw	fp,0(sp)
 400fafc:	dec00104 	addi	sp,sp,4
 400fb00:	f800283a 	ret

0400fb04 <adc_clear_interrupt_status>:

void adc_clear_interrupt_status(int sample_store_base)
{
 400fb04:	defffe04 	addi	sp,sp,-8
 400fb08:	df000115 	stw	fp,4(sp)
 400fb0c:	df000104 	addi	fp,sp,4
 400fb10:	e13fff15 	stw	r4,-4(fp)
    CLEAR_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_STATUS(sample_store_base);
 400fb14:	e0bfff17 	ldw	r2,-4(fp)
 400fb18:	10804104 	addi	r2,r2,260
 400fb1c:	1007883a 	mov	r3,r2
 400fb20:	e0bfff17 	ldw	r2,-4(fp)
 400fb24:	10804104 	addi	r2,r2,260
 400fb28:	10800037 	ldwio	r2,0(r2)
 400fb2c:	10800054 	ori	r2,r2,1
 400fb30:	18800035 	stwio	r2,0(r3)
}
 400fb34:	0001883a 	nop
 400fb38:	e037883a 	mov	sp,fp
 400fb3c:	df000017 	ldw	fp,0(sp)
 400fb40:	dec00104 	addi	sp,sp,4
 400fb44:	f800283a 	ret

0400fb48 <adc_interrupt_asserted>:

int adc_interrupt_asserted(int sample_store_base)
{
 400fb48:	defffe04 	addi	sp,sp,-8
 400fb4c:	df000115 	stw	fp,4(sp)
 400fb50:	df000104 	addi	fp,sp,4
 400fb54:	e13fff15 	stw	r4,-4(fp)
    return((READ_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_STATUS(sample_store_base)==1) ? -1 : 0);
 400fb58:	e0bfff17 	ldw	r2,-4(fp)
 400fb5c:	10804104 	addi	r2,r2,260
 400fb60:	10800037 	ldwio	r2,0(r2)
 400fb64:	1080004c 	andi	r2,r2,1
 400fb68:	10000226 	beq	r2,zero,400fb74 <adc_interrupt_asserted+0x2c>
 400fb6c:	00bfffc4 	movi	r2,-1
 400fb70:	00000106 	br	400fb78 <adc_interrupt_asserted+0x30>
 400fb74:	0005883a 	mov	r2,zero
}
 400fb78:	e037883a 	mov	sp,fp
 400fb7c:	df000017 	ldw	fp,0(sp)
 400fb80:	dec00104 	addi	sp,sp,4
 400fb84:	f800283a 	ret

0400fb88 <adc_wait_for_interrupt>:

void adc_wait_for_interrupt(int sample_store_base)
{
 400fb88:	defffe04 	addi	sp,sp,-8
 400fb8c:	df000115 	stw	fp,4(sp)
 400fb90:	df000104 	addi	fp,sp,4
 400fb94:	e13fff15 	stw	r4,-4(fp)
    WAIT_FOR_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ(sample_store_base);
 400fb98:	0001883a 	nop
 400fb9c:	e0bfff17 	ldw	r2,-4(fp)
 400fba0:	10804104 	addi	r2,r2,260
 400fba4:	10800037 	ldwio	r2,0(r2)
 400fba8:	1080004c 	andi	r2,r2,1
 400fbac:	103ffb26 	beq	r2,zero,400fb9c <__alt_data_end+0xfc00fb9c>
}
 400fbb0:	0001883a 	nop
 400fbb4:	e037883a 	mov	sp,fp
 400fbb8:	df000017 	ldw	fp,0(sp)
 400fbbc:	dec00104 	addi	sp,sp,4
 400fbc0:	f800283a 	ret

0400fbc4 <clear_screen>:
#include "char_map.h"
#include "draw_vga.h"
#include "DE10_Lite_VGA_Driver.h"

void clear_screen(alt_u32 color)
{
 400fbc4:	defffb04 	addi	sp,sp,-20
 400fbc8:	dfc00415 	stw	ra,16(sp)
 400fbcc:	df000315 	stw	fp,12(sp)
 400fbd0:	df000304 	addi	fp,sp,12
 400fbd4:	e13fff15 	stw	r4,-4(fp)
	// Author's note: This function offers a lot of opportunities for optimization
	for (size_t y = 0; y < CANVAS_HEIGHT; ++y)
 400fbd8:	e03ffd15 	stw	zero,-12(fp)
 400fbdc:	00001806 	br	400fc40 <clear_screen+0x7c>
	{
		for (size_t x = 0; x < CANVAS_WIDTH; ++x)
 400fbe0:	e03ffe15 	stw	zero,-8(fp)
 400fbe4:	00001006 	br	400fc28 <clear_screen+0x64>
		{
			write_pixel(x, y, color);
 400fbe8:	01405004 	movi	r5,320
 400fbec:	e13ffd17 	ldw	r4,-12(fp)
 400fbf0:	4000bd80 	call	4000bd8 <__mulsi3>
 400fbf4:	1007883a 	mov	r3,r2
 400fbf8:	e0bffe17 	ldw	r2,-8(fp)
 400fbfc:	1885883a 	add	r2,r3,r2
 400fc00:	1085883a 	add	r2,r2,r2
 400fc04:	1085883a 	add	r2,r2,r2
 400fc08:	1007883a 	mov	r3,r2
 400fc0c:	00820034 	movhi	r2,2048
 400fc10:	1885883a 	add	r2,r3,r2
 400fc14:	e0ffff17 	ldw	r3,-4(fp)
 400fc18:	10c00035 	stwio	r3,0(r2)
void clear_screen(alt_u32 color)
{
	// Author's note: This function offers a lot of opportunities for optimization
	for (size_t y = 0; y < CANVAS_HEIGHT; ++y)
	{
		for (size_t x = 0; x < CANVAS_WIDTH; ++x)
 400fc1c:	e0bffe17 	ldw	r2,-8(fp)
 400fc20:	10800044 	addi	r2,r2,1
 400fc24:	e0bffe15 	stw	r2,-8(fp)
 400fc28:	e0bffe17 	ldw	r2,-8(fp)
 400fc2c:	10805030 	cmpltui	r2,r2,320
 400fc30:	103fed1e 	bne	r2,zero,400fbe8 <__alt_data_end+0xfc00fbe8>
#include "DE10_Lite_VGA_Driver.h"

void clear_screen(alt_u32 color)
{
	// Author's note: This function offers a lot of opportunities for optimization
	for (size_t y = 0; y < CANVAS_HEIGHT; ++y)
 400fc34:	e0bffd17 	ldw	r2,-12(fp)
 400fc38:	10800044 	addi	r2,r2,1
 400fc3c:	e0bffd15 	stw	r2,-12(fp)
 400fc40:	e0bffd17 	ldw	r2,-12(fp)
 400fc44:	10803c30 	cmpltui	r2,r2,240
 400fc48:	103fe51e 	bne	r2,zero,400fbe0 <__alt_data_end+0xfc00fbe0>
		for (size_t x = 0; x < CANVAS_WIDTH; ++x)
		{
			write_pixel(x, y, color);
		}
	}
}
 400fc4c:	0001883a 	nop
 400fc50:	e037883a 	mov	sp,fp
 400fc54:	dfc00117 	ldw	ra,4(sp)
 400fc58:	df000017 	ldw	fp,0(sp)
 400fc5c:	dec00204 	addi	sp,sp,8
 400fc60:	f800283a 	ret

0400fc64 <draw_hline>:

void draw_hline(alt_u32 x0, alt_u32 y0, alt_u32 length, alt_u32 color)
{
 400fc64:	defff704 	addi	sp,sp,-36
 400fc68:	dfc00815 	stw	ra,32(sp)
 400fc6c:	df000715 	stw	fp,28(sp)
 400fc70:	df000704 	addi	fp,sp,28
 400fc74:	e13ffc15 	stw	r4,-16(fp)
 400fc78:	e17ffd15 	stw	r5,-12(fp)
 400fc7c:	e1bffe15 	stw	r6,-8(fp)
 400fc80:	e1ffff15 	stw	r7,-4(fp)
	const size_t start_addr = pixel_addr(x0, y0);
 400fc84:	01405004 	movi	r5,320
 400fc88:	e13ffd17 	ldw	r4,-12(fp)
 400fc8c:	4000bd80 	call	4000bd8 <__mulsi3>
 400fc90:	1007883a 	mov	r3,r2
 400fc94:	e0bffc17 	ldw	r2,-16(fp)
 400fc98:	1885883a 	add	r2,r3,r2
 400fc9c:	1085883a 	add	r2,r2,r2
 400fca0:	1085883a 	add	r2,r2,r2
 400fca4:	e0bffa15 	stw	r2,-24(fp)
	const size_t end_addr = start_addr + length * 4;
 400fca8:	e0bffe17 	ldw	r2,-8(fp)
 400fcac:	1085883a 	add	r2,r2,r2
 400fcb0:	1085883a 	add	r2,r2,r2
 400fcb4:	1007883a 	mov	r3,r2
 400fcb8:	e0bffa17 	ldw	r2,-24(fp)
 400fcbc:	1885883a 	add	r2,r3,r2
 400fcc0:	e0bffb15 	stw	r2,-20(fp)
	for (size_t pixel = start_addr; pixel < end_addr; pixel += 4)
 400fcc4:	e0bffa17 	ldw	r2,-24(fp)
 400fcc8:	e0bff915 	stw	r2,-28(fp)
 400fccc:	00000806 	br	400fcf0 <draw_hline+0x8c>
		IOWR_32DIRECT(VGA_IP_0_BASE , pixel, color);
 400fcd0:	e0fff917 	ldw	r3,-28(fp)
 400fcd4:	00820034 	movhi	r2,2048
 400fcd8:	1885883a 	add	r2,r3,r2
 400fcdc:	e0ffff17 	ldw	r3,-4(fp)
 400fce0:	10c00035 	stwio	r3,0(r2)

void draw_hline(alt_u32 x0, alt_u32 y0, alt_u32 length, alt_u32 color)
{
	const size_t start_addr = pixel_addr(x0, y0);
	const size_t end_addr = start_addr + length * 4;
	for (size_t pixel = start_addr; pixel < end_addr; pixel += 4)
 400fce4:	e0bff917 	ldw	r2,-28(fp)
 400fce8:	10800104 	addi	r2,r2,4
 400fcec:	e0bff915 	stw	r2,-28(fp)
 400fcf0:	e0fff917 	ldw	r3,-28(fp)
 400fcf4:	e0bffb17 	ldw	r2,-20(fp)
 400fcf8:	18bff536 	bltu	r3,r2,400fcd0 <__alt_data_end+0xfc00fcd0>
		IOWR_32DIRECT(VGA_IP_0_BASE , pixel, color);
}
 400fcfc:	0001883a 	nop
 400fd00:	e037883a 	mov	sp,fp
 400fd04:	dfc00117 	ldw	ra,4(sp)
 400fd08:	df000017 	ldw	fp,0(sp)
 400fd0c:	dec00204 	addi	sp,sp,8
 400fd10:	f800283a 	ret

0400fd14 <draw_vline>:

void draw_vline(alt_u32 x0, alt_u32 y0, alt_u32 length, alt_u32 color)
{
 400fd14:	defff604 	addi	sp,sp,-40
 400fd18:	dfc00915 	stw	ra,36(sp)
 400fd1c:	df000815 	stw	fp,32(sp)
 400fd20:	df000804 	addi	fp,sp,32
 400fd24:	e13ffc15 	stw	r4,-16(fp)
 400fd28:	e17ffd15 	stw	r5,-12(fp)
 400fd2c:	e1bffe15 	stw	r6,-8(fp)
 400fd30:	e1ffff15 	stw	r7,-4(fp)
	const size_t start_addr = pixel_addr(x0, y0);
 400fd34:	01405004 	movi	r5,320
 400fd38:	e13ffd17 	ldw	r4,-12(fp)
 400fd3c:	4000bd80 	call	4000bd8 <__mulsi3>
 400fd40:	1007883a 	mov	r3,r2
 400fd44:	e0bffc17 	ldw	r2,-16(fp)
 400fd48:	1885883a 	add	r2,r3,r2
 400fd4c:	1085883a 	add	r2,r2,r2
 400fd50:	1085883a 	add	r2,r2,r2
 400fd54:	e0bff915 	stw	r2,-28(fp)
	const size_t row_bytes = 4 * CANVAS_WIDTH;
 400fd58:	00814004 	movi	r2,1280
 400fd5c:	e0bffa15 	stw	r2,-24(fp)
	const size_t end_addr = start_addr + length * row_bytes;
 400fd60:	e17ffa17 	ldw	r5,-24(fp)
 400fd64:	e13ffe17 	ldw	r4,-8(fp)
 400fd68:	4000bd80 	call	4000bd8 <__mulsi3>
 400fd6c:	1007883a 	mov	r3,r2
 400fd70:	e0bff917 	ldw	r2,-28(fp)
 400fd74:	1885883a 	add	r2,r3,r2
 400fd78:	e0bffb15 	stw	r2,-20(fp)
	for (size_t pixel = start_addr; pixel < end_addr; pixel += row_bytes)
 400fd7c:	e0bff917 	ldw	r2,-28(fp)
 400fd80:	e0bff815 	stw	r2,-32(fp)
 400fd84:	00000906 	br	400fdac <draw_vline+0x98>
		IOWR_32DIRECT(VGA_IP_0_BASE , pixel, color);
 400fd88:	e0fff817 	ldw	r3,-32(fp)
 400fd8c:	00820034 	movhi	r2,2048
 400fd90:	1885883a 	add	r2,r3,r2
 400fd94:	e0ffff17 	ldw	r3,-4(fp)
 400fd98:	10c00035 	stwio	r3,0(r2)
void draw_vline(alt_u32 x0, alt_u32 y0, alt_u32 length, alt_u32 color)
{
	const size_t start_addr = pixel_addr(x0, y0);
	const size_t row_bytes = 4 * CANVAS_WIDTH;
	const size_t end_addr = start_addr + length * row_bytes;
	for (size_t pixel = start_addr; pixel < end_addr; pixel += row_bytes)
 400fd9c:	e0fff817 	ldw	r3,-32(fp)
 400fda0:	e0bffa17 	ldw	r2,-24(fp)
 400fda4:	1885883a 	add	r2,r3,r2
 400fda8:	e0bff815 	stw	r2,-32(fp)
 400fdac:	e0fff817 	ldw	r3,-32(fp)
 400fdb0:	e0bffb17 	ldw	r2,-20(fp)
 400fdb4:	18bff436 	bltu	r3,r2,400fd88 <__alt_data_end+0xfc00fd88>
		IOWR_32DIRECT(VGA_IP_0_BASE , pixel, color);
}
 400fdb8:	0001883a 	nop
 400fdbc:	e037883a 	mov	sp,fp
 400fdc0:	dfc00117 	ldw	ra,4(sp)
 400fdc4:	df000017 	ldw	fp,0(sp)
 400fdc8:	dec00204 	addi	sp,sp,8
 400fdcc:	f800283a 	ret

0400fdd0 <swap>:

void swap(alt_u32* p1, alt_u32* p2)
{
 400fdd0:	defffc04 	addi	sp,sp,-16
 400fdd4:	df000315 	stw	fp,12(sp)
 400fdd8:	df000304 	addi	fp,sp,12
 400fddc:	e13ffe15 	stw	r4,-8(fp)
 400fde0:	e17fff15 	stw	r5,-4(fp)
	alt_u32 temp = *p1;
 400fde4:	e0bffe17 	ldw	r2,-8(fp)
 400fde8:	10800017 	ldw	r2,0(r2)
 400fdec:	e0bffd15 	stw	r2,-12(fp)
	*p1 = *p2;
 400fdf0:	e0bfff17 	ldw	r2,-4(fp)
 400fdf4:	10c00017 	ldw	r3,0(r2)
 400fdf8:	e0bffe17 	ldw	r2,-8(fp)
 400fdfc:	10c00015 	stw	r3,0(r2)
	*p2 = temp;
 400fe00:	e0bfff17 	ldw	r2,-4(fp)
 400fe04:	e0fffd17 	ldw	r3,-12(fp)
 400fe08:	10c00015 	stw	r3,0(r2)
}
 400fe0c:	0001883a 	nop
 400fe10:	e037883a 	mov	sp,fp
 400fe14:	df000017 	ldw	fp,0(sp)
 400fe18:	dec00104 	addi	sp,sp,4
 400fe1c:	f800283a 	ret

0400fe20 <draw_angled_line>:

void draw_angled_line(alt_u32 x0, alt_u32 y0, alt_u32 x1, alt_u32 y1, alt_u32 color)
{
 400fe20:	defff304 	addi	sp,sp,-52
 400fe24:	dfc00c15 	stw	ra,48(sp)
 400fe28:	df000b15 	stw	fp,44(sp)
 400fe2c:	df000b04 	addi	fp,sp,44
 400fe30:	e13ffc15 	stw	r4,-16(fp)
 400fe34:	e17ffd15 	stw	r5,-12(fp)
 400fe38:	e1bffe15 	stw	r6,-8(fp)
 400fe3c:	e1ffff15 	stw	r7,-4(fp)
	alt_u32 steep = 0;
 400fe40:	e03ff515 	stw	zero,-44(fp)

	// Adjust angles
	if (abs(x0-x1) < abs(y0-y1))
 400fe44:	e0fffc17 	ldw	r3,-16(fp)
 400fe48:	e0bffe17 	ldw	r2,-8(fp)
 400fe4c:	1885c83a 	sub	r2,r3,r2
 400fe50:	1000010e 	bge	r2,zero,400fe58 <draw_angled_line+0x38>
 400fe54:	0085c83a 	sub	r2,zero,r2
 400fe58:	1009883a 	mov	r4,r2
 400fe5c:	e0fffd17 	ldw	r3,-12(fp)
 400fe60:	e0bfff17 	ldw	r2,-4(fp)
 400fe64:	1885c83a 	sub	r2,r3,r2
 400fe68:	1000010e 	bge	r2,zero,400fe70 <draw_angled_line+0x50>
 400fe6c:	0085c83a 	sub	r2,zero,r2
 400fe70:	20801b0e 	bge	r4,r2,400fee0 <draw_angled_line+0xc0>
	{
		if (y0 > y1)
 400fe74:	e0bffd17 	ldw	r2,-12(fp)
 400fe78:	e0ffff17 	ldw	r3,-4(fp)
 400fe7c:	18800b2e 	bgeu	r3,r2,400feac <draw_angled_line+0x8c>
		{
			swap(&x0, &y1);
 400fe80:	e0ffff04 	addi	r3,fp,-4
 400fe84:	e0bffc04 	addi	r2,fp,-16
 400fe88:	180b883a 	mov	r5,r3
 400fe8c:	1009883a 	mov	r4,r2
 400fe90:	400fdd00 	call	400fdd0 <swap>
			swap(&x1, &y0);
 400fe94:	e0fffd04 	addi	r3,fp,-12
 400fe98:	e0bffe04 	addi	r2,fp,-8
 400fe9c:	180b883a 	mov	r5,r3
 400fea0:	1009883a 	mov	r4,r2
 400fea4:	400fdd00 	call	400fdd0 <swap>
 400fea8:	00000a06 	br	400fed4 <draw_angled_line+0xb4>
		}
		else
		{
			swap(&x0, &y0);
 400feac:	e0fffd04 	addi	r3,fp,-12
 400feb0:	e0bffc04 	addi	r2,fp,-16
 400feb4:	180b883a 	mov	r5,r3
 400feb8:	1009883a 	mov	r4,r2
 400febc:	400fdd00 	call	400fdd0 <swap>
			swap(&x1, &y1);
 400fec0:	e0ffff04 	addi	r3,fp,-4
 400fec4:	e0bffe04 	addi	r2,fp,-8
 400fec8:	180b883a 	mov	r5,r3
 400fecc:	1009883a 	mov	r4,r2
 400fed0:	400fdd00 	call	400fdd0 <swap>
		}
		steep = 1;
 400fed4:	00800044 	movi	r2,1
 400fed8:	e0bff515 	stw	r2,-44(fp)
 400fedc:	00000d06 	br	400ff14 <draw_angled_line+0xf4>
	}
	else if (x0 > x1)
 400fee0:	e0bffc17 	ldw	r2,-16(fp)
 400fee4:	e0fffe17 	ldw	r3,-8(fp)
 400fee8:	18800a2e 	bgeu	r3,r2,400ff14 <draw_angled_line+0xf4>
	{
		swap(&x0, &x1);
 400feec:	e0fffe04 	addi	r3,fp,-8
 400fef0:	e0bffc04 	addi	r2,fp,-16
 400fef4:	180b883a 	mov	r5,r3
 400fef8:	1009883a 	mov	r4,r2
 400fefc:	400fdd00 	call	400fdd0 <swap>
		swap(&y0, &y1);
 400ff00:	e0ffff04 	addi	r3,fp,-4
 400ff04:	e0bffd04 	addi	r2,fp,-12
 400ff08:	180b883a 	mov	r5,r3
 400ff0c:	1009883a 	mov	r4,r2
 400ff10:	400fdd00 	call	400fdd0 <swap>
	}

	const alt_32 dx = x1-x0;
 400ff14:	e0fffe17 	ldw	r3,-8(fp)
 400ff18:	e0bffc17 	ldw	r2,-16(fp)
 400ff1c:	1885c83a 	sub	r2,r3,r2
 400ff20:	e0bff915 	stw	r2,-28(fp)
	const alt_32 dy = y1-y0;
 400ff24:	e0ffff17 	ldw	r3,-4(fp)
 400ff28:	e0bffd17 	ldw	r2,-12(fp)
 400ff2c:	1885c83a 	sub	r2,r3,r2
 400ff30:	e0bffa15 	stw	r2,-24(fp)
	const alt_32 derror = abs(dy)*2;
 400ff34:	e0bffa17 	ldw	r2,-24(fp)
 400ff38:	1000010e 	bge	r2,zero,400ff40 <draw_angled_line+0x120>
 400ff3c:	0085c83a 	sub	r2,zero,r2
 400ff40:	1085883a 	add	r2,r2,r2
 400ff44:	e0bffb15 	stw	r2,-20(fp)
	alt_32 error = 0;
 400ff48:	e03ff615 	stw	zero,-40(fp)
	alt_32 y = y0;
 400ff4c:	e0bffd17 	ldw	r2,-12(fp)
 400ff50:	e0bff715 	stw	r2,-36(fp)
	for (alt_32 x = x0; x <= x1; ++x)
 400ff54:	e0bffc17 	ldw	r2,-16(fp)
 400ff58:	e0bff815 	stw	r2,-32(fp)
 400ff5c:	00003606 	br	4010038 <draw_angled_line+0x218>
	{
		if (steep)
 400ff60:	e0bff517 	ldw	r2,-44(fp)
 400ff64:	10000e26 	beq	r2,zero,400ffa0 <draw_angled_line+0x180>
			write_pixel(y, x, color);
 400ff68:	01405004 	movi	r5,320
 400ff6c:	e13ff817 	ldw	r4,-32(fp)
 400ff70:	4000bd80 	call	4000bd8 <__mulsi3>
 400ff74:	1007883a 	mov	r3,r2
 400ff78:	e0bff717 	ldw	r2,-36(fp)
 400ff7c:	1885883a 	add	r2,r3,r2
 400ff80:	1085883a 	add	r2,r2,r2
 400ff84:	1085883a 	add	r2,r2,r2
 400ff88:	1007883a 	mov	r3,r2
 400ff8c:	00820034 	movhi	r2,2048
 400ff90:	1885883a 	add	r2,r3,r2
 400ff94:	e0c00217 	ldw	r3,8(fp)
 400ff98:	10c00035 	stwio	r3,0(r2)
 400ff9c:	00000d06 	br	400ffd4 <draw_angled_line+0x1b4>
		else
			write_pixel(x, y, color);
 400ffa0:	01405004 	movi	r5,320
 400ffa4:	e13ff717 	ldw	r4,-36(fp)
 400ffa8:	4000bd80 	call	4000bd8 <__mulsi3>
 400ffac:	1007883a 	mov	r3,r2
 400ffb0:	e0bff817 	ldw	r2,-32(fp)
 400ffb4:	1885883a 	add	r2,r3,r2
 400ffb8:	1085883a 	add	r2,r2,r2
 400ffbc:	1085883a 	add	r2,r2,r2
 400ffc0:	1007883a 	mov	r3,r2
 400ffc4:	00820034 	movhi	r2,2048
 400ffc8:	1885883a 	add	r2,r3,r2
 400ffcc:	e0c00217 	ldw	r3,8(fp)
 400ffd0:	10c00035 	stwio	r3,0(r2)

		error += derror;
 400ffd4:	e0fff617 	ldw	r3,-40(fp)
 400ffd8:	e0bffb17 	ldw	r2,-20(fp)
 400ffdc:	1885883a 	add	r2,r3,r2
 400ffe0:	e0bff615 	stw	r2,-40(fp)
		if (error > dx)
 400ffe4:	e0bff617 	ldw	r2,-40(fp)
 400ffe8:	e0fff917 	ldw	r3,-28(fp)
 400ffec:	18800f0e 	bge	r3,r2,401002c <draw_angled_line+0x20c>
		{
			y += (y1 > y0 ? 1 : -1);
 400fff0:	e0bfff17 	ldw	r2,-4(fp)
 400fff4:	e0fffd17 	ldw	r3,-12(fp)
 400fff8:	1880022e 	bgeu	r3,r2,4010004 <draw_angled_line+0x1e4>
 400fffc:	00800044 	movi	r2,1
 4010000:	00000106 	br	4010008 <draw_angled_line+0x1e8>
 4010004:	00bfffc4 	movi	r2,-1
 4010008:	e0fff717 	ldw	r3,-36(fp)
 401000c:	1885883a 	add	r2,r3,r2
 4010010:	e0bff715 	stw	r2,-36(fp)
			error -= dx*2;
 4010014:	e0bff917 	ldw	r2,-28(fp)
 4010018:	1085883a 	add	r2,r2,r2
 401001c:	1007883a 	mov	r3,r2
 4010020:	e0bff617 	ldw	r2,-40(fp)
 4010024:	10c5c83a 	sub	r2,r2,r3
 4010028:	e0bff615 	stw	r2,-40(fp)
	const alt_32 dx = x1-x0;
	const alt_32 dy = y1-y0;
	const alt_32 derror = abs(dy)*2;
	alt_32 error = 0;
	alt_32 y = y0;
	for (alt_32 x = x0; x <= x1; ++x)
 401002c:	e0bff817 	ldw	r2,-32(fp)
 4010030:	10800044 	addi	r2,r2,1
 4010034:	e0bff815 	stw	r2,-32(fp)
 4010038:	e0bff817 	ldw	r2,-32(fp)
 401003c:	e0fffe17 	ldw	r3,-8(fp)
 4010040:	18bfc72e 	bgeu	r3,r2,400ff60 <__alt_data_end+0xfc00ff60>
		{
			y += (y1 > y0 ? 1 : -1);
			error -= dx*2;
		}
	}
}
 4010044:	0001883a 	nop
 4010048:	e037883a 	mov	sp,fp
 401004c:	dfc00117 	ldw	ra,4(sp)
 4010050:	df000017 	ldw	fp,0(sp)
 4010054:	dec00204 	addi	sp,sp,8
 4010058:	f800283a 	ret

0401005c <safe_write_pixel>:

// Only write pixel if both x and y values are within canvas range
void safe_write_pixel(alt_32 x, alt_32 y, alt_u32 color)
{
 401005c:	defffb04 	addi	sp,sp,-20
 4010060:	dfc00415 	stw	ra,16(sp)
 4010064:	df000315 	stw	fp,12(sp)
 4010068:	df000304 	addi	fp,sp,12
 401006c:	e13ffd15 	stw	r4,-12(fp)
 4010070:	e17ffe15 	stw	r5,-8(fp)
 4010074:	e1bfff15 	stw	r6,-4(fp)
	if (x >= 0 && x < CANVAS_WIDTH && y >= 0 && y < CANVAS_HEIGHT)
 4010078:	e0bffd17 	ldw	r2,-12(fp)
 401007c:	10001516 	blt	r2,zero,40100d4 <safe_write_pixel+0x78>
 4010080:	e0bffd17 	ldw	r2,-12(fp)
 4010084:	10805008 	cmpgei	r2,r2,320
 4010088:	1000121e 	bne	r2,zero,40100d4 <safe_write_pixel+0x78>
 401008c:	e0bffe17 	ldw	r2,-8(fp)
 4010090:	10001016 	blt	r2,zero,40100d4 <safe_write_pixel+0x78>
 4010094:	e0bffe17 	ldw	r2,-8(fp)
 4010098:	10803c08 	cmpgei	r2,r2,240
 401009c:	10000d1e 	bne	r2,zero,40100d4 <safe_write_pixel+0x78>
	{
		write_pixel(x, y, color);
 40100a0:	01405004 	movi	r5,320
 40100a4:	e13ffe17 	ldw	r4,-8(fp)
 40100a8:	4000bd80 	call	4000bd8 <__mulsi3>
 40100ac:	1007883a 	mov	r3,r2
 40100b0:	e0bffd17 	ldw	r2,-12(fp)
 40100b4:	1885883a 	add	r2,r3,r2
 40100b8:	1085883a 	add	r2,r2,r2
 40100bc:	1085883a 	add	r2,r2,r2
 40100c0:	1007883a 	mov	r3,r2
 40100c4:	00820034 	movhi	r2,2048
 40100c8:	1885883a 	add	r2,r3,r2
 40100cc:	e0ffff17 	ldw	r3,-4(fp)
 40100d0:	10c00035 	stwio	r3,0(r2)
	}
}
 40100d4:	0001883a 	nop
 40100d8:	e037883a 	mov	sp,fp
 40100dc:	dfc00117 	ldw	ra,4(sp)
 40100e0:	df000017 	ldw	fp,0(sp)
 40100e4:	dec00204 	addi	sp,sp,8
 40100e8:	f800283a 	ret

040100ec <draw_circle>:

void draw_circle(alt_32 x0, alt_32 y0, alt_u32 radius, alt_u32 color)
{
 40100ec:	defff504 	addi	sp,sp,-44
 40100f0:	dfc00a15 	stw	ra,40(sp)
 40100f4:	df000915 	stw	fp,36(sp)
 40100f8:	df000904 	addi	fp,sp,36
 40100fc:	e13ffc15 	stw	r4,-16(fp)
 4010100:	e17ffd15 	stw	r5,-12(fp)
 4010104:	e1bffe15 	stw	r6,-8(fp)
 4010108:	e1ffff15 	stw	r7,-4(fp)
	// Bresenham's circle algorithm
	alt_32 x = radius-1;
 401010c:	e0bffe17 	ldw	r2,-8(fp)
 4010110:	10bfffc4 	addi	r2,r2,-1
 4010114:	e0bff715 	stw	r2,-36(fp)
	alt_32 y = 0;
 4010118:	e03ff815 	stw	zero,-32(fp)
	alt_32 dx = 1;
 401011c:	00800044 	movi	r2,1
 4010120:	e0bff915 	stw	r2,-28(fp)
	alt_32 dy = 1;
 4010124:	00800044 	movi	r2,1
 4010128:	e0bffa15 	stw	r2,-24(fp)
	alt_32 err = dx - (radius << 1);
 401012c:	e0fff917 	ldw	r3,-28(fp)
 4010130:	e0bffe17 	ldw	r2,-8(fp)
 4010134:	1085883a 	add	r2,r2,r2
 4010138:	1885c83a 	sub	r2,r3,r2
 401013c:	e0bffb15 	stw	r2,-20(fp)
	while (x >= y)
 4010140:	00006306 	br	40102d0 <draw_circle+0x1e4>
	{
		safe_write_pixel(x0 + x, y0 + y, color);
 4010144:	e0fffc17 	ldw	r3,-16(fp)
 4010148:	e0bff717 	ldw	r2,-36(fp)
 401014c:	1889883a 	add	r4,r3,r2
 4010150:	e0fffd17 	ldw	r3,-12(fp)
 4010154:	e0bff817 	ldw	r2,-32(fp)
 4010158:	1885883a 	add	r2,r3,r2
 401015c:	e1bfff17 	ldw	r6,-4(fp)
 4010160:	100b883a 	mov	r5,r2
 4010164:	401005c0 	call	401005c <safe_write_pixel>
		safe_write_pixel(x0 + y, y0 + x, color);
 4010168:	e0fffc17 	ldw	r3,-16(fp)
 401016c:	e0bff817 	ldw	r2,-32(fp)
 4010170:	1889883a 	add	r4,r3,r2
 4010174:	e0fffd17 	ldw	r3,-12(fp)
 4010178:	e0bff717 	ldw	r2,-36(fp)
 401017c:	1885883a 	add	r2,r3,r2
 4010180:	e1bfff17 	ldw	r6,-4(fp)
 4010184:	100b883a 	mov	r5,r2
 4010188:	401005c0 	call	401005c <safe_write_pixel>
		safe_write_pixel(x0 - y, y0 + x, color);
 401018c:	e0fffc17 	ldw	r3,-16(fp)
 4010190:	e0bff817 	ldw	r2,-32(fp)
 4010194:	1889c83a 	sub	r4,r3,r2
 4010198:	e0fffd17 	ldw	r3,-12(fp)
 401019c:	e0bff717 	ldw	r2,-36(fp)
 40101a0:	1885883a 	add	r2,r3,r2
 40101a4:	e1bfff17 	ldw	r6,-4(fp)
 40101a8:	100b883a 	mov	r5,r2
 40101ac:	401005c0 	call	401005c <safe_write_pixel>
		safe_write_pixel(x0 - x, y0 + y, color);
 40101b0:	e0fffc17 	ldw	r3,-16(fp)
 40101b4:	e0bff717 	ldw	r2,-36(fp)
 40101b8:	1889c83a 	sub	r4,r3,r2
 40101bc:	e0fffd17 	ldw	r3,-12(fp)
 40101c0:	e0bff817 	ldw	r2,-32(fp)
 40101c4:	1885883a 	add	r2,r3,r2
 40101c8:	e1bfff17 	ldw	r6,-4(fp)
 40101cc:	100b883a 	mov	r5,r2
 40101d0:	401005c0 	call	401005c <safe_write_pixel>
		safe_write_pixel(x0 - x, y0 - y, color);
 40101d4:	e0fffc17 	ldw	r3,-16(fp)
 40101d8:	e0bff717 	ldw	r2,-36(fp)
 40101dc:	1889c83a 	sub	r4,r3,r2
 40101e0:	e0fffd17 	ldw	r3,-12(fp)
 40101e4:	e0bff817 	ldw	r2,-32(fp)
 40101e8:	1885c83a 	sub	r2,r3,r2
 40101ec:	e1bfff17 	ldw	r6,-4(fp)
 40101f0:	100b883a 	mov	r5,r2
 40101f4:	401005c0 	call	401005c <safe_write_pixel>
		safe_write_pixel(x0 - y, y0 - x, color);
 40101f8:	e0fffc17 	ldw	r3,-16(fp)
 40101fc:	e0bff817 	ldw	r2,-32(fp)
 4010200:	1889c83a 	sub	r4,r3,r2
 4010204:	e0fffd17 	ldw	r3,-12(fp)
 4010208:	e0bff717 	ldw	r2,-36(fp)
 401020c:	1885c83a 	sub	r2,r3,r2
 4010210:	e1bfff17 	ldw	r6,-4(fp)
 4010214:	100b883a 	mov	r5,r2
 4010218:	401005c0 	call	401005c <safe_write_pixel>
		safe_write_pixel(x0 + y, y0 - x, color);
 401021c:	e0fffc17 	ldw	r3,-16(fp)
 4010220:	e0bff817 	ldw	r2,-32(fp)
 4010224:	1889883a 	add	r4,r3,r2
 4010228:	e0fffd17 	ldw	r3,-12(fp)
 401022c:	e0bff717 	ldw	r2,-36(fp)
 4010230:	1885c83a 	sub	r2,r3,r2
 4010234:	e1bfff17 	ldw	r6,-4(fp)
 4010238:	100b883a 	mov	r5,r2
 401023c:	401005c0 	call	401005c <safe_write_pixel>
		safe_write_pixel(x0 + x, y0 - y, color);
 4010240:	e0fffc17 	ldw	r3,-16(fp)
 4010244:	e0bff717 	ldw	r2,-36(fp)
 4010248:	1889883a 	add	r4,r3,r2
 401024c:	e0fffd17 	ldw	r3,-12(fp)
 4010250:	e0bff817 	ldw	r2,-32(fp)
 4010254:	1885c83a 	sub	r2,r3,r2
 4010258:	e1bfff17 	ldw	r6,-4(fp)
 401025c:	100b883a 	mov	r5,r2
 4010260:	401005c0 	call	401005c <safe_write_pixel>

		if (err <= 0)
 4010264:	e0bffb17 	ldw	r2,-20(fp)
 4010268:	00800a16 	blt	zero,r2,4010294 <draw_circle+0x1a8>
		{
			y++;
 401026c:	e0bff817 	ldw	r2,-32(fp)
 4010270:	10800044 	addi	r2,r2,1
 4010274:	e0bff815 	stw	r2,-32(fp)
			err += dy;
 4010278:	e0fffb17 	ldw	r3,-20(fp)
 401027c:	e0bffa17 	ldw	r2,-24(fp)
 4010280:	1885883a 	add	r2,r3,r2
 4010284:	e0bffb15 	stw	r2,-20(fp)
			dy += 2;
 4010288:	e0bffa17 	ldw	r2,-24(fp)
 401028c:	10800084 	addi	r2,r2,2
 4010290:	e0bffa15 	stw	r2,-24(fp)
		}
		if (err > 0)
 4010294:	e0bffb17 	ldw	r2,-20(fp)
 4010298:	00800d0e 	bge	zero,r2,40102d0 <draw_circle+0x1e4>
		{
			x--;
 401029c:	e0bff717 	ldw	r2,-36(fp)
 40102a0:	10bfffc4 	addi	r2,r2,-1
 40102a4:	e0bff715 	stw	r2,-36(fp)
			dx += 2;
 40102a8:	e0bff917 	ldw	r2,-28(fp)
 40102ac:	10800084 	addi	r2,r2,2
 40102b0:	e0bff915 	stw	r2,-28(fp)
			err += dx - (radius << 1);
 40102b4:	e0fff917 	ldw	r3,-28(fp)
 40102b8:	e0bffe17 	ldw	r2,-8(fp)
 40102bc:	1085883a 	add	r2,r2,r2
 40102c0:	1887c83a 	sub	r3,r3,r2
 40102c4:	e0bffb17 	ldw	r2,-20(fp)
 40102c8:	1885883a 	add	r2,r3,r2
 40102cc:	e0bffb15 	stw	r2,-20(fp)
	alt_32 x = radius-1;
	alt_32 y = 0;
	alt_32 dx = 1;
	alt_32 dy = 1;
	alt_32 err = dx - (radius << 1);
	while (x >= y)
 40102d0:	e0fff717 	ldw	r3,-36(fp)
 40102d4:	e0bff817 	ldw	r2,-32(fp)
 40102d8:	18bf9a0e 	bge	r3,r2,4010144 <__alt_data_end+0xfc010144>
			x--;
			dx += 2;
			err += dx - (radius << 1);
		}
	}
}
 40102dc:	0001883a 	nop
 40102e0:	e037883a 	mov	sp,fp
 40102e4:	dfc00117 	ldw	ra,4(sp)
 40102e8:	df000017 	ldw	fp,0(sp)
 40102ec:	dec00204 	addi	sp,sp,8
 40102f0:	f800283a 	ret

040102f4 <safey_write_pixel>:

// Only write pixel if y value is within canvas height, x is assumed correct
void safey_write_pixel(alt_32 x, alt_32 y, alt_u32 color)
{
 40102f4:	defffb04 	addi	sp,sp,-20
 40102f8:	dfc00415 	stw	ra,16(sp)
 40102fc:	df000315 	stw	fp,12(sp)
 4010300:	df000304 	addi	fp,sp,12
 4010304:	e13ffd15 	stw	r4,-12(fp)
 4010308:	e17ffe15 	stw	r5,-8(fp)
 401030c:	e1bfff15 	stw	r6,-4(fp)
	if (y >= 0 && y < CANVAS_HEIGHT)
 4010310:	e0bffe17 	ldw	r2,-8(fp)
 4010314:	10001016 	blt	r2,zero,4010358 <safey_write_pixel+0x64>
 4010318:	e0bffe17 	ldw	r2,-8(fp)
 401031c:	10803c08 	cmpgei	r2,r2,240
 4010320:	10000d1e 	bne	r2,zero,4010358 <safey_write_pixel+0x64>
	{
		write_pixel(x, y, color);
 4010324:	01405004 	movi	r5,320
 4010328:	e13ffe17 	ldw	r4,-8(fp)
 401032c:	4000bd80 	call	4000bd8 <__mulsi3>
 4010330:	1007883a 	mov	r3,r2
 4010334:	e0bffd17 	ldw	r2,-12(fp)
 4010338:	1885883a 	add	r2,r3,r2
 401033c:	1085883a 	add	r2,r2,r2
 4010340:	1085883a 	add	r2,r2,r2
 4010344:	1007883a 	mov	r3,r2
 4010348:	00820034 	movhi	r2,2048
 401034c:	1885883a 	add	r2,r3,r2
 4010350:	e0ffff17 	ldw	r3,-4(fp)
 4010354:	10c00035 	stwio	r3,0(r2)
	}
}
 4010358:	0001883a 	nop
 401035c:	e037883a 	mov	sp,fp
 4010360:	dfc00117 	ldw	ra,4(sp)
 4010364:	df000017 	ldw	fp,0(sp)
 4010368:	dec00204 	addi	sp,sp,8
 401036c:	f800283a 	ret

04010370 <draw_filled_circle>:

void draw_filled_circle(alt_32 x0, alt_32 y0, alt_u32 radius, alt_u32 color)
{
 4010370:	defff104 	addi	sp,sp,-60
 4010374:	dfc00e15 	stw	ra,56(sp)
 4010378:	df000d15 	stw	fp,52(sp)
 401037c:	df000d04 	addi	fp,sp,52
 4010380:	e13ffc15 	stw	r4,-16(fp)
 4010384:	e17ffd15 	stw	r5,-12(fp)
 4010388:	e1bffe15 	stw	r6,-8(fp)
 401038c:	e1ffff15 	stw	r7,-4(fp)
	alt_32 x = radius;
 4010390:	e0bffe17 	ldw	r2,-8(fp)
 4010394:	e0bff315 	stw	r2,-52(fp)
	alt_32 y = 0;
 4010398:	e03ff415 	stw	zero,-48(fp)
	alt_32 xChange = 1 - (radius << 1);
 401039c:	e0bffe17 	ldw	r2,-8(fp)
 40103a0:	1085883a 	add	r2,r2,r2
 40103a4:	1007883a 	mov	r3,r2
 40103a8:	00800044 	movi	r2,1
 40103ac:	10c5c83a 	sub	r2,r2,r3
 40103b0:	e0bff515 	stw	r2,-44(fp)
	alt_32 yChange = 0;
 40103b4:	e03ff615 	stw	zero,-40(fp)
	alt_32 radiusError = 0;
 40103b8:	e03ff715 	stw	zero,-36(fp)

	while (x >= y)
 40103bc:	00007006 	br	4010580 <draw_filled_circle+0x210>
	{
		alt_32 xStart = x0 - x;
 40103c0:	e0fffc17 	ldw	r3,-16(fp)
 40103c4:	e0bff317 	ldw	r2,-52(fp)
 40103c8:	1885c83a 	sub	r2,r3,r2
 40103cc:	e0bffa15 	stw	r2,-24(fp)
		alt_32 xEnd = x0 + x;
 40103d0:	e0fffc17 	ldw	r3,-16(fp)
 40103d4:	e0bff317 	ldw	r2,-52(fp)
 40103d8:	1885883a 	add	r2,r3,r2
 40103dc:	e0bffb15 	stw	r2,-20(fp)
		if (xStart < CANVAS_WIDTH)
 40103e0:	e0bffa17 	ldw	r2,-24(fp)
 40103e4:	10805008 	cmpgei	r2,r2,320
 40103e8:	1000201e 	bne	r2,zero,401046c <draw_filled_circle+0xfc>
		{
			xStart = (xStart > 0 ? xStart : 0);
 40103ec:	e0bffa17 	ldw	r2,-24(fp)
 40103f0:	1000010e 	bge	r2,zero,40103f8 <draw_filled_circle+0x88>
 40103f4:	0005883a 	mov	r2,zero
 40103f8:	e0bffa15 	stw	r2,-24(fp)
			xEnd = (xEnd < CANVAS_WIDTH-1 ? xEnd : CANVAS_WIDTH-1);
 40103fc:	e0bffb17 	ldw	r2,-20(fp)
 4010400:	10c05010 	cmplti	r3,r2,320
 4010404:	1800011e 	bne	r3,zero,401040c <draw_filled_circle+0x9c>
 4010408:	00804fc4 	movi	r2,319
 401040c:	e0bffb15 	stw	r2,-20(fp)
			for (alt_32 i = xStart; i <= xEnd; i++)
 4010410:	e0bffa17 	ldw	r2,-24(fp)
 4010414:	e0bff815 	stw	r2,-32(fp)
 4010418:	00001106 	br	4010460 <draw_filled_circle+0xf0>
			{
				safey_write_pixel(i, y0 + y, color);
 401041c:	e0fffd17 	ldw	r3,-12(fp)
 4010420:	e0bff417 	ldw	r2,-48(fp)
 4010424:	1885883a 	add	r2,r3,r2
 4010428:	e1bfff17 	ldw	r6,-4(fp)
 401042c:	100b883a 	mov	r5,r2
 4010430:	e13ff817 	ldw	r4,-32(fp)
 4010434:	40102f40 	call	40102f4 <safey_write_pixel>
				safey_write_pixel(i, y0 - y, color);
 4010438:	e0fffd17 	ldw	r3,-12(fp)
 401043c:	e0bff417 	ldw	r2,-48(fp)
 4010440:	1885c83a 	sub	r2,r3,r2
 4010444:	e1bfff17 	ldw	r6,-4(fp)
 4010448:	100b883a 	mov	r5,r2
 401044c:	e13ff817 	ldw	r4,-32(fp)
 4010450:	40102f40 	call	40102f4 <safey_write_pixel>
		alt_32 xEnd = x0 + x;
		if (xStart < CANVAS_WIDTH)
		{
			xStart = (xStart > 0 ? xStart : 0);
			xEnd = (xEnd < CANVAS_WIDTH-1 ? xEnd : CANVAS_WIDTH-1);
			for (alt_32 i = xStart; i <= xEnd; i++)
 4010454:	e0bff817 	ldw	r2,-32(fp)
 4010458:	10800044 	addi	r2,r2,1
 401045c:	e0bff815 	stw	r2,-32(fp)
 4010460:	e0bff817 	ldw	r2,-32(fp)
 4010464:	e0fffb17 	ldw	r3,-20(fp)
 4010468:	18bfec0e 	bge	r3,r2,401041c <__alt_data_end+0xfc01041c>
			{
				safey_write_pixel(i, y0 + y, color);
				safey_write_pixel(i, y0 - y, color);
			}
		}
		xStart = x0 - y;
 401046c:	e0fffc17 	ldw	r3,-16(fp)
 4010470:	e0bff417 	ldw	r2,-48(fp)
 4010474:	1885c83a 	sub	r2,r3,r2
 4010478:	e0bffa15 	stw	r2,-24(fp)
		xEnd = x0 + y;
 401047c:	e0fffc17 	ldw	r3,-16(fp)
 4010480:	e0bff417 	ldw	r2,-48(fp)
 4010484:	1885883a 	add	r2,r3,r2
 4010488:	e0bffb15 	stw	r2,-20(fp)
		if (xStart < CANVAS_WIDTH)
 401048c:	e0bffa17 	ldw	r2,-24(fp)
 4010490:	10805008 	cmpgei	r2,r2,320
 4010494:	1000201e 	bne	r2,zero,4010518 <draw_filled_circle+0x1a8>
		{
			xStart = (xStart > 0 ? xStart : 0);
 4010498:	e0bffa17 	ldw	r2,-24(fp)
 401049c:	1000010e 	bge	r2,zero,40104a4 <draw_filled_circle+0x134>
 40104a0:	0005883a 	mov	r2,zero
 40104a4:	e0bffa15 	stw	r2,-24(fp)
			xEnd = (xEnd < CANVAS_WIDTH-1 ? xEnd : CANVAS_WIDTH-1);
 40104a8:	e0bffb17 	ldw	r2,-20(fp)
 40104ac:	10c05010 	cmplti	r3,r2,320
 40104b0:	1800011e 	bne	r3,zero,40104b8 <draw_filled_circle+0x148>
 40104b4:	00804fc4 	movi	r2,319
 40104b8:	e0bffb15 	stw	r2,-20(fp)
			for (alt_32 i = xStart; i <= xEnd; i++)
 40104bc:	e0bffa17 	ldw	r2,-24(fp)
 40104c0:	e0bff915 	stw	r2,-28(fp)
 40104c4:	00001106 	br	401050c <draw_filled_circle+0x19c>
			{
				safey_write_pixel(i, y0 + x, color);
 40104c8:	e0fffd17 	ldw	r3,-12(fp)
 40104cc:	e0bff317 	ldw	r2,-52(fp)
 40104d0:	1885883a 	add	r2,r3,r2
 40104d4:	e1bfff17 	ldw	r6,-4(fp)
 40104d8:	100b883a 	mov	r5,r2
 40104dc:	e13ff917 	ldw	r4,-28(fp)
 40104e0:	40102f40 	call	40102f4 <safey_write_pixel>
				safey_write_pixel(i, y0 - x, color);
 40104e4:	e0fffd17 	ldw	r3,-12(fp)
 40104e8:	e0bff317 	ldw	r2,-52(fp)
 40104ec:	1885c83a 	sub	r2,r3,r2
 40104f0:	e1bfff17 	ldw	r6,-4(fp)
 40104f4:	100b883a 	mov	r5,r2
 40104f8:	e13ff917 	ldw	r4,-28(fp)
 40104fc:	40102f40 	call	40102f4 <safey_write_pixel>
		xEnd = x0 + y;
		if (xStart < CANVAS_WIDTH)
		{
			xStart = (xStart > 0 ? xStart : 0);
			xEnd = (xEnd < CANVAS_WIDTH-1 ? xEnd : CANVAS_WIDTH-1);
			for (alt_32 i = xStart; i <= xEnd; i++)
 4010500:	e0bff917 	ldw	r2,-28(fp)
 4010504:	10800044 	addi	r2,r2,1
 4010508:	e0bff915 	stw	r2,-28(fp)
 401050c:	e0bff917 	ldw	r2,-28(fp)
 4010510:	e0fffb17 	ldw	r3,-20(fp)
 4010514:	18bfec0e 	bge	r3,r2,40104c8 <__alt_data_end+0xfc0104c8>
				safey_write_pixel(i, y0 + x, color);
				safey_write_pixel(i, y0 - x, color);
			}
		}

		y++;
 4010518:	e0bff417 	ldw	r2,-48(fp)
 401051c:	10800044 	addi	r2,r2,1
 4010520:	e0bff415 	stw	r2,-48(fp)
		radiusError += yChange;
 4010524:	e0fff717 	ldw	r3,-36(fp)
 4010528:	e0bff617 	ldw	r2,-40(fp)
 401052c:	1885883a 	add	r2,r3,r2
 4010530:	e0bff715 	stw	r2,-36(fp)
		yChange += 2;
 4010534:	e0bff617 	ldw	r2,-40(fp)
 4010538:	10800084 	addi	r2,r2,2
 401053c:	e0bff615 	stw	r2,-40(fp)
		if (((radiusError << 1) + xChange) > 0)
 4010540:	e0bff717 	ldw	r2,-36(fp)
 4010544:	1085883a 	add	r2,r2,r2
 4010548:	1007883a 	mov	r3,r2
 401054c:	e0bff517 	ldw	r2,-44(fp)
 4010550:	1885883a 	add	r2,r3,r2
 4010554:	00800a0e 	bge	zero,r2,4010580 <draw_filled_circle+0x210>
		{
			x--;
 4010558:	e0bff317 	ldw	r2,-52(fp)
 401055c:	10bfffc4 	addi	r2,r2,-1
 4010560:	e0bff315 	stw	r2,-52(fp)
			radiusError += xChange;
 4010564:	e0fff717 	ldw	r3,-36(fp)
 4010568:	e0bff517 	ldw	r2,-44(fp)
 401056c:	1885883a 	add	r2,r3,r2
 4010570:	e0bff715 	stw	r2,-36(fp)
			xChange += 2;
 4010574:	e0bff517 	ldw	r2,-44(fp)
 4010578:	10800084 	addi	r2,r2,2
 401057c:	e0bff515 	stw	r2,-44(fp)
	alt_32 y = 0;
	alt_32 xChange = 1 - (radius << 1);
	alt_32 yChange = 0;
	alt_32 radiusError = 0;

	while (x >= y)
 4010580:	e0fff317 	ldw	r3,-52(fp)
 4010584:	e0bff417 	ldw	r2,-48(fp)
 4010588:	18bf8d0e 	bge	r3,r2,40103c0 <__alt_data_end+0xfc0103c0>
			x--;
			radiusError += xChange;
			xChange += 2;
		}
	}
}
 401058c:	0001883a 	nop
 4010590:	e037883a 	mov	sp,fp
 4010594:	dfc00117 	ldw	ra,4(sp)
 4010598:	df000017 	ldw	fp,0(sp)
 401059c:	dec00204 	addi	sp,sp,8
 40105a0:	f800283a 	ret

040105a4 <tty_print>:

void tty_print(alt_32 x0, alt_32 y0, const char* sz_tty, alt_u32 color, alt_u32 BGcolor)
{
 40105a4:	defff704 	addi	sp,sp,-36
 40105a8:	dfc00815 	stw	ra,32(sp)
 40105ac:	df000715 	stw	fp,28(sp)
 40105b0:	df000704 	addi	fp,sp,28
 40105b4:	e13ffc15 	stw	r4,-16(fp)
 40105b8:	e17ffd15 	stw	r5,-12(fp)
 40105bc:	e1bffe15 	stw	r6,-8(fp)
 40105c0:	e1ffff15 	stw	r7,-4(fp)
	const size_t n = strlen(sz_tty);
 40105c4:	e13ffe17 	ldw	r4,-8(fp)
 40105c8:	4001c580 	call	4001c58 <strlen>
 40105cc:	e0bffb15 	stw	r2,-20(fp)
	for (size_t i = 0; i < n; ++i)
 40105d0:	e03ffa15 	stw	zero,-24(fp)
 40105d4:	00001506 	br	401062c <tty_print+0x88>
	{
		char_print(x0 + TTY_CHAR_WIDTH*i, y0, sz_tty[i], color, BGcolor);
 40105d8:	e0bffa17 	ldw	r2,-24(fp)
 40105dc:	100690fa 	slli	r3,r2,3
 40105e0:	e0bffc17 	ldw	r2,-16(fp)
 40105e4:	1885883a 	add	r2,r3,r2
 40105e8:	1009883a 	mov	r4,r2
 40105ec:	e0fffe17 	ldw	r3,-8(fp)
 40105f0:	e0bffa17 	ldw	r2,-24(fp)
 40105f4:	1885883a 	add	r2,r3,r2
 40105f8:	10800003 	ldbu	r2,0(r2)
 40105fc:	10c03fcc 	andi	r3,r2,255
 4010600:	18c0201c 	xori	r3,r3,128
 4010604:	18ffe004 	addi	r3,r3,-128
 4010608:	e0800217 	ldw	r2,8(fp)
 401060c:	d8800015 	stw	r2,0(sp)
 4010610:	e1ffff17 	ldw	r7,-4(fp)
 4010614:	180d883a 	mov	r6,r3
 4010618:	e17ffd17 	ldw	r5,-12(fp)
 401061c:	40106500 	call	4010650 <char_print>
}

void tty_print(alt_32 x0, alt_32 y0, const char* sz_tty, alt_u32 color, alt_u32 BGcolor)
{
	const size_t n = strlen(sz_tty);
	for (size_t i = 0; i < n; ++i)
 4010620:	e0bffa17 	ldw	r2,-24(fp)
 4010624:	10800044 	addi	r2,r2,1
 4010628:	e0bffa15 	stw	r2,-24(fp)
 401062c:	e0fffa17 	ldw	r3,-24(fp)
 4010630:	e0bffb17 	ldw	r2,-20(fp)
 4010634:	18bfe836 	bltu	r3,r2,40105d8 <__alt_data_end+0xfc0105d8>
	{
		char_print(x0 + TTY_CHAR_WIDTH*i, y0, sz_tty[i], color, BGcolor);
	}
}
 4010638:	0001883a 	nop
 401063c:	e037883a 	mov	sp,fp
 4010640:	dfc00117 	ldw	ra,4(sp)
 4010644:	df000017 	ldw	fp,0(sp)
 4010648:	dec00204 	addi	sp,sp,8
 401064c:	f800283a 	ret

04010650 <char_print>:

void char_print(alt_32 x0, alt_32 y0, const char tty_char, alt_u32 color, alt_u32 BGcolor)
{
 4010650:	deffef04 	addi	sp,sp,-68
 4010654:	dfc01015 	stw	ra,64(sp)
 4010658:	df000f15 	stw	fp,60(sp)
 401065c:	df000f04 	addi	fp,sp,60
 4010660:	e13ffc15 	stw	r4,-16(fp)
 4010664:	e17ffd15 	stw	r5,-12(fp)
 4010668:	3005883a 	mov	r2,r6
 401066c:	e1ffff15 	stw	r7,-4(fp)
 4010670:	e0bffe05 	stb	r2,-8(fp)
	alt_32 pry = y0;
 4010674:	e0bffd17 	ldw	r2,-12(fp)
 4010678:	e0bff115 	stw	r2,-60(fp)
	// upper half
	const alt_u32 char_half_height = TTY_CHAR_HEIGHT>>1;
 401067c:	00800104 	movi	r2,4
 4010680:	e0bff915 	stw	r2,-28(fp)
	alt_u32 dot = upper_char_line(tty_char - TTY_CHAR_OFFSET);
 4010684:	e0bffe03 	ldbu	r2,-8(fp)
 4010688:	10bff804 	addi	r2,r2,-32
 401068c:	10803fcc 	andi	r2,r2,255
 4010690:	1009883a 	mov	r4,r2
 4010694:	4011fc40 	call	4011fc4 <upper_char_line>
 4010698:	e0bff215 	stw	r2,-56(fp)
	for (size_t row = 0; row < char_half_height; ++row)
 401069c:	e03ff315 	stw	zero,-52(fp)
 40106a0:	00003706 	br	4010780 <char_print+0x130>
	{
		alt_32 prx = x0;
 40106a4:	e0bffc17 	ldw	r2,-16(fp)
 40106a8:	e0bff415 	stw	r2,-48(fp)
		if (pry >= 0 && pry < CANVAS_HEIGHT)
 40106ac:	e0bff117 	ldw	r2,-60(fp)
 40106b0:	10002a16 	blt	r2,zero,401075c <char_print+0x10c>
 40106b4:	e0bff117 	ldw	r2,-60(fp)
 40106b8:	10803c08 	cmpgei	r2,r2,240
 40106bc:	1000271e 	bne	r2,zero,401075c <char_print+0x10c>
		{
			for (size_t column = 0; column < TTY_CHAR_WIDTH; ++column)
 40106c0:	e03ff515 	stw	zero,-44(fp)
 40106c4:	00002106 	br	401074c <char_print+0xfc>
			{
				if (prx >= 0 && prx < CANVAS_WIDTH)
 40106c8:	e0bff417 	ldw	r2,-48(fp)
 40106cc:	10001616 	blt	r2,zero,4010728 <char_print+0xd8>
 40106d0:	e0bff417 	ldw	r2,-48(fp)
 40106d4:	10805008 	cmpgei	r2,r2,320
 40106d8:	1000131e 	bne	r2,zero,4010728 <char_print+0xd8>
				{
					const alt_u32 dotcolor = (0x80000000&dot) ? color : BGcolor;
 40106dc:	e0bff217 	ldw	r2,-56(fp)
 40106e0:	1000020e 	bge	r2,zero,40106ec <char_print+0x9c>
 40106e4:	e0bfff17 	ldw	r2,-4(fp)
 40106e8:	00000106 	br	40106f0 <char_print+0xa0>
 40106ec:	e0800217 	ldw	r2,8(fp)
 40106f0:	e0bffa15 	stw	r2,-24(fp)
					write_pixel(prx, pry, dotcolor);
 40106f4:	01405004 	movi	r5,320
 40106f8:	e13ff117 	ldw	r4,-60(fp)
 40106fc:	4000bd80 	call	4000bd8 <__mulsi3>
 4010700:	1007883a 	mov	r3,r2
 4010704:	e0bff417 	ldw	r2,-48(fp)
 4010708:	1885883a 	add	r2,r3,r2
 401070c:	1085883a 	add	r2,r2,r2
 4010710:	1085883a 	add	r2,r2,r2
 4010714:	1007883a 	mov	r3,r2
 4010718:	00820034 	movhi	r2,2048
 401071c:	1885883a 	add	r2,r3,r2
 4010720:	e0fffa17 	ldw	r3,-24(fp)
 4010724:	10c00035 	stwio	r3,0(r2)
				}
				dot <<= 1;
 4010728:	e0bff217 	ldw	r2,-56(fp)
 401072c:	1085883a 	add	r2,r2,r2
 4010730:	e0bff215 	stw	r2,-56(fp)
				++prx;
 4010734:	e0bff417 	ldw	r2,-48(fp)
 4010738:	10800044 	addi	r2,r2,1
 401073c:	e0bff415 	stw	r2,-48(fp)
	for (size_t row = 0; row < char_half_height; ++row)
	{
		alt_32 prx = x0;
		if (pry >= 0 && pry < CANVAS_HEIGHT)
		{
			for (size_t column = 0; column < TTY_CHAR_WIDTH; ++column)
 4010740:	e0bff517 	ldw	r2,-44(fp)
 4010744:	10800044 	addi	r2,r2,1
 4010748:	e0bff515 	stw	r2,-44(fp)
 401074c:	e0bff517 	ldw	r2,-44(fp)
 4010750:	10800230 	cmpltui	r2,r2,8
 4010754:	103fdc1e 	bne	r2,zero,40106c8 <__alt_data_end+0xfc0106c8>
 4010758:	00000306 	br	4010768 <char_print+0x118>
				++prx;
			}
		}
		else
		{
			dot <<= TTY_CHAR_WIDTH;
 401075c:	e0bff217 	ldw	r2,-56(fp)
 4010760:	1004923a 	slli	r2,r2,8
 4010764:	e0bff215 	stw	r2,-56(fp)
		}
		++pry;
 4010768:	e0bff117 	ldw	r2,-60(fp)
 401076c:	10800044 	addi	r2,r2,1
 4010770:	e0bff115 	stw	r2,-60(fp)
{
	alt_32 pry = y0;
	// upper half
	const alt_u32 char_half_height = TTY_CHAR_HEIGHT>>1;
	alt_u32 dot = upper_char_line(tty_char - TTY_CHAR_OFFSET);
	for (size_t row = 0; row < char_half_height; ++row)
 4010774:	e0bff317 	ldw	r2,-52(fp)
 4010778:	10800044 	addi	r2,r2,1
 401077c:	e0bff315 	stw	r2,-52(fp)
 4010780:	e0fff317 	ldw	r3,-52(fp)
 4010784:	e0bff917 	ldw	r2,-28(fp)
 4010788:	18bfc636 	bltu	r3,r2,40106a4 <__alt_data_end+0xfc0106a4>
			dot <<= TTY_CHAR_WIDTH;
		}
		++pry;
	}
	// lower half
	dot = lower_char_line(tty_char - TTY_CHAR_OFFSET);
 401078c:	e0bffe03 	ldbu	r2,-8(fp)
 4010790:	10bff804 	addi	r2,r2,-32
 4010794:	10803fcc 	andi	r2,r2,255
 4010798:	1009883a 	mov	r4,r2
 401079c:	40120040 	call	4012004 <lower_char_line>
 40107a0:	e0bff215 	stw	r2,-56(fp)
	for (size_t row = 0; row < char_half_height; ++row)
 40107a4:	e03ff615 	stw	zero,-40(fp)
 40107a8:	00003706 	br	4010888 <char_print+0x238>
	{
		alt_32 prx = x0;
 40107ac:	e0bffc17 	ldw	r2,-16(fp)
 40107b0:	e0bff715 	stw	r2,-36(fp)
		if (pry >= 0 && pry < CANVAS_HEIGHT)
 40107b4:	e0bff117 	ldw	r2,-60(fp)
 40107b8:	10002a16 	blt	r2,zero,4010864 <char_print+0x214>
 40107bc:	e0bff117 	ldw	r2,-60(fp)
 40107c0:	10803c08 	cmpgei	r2,r2,240
 40107c4:	1000271e 	bne	r2,zero,4010864 <char_print+0x214>
		{
			for (size_t column = 0; column < TTY_CHAR_WIDTH; ++column)
 40107c8:	e03ff815 	stw	zero,-32(fp)
 40107cc:	00002106 	br	4010854 <char_print+0x204>
			{
				if (prx >= 0 && prx < CANVAS_WIDTH)
 40107d0:	e0bff717 	ldw	r2,-36(fp)
 40107d4:	10001616 	blt	r2,zero,4010830 <char_print+0x1e0>
 40107d8:	e0bff717 	ldw	r2,-36(fp)
 40107dc:	10805008 	cmpgei	r2,r2,320
 40107e0:	1000131e 	bne	r2,zero,4010830 <char_print+0x1e0>
				{
					const alt_u32 dotcolor = (0x80000000&dot) ? color : BGcolor;
 40107e4:	e0bff217 	ldw	r2,-56(fp)
 40107e8:	1000020e 	bge	r2,zero,40107f4 <char_print+0x1a4>
 40107ec:	e0bfff17 	ldw	r2,-4(fp)
 40107f0:	00000106 	br	40107f8 <char_print+0x1a8>
 40107f4:	e0800217 	ldw	r2,8(fp)
 40107f8:	e0bffb15 	stw	r2,-20(fp)
					write_pixel(prx, pry, dotcolor);
 40107fc:	01405004 	movi	r5,320
 4010800:	e13ff117 	ldw	r4,-60(fp)
 4010804:	4000bd80 	call	4000bd8 <__mulsi3>
 4010808:	1007883a 	mov	r3,r2
 401080c:	e0bff717 	ldw	r2,-36(fp)
 4010810:	1885883a 	add	r2,r3,r2
 4010814:	1085883a 	add	r2,r2,r2
 4010818:	1085883a 	add	r2,r2,r2
 401081c:	1007883a 	mov	r3,r2
 4010820:	00820034 	movhi	r2,2048
 4010824:	1885883a 	add	r2,r3,r2
 4010828:	e0fffb17 	ldw	r3,-20(fp)
 401082c:	10c00035 	stwio	r3,0(r2)
				}
				dot <<= 1;
 4010830:	e0bff217 	ldw	r2,-56(fp)
 4010834:	1085883a 	add	r2,r2,r2
 4010838:	e0bff215 	stw	r2,-56(fp)
				++prx;
 401083c:	e0bff717 	ldw	r2,-36(fp)
 4010840:	10800044 	addi	r2,r2,1
 4010844:	e0bff715 	stw	r2,-36(fp)
	for (size_t row = 0; row < char_half_height; ++row)
	{
		alt_32 prx = x0;
		if (pry >= 0 && pry < CANVAS_HEIGHT)
		{
			for (size_t column = 0; column < TTY_CHAR_WIDTH; ++column)
 4010848:	e0bff817 	ldw	r2,-32(fp)
 401084c:	10800044 	addi	r2,r2,1
 4010850:	e0bff815 	stw	r2,-32(fp)
 4010854:	e0bff817 	ldw	r2,-32(fp)
 4010858:	10800230 	cmpltui	r2,r2,8
 401085c:	103fdc1e 	bne	r2,zero,40107d0 <__alt_data_end+0xfc0107d0>
 4010860:	00000306 	br	4010870 <char_print+0x220>
				++prx;
			}
		}
		else
		{
			dot <<= TTY_CHAR_WIDTH;
 4010864:	e0bff217 	ldw	r2,-56(fp)
 4010868:	1004923a 	slli	r2,r2,8
 401086c:	e0bff215 	stw	r2,-56(fp)
		}
		++pry;
 4010870:	e0bff117 	ldw	r2,-60(fp)
 4010874:	10800044 	addi	r2,r2,1
 4010878:	e0bff115 	stw	r2,-60(fp)
		}
		++pry;
	}
	// lower half
	dot = lower_char_line(tty_char - TTY_CHAR_OFFSET);
	for (size_t row = 0; row < char_half_height; ++row)
 401087c:	e0bff617 	ldw	r2,-40(fp)
 4010880:	10800044 	addi	r2,r2,1
 4010884:	e0bff615 	stw	r2,-40(fp)
 4010888:	e0fff617 	ldw	r3,-40(fp)
 401088c:	e0bff917 	ldw	r2,-28(fp)
 4010890:	18bfc636 	bltu	r3,r2,40107ac <__alt_data_end+0xfc0107ac>
		{
			dot <<= TTY_CHAR_WIDTH;
		}
		++pry;
	}
}
 4010894:	0001883a 	nop
 4010898:	e037883a 	mov	sp,fp
 401089c:	dfc00117 	ldw	ra,4(sp)
 40108a0:	df000017 	ldw	fp,0(sp)
 40108a4:	dec00204 	addi	sp,sp,8
 40108a8:	f800283a 	ret

040108ac <int_print>:

void int_print(alt_32 x0, alt_32 y0, int data, alt_u32 data_l, alt_u32 color, alt_u32 BGcolor)
{
 40108ac:	defff604 	addi	sp,sp,-40
 40108b0:	dfc00915 	stw	ra,36(sp)
 40108b4:	df000815 	stw	fp,32(sp)
 40108b8:	dc000715 	stw	r16,28(sp)
 40108bc:	df000804 	addi	fp,sp,32
 40108c0:	e13ffb15 	stw	r4,-20(fp)
 40108c4:	e17ffc15 	stw	r5,-16(fp)
 40108c8:	e1bffd15 	stw	r6,-12(fp)
 40108cc:	e1fffe15 	stw	r7,-8(fp)
	if (data < 0)
 40108d0:	e0bffd17 	ldw	r2,-12(fp)
 40108d4:	10000b0e 	bge	r2,zero,4010904 <int_print+0x58>
	{
		char_print(x0, y0, '-', color, BGcolor);
 40108d8:	e0800317 	ldw	r2,12(fp)
 40108dc:	d8800015 	stw	r2,0(sp)
 40108e0:	e1c00217 	ldw	r7,8(fp)
 40108e4:	01800b44 	movi	r6,45
 40108e8:	e17ffc17 	ldw	r5,-16(fp)
 40108ec:	e13ffb17 	ldw	r4,-20(fp)
 40108f0:	40106500 	call	4010650 <char_print>
		data = -data;
 40108f4:	e0bffd17 	ldw	r2,-12(fp)
 40108f8:	0085c83a 	sub	r2,zero,r2
 40108fc:	e0bffd15 	stw	r2,-12(fp)
 4010900:	00000706 	br	4010920 <int_print+0x74>
	}
	else
	{
		char_print(x0, y0, '+', color, BGcolor);
 4010904:	e0800317 	ldw	r2,12(fp)
 4010908:	d8800015 	stw	r2,0(sp)
 401090c:	e1c00217 	ldw	r7,8(fp)
 4010910:	01800ac4 	movi	r6,43
 4010914:	e17ffc17 	ldw	r5,-16(fp)
 4010918:	e13ffb17 	ldw	r4,-20(fp)
 401091c:	40106500 	call	4010650 <char_print>
	}

	alt_u32 x = x0 + (TTY_CHAR_WIDTH * data_l);
 4010920:	e0bffe17 	ldw	r2,-8(fp)
 4010924:	100690fa 	slli	r3,r2,3
 4010928:	e0bffb17 	ldw	r2,-20(fp)
 401092c:	1885883a 	add	r2,r3,r2
 4010930:	e0bff915 	stw	r2,-28(fp)
	for (alt_u32 i = 0; i < data_l; ++i)
 4010934:	e03ffa15 	stw	zero,-24(fp)
 4010938:	00001b06 	br	40109a8 <int_print+0xfc>
	{
		char_print(x, y0, (data % 10) + '0', color, BGcolor);
 401093c:	e43ff917 	ldw	r16,-28(fp)
 4010940:	e0bffd17 	ldw	r2,-12(fp)
 4010944:	01400284 	movi	r5,10
 4010948:	1009883a 	mov	r4,r2
 401094c:	400c05c0 	call	400c05c <__modsi3>
 4010950:	10800c04 	addi	r2,r2,48
 4010954:	10c03fcc 	andi	r3,r2,255
 4010958:	18c0201c 	xori	r3,r3,128
 401095c:	18ffe004 	addi	r3,r3,-128
 4010960:	e0800317 	ldw	r2,12(fp)
 4010964:	d8800015 	stw	r2,0(sp)
 4010968:	e1c00217 	ldw	r7,8(fp)
 401096c:	180d883a 	mov	r6,r3
 4010970:	e17ffc17 	ldw	r5,-16(fp)
 4010974:	8009883a 	mov	r4,r16
 4010978:	40106500 	call	4010650 <char_print>
		data /= 10;
 401097c:	e0bffd17 	ldw	r2,-12(fp)
 4010980:	01400284 	movi	r5,10
 4010984:	1009883a 	mov	r4,r2
 4010988:	400bfd80 	call	400bfd8 <__divsi3>
 401098c:	e0bffd15 	stw	r2,-12(fp)
		x -= TTY_CHAR_WIDTH;
 4010990:	e0bff917 	ldw	r2,-28(fp)
 4010994:	10bffe04 	addi	r2,r2,-8
 4010998:	e0bff915 	stw	r2,-28(fp)
	{
		char_print(x0, y0, '+', color, BGcolor);
	}

	alt_u32 x = x0 + (TTY_CHAR_WIDTH * data_l);
	for (alt_u32 i = 0; i < data_l; ++i)
 401099c:	e0bffa17 	ldw	r2,-24(fp)
 40109a0:	10800044 	addi	r2,r2,1
 40109a4:	e0bffa15 	stw	r2,-24(fp)
 40109a8:	e0fffa17 	ldw	r3,-24(fp)
 40109ac:	e0bffe17 	ldw	r2,-8(fp)
 40109b0:	18bfe236 	bltu	r3,r2,401093c <__alt_data_end+0xfc01093c>
	{
		char_print(x, y0, (data % 10) + '0', color, BGcolor);
		data /= 10;
		x -= TTY_CHAR_WIDTH;
	}
}
 40109b4:	0001883a 	nop
 40109b8:	e6ffff04 	addi	sp,fp,-4
 40109bc:	dfc00217 	ldw	ra,8(sp)
 40109c0:	df000117 	ldw	fp,4(sp)
 40109c4:	dc000017 	ldw	r16,0(sp)
 40109c8:	dec00304 	addi	sp,sp,12
 40109cc:	f800283a 	ret

040109d0 <init_Sierra_interrupt>:
/*
 *  Register Sierra HW IRQ with NiosII ISR (HW_CTX_SWTICH in csw.S)
 */
/* #ifdef SIERRA_RTOS_BASE */
static void init_Sierra_interrupt()
{
 40109d0:	defffe04 	addi	sp,sp,-8
 40109d4:	dfc00115 	stw	ra,4(sp)
 40109d8:	df000015 	stw	fp,0(sp)
 40109dc:	d839883a 	mov	fp,sp
 // int ret=0xffffffff;
  if (alt_irq_register( SIERRA_RTOS_IRQ, NULL, HW_CTX_SWITCH )) printf("error registration Sierra irq");
 40109e0:	01810074 	movhi	r6,1025
 40109e4:	31881104 	addi	r6,r6,8260
 40109e8:	000b883a 	mov	r5,zero
 40109ec:	0009883a 	mov	r4,zero
 40109f0:	4011b9c0 	call	4011b9c <alt_irq_register>
 40109f4:	10000326 	beq	r2,zero,4010a04 <init_Sierra_interrupt+0x34>
 40109f8:	01010074 	movhi	r4,1025
 40109fc:	210ad404 	addi	r4,r4,11088
 4010a00:	4001b480 	call	4001b48 <printf>
 
}
 4010a04:	0001883a 	nop
 4010a08:	e037883a 	mov	sp,fp
 4010a0c:	dfc00117 	ldw	ra,4(sp)
 4010a10:	df000017 	ldw	fp,0(sp)
 4010a14:	dec00204 	addi	sp,sp,8
 4010a18:	f800283a 	ret

04010a1c <sierra_SW_driver_version>:
  Arguments   : none

  Return      : visions number
-----------------------------------------------------------------------------*/
unsigned int sierra_SW_driver_version(void)
{
 4010a1c:	defffe04 	addi	sp,sp,-8
 4010a20:	df000115 	stw	fp,4(sp)
 4010a24:	df000104 	addi	fp,sp,4
  unsigned int svar = 0;
 4010a28:	e03fff15 	stw	zero,-4(fp)
  svar = C_Sierra_SW_driver_version;
 4010a2c:	008000b4 	movhi	r2,2
 4010a30:	10a1f6c4 	addi	r2,r2,-30757
 4010a34:	e0bfff15 	stw	r2,-4(fp)
return svar;
 4010a38:	e0bfff17 	ldw	r2,-4(fp)
  }
 4010a3c:	e037883a 	mov	sp,fp
 4010a40:	df000017 	ldw	fp,0(sp)
 4010a44:	dec00104 	addi	sp,sp,4
 4010a48:	f800283a 	ret

04010a4c <sierra_HW_version>:
  Arguments   : none

  Return      : visions number
-----------------------------------------------------------------------------*/
unsigned int sierra_HW_version(void)
{
 4010a4c:	defffe04 	addi	sp,sp,-8
 4010a50:	df000115 	stw	fp,4(sp)
 4010a54:	df000104 	addi	fp,sp,4
  unsigned int svar = 0;
 4010a58:	e03fff15 	stw	zero,-4(fp)
  svar = M_Sierra_HW_Version_reg;
 4010a5c:	00820234 	movhi	r2,2056
 4010a60:	10840004 	addi	r2,r2,4096
 4010a64:	10800037 	ldwio	r2,0(r2)
 4010a68:	e0bfff15 	stw	r2,-4(fp)
return svar;
 4010a6c:	e0bfff17 	ldw	r2,-4(fp)
  }
 4010a70:	e037883a 	mov	sp,fp
 4010a74:	df000017 	ldw	fp,0(sp)
 4010a78:	dec00104 	addi	sp,sp,4
 4010a7c:	f800283a 	ret

04010a80 <SierraTime_base_reg>:
  Arguments   : none

  Return      : none
-----------------------------------------------------------------------------*/
unsigned int SierraTime_base_reg(void)
{
 4010a80:	defffe04 	addi	sp,sp,-8
 4010a84:	df000115 	stw	fp,4(sp)
 4010a88:	df000104 	addi	fp,sp,4
  unsigned int svar = 0;
 4010a8c:	e03fff15 	stw	zero,-4(fp)
  svar = M_RD_SierraTime_base_reg;
 4010a90:	00820234 	movhi	r2,2056
 4010a94:	10840404 	addi	r2,r2,4112
 4010a98:	10800037 	ldwio	r2,0(r2)
 4010a9c:	e0bfff15 	stw	r2,-4(fp)
return svar;
 4010aa0:	e0bfff17 	ldw	r2,-4(fp)
}
 4010aa4:	e037883a 	mov	sp,fp
 4010aa8:	df000017 	ldw	fp,0(sp)
 4010aac:	dec00104 	addi	sp,sp,4
 4010ab0:	f800283a 	ret

04010ab4 <set_timebase>:
              : Wanted tick time : 10us
              : Formula gives    : 10us x 100MHz / 1000 => 1(dec) or 1(hex)
              : --> set_timebase(0x1);
-----------------------------------------------------------------------------*/
void set_timebase (unsigned int hex)
{
 4010ab4:	defffe04 	addi	sp,sp,-8
 4010ab8:	df000115 	stw	fp,4(sp)
 4010abc:	df000104 	addi	fp,sp,4
 4010ac0:	e13fff15 	stw	r4,-4(fp)
M_IOWR_SierraTime_base_reg(hex);
 4010ac4:	e0ffff17 	ldw	r3,-4(fp)
 4010ac8:	00820234 	movhi	r2,2056
 4010acc:	10840404 	addi	r2,r2,4112
 4010ad0:	10c00035 	stwio	r3,0(r2)
}
 4010ad4:	0001883a 	nop
 4010ad8:	e037883a 	mov	sp,fp
 4010adc:	df000017 	ldw	fp,0(sp)
 4010ae0:	dec00104 	addi	sp,sp,4
 4010ae4:	f800283a 	ret

04010ae8 <Sierra_Initiation_HW_and_SW>:
  Arguments   : none
  Return      : none

-----------------------------------------------------------------------------*/
void Sierra_Initiation_HW_and_SW(void)
{
 4010ae8:	defffc04 	addi	sp,sp,-16
 4010aec:	dfc00315 	stw	ra,12(sp)
 4010af0:	df000215 	stw	fp,8(sp)
 4010af4:	dc000115 	stw	r16,4(sp)
 4010af8:	df000204 	addi	fp,sp,8
  int i;
  //SW reset of HW Sierran
  M_WD_SW_RESET_REGISTER(0x15);
 4010afc:	00c00544 	movi	r3,21
 4010b00:	00820234 	movhi	r2,2056
 4010b04:	10841804 	addi	r2,r2,4192
 4010b08:	10c00035 	stwio	r3,0(r2)
  M_WD_SW_RESET_REGISTER(0x00);
 4010b0c:	0007883a 	mov	r3,zero
 4010b10:	00820234 	movhi	r2,2056
 4010b14:	10841804 	addi	r2,r2,4192
 4010b18:	10c00035 	stwio	r3,0(r2)
  
 /*Initialize TCBs*/
  for (i = 0; i < N_TASKS; TCB_LIST[i++].taskID = 0xff);
 4010b1c:	e03ffe15 	stw	zero,-8(fp)
 4010b20:	00000b06 	br	4010b50 <Sierra_Initiation_HW_and_SW+0x68>
 4010b24:	e0bffe17 	ldw	r2,-8(fp)
 4010b28:	10c00044 	addi	r3,r2,1
 4010b2c:	e0fffe15 	stw	r3,-8(fp)
 4010b30:	04010074 	movhi	r16,1025
 4010b34:	84163804 	addi	r16,r16,22752
 4010b38:	01402304 	movi	r5,140
 4010b3c:	1009883a 	mov	r4,r2
 4010b40:	4000bd80 	call	4000bd8 <__mulsi3>
 4010b44:	8085883a 	add	r2,r16,r2
 4010b48:	00c03fc4 	movi	r3,255
 4010b4c:	10c00015 	stw	r3,0(r2)
 4010b50:	e0bffe17 	ldw	r2,-8(fp)
 4010b54:	10800210 	cmplti	r2,r2,8
 4010b58:	103ff21e 	bne	r2,zero,4010b24 <__alt_data_end+0xfc010b24>
  current_tcb=NULL;
 4010b5c:	d022e715 	stw	zero,-29796(gp)
  
  /* Initiate Sierra hw irq for NiosII*/
   init_Sierra_interrupt();
 4010b60:	40109d00 	call	40109d0 <init_Sierra_interrupt>
#ifdef DEF_LOGGING_PRINT
	printf("\n Logging print function is active and allocate/start the timer\n");
	TIMER_RESET();
	TIMER_START();
#else
	printf("\n Logging print function NOT active and timer free\n");
 4010b64:	01010074 	movhi	r4,1025
 4010b68:	210adc04 	addi	r4,r4,11120
 4010b6c:	4001c440 	call	4001c44 <puts>
#endif
}
 4010b70:	0001883a 	nop
 4010b74:	e6ffff04 	addi	sp,fp,-4
 4010b78:	dfc00217 	ldw	ra,8(sp)
 4010b7c:	df000117 	ldw	fp,4(sp)
 4010b80:	dc000017 	ldw	r16,0(sp)
 4010b84:	dec00304 	addi	sp,sp,12
 4010b88:	f800283a 	ret

04010b8c <get_next_task>:
  Arguments   : none
 
  Return      : none
-----------------------------------------------------------------------------*/
void get_next_task(void)
{
 4010b8c:	defffc04 	addi	sp,sp,-16
 4010b90:	dfc00315 	stw	ra,12(sp)
 4010b94:	df000215 	stw	fp,8(sp)
 4010b98:	df000204 	addi	fp,sp,8
  statusB_union status;
  ctrl_union CPU_CTRL_reg;

  /* Ack. on TSW req */
  CPU_CTRL_reg.ctrl_t.tswoff_req = 0;
 4010b9c:	e0ffff17 	ldw	r3,-4(fp)
 4010ba0:	00bfff44 	movi	r2,-3
 4010ba4:	1884703a 	and	r2,r3,r2
 4010ba8:	e0bfff15 	stw	r2,-4(fp)
  CPU_CTRL_reg.ctrl_t.tsw_req_ack = 1;
 4010bac:	e0bfff17 	ldw	r2,-4(fp)
 4010bb0:	10800054 	ori	r2,r2,1
 4010bb4:	e0bfff15 	stw	r2,-4(fp)
  IOWR_ALT_CTRL_REGISTER(CPU_CTRL_reg.ctrl_integer);
 4010bb8:	e0ffff17 	ldw	r3,-4(fp)
 4010bbc:	00820234 	movhi	r2,2056
 4010bc0:	10841404 	addi	r2,r2,4176
 4010bc4:	10c00035 	stwio	r3,0(r2)
  
  do {
    //MB: status = CPUstatusB_reg;
  //  status = *CPUstatusB_reg;
      status.statusB_reg_integer = M_RD_Sierra_statusB_reg;
 4010bc8:	00820234 	movhi	r2,2056
 4010bcc:	10840c04 	addi	r2,r2,4144
 4010bd0:	10800037 	ldwio	r2,0(r2)
 4010bd4:	e0bffe15 	stw	r2,-8(fp)
  } while (status.statusB_t.tsw_req_flag != 0);
 4010bd8:	e0bffe17 	ldw	r2,-8(fp)
 4010bdc:	1080004c 	andi	r2,r2,1
 4010be0:	103ff91e 	bne	r2,zero,4010bc8 <__alt_data_end+0xfc010bc8>

  /* Get next task ID */
	RUNNING_TASKID = constant_task_mask & status.statusB_t.running_taskID;
 4010be4:	e0bffe17 	ldw	r2,-8(fp)
 4010be8:	1004d07a 	srli	r2,r2,1
 4010bec:	1007883a 	mov	r3,r2
 4010bf0:	00bfffc4 	movi	r2,-1
 4010bf4:	1884703a 	and	r2,r3,r2
 4010bf8:	108001cc 	andi	r2,r2,7
 4010bfc:	d0a2e845 	stb	r2,-29791(gp)

#ifdef DEF_LOGGING_PRINT  
	printf("\nTSW; Task preemted, new taskid = %d, Time = %d \n", RUNNING_TASKID, ((TIMER_READ() & 0xFFFFE000)>>13));
#endif

  current_tcb = &TCB_LIST[RUNNING_TASKID];
 4010c00:	d0a2e843 	ldbu	r2,-29791(gp)
 4010c04:	10803fcc 	andi	r2,r2,255
 4010c08:	01402304 	movi	r5,140
 4010c0c:	1009883a 	mov	r4,r2
 4010c10:	4000bd80 	call	4000bd8 <__mulsi3>
 4010c14:	1007883a 	mov	r3,r2
 4010c18:	00810074 	movhi	r2,1025
 4010c1c:	10963804 	addi	r2,r2,22752
 4010c20:	1885883a 	add	r2,r3,r2
 4010c24:	d0a2e715 	stw	r2,-29796(gp)
 
  /* Nack on TSW req */
  CPU_CTRL_reg.ctrl_t.tsw_req_ack = 0;
 4010c28:	e0ffff17 	ldw	r3,-4(fp)
 4010c2c:	00bfff84 	movi	r2,-2
 4010c30:	1884703a 	and	r2,r3,r2
 4010c34:	e0bfff15 	stw	r2,-4(fp)
  IOWR_ALT_CTRL_REGISTER(CPU_CTRL_reg.ctrl_integer);
 4010c38:	e0ffff17 	ldw	r3,-4(fp)
 4010c3c:	00820234 	movhi	r2,2056
 4010c40:	10841404 	addi	r2,r2,4176
 4010c44:	10c00035 	stwio	r3,0(r2)
}
 4010c48:	0001883a 	nop
 4010c4c:	e037883a 	mov	sp,fp
 4010c50:	dfc00117 	ldw	ra,4(sp)
 4010c54:	df000017 	ldw	fp,0(sp)
 4010c58:	dec00204 	addi	sp,sp,8
 4010c5c:	f800283a 	ret

04010c60 <tsw_on>:
  Arguments   : none

  Return      : none
-----------------------------------------------------------------------------*/
void tsw_on(void)
{
 4010c60:	defffe04 	addi	sp,sp,-8
 4010c64:	df000115 	stw	fp,4(sp)
 4010c68:	df000104 	addi	fp,sp,4
  /* Current CPU control status */
  ctrl_union CPU_CTRL_reg;
 
  CPU_CTRL_reg.ctrl_t.tswoff_req = 0;
 4010c6c:	e0ffff17 	ldw	r3,-4(fp)
 4010c70:	00bfff44 	movi	r2,-3
 4010c74:	1884703a 	and	r2,r3,r2
 4010c78:	e0bfff15 	stw	r2,-4(fp)
  CPU_CTRL_reg.ctrl_t.tsw_req_ack = 0;
 4010c7c:	e0ffff17 	ldw	r3,-4(fp)
 4010c80:	00bfff84 	movi	r2,-2
 4010c84:	1884703a 	and	r2,r3,r2
 4010c88:	e0bfff15 	stw	r2,-4(fp)

IOWR_ALT_CTRL_REGISTER(CPU_CTRL_reg.ctrl_integer);
 4010c8c:	e0ffff17 	ldw	r3,-4(fp)
 4010c90:	00820234 	movhi	r2,2056
 4010c94:	10841404 	addi	r2,r2,4176
 4010c98:	10c00035 	stwio	r3,0(r2)
}
 4010c9c:	0001883a 	nop
 4010ca0:	e037883a 	mov	sp,fp
 4010ca4:	df000017 	ldw	fp,0(sp)
 4010ca8:	dec00104 	addi	sp,sp,4
 4010cac:	f800283a 	ret

04010cb0 <tsw_off>:
  Arguments   : none

  Return      : none
-----------------------------------------------------------------------------*/
void tsw_off(void)
{
 4010cb0:	defffe04 	addi	sp,sp,-8
 4010cb4:	df000115 	stw	fp,4(sp)
 4010cb8:	df000104 	addi	fp,sp,4
  /* Current CPU control status */
  ctrl_union CPU_CTRL_reg;
  
  CPU_CTRL_reg.ctrl_t.tswoff_req = 1;
 4010cbc:	e0bfff17 	ldw	r2,-4(fp)
 4010cc0:	10800094 	ori	r2,r2,2
 4010cc4:	e0bfff15 	stw	r2,-4(fp)
  CPU_CTRL_reg.ctrl_t.tsw_req_ack = 0;
 4010cc8:	e0ffff17 	ldw	r3,-4(fp)
 4010ccc:	00bfff84 	movi	r2,-2
 4010cd0:	1884703a 	and	r2,r3,r2
 4010cd4:	e0bfff15 	stw	r2,-4(fp)

  IOWR_ALT_CTRL_REGISTER(CPU_CTRL_reg.ctrl_integer);
 4010cd8:	e0ffff17 	ldw	r3,-4(fp)
 4010cdc:	00820234 	movhi	r2,2056
 4010ce0:	10841404 	addi	r2,r2,4176
 4010ce4:	10c00035 	stwio	r3,0(r2)

}
 4010ce8:	0001883a 	nop
 4010cec:	e037883a 	mov	sp,fp
 4010cf0:	df000017 	ldw	fp,0(sp)
 4010cf4:	dec00104 	addi	sp,sp,4
 4010cf8:	f800283a 	ret

04010cfc <get_new_task>:
                contextswitch is performed manually).
  Arguments   : none
  Return      : none
-----------------------------------------------------------------------------*/
void get_new_task(void)
{
 4010cfc:	defffe04 	addi	sp,sp,-8
 4010d00:	dfc00115 	stw	ra,4(sp)
 4010d04:	df000015 	stw	fp,0(sp)
 4010d08:	d839883a 	mov	fp,sp
   /* New task to start is fetched from NEXT_TASKID */
  RUNNING_TASKID = NEXT_TASKID;
 4010d0c:	d0a2e803 	ldbu	r2,-29792(gp)
 4010d10:	d0a2e845 	stb	r2,-29791(gp)
   /* Point to new tasks tcb */
  current_tcb = &TCB_LIST[RUNNING_TASKID];
 4010d14:	d0a2e843 	ldbu	r2,-29791(gp)
 4010d18:	10803fcc 	andi	r2,r2,255
 4010d1c:	01402304 	movi	r5,140
 4010d20:	1009883a 	mov	r4,r2
 4010d24:	4000bd80 	call	4000bd8 <__mulsi3>
 4010d28:	1007883a 	mov	r3,r2
 4010d2c:	00810074 	movhi	r2,1025
 4010d30:	10963804 	addi	r2,r2,22752
 4010d34:	1885883a 	add	r2,r3,r2
 4010d38:	d0a2e715 	stw	r2,-29796(gp)
	
#ifdef DEF_LOGGING_PRINT  
	printf("\nTSW; Task blocked/ready and new taskid = %d, Time = %d\n", RUNNING_TASKID, ((TIMER_READ() & 0xFFFFE000)>>13));
#endif		
}
 4010d3c:	0001883a 	nop
 4010d40:	e037883a 	mov	sp,fp
 4010d44:	dfc00117 	ldw	ra,4(sp)
 4010d48:	df000017 	ldw	fp,0(sp)
 4010d4c:	dec00204 	addi	sp,sp,8
 4010d50:	f800283a 	ret

04010d54 <irq_wait>:
  Arguments   : int irq     - irq level

  Return      : none
-----------------------------------------------------------------------------*/
void irq_wait(int IRQ_number)
{
 4010d54:	defffb04 	addi	sp,sp,-20
 4010d58:	dfc00415 	stw	ra,16(sp)
 4010d5c:	df000315 	stw	fp,12(sp)
 4010d60:	df000304 	addi	fp,sp,12
 4010d64:	e13fff15 	stw	r4,-4(fp)
  svc_t           svc;
  statusA_union   statusA;
  int             retval;

  tsw_off();
 4010d68:	4010cb00 	call	4010cb0 <tsw_off>
  svc.irq_wait_t.type =  sierra_irq_wait;
 4010d6c:	e0fffd17 	ldw	r3,-12(fp)
 4010d70:	00810034 	movhi	r2,1024
 4010d74:	10bfffc4 	addi	r2,r2,-1
 4010d78:	1884703a 	and	r2,r3,r2
 4010d7c:	10890034 	orhi	r2,r2,9216
 4010d80:	e0bffd15 	stw	r2,-12(fp)
  svc.irq_wait_t.irq_type =  IRQ_number;
 4010d84:	e0bfff17 	ldw	r2,-4(fp)
 4010d88:	100491ba 	slli	r2,r2,6
 4010d8c:	10803fcc 	andi	r2,r2,255
 4010d90:	1080201c 	xori	r2,r2,128
 4010d94:	10bfe004 	addi	r2,r2,-128
 4010d98:	1005d1ba 	srai	r2,r2,6
 4010d9c:	10803fcc 	andi	r2,r2,255
 4010da0:	108000cc 	andi	r2,r2,3
 4010da4:	e13ffd17 	ldw	r4,-12(fp)
 4010da8:	00ffff04 	movi	r3,-4
 4010dac:	20c6703a 	and	r3,r4,r3
 4010db0:	1884b03a 	or	r2,r3,r2
 4010db4:	e0bffd15 	stw	r2,-12(fp)
  
  /* Start service call*/
  
  IOWR_ALT_SVC_REGISTER(svc.svc_input);
 4010db8:	e0fffd17 	ldw	r3,-12(fp)
 4010dbc:	00820234 	movhi	r2,2056
 4010dc0:	10841004 	addi	r2,r2,4160
 4010dc4:	10c00035 	stwio	r3,0(r2)

  //  ack_wait
  do {
	statusA.statusA_reg_integer = M_RD_Sierra_statusA_reg;
 4010dc8:	00820234 	movhi	r2,2056
 4010dcc:	10840804 	addi	r2,r2,4128
 4010dd0:	10800037 	ldwio	r2,0(r2)
 4010dd4:	e0bffe15 	stw	r2,-8(fp)
  } while (statusA.statusA_t.svc_ack == 1);
 4010dd8:	e0bffe17 	ldw	r2,-8(fp)
 4010ddc:	1080004c 	andi	r2,r2,1
 4010de0:	103ff91e 	bne	r2,zero,4010dc8 <__alt_data_end+0xfc010dc8>
  
   NEXT_TASKID=constant_task_mask & statusA.statusA_t.svc_return;
 4010de4:	e0bffe17 	ldw	r2,-8(fp)
 4010de8:	1004d0ba 	srli	r2,r2,2
 4010dec:	108fffcc 	andi	r2,r2,16383
 4010df0:	108001cc 	andi	r2,r2,7
 4010df4:	d0a2e805 	stb	r2,-29792(gp)
//   printf("  NEXTTASK_ID_IRQ = %d\n", NEXT_TASKID); /* testning */
   tsw_on();
 4010df8:	4010c600 	call	4010c60 <tsw_on>
   taskswitch; /* perform manual contextswitch */
 4010dfc:	003b683a 	trap	0
}
 4010e00:	0001883a 	nop
 4010e04:	e037883a 	mov	sp,fp
 4010e08:	dfc00117 	ldw	ra,4(sp)
 4010e0c:	df000017 	ldw	fp,0(sp)
 4010e10:	dec00204 	addi	sp,sp,8
 4010e14:	f800283a 	ret

04010e18 <task_create>:
                   int priority,
                   int taskstate,
                   void (*taskptr)(void),
                   void *stackptr,
                   int stacksz)
{
 4010e18:	defff704 	addi	sp,sp,-36
 4010e1c:	dfc00815 	stw	ra,32(sp)
 4010e20:	df000715 	stw	fp,28(sp)
 4010e24:	df000704 	addi	fp,sp,28
 4010e28:	e13ffc15 	stw	r4,-16(fp)
 4010e2c:	e17ffd15 	stw	r5,-12(fp)
 4010e30:	e1bffe15 	stw	r6,-8(fp)
 4010e34:	e1ffff15 	stw	r7,-4(fp)
  tcb_t *newTask;
  svc_t svc;
  statusA_union status;

  newTask = &(TCB_LIST[taskID]);
 4010e38:	01402304 	movi	r5,140
 4010e3c:	e13ffc17 	ldw	r4,-16(fp)
 4010e40:	4000bd80 	call	4000bd8 <__mulsi3>
 4010e44:	1007883a 	mov	r3,r2
 4010e48:	00810074 	movhi	r2,1025
 4010e4c:	10963804 	addi	r2,r2,22752
 4010e50:	1885883a 	add	r2,r3,r2
 4010e54:	e0bff915 	stw	r2,-28(fp)

  /* Parameters to tcb*/
  newTask->taskID = taskID;
 4010e58:	e0fffc17 	ldw	r3,-16(fp)
 4010e5c:	e0bff917 	ldw	r2,-28(fp)
 4010e60:	10c00015 	stw	r3,0(r2)
  newTask->task = taskptr;
 4010e64:	e0bff917 	ldw	r2,-28(fp)
 4010e68:	e0ffff17 	ldw	r3,-4(fp)
 4010e6c:	10c00115 	stw	r3,4(r2)
  newTask->ea_reg = taskptr;  
 4010e70:	e0ffff17 	ldw	r3,-4(fp)
 4010e74:	e0bff917 	ldw	r2,-28(fp)
 4010e78:	10c01c15 	stw	r3,112(r2)
  newTask->ra_reg = taskptr;
 4010e7c:	e0ffff17 	ldw	r3,-4(fp)
 4010e80:	e0bff917 	ldw	r2,-28(fp)
 4010e84:	10c01d15 	stw	r3,116(r2)
  newTask->stacktop = stackptr;
 4010e88:	e0bff917 	ldw	r2,-28(fp)
 4010e8c:	e0c00217 	ldw	r3,8(fp)
 4010e90:	10c01f15 	stw	r3,124(r2)
  /* Stack counts backwards, set pointer to highest address */
  newTask->stack = (unsigned int *) (stackptr + stacksz - sizeof(int));
 4010e94:	e0800317 	ldw	r2,12(fp)
 4010e98:	10bfff04 	addi	r2,r2,-4
 4010e9c:	e0c00217 	ldw	r3,8(fp)
 4010ea0:	1887883a 	add	r3,r3,r2
 4010ea4:	e0bff917 	ldw	r2,-28(fp)
 4010ea8:	10c01e15 	stw	r3,120(r2)
  newTask->stacksz = stacksz;
 4010eac:	e0c00317 	ldw	r3,12(fp)
 4010eb0:	e0bff917 	ldw	r2,-28(fp)
 4010eb4:	10c02015 	stw	r3,128(r2)
  newTask->fp_reg = stackptr;
 4010eb8:	e0c00217 	ldw	r3,8(fp)
 4010ebc:	e0bff917 	ldw	r2,-28(fp)
 4010ec0:	10c01b15 	stw	r3,108(r2)
  newTask->priority = priority;
 4010ec4:	e0fffd17 	ldw	r3,-12(fp)
 4010ec8:	e0bff917 	ldw	r2,-28(fp)
 4010ecc:	10c02215 	stw	r3,136(r2)

  svc.task_create.type = sierra_task_create;
 4010ed0:	e0fffa17 	ldw	r3,-24(fp)
 4010ed4:	00810034 	movhi	r2,1024
 4010ed8:	10bfffc4 	addi	r2,r2,-1
 4010edc:	1884703a 	and	r2,r3,r2
 4010ee0:	e0bffa15 	stw	r2,-24(fp)
  svc.task_create.state = taskstate;
 4010ee4:	e0bffe17 	ldw	r2,-8(fp)
 4010ee8:	1080004c 	andi	r2,r2,1
 4010eec:	10803fcc 	andi	r2,r2,255
 4010ef0:	1080004c 	andi	r2,r2,1
 4010ef4:	1006963a 	slli	r3,r2,24
 4010ef8:	e13ffa17 	ldw	r4,-24(fp)
 4010efc:	00bfc034 	movhi	r2,65280
 4010f00:	10bfffc4 	addi	r2,r2,-1
 4010f04:	2084703a 	and	r2,r4,r2
 4010f08:	10c4b03a 	or	r2,r2,r3
 4010f0c:	e0bffa15 	stw	r2,-24(fp)
  svc.task_create.priority = priority;
 4010f10:	e0bffd17 	ldw	r2,-12(fp)
 4010f14:	1083ffcc 	andi	r2,r2,4095
 4010f18:	10bfffcc 	andi	r2,r2,65535
 4010f1c:	1083ffcc 	andi	r2,r2,4095
 4010f20:	1006933a 	slli	r3,r2,12
 4010f24:	e13ffa17 	ldw	r4,-24(fp)
 4010f28:	00bfc034 	movhi	r2,65280
 4010f2c:	1083ffc4 	addi	r2,r2,4095
 4010f30:	2084703a 	and	r2,r4,r2
 4010f34:	10c4b03a 	or	r2,r2,r3
 4010f38:	e0bffa15 	stw	r2,-24(fp)
  svc.task_create.taskID = taskID;
 4010f3c:	e0bffc17 	ldw	r2,-16(fp)
 4010f40:	1083ffcc 	andi	r2,r2,4095
 4010f44:	10bfffcc 	andi	r2,r2,65535
 4010f48:	1083ffcc 	andi	r2,r2,4095
 4010f4c:	e13ffa17 	ldw	r4,-24(fp)
 4010f50:	00fc0004 	movi	r3,-4096
 4010f54:	20c6703a 	and	r3,r4,r3
 4010f58:	1884b03a 	or	r2,r3,r2
 4010f5c:	e0bffa15 	stw	r2,-24(fp)

  /* Start service call*/
  IOWR_ALT_SVC_REGISTER(svc.svc_input);
 4010f60:	e0fffa17 	ldw	r3,-24(fp)
 4010f64:	00820234 	movhi	r2,2056
 4010f68:	10841004 	addi	r2,r2,4160
 4010f6c:	10c00035 	stwio	r3,0(r2)

  //  ack_wait(&status);
  do {
	status.statusA_reg_integer = M_RD_Sierra_statusA_reg;
 4010f70:	00820234 	movhi	r2,2056
 4010f74:	10840804 	addi	r2,r2,4128
 4010f78:	10800037 	ldwio	r2,0(r2)
 4010f7c:	e0bffb15 	stw	r2,-20(fp)
  } while (status.statusA_t.svc_ack == 1);
 4010f80:	e0bffb17 	ldw	r2,-20(fp)
 4010f84:	1080004c 	andi	r2,r2,1
 4010f88:	103ff91e 	bne	r2,zero,4010f70 <__alt_data_end+0xfc010f70>

}
 4010f8c:	0001883a 	nop
 4010f90:	e037883a 	mov	sp,fp
 4010f94:	dfc00117 	ldw	ra,4(sp)
 4010f98:	df000017 	ldw	fp,0(sp)
 4010f9c:	dec00204 	addi	sp,sp,8
 4010fa0:	f800283a 	ret

04010fa4 <task_getinfo>:
  Arguments   : int taskID

  Return      : Datastructure of type task_info_t.
-----------------------------------------------------------------------------*/
task_info_t task_getinfo(int taskID)
{
 4010fa4:	defffb04 	addi	sp,sp,-20
 4010fa8:	df000415 	stw	fp,16(sp)
 4010fac:	df000404 	addi	fp,sp,16
 4010fb0:	e13fff15 	stw	r4,-4(fp)
  svc_t svc;
  unsigned int info;
  statusA_union status;

  svc.task_getinfo.type =  sierra_task_getinfo;
 4010fb4:	e0fffc17 	ldw	r3,-16(fp)
 4010fb8:	00810034 	movhi	r2,1024
 4010fbc:	10bfffc4 	addi	r2,r2,-1
 4010fc0:	1884703a 	and	r2,r3,r2
 4010fc4:	10850034 	orhi	r2,r2,5120
 4010fc8:	e0bffc15 	stw	r2,-16(fp)
  svc.task_getinfo.taskID = taskID;
 4010fcc:	e0bfff17 	ldw	r2,-4(fp)
 4010fd0:	1083ffcc 	andi	r2,r2,4095
 4010fd4:	10bfffcc 	andi	r2,r2,65535
 4010fd8:	1083ffcc 	andi	r2,r2,4095
 4010fdc:	e13ffc17 	ldw	r4,-16(fp)
 4010fe0:	00fc0004 	movi	r3,-4096
 4010fe4:	20c6703a 	and	r3,r4,r3
 4010fe8:	1884b03a 	or	r2,r3,r2
 4010fec:	e0bffc15 	stw	r2,-16(fp)
  
  /* Start service call*/
  IOWR_ALT_SVC_REGISTER(svc.svc_input);
 4010ff0:	e0fffc17 	ldw	r3,-16(fp)
 4010ff4:	00820234 	movhi	r2,2056
 4010ff8:	10841004 	addi	r2,r2,4160
 4010ffc:	10c00035 	stwio	r3,0(r2)

  /* return vale */
  //  ack_wait
  do {
	status.statusA_reg_integer = M_RD_Sierra_statusA_reg;
 4011000:	00820234 	movhi	r2,2056
 4011004:	10840804 	addi	r2,r2,4128
 4011008:	10800037 	ldwio	r2,0(r2)
 401100c:	e0bffe15 	stw	r2,-8(fp)
  } while (status.statusA_t.svc_ack == 1);
 4011010:	e0bffe17 	ldw	r2,-8(fp)
 4011014:	1080004c 	andi	r2,r2,1
 4011018:	103ff91e 	bne	r2,zero,4011000 <__alt_data_end+0xfc011000>
    
//  info  = status.statusA_t.svc_return & 0x3FF; 
  info  = status.statusA_t.svc_return;
 401101c:	e0bffe17 	ldw	r2,-8(fp)
 4011020:	1004d0ba 	srli	r2,r2,2
 4011024:	108fffcc 	andi	r2,r2,16383
 4011028:	10bfffcc 	andi	r2,r2,65535
 401102c:	e0bffd15 	stw	r2,-12(fp)

  return *(task_info_t *) &info;
 4011030:	e0bffd04 	addi	r2,fp,-12
 4011034:	10800017 	ldw	r2,0(r2)
}
 4011038:	e037883a 	mov	sp,fp
 401103c:	df000017 	ldw	fp,0(sp)
 4011040:	dec00104 	addi	sp,sp,4
 4011044:	f800283a 	ret

04011048 <task_start>:
  Arguments   : int taskID

  Return      : none
-----------------------------------------------------------------------------*/
void task_start(int taskID)
{
 4011048:	defffc04 	addi	sp,sp,-16
 401104c:	df000315 	stw	fp,12(sp)
 4011050:	df000304 	addi	fp,sp,12
 4011054:	e13fff15 	stw	r4,-4(fp)
  svc_t svc;
  statusA_union status;
  
  svc.task_start.type =  sierra_task_start;
 4011058:	e0fffd17 	ldw	r3,-12(fp)
 401105c:	00810034 	movhi	r2,1024
 4011060:	10bfffc4 	addi	r2,r2,-1
 4011064:	1884703a 	and	r2,r3,r2
 4011068:	10820034 	orhi	r2,r2,2048
 401106c:	e0bffd15 	stw	r2,-12(fp)
  svc.task_start.taskID = taskID;
 4011070:	e0bfff17 	ldw	r2,-4(fp)
 4011074:	1083ffcc 	andi	r2,r2,4095
 4011078:	10bfffcc 	andi	r2,r2,65535
 401107c:	1083ffcc 	andi	r2,r2,4095
 4011080:	e13ffd17 	ldw	r4,-12(fp)
 4011084:	00fc0004 	movi	r3,-4096
 4011088:	20c6703a 	and	r3,r4,r3
 401108c:	1884b03a 	or	r2,r3,r2
 4011090:	e0bffd15 	stw	r2,-12(fp)
  
  /* Start service call*/
  IOWR_ALT_SVC_REGISTER(svc.svc_input);
 4011094:	e0fffd17 	ldw	r3,-12(fp)
 4011098:	00820234 	movhi	r2,2056
 401109c:	10841004 	addi	r2,r2,4160
 40110a0:	10c00035 	stwio	r3,0(r2)
  
  do {
	status.statusA_reg_integer = M_RD_Sierra_statusA_reg;
 40110a4:	00820234 	movhi	r2,2056
 40110a8:	10840804 	addi	r2,r2,4128
 40110ac:	10800037 	ldwio	r2,0(r2)
 40110b0:	e0bffe15 	stw	r2,-8(fp)
  } while (status.statusA_t.svc_ack == 1);
 40110b4:	e0bffe17 	ldw	r2,-8(fp)
 40110b8:	1080004c 	andi	r2,r2,1
 40110bc:	103ff91e 	bne	r2,zero,40110a4 <__alt_data_end+0xfc0110a4>
  
}
 40110c0:	0001883a 	nop
 40110c4:	e037883a 	mov	sp,fp
 40110c8:	df000017 	ldw	fp,0(sp)
 40110cc:	dec00104 	addi	sp,sp,4
 40110d0:	f800283a 	ret

040110d4 <task_block>:
  Arguments   : none
  Return      : none
-----------------------------------------------------------------------------*/

void task_block(int taskID)
{
 40110d4:	defffb04 	addi	sp,sp,-20
 40110d8:	df000415 	stw	fp,16(sp)
 40110dc:	df000404 	addi	fp,sp,16
 40110e0:	e13fff15 	stw	r4,-4(fp)
  svc_t svc;
  statusA_union statusA;
  int retval;

  svc.task_block.type =  sierra_task_block;
 40110e4:	e0fffd17 	ldw	r3,-12(fp)
 40110e8:	00810034 	movhi	r2,1024
 40110ec:	10bfffc4 	addi	r2,r2,-1
 40110f0:	1884703a 	and	r2,r3,r2
 40110f4:	10830034 	orhi	r2,r2,3072
 40110f8:	e0bffd15 	stw	r2,-12(fp)
  svc.task_block.taskID = taskID;
 40110fc:	e0bfff17 	ldw	r2,-4(fp)
 4011100:	1083ffcc 	andi	r2,r2,4095
 4011104:	10bfffcc 	andi	r2,r2,65535
 4011108:	1083ffcc 	andi	r2,r2,4095
 401110c:	e13ffd17 	ldw	r4,-12(fp)
 4011110:	00fc0004 	movi	r3,-4096
 4011114:	20c6703a 	and	r3,r4,r3
 4011118:	1884b03a 	or	r2,r3,r2
 401111c:	e0bffd15 	stw	r2,-12(fp)

  /* Start service call*/
  IOWR_ALT_SVC_REGISTER(svc.svc_input);
 4011120:	e0fffd17 	ldw	r3,-12(fp)
 4011124:	00820234 	movhi	r2,2056
 4011128:	10841004 	addi	r2,r2,4160
 401112c:	10c00035 	stwio	r3,0(r2)

  //  ack_wait
  do {
    statusA.statusA_reg_integer = M_RD_Sierra_statusA_reg;
 4011130:	00820234 	movhi	r2,2056
 4011134:	10840804 	addi	r2,r2,4128
 4011138:	10800037 	ldwio	r2,0(r2)
 401113c:	e0bffe15 	stw	r2,-8(fp)
  } while (statusA.statusA_t.svc_ack == 1);
 4011140:	e0bffe17 	ldw	r2,-8(fp)
 4011144:	1080004c 	andi	r2,r2,1
 4011148:	103ff91e 	bne	r2,zero,4011130 <__alt_data_end+0xfc011130>
 
  retval=statusA.statusA_t.svc_return & 0x3f;
 401114c:	e0bffe17 	ldw	r2,-8(fp)
 4011150:	1004d0ba 	srli	r2,r2,2
 4011154:	108fffcc 	andi	r2,r2,16383
 4011158:	10bfffcc 	andi	r2,r2,65535
 401115c:	10800fcc 	andi	r2,r2,63
 4011160:	e0bffc15 	stw	r2,-16(fp)

//if runing task_id blocked the return is true (1) else false (0)
  if (0 != (retval & 0x1)) { /*Task becomes blocked*/
 4011164:	e0bffc17 	ldw	r2,-16(fp)
 4011168:	1080004c 	andi	r2,r2,1
 401116c:	10000526 	beq	r2,zero,4011184 <task_block+0xb0>
    /* Get next task ID */
    NEXT_TASKID = constant_task_mask & (retval >> 1);
 4011170:	e0bffc17 	ldw	r2,-16(fp)
 4011174:	1005d07a 	srai	r2,r2,1
 4011178:	108001cc 	andi	r2,r2,7
 401117c:	d0a2e805 	stb	r2,-29792(gp)
    taskswitch; /* perform manual contextswitch */
 4011180:	003b683a 	trap	0

// NEXT_TASKID = constant_task_mask & statusA.statusA_t.svc_return;
 
//  taskswitch; /* perform manual contextswitch */

}
 4011184:	0001883a 	nop
 4011188:	e037883a 	mov	sp,fp
 401118c:	df000017 	ldw	fp,0(sp)
 4011190:	dec00104 	addi	sp,sp,4
 4011194:	f800283a 	ret

04011198 <task_delete>:
  Return      : none
-----------------------------------------------------------------------------*/


void task_delete(void)
{
 4011198:	defffd04 	addi	sp,sp,-12
 401119c:	df000215 	stw	fp,8(sp)
 40111a0:	df000204 	addi	fp,sp,8
  svc_t svc;
  statusA_union statusA;

  svc.wait_for_next_period.type =  sierra_task_delete;
 40111a4:	e0fffe17 	ldw	r3,-8(fp)
 40111a8:	00810034 	movhi	r2,1024
 40111ac:	10bfffc4 	addi	r2,r2,-1
 40111b0:	1884703a 	and	r2,r3,r2
 40111b4:	10810034 	orhi	r2,r2,1024
 40111b8:	e0bffe15 	stw	r2,-8(fp)

  /* Start service call*/
  IOWR_ALT_SVC_REGISTER(svc.svc_input);
 40111bc:	e0fffe17 	ldw	r3,-8(fp)
 40111c0:	00820234 	movhi	r2,2056
 40111c4:	10841004 	addi	r2,r2,4160
 40111c8:	10c00035 	stwio	r3,0(r2)

  //  ack_wait
  do {
    statusA.statusA_reg_integer = M_RD_Sierra_statusA_reg;
 40111cc:	00820234 	movhi	r2,2056
 40111d0:	10840804 	addi	r2,r2,4128
 40111d4:	10800037 	ldwio	r2,0(r2)
 40111d8:	e0bfff15 	stw	r2,-4(fp)
  } while (statusA.statusA_t.svc_ack == 1);
 40111dc:	e0bfff17 	ldw	r2,-4(fp)
 40111e0:	1080004c 	andi	r2,r2,1
 40111e4:	103ff91e 	bne	r2,zero,40111cc <__alt_data_end+0xfc0111cc>

  /* Get next task ID */

 NEXT_TASKID = constant_task_mask & statusA.statusA_t.svc_return;
 40111e8:	e0bfff17 	ldw	r2,-4(fp)
 40111ec:	1004d0ba 	srli	r2,r2,2
 40111f0:	108fffcc 	andi	r2,r2,16383
 40111f4:	108001cc 	andi	r2,r2,7
 40111f8:	d0a2e805 	stb	r2,-29792(gp)

  taskswitch; /* perform manual contextswitch */
 40111fc:	003b683a 	trap	0

}
 4011200:	0001883a 	nop
 4011204:	e037883a 	mov	sp,fp
 4011208:	df000017 	ldw	fp,0(sp)
 401120c:	dec00104 	addi	sp,sp,4
 4011210:	f800283a 	ret

04011214 <task_change_prio>:
  Arguments   : int taskID and int priority

  Return      : none
-----------------------------------------------------------------------------*/
void task_change_prio(int taskID, int priority)
{
 4011214:	defffb04 	addi	sp,sp,-20
 4011218:	df000415 	stw	fp,16(sp)
 401121c:	df000404 	addi	fp,sp,16
 4011220:	e13ffe15 	stw	r4,-8(fp)
 4011224:	e17fff15 	stw	r5,-4(fp)
  svc_t svc;
  statusA_union status;
  
  svc.task_start.type =  sierra_task_change_prio;
 4011228:	e0fffc17 	ldw	r3,-16(fp)
 401122c:	00810034 	movhi	r2,1024
 4011230:	10bfffc4 	addi	r2,r2,-1
 4011234:	1884703a 	and	r2,r3,r2
 4011238:	10860034 	orhi	r2,r2,6144
 401123c:	e0bffc15 	stw	r2,-16(fp)
  svc.task_create.priority = priority;
 4011240:	e0bfff17 	ldw	r2,-4(fp)
 4011244:	1083ffcc 	andi	r2,r2,4095
 4011248:	10bfffcc 	andi	r2,r2,65535
 401124c:	1083ffcc 	andi	r2,r2,4095
 4011250:	1006933a 	slli	r3,r2,12
 4011254:	e13ffc17 	ldw	r4,-16(fp)
 4011258:	00bfc034 	movhi	r2,65280
 401125c:	1083ffc4 	addi	r2,r2,4095
 4011260:	2084703a 	and	r2,r4,r2
 4011264:	10c4b03a 	or	r2,r2,r3
 4011268:	e0bffc15 	stw	r2,-16(fp)
  svc.task_start.taskID = taskID;
 401126c:	e0bffe17 	ldw	r2,-8(fp)
 4011270:	1083ffcc 	andi	r2,r2,4095
 4011274:	10bfffcc 	andi	r2,r2,65535
 4011278:	1083ffcc 	andi	r2,r2,4095
 401127c:	e13ffc17 	ldw	r4,-16(fp)
 4011280:	00fc0004 	movi	r3,-4096
 4011284:	20c6703a 	and	r3,r4,r3
 4011288:	1884b03a 	or	r2,r3,r2
 401128c:	e0bffc15 	stw	r2,-16(fp)
  
  /* Start service call*/
  IOWR_ALT_SVC_REGISTER(svc.svc_input);
 4011290:	e0fffc17 	ldw	r3,-16(fp)
 4011294:	00820234 	movhi	r2,2056
 4011298:	10841004 	addi	r2,r2,4160
 401129c:	10c00035 	stwio	r3,0(r2)
  
  do {
	status.statusA_reg_integer = M_RD_Sierra_statusA_reg;
 40112a0:	00820234 	movhi	r2,2056
 40112a4:	10840804 	addi	r2,r2,4128
 40112a8:	10800037 	ldwio	r2,0(r2)
 40112ac:	e0bffd15 	stw	r2,-12(fp)
  } while (status.statusA_t.svc_ack == 1);
 40112b0:	e0bffd17 	ldw	r2,-12(fp)
 40112b4:	1080004c 	andi	r2,r2,1
 40112b8:	103ff91e 	bne	r2,zero,40112a0 <__alt_data_end+0xfc0112a0>
  
}
 40112bc:	0001883a 	nop
 40112c0:	e037883a 	mov	sp,fp
 40112c4:	df000017 	ldw	fp,0(sp)
 40112c8:	dec00104 	addi	sp,sp,4
 40112cc:	f800283a 	ret

040112d0 <task_yield>:
  Arguments   : none

  Return      : none
-----------------------------------------------------------------------------*/
void task_yield(void)
{
 40112d0:	defffc04 	addi	sp,sp,-16
 40112d4:	df000315 	stw	fp,12(sp)
 40112d8:	df000304 	addi	fp,sp,12
  statusA_union statusA;
  statusB_union statusB;
  svc_t svc;
 
  svc.task_yield.type = sierra_task_yield;
 40112dc:	e0ffff17 	ldw	r3,-4(fp)
 40112e0:	00810034 	movhi	r2,1024
 40112e4:	10bfffc4 	addi	r2,r2,-1
 40112e8:	1884703a 	and	r2,r3,r2
 40112ec:	10840034 	orhi	r2,r2,4096
 40112f0:	e0bfff15 	stw	r2,-4(fp)

  /* Start service call*/
  IOWR_ALT_SVC_REGISTER(svc.svc_input);
 40112f4:	e0ffff17 	ldw	r3,-4(fp)
 40112f8:	00820234 	movhi	r2,2056
 40112fc:	10841004 	addi	r2,r2,4160
 4011300:	10c00035 	stwio	r3,0(r2)

  do {
	statusA.statusA_reg_integer = M_RD_Sierra_statusA_reg;
 4011304:	00820234 	movhi	r2,2056
 4011308:	10840804 	addi	r2,r2,4128
 401130c:	10800037 	ldwio	r2,0(r2)
 4011310:	e0bffd15 	stw	r2,-12(fp)
  } while (statusA.statusA_t.svc_ack == 1);
 4011314:	e0bffd17 	ldw	r2,-12(fp)
 4011318:	1080004c 	andi	r2,r2,1
 401131c:	103ff91e 	bne	r2,zero,4011304 <__alt_data_end+0xfc011304>

  
statusB.statusB_reg_integer = M_RD_Sierra_statusB_reg;
 4011320:	00820234 	movhi	r2,2056
 4011324:	10840c04 	addi	r2,r2,4144
 4011328:	10800037 	ldwio	r2,0(r2)
 401132c:	e0bffe15 	stw	r2,-8(fp)

  /* Get next task ID */
NEXT_TASKID = constant_task_mask & statusB.statusB_t.running_taskID;
 4011330:	e0bffe17 	ldw	r2,-8(fp)
 4011334:	1004d07a 	srli	r2,r2,1
 4011338:	1007883a 	mov	r3,r2
 401133c:	00bfffc4 	movi	r2,-1
 4011340:	1884703a 	and	r2,r3,r2
 4011344:	108001cc 	andi	r2,r2,7
 4011348:	d0a2e805 	stb	r2,-29792(gp)

  taskswitch; /* perform manual contextswitch */
 401134c:	003b683a 	trap	0
}
 4011350:	0001883a 	nop
 4011354:	e037883a 	mov	sp,fp
 4011358:	df000017 	ldw	fp,0(sp)
 401135c:	dec00104 	addi	sp,sp,4
 4011360:	f800283a 	ret

04011364 <init_period_time>:
  Arguments   : Periodtime (in ticks)

  Return      : none
-----------------------------------------------------------------------------*/
void init_period_time(int per_time)
{
 4011364:	defffc04 	addi	sp,sp,-16
 4011368:	df000315 	stw	fp,12(sp)
 401136c:	df000304 	addi	fp,sp,12
 4011370:	e13fff15 	stw	r4,-4(fp)
  svc_t svc;
  statusA_union status;
  svc.init_period_time.type =  sierra_init_period_time;
 4011374:	e0fffd17 	ldw	r3,-12(fp)
 4011378:	00810034 	movhi	r2,1024
 401137c:	10bfffc4 	addi	r2,r2,-1
 4011380:	1884703a 	and	r2,r3,r2
 4011384:	10910034 	orhi	r2,r2,17408
 4011388:	e0bffd15 	stw	r2,-12(fp)
  svc.init_period_time.period =  per_time;
 401138c:	e0bfff17 	ldw	r2,-4(fp)
 4011390:	e0bffd0d 	sth	r2,-12(fp)

  /* Start service call*/
  IOWR_ALT_SVC_REGISTER(svc.svc_input);
 4011394:	e0fffd17 	ldw	r3,-12(fp)
 4011398:	00820234 	movhi	r2,2056
 401139c:	10841004 	addi	r2,r2,4160
 40113a0:	10c00035 	stwio	r3,0(r2)

  //  ack_wait
  do {
	status.statusA_reg_integer = M_RD_Sierra_statusA_reg;
 40113a4:	00820234 	movhi	r2,2056
 40113a8:	10840804 	addi	r2,r2,4128
 40113ac:	10800037 	ldwio	r2,0(r2)
 40113b0:	e0bffe15 	stw	r2,-8(fp)
  } while (status.statusA_t.svc_ack == 1);
 40113b4:	e0bffe17 	ldw	r2,-8(fp)
 40113b8:	1080004c 	andi	r2,r2,1
 40113bc:	103ff91e 	bne	r2,zero,40113a4 <__alt_data_end+0xfc0113a4>
}
 40113c0:	0001883a 	nop
 40113c4:	e037883a 	mov	sp,fp
 40113c8:	df000017 	ldw	fp,0(sp)
 40113cc:	dec00104 	addi	sp,sp,4
 40113d0:	f800283a 	ret

040113d4 <wait_for_next_period>:
  Description : Let current task wait for next period.
  Arguments   : none
  Return      : none
-----------------------------------------------------------------------------*/
task_periodic_start_union wait_for_next_period(void)
{
 40113d4:	defffa04 	addi	sp,sp,-24
 40113d8:	dfc00515 	stw	ra,20(sp)
 40113dc:	df000415 	stw	fp,16(sp)
 40113e0:	df000404 	addi	fp,sp,16
//  unsigned int info;
  task_periodic_start_union info;
  unsigned int temp;
  statusA_union statusA;

  svc.wait_for_next_period.type =  sierra_wait_for_next_period;
 40113e4:	e0fffc17 	ldw	r3,-16(fp)
 40113e8:	00810034 	movhi	r2,1024
 40113ec:	10bfffc4 	addi	r2,r2,-1
 40113f0:	1884703a 	and	r2,r3,r2
 40113f4:	10940034 	orhi	r2,r2,20480
 40113f8:	e0bffc15 	stw	r2,-16(fp)
  tsw_off();
 40113fc:	4010cb00 	call	4010cb0 <tsw_off>

  /* Start service call*/
  IOWR_ALT_SVC_REGISTER(svc.svc_input);
 4011400:	e0fffc17 	ldw	r3,-16(fp)
 4011404:	00820234 	movhi	r2,2056
 4011408:	10841004 	addi	r2,r2,4160
 401140c:	10c00035 	stwio	r3,0(r2)

  //  ack_wait
  do {
	statusA.statusA_reg_integer = M_RD_Sierra_statusA_reg;
 4011410:	00820234 	movhi	r2,2056
 4011414:	10840804 	addi	r2,r2,4128
 4011418:	10800037 	ldwio	r2,0(r2)
 401141c:	e0bfff15 	stw	r2,-4(fp)
  } while (statusA.statusA_t.svc_ack == 1);
 4011420:	e0bfff17 	ldw	r2,-4(fp)
 4011424:	1080004c 	andi	r2,r2,1
 4011428:	103ff91e 	bne	r2,zero,4011410 <__alt_data_end+0xfc011410>
 
  /* Get next task ID */
  info.periodic_start_integer = statusA.statusA_t.svc_return;
 401142c:	e0bfff17 	ldw	r2,-4(fp)
 4011430:	1004d0ba 	srli	r2,r2,2
 4011434:	108fffcc 	andi	r2,r2,16383
 4011438:	10bfffcc 	andi	r2,r2,65535
 401143c:	e0bffd15 	stw	r2,-12(fp)

NEXT_TASKID = constant_task_mask & info.task_periodic_start_t.task_id;
 4011440:	e0bffd17 	ldw	r2,-12(fp)
 4011444:	100493fa 	slli	r2,r2,15
 4011448:	1005d43a 	srai	r2,r2,16
 401144c:	108001cc 	andi	r2,r2,7
 4011450:	d0a2e805 	stb	r2,-29792(gp)
 
 temp = info.periodic_start_integer;
 4011454:	e0bffd17 	ldw	r2,-12(fp)
 4011458:	e0bffe15 	stw	r2,-8(fp)
  tsw_on();
 401145c:	4010c600 	call	4010c60 <tsw_on>
  taskswitch; /* perform manual contextswitch */
 4011460:	003b683a 	trap	0

  return *(task_periodic_start_union *) & temp; //if you do not use deadline control, you can deleate this row.
 4011464:	e0bffe04 	addi	r2,fp,-8
 4011468:	10800017 	ldw	r2,0(r2)
}
 401146c:	e037883a 	mov	sp,fp
 4011470:	dfc00117 	ldw	ra,4(sp)
 4011474:	df000017 	ldw	fp,0(sp)
 4011478:	dec00204 	addi	sp,sp,8
 401147c:	f800283a 	ret

04011480 <delay>:
  Arguments   : Number of ticks to delay task.

  Return      : none
-----------------------------------------------------------------------------*/
void delay(int delay_time)
{
 4011480:	defffc04 	addi	sp,sp,-16
 4011484:	df000315 	stw	fp,12(sp)
 4011488:	df000304 	addi	fp,sp,12
 401148c:	e13fff15 	stw	r4,-4(fp)
  svc_t svc;
  statusA_union statusA;
 
  svc.delay.type =  sierra_delay;
 4011490:	e0fffd17 	ldw	r3,-12(fp)
 4011494:	00810034 	movhi	r2,1024
 4011498:	10bfffc4 	addi	r2,r2,-1
 401149c:	1884703a 	and	r2,r3,r2
 40114a0:	10900034 	orhi	r2,r2,16384
 40114a4:	e0bffd15 	stw	r2,-12(fp)
  svc.delay.nroftick =  delay_time;
 40114a8:	e0ffff17 	ldw	r3,-4(fp)
 40114ac:	00810034 	movhi	r2,1024
 40114b0:	10bfffc4 	addi	r2,r2,-1
 40114b4:	1886703a 	and	r3,r3,r2
 40114b8:	00810034 	movhi	r2,1024
 40114bc:	10bfffc4 	addi	r2,r2,-1
 40114c0:	1884703a 	and	r2,r3,r2
 40114c4:	e0fffd17 	ldw	r3,-12(fp)
 40114c8:	18ff002c 	andhi	r3,r3,64512
 40114cc:	1884b03a 	or	r2,r3,r2
 40114d0:	e0bffd15 	stw	r2,-12(fp)

  /* Start service call*/
  IOWR_ALT_SVC_REGISTER(svc.svc_input);
 40114d4:	e0fffd17 	ldw	r3,-12(fp)
 40114d8:	00820234 	movhi	r2,2056
 40114dc:	10841004 	addi	r2,r2,4160
 40114e0:	10c00035 	stwio	r3,0(r2)

  //  ack_wait
  do {
	statusA.statusA_reg_integer = M_RD_Sierra_statusA_reg;
 40114e4:	00820234 	movhi	r2,2056
 40114e8:	10840804 	addi	r2,r2,4128
 40114ec:	10800037 	ldwio	r2,0(r2)
 40114f0:	e0bffe15 	stw	r2,-8(fp)
  } while (statusA.statusA_t.svc_ack == 1);
 40114f4:	e0bffe17 	ldw	r2,-8(fp)
 40114f8:	1080004c 	andi	r2,r2,1
 40114fc:	103ff91e 	bne	r2,zero,40114e4 <__alt_data_end+0xfc0114e4>
  
  /* Get next task ID */
 NEXT_TASKID = constant_task_mask & statusA.statusA_t.svc_return;
 4011500:	e0bffe17 	ldw	r2,-8(fp)
 4011504:	1004d0ba 	srli	r2,r2,2
 4011508:	108fffcc 	andi	r2,r2,16383
 401150c:	108001cc 	andi	r2,r2,7
 4011510:	d0a2e805 	stb	r2,-29792(gp)

  taskswitch; /* perform manual contextswitch */
 4011514:	003b683a 	trap	0
}
 4011518:	0001883a 	nop
 401151c:	e037883a 	mov	sp,fp
 4011520:	df000017 	ldw	fp,0(sp)
 4011524:	dec00104 	addi	sp,sp,4
 4011528:	f800283a 	ret

0401152c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 401152c:	deffff04 	addi	sp,sp,-4
 4011530:	df000015 	stw	fp,0(sp)
 4011534:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 4011538:	0001883a 	nop
 401153c:	e037883a 	mov	sp,fp
 4011540:	df000017 	ldw	fp,0(sp)
 4011544:	dec00104 	addi	sp,sp,4
 4011548:	f800283a 	ret

0401154c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401154c:	defffe04 	addi	sp,sp,-8
 4011550:	dfc00115 	stw	ra,4(sp)
 4011554:	df000015 	stw	fp,0(sp)
 4011558:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401155c:	d0a01117 	ldw	r2,-32700(gp)
 4011560:	10000326 	beq	r2,zero,4011570 <alt_get_errno+0x24>
 4011564:	d0a01117 	ldw	r2,-32700(gp)
 4011568:	103ee83a 	callr	r2
 401156c:	00000106 	br	4011574 <alt_get_errno+0x28>
 4011570:	d0a2e204 	addi	r2,gp,-29816
}
 4011574:	e037883a 	mov	sp,fp
 4011578:	dfc00117 	ldw	ra,4(sp)
 401157c:	df000017 	ldw	fp,0(sp)
 4011580:	dec00204 	addi	sp,sp,8
 4011584:	f800283a 	ret

04011588 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 4011588:	defffa04 	addi	sp,sp,-24
 401158c:	dfc00515 	stw	ra,20(sp)
 4011590:	df000415 	stw	fp,16(sp)
 4011594:	df000404 	addi	fp,sp,16
 4011598:	e13ffe15 	stw	r4,-8(fp)
 401159c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 40115a0:	e0bffe17 	ldw	r2,-8(fp)
 40115a4:	10000326 	beq	r2,zero,40115b4 <alt_dev_llist_insert+0x2c>
 40115a8:	e0bffe17 	ldw	r2,-8(fp)
 40115ac:	10800217 	ldw	r2,8(r2)
 40115b0:	1000061e 	bne	r2,zero,40115cc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 40115b4:	401154c0 	call	401154c <alt_get_errno>
 40115b8:	1007883a 	mov	r3,r2
 40115bc:	00800584 	movi	r2,22
 40115c0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 40115c4:	00bffa84 	movi	r2,-22
 40115c8:	00001306 	br	4011618 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 40115cc:	e0bffe17 	ldw	r2,-8(fp)
 40115d0:	e0ffff17 	ldw	r3,-4(fp)
 40115d4:	e0fffc15 	stw	r3,-16(fp)
 40115d8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 40115dc:	e0bffd17 	ldw	r2,-12(fp)
 40115e0:	e0fffc17 	ldw	r3,-16(fp)
 40115e4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 40115e8:	e0bffc17 	ldw	r2,-16(fp)
 40115ec:	10c00017 	ldw	r3,0(r2)
 40115f0:	e0bffd17 	ldw	r2,-12(fp)
 40115f4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 40115f8:	e0bffc17 	ldw	r2,-16(fp)
 40115fc:	10800017 	ldw	r2,0(r2)
 4011600:	e0fffd17 	ldw	r3,-12(fp)
 4011604:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4011608:	e0bffc17 	ldw	r2,-16(fp)
 401160c:	e0fffd17 	ldw	r3,-12(fp)
 4011610:	10c00015 	stw	r3,0(r2)

  return 0;  
 4011614:	0005883a 	mov	r2,zero
}
 4011618:	e037883a 	mov	sp,fp
 401161c:	dfc00117 	ldw	ra,4(sp)
 4011620:	df000017 	ldw	fp,0(sp)
 4011624:	dec00204 	addi	sp,sp,8
 4011628:	f800283a 	ret

0401162c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 401162c:	defffd04 	addi	sp,sp,-12
 4011630:	dfc00215 	stw	ra,8(sp)
 4011634:	df000115 	stw	fp,4(sp)
 4011638:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 401163c:	00810074 	movhi	r2,1025
 4011640:	10898404 	addi	r2,r2,9744
 4011644:	e0bfff15 	stw	r2,-4(fp)
 4011648:	00000606 	br	4011664 <_do_ctors+0x38>
        (*ctor) (); 
 401164c:	e0bfff17 	ldw	r2,-4(fp)
 4011650:	10800017 	ldw	r2,0(r2)
 4011654:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4011658:	e0bfff17 	ldw	r2,-4(fp)
 401165c:	10bfff04 	addi	r2,r2,-4
 4011660:	e0bfff15 	stw	r2,-4(fp)
 4011664:	e0ffff17 	ldw	r3,-4(fp)
 4011668:	00810074 	movhi	r2,1025
 401166c:	10898504 	addi	r2,r2,9748
 4011670:	18bff62e 	bgeu	r3,r2,401164c <__alt_data_end+0xfc01164c>
        (*ctor) (); 
}
 4011674:	0001883a 	nop
 4011678:	e037883a 	mov	sp,fp
 401167c:	dfc00117 	ldw	ra,4(sp)
 4011680:	df000017 	ldw	fp,0(sp)
 4011684:	dec00204 	addi	sp,sp,8
 4011688:	f800283a 	ret

0401168c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 401168c:	defffd04 	addi	sp,sp,-12
 4011690:	dfc00215 	stw	ra,8(sp)
 4011694:	df000115 	stw	fp,4(sp)
 4011698:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 401169c:	00810074 	movhi	r2,1025
 40116a0:	10898404 	addi	r2,r2,9744
 40116a4:	e0bfff15 	stw	r2,-4(fp)
 40116a8:	00000606 	br	40116c4 <_do_dtors+0x38>
        (*dtor) (); 
 40116ac:	e0bfff17 	ldw	r2,-4(fp)
 40116b0:	10800017 	ldw	r2,0(r2)
 40116b4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 40116b8:	e0bfff17 	ldw	r2,-4(fp)
 40116bc:	10bfff04 	addi	r2,r2,-4
 40116c0:	e0bfff15 	stw	r2,-4(fp)
 40116c4:	e0ffff17 	ldw	r3,-4(fp)
 40116c8:	00810074 	movhi	r2,1025
 40116cc:	10898504 	addi	r2,r2,9748
 40116d0:	18bff62e 	bgeu	r3,r2,40116ac <__alt_data_end+0xfc0116ac>
        (*dtor) (); 
}
 40116d4:	0001883a 	nop
 40116d8:	e037883a 	mov	sp,fp
 40116dc:	dfc00117 	ldw	ra,4(sp)
 40116e0:	df000017 	ldw	fp,0(sp)
 40116e4:	dec00204 	addi	sp,sp,8
 40116e8:	f800283a 	ret

040116ec <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 40116ec:	defffa04 	addi	sp,sp,-24
 40116f0:	dfc00515 	stw	ra,20(sp)
 40116f4:	df000415 	stw	fp,16(sp)
 40116f8:	df000404 	addi	fp,sp,16
 40116fc:	e13ffe15 	stw	r4,-8(fp)
 4011700:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 4011704:	e0bfff17 	ldw	r2,-4(fp)
 4011708:	10800017 	ldw	r2,0(r2)
 401170c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 4011710:	e13ffe17 	ldw	r4,-8(fp)
 4011714:	4001c580 	call	4001c58 <strlen>
 4011718:	10800044 	addi	r2,r2,1
 401171c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4011720:	00000d06 	br	4011758 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 4011724:	e0bffc17 	ldw	r2,-16(fp)
 4011728:	10800217 	ldw	r2,8(r2)
 401172c:	e0fffd17 	ldw	r3,-12(fp)
 4011730:	180d883a 	mov	r6,r3
 4011734:	e17ffe17 	ldw	r5,-8(fp)
 4011738:	1009883a 	mov	r4,r2
 401173c:	40122cc0 	call	40122cc <memcmp>
 4011740:	1000021e 	bne	r2,zero,401174c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 4011744:	e0bffc17 	ldw	r2,-16(fp)
 4011748:	00000706 	br	4011768 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 401174c:	e0bffc17 	ldw	r2,-16(fp)
 4011750:	10800017 	ldw	r2,0(r2)
 4011754:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4011758:	e0fffc17 	ldw	r3,-16(fp)
 401175c:	e0bfff17 	ldw	r2,-4(fp)
 4011760:	18bff01e 	bne	r3,r2,4011724 <__alt_data_end+0xfc011724>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 4011764:	0005883a 	mov	r2,zero
}
 4011768:	e037883a 	mov	sp,fp
 401176c:	dfc00117 	ldw	ra,4(sp)
 4011770:	df000017 	ldw	fp,0(sp)
 4011774:	dec00204 	addi	sp,sp,8
 4011778:	f800283a 	ret

0401177c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 401177c:	deffff04 	addi	sp,sp,-4
 4011780:	df000015 	stw	fp,0(sp)
 4011784:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 4011788:	0001883a 	nop
 401178c:	e037883a 	mov	sp,fp
 4011790:	df000017 	ldw	fp,0(sp)
 4011794:	dec00104 	addi	sp,sp,4
 4011798:	f800283a 	ret

0401179c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 401179c:	defff904 	addi	sp,sp,-28
 40117a0:	dfc00615 	stw	ra,24(sp)
 40117a4:	df000515 	stw	fp,20(sp)
 40117a8:	df000504 	addi	fp,sp,20
 40117ac:	e13ffc15 	stw	r4,-16(fp)
 40117b0:	e17ffd15 	stw	r5,-12(fp)
 40117b4:	e1bffe15 	stw	r6,-8(fp)
 40117b8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 40117bc:	e0800217 	ldw	r2,8(fp)
 40117c0:	d8800015 	stw	r2,0(sp)
 40117c4:	e1ffff17 	ldw	r7,-4(fp)
 40117c8:	e1bffe17 	ldw	r6,-8(fp)
 40117cc:	e17ffd17 	ldw	r5,-12(fp)
 40117d0:	e13ffc17 	ldw	r4,-16(fp)
 40117d4:	401194c0 	call	401194c <alt_iic_isr_register>
}  
 40117d8:	e037883a 	mov	sp,fp
 40117dc:	dfc00117 	ldw	ra,4(sp)
 40117e0:	df000017 	ldw	fp,0(sp)
 40117e4:	dec00204 	addi	sp,sp,8
 40117e8:	f800283a 	ret

040117ec <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 40117ec:	defff904 	addi	sp,sp,-28
 40117f0:	df000615 	stw	fp,24(sp)
 40117f4:	df000604 	addi	fp,sp,24
 40117f8:	e13ffe15 	stw	r4,-8(fp)
 40117fc:	e17fff15 	stw	r5,-4(fp)
 4011800:	e0bfff17 	ldw	r2,-4(fp)
 4011804:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011808:	0005303a 	rdctl	r2,status
 401180c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011810:	e0fffb17 	ldw	r3,-20(fp)
 4011814:	00bfff84 	movi	r2,-2
 4011818:	1884703a 	and	r2,r3,r2
 401181c:	1001703a 	wrctl	status,r2
  
  return context;
 4011820:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4011824:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 4011828:	00c00044 	movi	r3,1
 401182c:	e0bffa17 	ldw	r2,-24(fp)
 4011830:	1884983a 	sll	r2,r3,r2
 4011834:	1007883a 	mov	r3,r2
 4011838:	d0a2e917 	ldw	r2,-29788(gp)
 401183c:	1884b03a 	or	r2,r3,r2
 4011840:	d0a2e915 	stw	r2,-29788(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4011844:	d0a2e917 	ldw	r2,-29788(gp)
 4011848:	100170fa 	wrctl	ienable,r2
 401184c:	e0bffc17 	ldw	r2,-16(fp)
 4011850:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011854:	e0bffd17 	ldw	r2,-12(fp)
 4011858:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 401185c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 4011860:	0001883a 	nop
}
 4011864:	e037883a 	mov	sp,fp
 4011868:	df000017 	ldw	fp,0(sp)
 401186c:	dec00104 	addi	sp,sp,4
 4011870:	f800283a 	ret

04011874 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 4011874:	defff904 	addi	sp,sp,-28
 4011878:	df000615 	stw	fp,24(sp)
 401187c:	df000604 	addi	fp,sp,24
 4011880:	e13ffe15 	stw	r4,-8(fp)
 4011884:	e17fff15 	stw	r5,-4(fp)
 4011888:	e0bfff17 	ldw	r2,-4(fp)
 401188c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011890:	0005303a 	rdctl	r2,status
 4011894:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011898:	e0fffb17 	ldw	r3,-20(fp)
 401189c:	00bfff84 	movi	r2,-2
 40118a0:	1884703a 	and	r2,r3,r2
 40118a4:	1001703a 	wrctl	status,r2
  
  return context;
 40118a8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 40118ac:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 40118b0:	00c00044 	movi	r3,1
 40118b4:	e0bffa17 	ldw	r2,-24(fp)
 40118b8:	1884983a 	sll	r2,r3,r2
 40118bc:	0084303a 	nor	r2,zero,r2
 40118c0:	1007883a 	mov	r3,r2
 40118c4:	d0a2e917 	ldw	r2,-29788(gp)
 40118c8:	1884703a 	and	r2,r3,r2
 40118cc:	d0a2e915 	stw	r2,-29788(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 40118d0:	d0a2e917 	ldw	r2,-29788(gp)
 40118d4:	100170fa 	wrctl	ienable,r2
 40118d8:	e0bffc17 	ldw	r2,-16(fp)
 40118dc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40118e0:	e0bffd17 	ldw	r2,-12(fp)
 40118e4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 40118e8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 40118ec:	0001883a 	nop
}
 40118f0:	e037883a 	mov	sp,fp
 40118f4:	df000017 	ldw	fp,0(sp)
 40118f8:	dec00104 	addi	sp,sp,4
 40118fc:	f800283a 	ret

04011900 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 4011900:	defffc04 	addi	sp,sp,-16
 4011904:	df000315 	stw	fp,12(sp)
 4011908:	df000304 	addi	fp,sp,12
 401190c:	e13ffe15 	stw	r4,-8(fp)
 4011910:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 4011914:	000530fa 	rdctl	r2,ienable
 4011918:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 401191c:	00c00044 	movi	r3,1
 4011920:	e0bfff17 	ldw	r2,-4(fp)
 4011924:	1884983a 	sll	r2,r3,r2
 4011928:	1007883a 	mov	r3,r2
 401192c:	e0bffd17 	ldw	r2,-12(fp)
 4011930:	1884703a 	and	r2,r3,r2
 4011934:	1004c03a 	cmpne	r2,r2,zero
 4011938:	10803fcc 	andi	r2,r2,255
}
 401193c:	e037883a 	mov	sp,fp
 4011940:	df000017 	ldw	fp,0(sp)
 4011944:	dec00104 	addi	sp,sp,4
 4011948:	f800283a 	ret

0401194c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 401194c:	defff504 	addi	sp,sp,-44
 4011950:	dfc00a15 	stw	ra,40(sp)
 4011954:	df000915 	stw	fp,36(sp)
 4011958:	df000904 	addi	fp,sp,36
 401195c:	e13ffc15 	stw	r4,-16(fp)
 4011960:	e17ffd15 	stw	r5,-12(fp)
 4011964:	e1bffe15 	stw	r6,-8(fp)
 4011968:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 401196c:	00bffa84 	movi	r2,-22
 4011970:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 4011974:	e0bffd17 	ldw	r2,-12(fp)
 4011978:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 401197c:	e0bff817 	ldw	r2,-32(fp)
 4011980:	10800808 	cmpgei	r2,r2,32
 4011984:	1000271e 	bne	r2,zero,4011a24 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011988:	0005303a 	rdctl	r2,status
 401198c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011990:	e0fffb17 	ldw	r3,-20(fp)
 4011994:	00bfff84 	movi	r2,-2
 4011998:	1884703a 	and	r2,r3,r2
 401199c:	1001703a 	wrctl	status,r2
  
  return context;
 40119a0:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 40119a4:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 40119a8:	00810074 	movhi	r2,1025
 40119ac:	10975004 	addi	r2,r2,23872
 40119b0:	e0fff817 	ldw	r3,-32(fp)
 40119b4:	180690fa 	slli	r3,r3,3
 40119b8:	10c5883a 	add	r2,r2,r3
 40119bc:	e0fffe17 	ldw	r3,-8(fp)
 40119c0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 40119c4:	00810074 	movhi	r2,1025
 40119c8:	10975004 	addi	r2,r2,23872
 40119cc:	e0fff817 	ldw	r3,-32(fp)
 40119d0:	180690fa 	slli	r3,r3,3
 40119d4:	10c5883a 	add	r2,r2,r3
 40119d8:	10800104 	addi	r2,r2,4
 40119dc:	e0ffff17 	ldw	r3,-4(fp)
 40119e0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 40119e4:	e0bffe17 	ldw	r2,-8(fp)
 40119e8:	10000526 	beq	r2,zero,4011a00 <alt_iic_isr_register+0xb4>
 40119ec:	e0bff817 	ldw	r2,-32(fp)
 40119f0:	100b883a 	mov	r5,r2
 40119f4:	e13ffc17 	ldw	r4,-16(fp)
 40119f8:	40117ec0 	call	40117ec <alt_ic_irq_enable>
 40119fc:	00000406 	br	4011a10 <alt_iic_isr_register+0xc4>
 4011a00:	e0bff817 	ldw	r2,-32(fp)
 4011a04:	100b883a 	mov	r5,r2
 4011a08:	e13ffc17 	ldw	r4,-16(fp)
 4011a0c:	40118740 	call	4011874 <alt_ic_irq_disable>
 4011a10:	e0bff715 	stw	r2,-36(fp)
 4011a14:	e0bffa17 	ldw	r2,-24(fp)
 4011a18:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011a1c:	e0bff917 	ldw	r2,-28(fp)
 4011a20:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 4011a24:	e0bff717 	ldw	r2,-36(fp)
}
 4011a28:	e037883a 	mov	sp,fp
 4011a2c:	dfc00117 	ldw	ra,4(sp)
 4011a30:	df000017 	ldw	fp,0(sp)
 4011a34:	dec00204 	addi	sp,sp,8
 4011a38:	f800283a 	ret

04011a3c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 4011a3c:	defff804 	addi	sp,sp,-32
 4011a40:	dfc00715 	stw	ra,28(sp)
 4011a44:	df000615 	stw	fp,24(sp)
 4011a48:	dc000515 	stw	r16,20(sp)
 4011a4c:	df000604 	addi	fp,sp,24
 4011a50:	e13ffb15 	stw	r4,-20(fp)
 4011a54:	e17ffc15 	stw	r5,-16(fp)
 4011a58:	e1bffd15 	stw	r6,-12(fp)
 4011a5c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 4011a60:	e1bffe17 	ldw	r6,-8(fp)
 4011a64:	e17ffd17 	ldw	r5,-12(fp)
 4011a68:	e13ffc17 	ldw	r4,-16(fp)
 4011a6c:	4011e440 	call	4011e44 <open>
 4011a70:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 4011a74:	e0bffa17 	ldw	r2,-24(fp)
 4011a78:	10002216 	blt	r2,zero,4011b04 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 4011a7c:	04010074 	movhi	r16,1025
 4011a80:	840dda04 	addi	r16,r16,14184
 4011a84:	e0bffa17 	ldw	r2,-24(fp)
 4011a88:	01400304 	movi	r5,12
 4011a8c:	1009883a 	mov	r4,r2
 4011a90:	4000bd80 	call	4000bd8 <__mulsi3>
 4011a94:	8085883a 	add	r2,r16,r2
 4011a98:	10c00017 	ldw	r3,0(r2)
 4011a9c:	e0bffb17 	ldw	r2,-20(fp)
 4011aa0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 4011aa4:	04010074 	movhi	r16,1025
 4011aa8:	840dda04 	addi	r16,r16,14184
 4011aac:	e0bffa17 	ldw	r2,-24(fp)
 4011ab0:	01400304 	movi	r5,12
 4011ab4:	1009883a 	mov	r4,r2
 4011ab8:	4000bd80 	call	4000bd8 <__mulsi3>
 4011abc:	8085883a 	add	r2,r16,r2
 4011ac0:	10800104 	addi	r2,r2,4
 4011ac4:	10c00017 	ldw	r3,0(r2)
 4011ac8:	e0bffb17 	ldw	r2,-20(fp)
 4011acc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 4011ad0:	04010074 	movhi	r16,1025
 4011ad4:	840dda04 	addi	r16,r16,14184
 4011ad8:	e0bffa17 	ldw	r2,-24(fp)
 4011adc:	01400304 	movi	r5,12
 4011ae0:	1009883a 	mov	r4,r2
 4011ae4:	4000bd80 	call	4000bd8 <__mulsi3>
 4011ae8:	8085883a 	add	r2,r16,r2
 4011aec:	10800204 	addi	r2,r2,8
 4011af0:	10c00017 	ldw	r3,0(r2)
 4011af4:	e0bffb17 	ldw	r2,-20(fp)
 4011af8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 4011afc:	e13ffa17 	ldw	r4,-24(fp)
 4011b00:	400f0f00 	call	400f0f0 <alt_release_fd>
  }
} 
 4011b04:	0001883a 	nop
 4011b08:	e6ffff04 	addi	sp,fp,-4
 4011b0c:	dfc00217 	ldw	ra,8(sp)
 4011b10:	df000117 	ldw	fp,4(sp)
 4011b14:	dc000017 	ldw	r16,0(sp)
 4011b18:	dec00304 	addi	sp,sp,12
 4011b1c:	f800283a 	ret

04011b20 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 4011b20:	defffb04 	addi	sp,sp,-20
 4011b24:	dfc00415 	stw	ra,16(sp)
 4011b28:	df000315 	stw	fp,12(sp)
 4011b2c:	df000304 	addi	fp,sp,12
 4011b30:	e13ffd15 	stw	r4,-12(fp)
 4011b34:	e17ffe15 	stw	r5,-8(fp)
 4011b38:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 4011b3c:	01c07fc4 	movi	r7,511
 4011b40:	01800044 	movi	r6,1
 4011b44:	e17ffd17 	ldw	r5,-12(fp)
 4011b48:	01010074 	movhi	r4,1025
 4011b4c:	210ddd04 	addi	r4,r4,14196
 4011b50:	4011a3c0 	call	4011a3c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 4011b54:	01c07fc4 	movi	r7,511
 4011b58:	000d883a 	mov	r6,zero
 4011b5c:	e17ffe17 	ldw	r5,-8(fp)
 4011b60:	01010074 	movhi	r4,1025
 4011b64:	210dda04 	addi	r4,r4,14184
 4011b68:	4011a3c0 	call	4011a3c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 4011b6c:	01c07fc4 	movi	r7,511
 4011b70:	01800044 	movi	r6,1
 4011b74:	e17fff17 	ldw	r5,-4(fp)
 4011b78:	01010074 	movhi	r4,1025
 4011b7c:	210de004 	addi	r4,r4,14208
 4011b80:	4011a3c0 	call	4011a3c <alt_open_fd>
}  
 4011b84:	0001883a 	nop
 4011b88:	e037883a 	mov	sp,fp
 4011b8c:	dfc00117 	ldw	ra,4(sp)
 4011b90:	df000017 	ldw	fp,0(sp)
 4011b94:	dec00204 	addi	sp,sp,8
 4011b98:	f800283a 	ret

04011b9c <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 4011b9c:	defff004 	addi	sp,sp,-64
 4011ba0:	df000f15 	stw	fp,60(sp)
 4011ba4:	df000f04 	addi	fp,sp,60
 4011ba8:	e13ffd15 	stw	r4,-12(fp)
 4011bac:	e17ffe15 	stw	r5,-8(fp)
 4011bb0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
 4011bb4:	00bffa84 	movi	r2,-22
 4011bb8:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 4011bbc:	e0bffd17 	ldw	r2,-12(fp)
 4011bc0:	10800828 	cmpgeui	r2,r2,32
 4011bc4:	1000501e 	bne	r2,zero,4011d08 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011bc8:	0005303a 	rdctl	r2,status
 4011bcc:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011bd0:	e0fff617 	ldw	r3,-40(fp)
 4011bd4:	00bfff84 	movi	r2,-2
 4011bd8:	1884703a 	and	r2,r3,r2
 4011bdc:	1001703a 	wrctl	status,r2
  
  return context;
 4011be0:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 4011be4:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
 4011be8:	00810074 	movhi	r2,1025
 4011bec:	10975004 	addi	r2,r2,23872
 4011bf0:	e0fffd17 	ldw	r3,-12(fp)
 4011bf4:	180690fa 	slli	r3,r3,3
 4011bf8:	10c5883a 	add	r2,r2,r3
 4011bfc:	e0ffff17 	ldw	r3,-4(fp)
 4011c00:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
 4011c04:	00810074 	movhi	r2,1025
 4011c08:	10975004 	addi	r2,r2,23872
 4011c0c:	e0fffd17 	ldw	r3,-12(fp)
 4011c10:	180690fa 	slli	r3,r3,3
 4011c14:	10c5883a 	add	r2,r2,r3
 4011c18:	10800104 	addi	r2,r2,4
 4011c1c:	e0fffe17 	ldw	r3,-8(fp)
 4011c20:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 4011c24:	e0bfff17 	ldw	r2,-4(fp)
 4011c28:	10001926 	beq	r2,zero,4011c90 <alt_irq_register+0xf4>
 4011c2c:	e0bffd17 	ldw	r2,-12(fp)
 4011c30:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011c34:	0005303a 	rdctl	r2,status
 4011c38:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011c3c:	e0fff717 	ldw	r3,-36(fp)
 4011c40:	00bfff84 	movi	r2,-2
 4011c44:	1884703a 	and	r2,r3,r2
 4011c48:	1001703a 	wrctl	status,r2
  
  return context;
 4011c4c:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4011c50:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 4011c54:	00c00044 	movi	r3,1
 4011c58:	e0bff217 	ldw	r2,-56(fp)
 4011c5c:	1884983a 	sll	r2,r3,r2
 4011c60:	1007883a 	mov	r3,r2
 4011c64:	d0a2e917 	ldw	r2,-29788(gp)
 4011c68:	1884b03a 	or	r2,r3,r2
 4011c6c:	d0a2e915 	stw	r2,-29788(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4011c70:	d0a2e917 	ldw	r2,-29788(gp)
 4011c74:	100170fa 	wrctl	ienable,r2
 4011c78:	e0bff817 	ldw	r2,-32(fp)
 4011c7c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011c80:	e0bff917 	ldw	r2,-28(fp)
 4011c84:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4011c88:	0005883a 	mov	r2,zero
 4011c8c:	00001906 	br	4011cf4 <alt_irq_register+0x158>
 4011c90:	e0bffd17 	ldw	r2,-12(fp)
 4011c94:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011c98:	0005303a 	rdctl	r2,status
 4011c9c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011ca0:	e0fffa17 	ldw	r3,-24(fp)
 4011ca4:	00bfff84 	movi	r2,-2
 4011ca8:	1884703a 	and	r2,r3,r2
 4011cac:	1001703a 	wrctl	status,r2
  
  return context;
 4011cb0:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4011cb4:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
 4011cb8:	00c00044 	movi	r3,1
 4011cbc:	e0bff417 	ldw	r2,-48(fp)
 4011cc0:	1884983a 	sll	r2,r3,r2
 4011cc4:	0084303a 	nor	r2,zero,r2
 4011cc8:	1007883a 	mov	r3,r2
 4011ccc:	d0a2e917 	ldw	r2,-29788(gp)
 4011cd0:	1884703a 	and	r2,r3,r2
 4011cd4:	d0a2e915 	stw	r2,-29788(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4011cd8:	d0a2e917 	ldw	r2,-29788(gp)
 4011cdc:	100170fa 	wrctl	ienable,r2
 4011ce0:	e0bffb17 	ldw	r2,-20(fp)
 4011ce4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011ce8:	e0bffc17 	ldw	r2,-16(fp)
 4011cec:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4011cf0:	0005883a 	mov	r2,zero
 4011cf4:	e0bff115 	stw	r2,-60(fp)
 4011cf8:	e0bff317 	ldw	r2,-52(fp)
 4011cfc:	e0bff515 	stw	r2,-44(fp)
 4011d00:	e0bff517 	ldw	r2,-44(fp)
 4011d04:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 4011d08:	e0bff117 	ldw	r2,-60(fp)
}
 4011d0c:	e037883a 	mov	sp,fp
 4011d10:	df000017 	ldw	fp,0(sp)
 4011d14:	dec00104 	addi	sp,sp,4
 4011d18:	f800283a 	ret

04011d1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4011d1c:	defffe04 	addi	sp,sp,-8
 4011d20:	dfc00115 	stw	ra,4(sp)
 4011d24:	df000015 	stw	fp,0(sp)
 4011d28:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4011d2c:	d0a01117 	ldw	r2,-32700(gp)
 4011d30:	10000326 	beq	r2,zero,4011d40 <alt_get_errno+0x24>
 4011d34:	d0a01117 	ldw	r2,-32700(gp)
 4011d38:	103ee83a 	callr	r2
 4011d3c:	00000106 	br	4011d44 <alt_get_errno+0x28>
 4011d40:	d0a2e204 	addi	r2,gp,-29816
}
 4011d44:	e037883a 	mov	sp,fp
 4011d48:	dfc00117 	ldw	ra,4(sp)
 4011d4c:	df000017 	ldw	fp,0(sp)
 4011d50:	dec00204 	addi	sp,sp,8
 4011d54:	f800283a 	ret

04011d58 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 4011d58:	defffb04 	addi	sp,sp,-20
 4011d5c:	dfc00415 	stw	ra,16(sp)
 4011d60:	df000315 	stw	fp,12(sp)
 4011d64:	dc000215 	stw	r16,8(sp)
 4011d68:	df000304 	addi	fp,sp,12
 4011d6c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 4011d70:	e0bffe17 	ldw	r2,-8(fp)
 4011d74:	10800217 	ldw	r2,8(r2)
 4011d78:	10d00034 	orhi	r3,r2,16384
 4011d7c:	e0bffe17 	ldw	r2,-8(fp)
 4011d80:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4011d84:	e03ffd15 	stw	zero,-12(fp)
 4011d88:	00002306 	br	4011e18 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4011d8c:	04010074 	movhi	r16,1025
 4011d90:	840dda04 	addi	r16,r16,14184
 4011d94:	e0bffd17 	ldw	r2,-12(fp)
 4011d98:	01400304 	movi	r5,12
 4011d9c:	1009883a 	mov	r4,r2
 4011da0:	4000bd80 	call	4000bd8 <__mulsi3>
 4011da4:	8085883a 	add	r2,r16,r2
 4011da8:	10c00017 	ldw	r3,0(r2)
 4011dac:	e0bffe17 	ldw	r2,-8(fp)
 4011db0:	10800017 	ldw	r2,0(r2)
 4011db4:	1880151e 	bne	r3,r2,4011e0c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4011db8:	04010074 	movhi	r16,1025
 4011dbc:	840dda04 	addi	r16,r16,14184
 4011dc0:	e0bffd17 	ldw	r2,-12(fp)
 4011dc4:	01400304 	movi	r5,12
 4011dc8:	1009883a 	mov	r4,r2
 4011dcc:	4000bd80 	call	4000bd8 <__mulsi3>
 4011dd0:	8085883a 	add	r2,r16,r2
 4011dd4:	10800204 	addi	r2,r2,8
 4011dd8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4011ddc:	10000b0e 	bge	r2,zero,4011e0c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 4011de0:	01400304 	movi	r5,12
 4011de4:	e13ffd17 	ldw	r4,-12(fp)
 4011de8:	4000bd80 	call	4000bd8 <__mulsi3>
 4011dec:	1007883a 	mov	r3,r2
 4011df0:	00810074 	movhi	r2,1025
 4011df4:	108dda04 	addi	r2,r2,14184
 4011df8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4011dfc:	e0bffe17 	ldw	r2,-8(fp)
 4011e00:	18800226 	beq	r3,r2,4011e0c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 4011e04:	00bffcc4 	movi	r2,-13
 4011e08:	00000806 	br	4011e2c <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4011e0c:	e0bffd17 	ldw	r2,-12(fp)
 4011e10:	10800044 	addi	r2,r2,1
 4011e14:	e0bffd15 	stw	r2,-12(fp)
 4011e18:	d0a01017 	ldw	r2,-32704(gp)
 4011e1c:	1007883a 	mov	r3,r2
 4011e20:	e0bffd17 	ldw	r2,-12(fp)
 4011e24:	18bfd92e 	bgeu	r3,r2,4011d8c <__alt_data_end+0xfc011d8c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 4011e28:	0005883a 	mov	r2,zero
}
 4011e2c:	e6ffff04 	addi	sp,fp,-4
 4011e30:	dfc00217 	ldw	ra,8(sp)
 4011e34:	df000117 	ldw	fp,4(sp)
 4011e38:	dc000017 	ldw	r16,0(sp)
 4011e3c:	dec00304 	addi	sp,sp,12
 4011e40:	f800283a 	ret

04011e44 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 4011e44:	defff604 	addi	sp,sp,-40
 4011e48:	dfc00915 	stw	ra,36(sp)
 4011e4c:	df000815 	stw	fp,32(sp)
 4011e50:	df000804 	addi	fp,sp,32
 4011e54:	e13ffd15 	stw	r4,-12(fp)
 4011e58:	e17ffe15 	stw	r5,-8(fp)
 4011e5c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 4011e60:	00bfffc4 	movi	r2,-1
 4011e64:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 4011e68:	00bffb44 	movi	r2,-19
 4011e6c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 4011e70:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 4011e74:	d1600e04 	addi	r5,gp,-32712
 4011e78:	e13ffd17 	ldw	r4,-12(fp)
 4011e7c:	40116ec0 	call	40116ec <alt_find_dev>
 4011e80:	e0bff815 	stw	r2,-32(fp)
 4011e84:	e0bff817 	ldw	r2,-32(fp)
 4011e88:	1000051e 	bne	r2,zero,4011ea0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 4011e8c:	e13ffd17 	ldw	r4,-12(fp)
 4011e90:	40120b40 	call	40120b4 <alt_find_file>
 4011e94:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 4011e98:	00800044 	movi	r2,1
 4011e9c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 4011ea0:	e0bff817 	ldw	r2,-32(fp)
 4011ea4:	10002b26 	beq	r2,zero,4011f54 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 4011ea8:	e13ff817 	ldw	r4,-32(fp)
 4011eac:	40121bc0 	call	40121bc <alt_get_fd>
 4011eb0:	e0bff915 	stw	r2,-28(fp)
 4011eb4:	e0bff917 	ldw	r2,-28(fp)
 4011eb8:	1000030e 	bge	r2,zero,4011ec8 <open+0x84>
    {
      status = index;
 4011ebc:	e0bff917 	ldw	r2,-28(fp)
 4011ec0:	e0bffa15 	stw	r2,-24(fp)
 4011ec4:	00002506 	br	4011f5c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 4011ec8:	01400304 	movi	r5,12
 4011ecc:	e13ff917 	ldw	r4,-28(fp)
 4011ed0:	4000bd80 	call	4000bd8 <__mulsi3>
 4011ed4:	1007883a 	mov	r3,r2
 4011ed8:	00810074 	movhi	r2,1025
 4011edc:	108dda04 	addi	r2,r2,14184
 4011ee0:	1885883a 	add	r2,r3,r2
 4011ee4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 4011ee8:	e0fffe17 	ldw	r3,-8(fp)
 4011eec:	00900034 	movhi	r2,16384
 4011ef0:	10bfffc4 	addi	r2,r2,-1
 4011ef4:	1886703a 	and	r3,r3,r2
 4011ef8:	e0bffc17 	ldw	r2,-16(fp)
 4011efc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 4011f00:	e0bffb17 	ldw	r2,-20(fp)
 4011f04:	1000051e 	bne	r2,zero,4011f1c <open+0xd8>
 4011f08:	e13ffc17 	ldw	r4,-16(fp)
 4011f0c:	4011d580 	call	4011d58 <alt_file_locked>
 4011f10:	e0bffa15 	stw	r2,-24(fp)
 4011f14:	e0bffa17 	ldw	r2,-24(fp)
 4011f18:	10001016 	blt	r2,zero,4011f5c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 4011f1c:	e0bff817 	ldw	r2,-32(fp)
 4011f20:	10800317 	ldw	r2,12(r2)
 4011f24:	10000826 	beq	r2,zero,4011f48 <open+0x104>
 4011f28:	e0bff817 	ldw	r2,-32(fp)
 4011f2c:	10800317 	ldw	r2,12(r2)
 4011f30:	e1ffff17 	ldw	r7,-4(fp)
 4011f34:	e1bffe17 	ldw	r6,-8(fp)
 4011f38:	e17ffd17 	ldw	r5,-12(fp)
 4011f3c:	e13ffc17 	ldw	r4,-16(fp)
 4011f40:	103ee83a 	callr	r2
 4011f44:	00000106 	br	4011f4c <open+0x108>
 4011f48:	0005883a 	mov	r2,zero
 4011f4c:	e0bffa15 	stw	r2,-24(fp)
 4011f50:	00000206 	br	4011f5c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 4011f54:	00bffb44 	movi	r2,-19
 4011f58:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 4011f5c:	e0bffa17 	ldw	r2,-24(fp)
 4011f60:	1000090e 	bge	r2,zero,4011f88 <open+0x144>
  {
    alt_release_fd (index);  
 4011f64:	e13ff917 	ldw	r4,-28(fp)
 4011f68:	400f0f00 	call	400f0f0 <alt_release_fd>
    ALT_ERRNO = -status;
 4011f6c:	4011d1c0 	call	4011d1c <alt_get_errno>
 4011f70:	1007883a 	mov	r3,r2
 4011f74:	e0bffa17 	ldw	r2,-24(fp)
 4011f78:	0085c83a 	sub	r2,zero,r2
 4011f7c:	18800015 	stw	r2,0(r3)
    return -1;
 4011f80:	00bfffc4 	movi	r2,-1
 4011f84:	00000106 	br	4011f8c <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 4011f88:	e0bff917 	ldw	r2,-28(fp)
}
 4011f8c:	e037883a 	mov	sp,fp
 4011f90:	dfc00117 	ldw	ra,4(sp)
 4011f94:	df000017 	ldw	fp,0(sp)
 4011f98:	dec00204 	addi	sp,sp,8
 4011f9c:	f800283a 	ret

04011fa0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 4011fa0:	deffff04 	addi	sp,sp,-4
 4011fa4:	df000015 	stw	fp,0(sp)
 4011fa8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 4011fac:	000170fa 	wrctl	ienable,zero
}
 4011fb0:	0001883a 	nop
 4011fb4:	e037883a 	mov	sp,fp
 4011fb8:	df000017 	ldw	fp,0(sp)
 4011fbc:	dec00104 	addi	sp,sp,4
 4011fc0:	f800283a 	ret

04011fc4 <upper_char_line>:
		0x18187000, // }
		0x00000000, // ~
};

alt_u32 upper_char_line(const alt_u8 char_pos)
{
 4011fc4:	defffe04 	addi	sp,sp,-8
 4011fc8:	df000115 	stw	fp,4(sp)
 4011fcc:	df000104 	addi	fp,sp,4
 4011fd0:	2005883a 	mov	r2,r4
 4011fd4:	e0bfff05 	stb	r2,-4(fp)
	return font32upper[char_pos];
 4011fd8:	e0ffff03 	ldbu	r3,-4(fp)
 4011fdc:	00810074 	movhi	r2,1025
 4011fe0:	108ae904 	addi	r2,r2,11172
 4011fe4:	18c7883a 	add	r3,r3,r3
 4011fe8:	18c7883a 	add	r3,r3,r3
 4011fec:	10c5883a 	add	r2,r2,r3
 4011ff0:	10800017 	ldw	r2,0(r2)
};
 4011ff4:	e037883a 	mov	sp,fp
 4011ff8:	df000017 	ldw	fp,0(sp)
 4011ffc:	dec00104 	addi	sp,sp,4
 4012000:	f800283a 	ret

04012004 <lower_char_line>:

alt_u32 lower_char_line(const alt_u8 char_pos)
{
 4012004:	defffe04 	addi	sp,sp,-8
 4012008:	df000115 	stw	fp,4(sp)
 401200c:	df000104 	addi	fp,sp,4
 4012010:	2005883a 	mov	r2,r4
 4012014:	e0bfff05 	stb	r2,-4(fp)
	return font32lower[char_pos];
 4012018:	e0ffff03 	ldbu	r3,-4(fp)
 401201c:	00810074 	movhi	r2,1025
 4012020:	108b4804 	addi	r2,r2,11552
 4012024:	18c7883a 	add	r3,r3,r3
 4012028:	18c7883a 	add	r3,r3,r3
 401202c:	10c5883a 	add	r2,r2,r3
 4012030:	10800017 	ldw	r2,0(r2)
 4012034:	e037883a 	mov	sp,fp
 4012038:	df000017 	ldw	fp,0(sp)
 401203c:	dec00104 	addi	sp,sp,4
 4012040:	f800283a 	ret

04012044 <HW_CTX_SWITCH>:
	  context switch routine
	**********************************************/

/* registers have been saved into running tcb in exception entry handler */
HW_CTX_SWITCH:
	br gettask
 4012044:	00000006 	br	4012048 <gettask>

04012048 <gettask>:

gettask:
   	call get_next_task //call c-function and return here
 4012048:	4010b8c0 	call	4010b8c <get_next_task>
	br restore_context
 401204c:	00000006 	br	4012050 <restore_context>

04012050 <restore_context>:
 4012050:	00410074 	movhi	at,1025
	
restore_context:
	
	movia	at, current_tcb			# at=current_tcb
 4012054:	08513b04 	addi	at,at,17644
	ldwio   at, 0(at)				# Get address to current_tcb variable
 4012058:	08400037 	ldwio	at,0(at)
 
   	/* re-store r1 (at) last */
	ldwio	r2, TCB_REG_RETURNVALUES+0(at)	
 401205c:	08800337 	ldwio	r2,12(at)
   	ldwio	r3, TCB_REG_RETURNVALUES+4(at)
 4012060:	08c00437 	ldwio	r3,16(at)
    
   	ldwio	r4, TCB_REG_ARG+0(at)
 4012064:	09000537 	ldwio	r4,20(at)
   	ldwio	r5, TCB_REG_ARG+4(at)
 4012068:	09400637 	ldwio	r5,24(at)
   	   	
   	ldwio	r6, TCB_REG_ARG+8(at)
 401206c:	09800737 	ldwio	r6,28(at)
	ldwio 	r7, TCB_REG_ARG+12(at)
 4012070:	09c00837 	ldwio	r7,32(at)
	
	ldwio	r8, TCB_REG_GPR+0(at)
 4012074:	0a000937 	ldwio	r8,36(at)
	ldwio	r9, TCB_REG_GPR+4(at)
 4012078:	0a400a37 	ldwio	r9,40(at)
	ldwio	r10, TCB_REG_GPR+8(at)
 401207c:	0a800b37 	ldwio	r10,44(at)
	ldwio	r11, TCB_REG_GPR+12(at)
 4012080:	0ac00c37 	ldwio	r11,48(at)
	ldwio	r12, TCB_REG_GPR+16(at)
 4012084:	0b000d37 	ldwio	r12,52(at)
	ldwio	r13, TCB_REG_GPR+20(at)
 4012088:	0b400e37 	ldwio	r13,56(at)
	ldwio	r14, TCB_REG_GPR+24(at)
 401208c:	0b800f37 	ldwio	r14,60(at)
	ldwio	r15, TCB_REG_GPR+28(at)
 4012090:	0bc01037 	ldwio	r15,64(at)
	#ldwio	r21, TCB_REG_GPR+52(at)
	#ldwio	r22, TCB_REG_GPR+56(at)
	#ldwio	r23, TCB_REG_GPR+60(at)
	/* r24, r25, r26 not affected */

	ldwio	sp, TCB_STACKPTR(at) # r27 stack pointer 
 4012094:	0ec01e37 	ldwio	sp,120(at)
	ldwio	fp, TCB_REG_FP(at)	 # r28 fram pointer
 4012098:	0f001b37 	ldwio	fp,108(at)
	ldwio	ea, TCB_REG_EA(at)   # r29 return address from interrupt
 401209c:	0f401c37 	ldwio	ea,112(at)
	
	/* r30 not affected */
	
	ldwio	ra, TCB_REG_RA(at) # r31
 40120a0:	0fc01d37 	ldwio	ra,116(at)
	ldwio	at, TCB_REG_AT(at)
 40120a4:	08400237 	ldwio	at,8(at)
		
   	/* Jump to new task, adr in ea */
	eret 	# return from exception
 40120a8:	ef80083a 	eret

040120ac <SW_CTX_SWITCH>:


/* registers have been saved into running tcb in exception entry handler */	
SW_CTX_SWITCH:
	/*** Get new task id ***/
	call get_new_task
 40120ac:	4010cfc0 	call	4010cfc <get_new_task>
	
	br restore_context
 40120b0:	003fe706 	br	4012050 <__alt_data_end+0xfc012050>

040120b4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 40120b4:	defffb04 	addi	sp,sp,-20
 40120b8:	dfc00415 	stw	ra,16(sp)
 40120bc:	df000315 	stw	fp,12(sp)
 40120c0:	df000304 	addi	fp,sp,12
 40120c4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 40120c8:	d0a00c17 	ldw	r2,-32720(gp)
 40120cc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 40120d0:	00003106 	br	4012198 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 40120d4:	e0bffd17 	ldw	r2,-12(fp)
 40120d8:	10800217 	ldw	r2,8(r2)
 40120dc:	1009883a 	mov	r4,r2
 40120e0:	4001c580 	call	4001c58 <strlen>
 40120e4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 40120e8:	e0bffd17 	ldw	r2,-12(fp)
 40120ec:	10c00217 	ldw	r3,8(r2)
 40120f0:	e0bffe17 	ldw	r2,-8(fp)
 40120f4:	10bfffc4 	addi	r2,r2,-1
 40120f8:	1885883a 	add	r2,r3,r2
 40120fc:	10800003 	ldbu	r2,0(r2)
 4012100:	10803fcc 	andi	r2,r2,255
 4012104:	1080201c 	xori	r2,r2,128
 4012108:	10bfe004 	addi	r2,r2,-128
 401210c:	10800bd8 	cmpnei	r2,r2,47
 4012110:	1000031e 	bne	r2,zero,4012120 <alt_find_file+0x6c>
    {
      len -= 1;
 4012114:	e0bffe17 	ldw	r2,-8(fp)
 4012118:	10bfffc4 	addi	r2,r2,-1
 401211c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4012120:	e0bffe17 	ldw	r2,-8(fp)
 4012124:	e0ffff17 	ldw	r3,-4(fp)
 4012128:	1885883a 	add	r2,r3,r2
 401212c:	10800003 	ldbu	r2,0(r2)
 4012130:	10803fcc 	andi	r2,r2,255
 4012134:	1080201c 	xori	r2,r2,128
 4012138:	10bfe004 	addi	r2,r2,-128
 401213c:	10800be0 	cmpeqi	r2,r2,47
 4012140:	1000081e 	bne	r2,zero,4012164 <alt_find_file+0xb0>
 4012144:	e0bffe17 	ldw	r2,-8(fp)
 4012148:	e0ffff17 	ldw	r3,-4(fp)
 401214c:	1885883a 	add	r2,r3,r2
 4012150:	10800003 	ldbu	r2,0(r2)
 4012154:	10803fcc 	andi	r2,r2,255
 4012158:	1080201c 	xori	r2,r2,128
 401215c:	10bfe004 	addi	r2,r2,-128
 4012160:	10000a1e 	bne	r2,zero,401218c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 4012164:	e0bffd17 	ldw	r2,-12(fp)
 4012168:	10800217 	ldw	r2,8(r2)
 401216c:	e0fffe17 	ldw	r3,-8(fp)
 4012170:	180d883a 	mov	r6,r3
 4012174:	e17fff17 	ldw	r5,-4(fp)
 4012178:	1009883a 	mov	r4,r2
 401217c:	40122cc0 	call	40122cc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4012180:	1000021e 	bne	r2,zero,401218c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 4012184:	e0bffd17 	ldw	r2,-12(fp)
 4012188:	00000706 	br	40121a8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 401218c:	e0bffd17 	ldw	r2,-12(fp)
 4012190:	10800017 	ldw	r2,0(r2)
 4012194:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4012198:	e0fffd17 	ldw	r3,-12(fp)
 401219c:	d0a00c04 	addi	r2,gp,-32720
 40121a0:	18bfcc1e 	bne	r3,r2,40120d4 <__alt_data_end+0xfc0120d4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 40121a4:	0005883a 	mov	r2,zero
}
 40121a8:	e037883a 	mov	sp,fp
 40121ac:	dfc00117 	ldw	ra,4(sp)
 40121b0:	df000017 	ldw	fp,0(sp)
 40121b4:	dec00204 	addi	sp,sp,8
 40121b8:	f800283a 	ret

040121bc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 40121bc:	defffa04 	addi	sp,sp,-24
 40121c0:	dfc00515 	stw	ra,20(sp)
 40121c4:	df000415 	stw	fp,16(sp)
 40121c8:	dc000315 	stw	r16,12(sp)
 40121cc:	df000404 	addi	fp,sp,16
 40121d0:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 40121d4:	00bffa04 	movi	r2,-24
 40121d8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 40121dc:	e03ffc15 	stw	zero,-16(fp)
 40121e0:	00001d06 	br	4012258 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 40121e4:	04010074 	movhi	r16,1025
 40121e8:	840dda04 	addi	r16,r16,14184
 40121ec:	e0bffc17 	ldw	r2,-16(fp)
 40121f0:	01400304 	movi	r5,12
 40121f4:	1009883a 	mov	r4,r2
 40121f8:	4000bd80 	call	4000bd8 <__mulsi3>
 40121fc:	8085883a 	add	r2,r16,r2
 4012200:	10800017 	ldw	r2,0(r2)
 4012204:	1000111e 	bne	r2,zero,401224c <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 4012208:	04010074 	movhi	r16,1025
 401220c:	840dda04 	addi	r16,r16,14184
 4012210:	e0bffc17 	ldw	r2,-16(fp)
 4012214:	01400304 	movi	r5,12
 4012218:	1009883a 	mov	r4,r2
 401221c:	4000bd80 	call	4000bd8 <__mulsi3>
 4012220:	8085883a 	add	r2,r16,r2
 4012224:	e0fffe17 	ldw	r3,-8(fp)
 4012228:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 401222c:	d0e01017 	ldw	r3,-32704(gp)
 4012230:	e0bffc17 	ldw	r2,-16(fp)
 4012234:	1880020e 	bge	r3,r2,4012240 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 4012238:	e0bffc17 	ldw	r2,-16(fp)
 401223c:	d0a01015 	stw	r2,-32704(gp)
      }
      rc = i;
 4012240:	e0bffc17 	ldw	r2,-16(fp)
 4012244:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 4012248:	00000606 	br	4012264 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 401224c:	e0bffc17 	ldw	r2,-16(fp)
 4012250:	10800044 	addi	r2,r2,1
 4012254:	e0bffc15 	stw	r2,-16(fp)
 4012258:	e0bffc17 	ldw	r2,-16(fp)
 401225c:	10800810 	cmplti	r2,r2,32
 4012260:	103fe01e 	bne	r2,zero,40121e4 <__alt_data_end+0xfc0121e4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 4012264:	e0bffd17 	ldw	r2,-12(fp)
}
 4012268:	e6ffff04 	addi	sp,fp,-4
 401226c:	dfc00217 	ldw	ra,8(sp)
 4012270:	df000117 	ldw	fp,4(sp)
 4012274:	dc000017 	ldw	r16,0(sp)
 4012278:	dec00304 	addi	sp,sp,12
 401227c:	f800283a 	ret

04012280 <atexit>:
 4012280:	200b883a 	mov	r5,r4
 4012284:	000f883a 	mov	r7,zero
 4012288:	000d883a 	mov	r6,zero
 401228c:	0009883a 	mov	r4,zero
 4012290:	40123481 	jmpi	4012348 <__register_exitproc>

04012294 <exit>:
 4012294:	defffe04 	addi	sp,sp,-8
 4012298:	000b883a 	mov	r5,zero
 401229c:	dc000015 	stw	r16,0(sp)
 40122a0:	dfc00115 	stw	ra,4(sp)
 40122a4:	2021883a 	mov	r16,r4
 40122a8:	40124600 	call	4012460 <__call_exitprocs>
 40122ac:	00810074 	movhi	r2,1025
 40122b0:	108e5a04 	addi	r2,r2,14696
 40122b4:	11000017 	ldw	r4,0(r2)
 40122b8:	20800f17 	ldw	r2,60(r4)
 40122bc:	10000126 	beq	r2,zero,40122c4 <exit+0x30>
 40122c0:	103ee83a 	callr	r2
 40122c4:	8009883a 	mov	r4,r16
 40122c8:	40125e00 	call	40125e0 <_exit>

040122cc <memcmp>:
 40122cc:	01c000c4 	movi	r7,3
 40122d0:	3980192e 	bgeu	r7,r6,4012338 <memcmp+0x6c>
 40122d4:	2144b03a 	or	r2,r4,r5
 40122d8:	11c4703a 	and	r2,r2,r7
 40122dc:	10000f26 	beq	r2,zero,401231c <memcmp+0x50>
 40122e0:	20800003 	ldbu	r2,0(r4)
 40122e4:	28c00003 	ldbu	r3,0(r5)
 40122e8:	10c0151e 	bne	r2,r3,4012340 <memcmp+0x74>
 40122ec:	31bfff84 	addi	r6,r6,-2
 40122f0:	01ffffc4 	movi	r7,-1
 40122f4:	00000406 	br	4012308 <memcmp+0x3c>
 40122f8:	20800003 	ldbu	r2,0(r4)
 40122fc:	28c00003 	ldbu	r3,0(r5)
 4012300:	31bfffc4 	addi	r6,r6,-1
 4012304:	10c00e1e 	bne	r2,r3,4012340 <memcmp+0x74>
 4012308:	21000044 	addi	r4,r4,1
 401230c:	29400044 	addi	r5,r5,1
 4012310:	31fff91e 	bne	r6,r7,40122f8 <__alt_data_end+0xfc0122f8>
 4012314:	0005883a 	mov	r2,zero
 4012318:	f800283a 	ret
 401231c:	20c00017 	ldw	r3,0(r4)
 4012320:	28800017 	ldw	r2,0(r5)
 4012324:	18bfee1e 	bne	r3,r2,40122e0 <__alt_data_end+0xfc0122e0>
 4012328:	31bfff04 	addi	r6,r6,-4
 401232c:	21000104 	addi	r4,r4,4
 4012330:	29400104 	addi	r5,r5,4
 4012334:	39bff936 	bltu	r7,r6,401231c <__alt_data_end+0xfc01231c>
 4012338:	303fe91e 	bne	r6,zero,40122e0 <__alt_data_end+0xfc0122e0>
 401233c:	003ff506 	br	4012314 <__alt_data_end+0xfc012314>
 4012340:	10c5c83a 	sub	r2,r2,r3
 4012344:	f800283a 	ret

04012348 <__register_exitproc>:
 4012348:	defffa04 	addi	sp,sp,-24
 401234c:	dc000315 	stw	r16,12(sp)
 4012350:	04010074 	movhi	r16,1025
 4012354:	840e5a04 	addi	r16,r16,14696
 4012358:	80c00017 	ldw	r3,0(r16)
 401235c:	dc400415 	stw	r17,16(sp)
 4012360:	dfc00515 	stw	ra,20(sp)
 4012364:	18805217 	ldw	r2,328(r3)
 4012368:	2023883a 	mov	r17,r4
 401236c:	10003726 	beq	r2,zero,401244c <__register_exitproc+0x104>
 4012370:	10c00117 	ldw	r3,4(r2)
 4012374:	010007c4 	movi	r4,31
 4012378:	20c00e16 	blt	r4,r3,40123b4 <__register_exitproc+0x6c>
 401237c:	1a000044 	addi	r8,r3,1
 4012380:	8800221e 	bne	r17,zero,401240c <__register_exitproc+0xc4>
 4012384:	18c00084 	addi	r3,r3,2
 4012388:	18c7883a 	add	r3,r3,r3
 401238c:	18c7883a 	add	r3,r3,r3
 4012390:	12000115 	stw	r8,4(r2)
 4012394:	10c7883a 	add	r3,r2,r3
 4012398:	19400015 	stw	r5,0(r3)
 401239c:	0005883a 	mov	r2,zero
 40123a0:	dfc00517 	ldw	ra,20(sp)
 40123a4:	dc400417 	ldw	r17,16(sp)
 40123a8:	dc000317 	ldw	r16,12(sp)
 40123ac:	dec00604 	addi	sp,sp,24
 40123b0:	f800283a 	ret
 40123b4:	00800034 	movhi	r2,0
 40123b8:	10800004 	addi	r2,r2,0
 40123bc:	10002626 	beq	r2,zero,4012458 <__register_exitproc+0x110>
 40123c0:	01006404 	movi	r4,400
 40123c4:	d9400015 	stw	r5,0(sp)
 40123c8:	d9800115 	stw	r6,4(sp)
 40123cc:	d9c00215 	stw	r7,8(sp)
 40123d0:	00000000 	call	0 <alt_exception_trap>
 40123d4:	d9400017 	ldw	r5,0(sp)
 40123d8:	d9800117 	ldw	r6,4(sp)
 40123dc:	d9c00217 	ldw	r7,8(sp)
 40123e0:	10001d26 	beq	r2,zero,4012458 <__register_exitproc+0x110>
 40123e4:	81000017 	ldw	r4,0(r16)
 40123e8:	10000115 	stw	zero,4(r2)
 40123ec:	02000044 	movi	r8,1
 40123f0:	22405217 	ldw	r9,328(r4)
 40123f4:	0007883a 	mov	r3,zero
 40123f8:	12400015 	stw	r9,0(r2)
 40123fc:	20805215 	stw	r2,328(r4)
 4012400:	10006215 	stw	zero,392(r2)
 4012404:	10006315 	stw	zero,396(r2)
 4012408:	883fde26 	beq	r17,zero,4012384 <__alt_data_end+0xfc012384>
 401240c:	18c9883a 	add	r4,r3,r3
 4012410:	2109883a 	add	r4,r4,r4
 4012414:	1109883a 	add	r4,r2,r4
 4012418:	21802215 	stw	r6,136(r4)
 401241c:	01800044 	movi	r6,1
 4012420:	12406217 	ldw	r9,392(r2)
 4012424:	30cc983a 	sll	r6,r6,r3
 4012428:	4992b03a 	or	r9,r9,r6
 401242c:	12406215 	stw	r9,392(r2)
 4012430:	21c04215 	stw	r7,264(r4)
 4012434:	01000084 	movi	r4,2
 4012438:	893fd21e 	bne	r17,r4,4012384 <__alt_data_end+0xfc012384>
 401243c:	11006317 	ldw	r4,396(r2)
 4012440:	218cb03a 	or	r6,r4,r6
 4012444:	11806315 	stw	r6,396(r2)
 4012448:	003fce06 	br	4012384 <__alt_data_end+0xfc012384>
 401244c:	18805304 	addi	r2,r3,332
 4012450:	18805215 	stw	r2,328(r3)
 4012454:	003fc606 	br	4012370 <__alt_data_end+0xfc012370>
 4012458:	00bfffc4 	movi	r2,-1
 401245c:	003fd006 	br	40123a0 <__alt_data_end+0xfc0123a0>

04012460 <__call_exitprocs>:
 4012460:	defff504 	addi	sp,sp,-44
 4012464:	df000915 	stw	fp,36(sp)
 4012468:	dd400615 	stw	r21,24(sp)
 401246c:	dc800315 	stw	r18,12(sp)
 4012470:	dfc00a15 	stw	ra,40(sp)
 4012474:	ddc00815 	stw	r23,32(sp)
 4012478:	dd800715 	stw	r22,28(sp)
 401247c:	dd000515 	stw	r20,20(sp)
 4012480:	dcc00415 	stw	r19,16(sp)
 4012484:	dc400215 	stw	r17,8(sp)
 4012488:	dc000115 	stw	r16,4(sp)
 401248c:	d9000015 	stw	r4,0(sp)
 4012490:	2839883a 	mov	fp,r5
 4012494:	04800044 	movi	r18,1
 4012498:	057fffc4 	movi	r21,-1
 401249c:	00810074 	movhi	r2,1025
 40124a0:	108e5a04 	addi	r2,r2,14696
 40124a4:	12000017 	ldw	r8,0(r2)
 40124a8:	45005217 	ldw	r20,328(r8)
 40124ac:	44c05204 	addi	r19,r8,328
 40124b0:	a0001c26 	beq	r20,zero,4012524 <__call_exitprocs+0xc4>
 40124b4:	a0800117 	ldw	r2,4(r20)
 40124b8:	15ffffc4 	addi	r23,r2,-1
 40124bc:	b8000d16 	blt	r23,zero,40124f4 <__call_exitprocs+0x94>
 40124c0:	14000044 	addi	r16,r2,1
 40124c4:	8421883a 	add	r16,r16,r16
 40124c8:	8421883a 	add	r16,r16,r16
 40124cc:	84402004 	addi	r17,r16,128
 40124d0:	a463883a 	add	r17,r20,r17
 40124d4:	a421883a 	add	r16,r20,r16
 40124d8:	e0001e26 	beq	fp,zero,4012554 <__call_exitprocs+0xf4>
 40124dc:	80804017 	ldw	r2,256(r16)
 40124e0:	e0801c26 	beq	fp,r2,4012554 <__call_exitprocs+0xf4>
 40124e4:	bdffffc4 	addi	r23,r23,-1
 40124e8:	843fff04 	addi	r16,r16,-4
 40124ec:	8c7fff04 	addi	r17,r17,-4
 40124f0:	bd7ff91e 	bne	r23,r21,40124d8 <__alt_data_end+0xfc0124d8>
 40124f4:	00800034 	movhi	r2,0
 40124f8:	10800004 	addi	r2,r2,0
 40124fc:	10000926 	beq	r2,zero,4012524 <__call_exitprocs+0xc4>
 4012500:	a0800117 	ldw	r2,4(r20)
 4012504:	1000301e 	bne	r2,zero,40125c8 <__call_exitprocs+0x168>
 4012508:	a0800017 	ldw	r2,0(r20)
 401250c:	10003226 	beq	r2,zero,40125d8 <__call_exitprocs+0x178>
 4012510:	a009883a 	mov	r4,r20
 4012514:	98800015 	stw	r2,0(r19)
 4012518:	00000000 	call	0 <alt_exception_trap>
 401251c:	9d000017 	ldw	r20,0(r19)
 4012520:	a03fe41e 	bne	r20,zero,40124b4 <__alt_data_end+0xfc0124b4>
 4012524:	dfc00a17 	ldw	ra,40(sp)
 4012528:	df000917 	ldw	fp,36(sp)
 401252c:	ddc00817 	ldw	r23,32(sp)
 4012530:	dd800717 	ldw	r22,28(sp)
 4012534:	dd400617 	ldw	r21,24(sp)
 4012538:	dd000517 	ldw	r20,20(sp)
 401253c:	dcc00417 	ldw	r19,16(sp)
 4012540:	dc800317 	ldw	r18,12(sp)
 4012544:	dc400217 	ldw	r17,8(sp)
 4012548:	dc000117 	ldw	r16,4(sp)
 401254c:	dec00b04 	addi	sp,sp,44
 4012550:	f800283a 	ret
 4012554:	a0800117 	ldw	r2,4(r20)
 4012558:	80c00017 	ldw	r3,0(r16)
 401255c:	10bfffc4 	addi	r2,r2,-1
 4012560:	15c01426 	beq	r2,r23,40125b4 <__call_exitprocs+0x154>
 4012564:	80000015 	stw	zero,0(r16)
 4012568:	183fde26 	beq	r3,zero,40124e4 <__alt_data_end+0xfc0124e4>
 401256c:	95c8983a 	sll	r4,r18,r23
 4012570:	a0806217 	ldw	r2,392(r20)
 4012574:	a5800117 	ldw	r22,4(r20)
 4012578:	2084703a 	and	r2,r4,r2
 401257c:	10000b26 	beq	r2,zero,40125ac <__call_exitprocs+0x14c>
 4012580:	a0806317 	ldw	r2,396(r20)
 4012584:	2088703a 	and	r4,r4,r2
 4012588:	20000c1e 	bne	r4,zero,40125bc <__call_exitprocs+0x15c>
 401258c:	89400017 	ldw	r5,0(r17)
 4012590:	d9000017 	ldw	r4,0(sp)
 4012594:	183ee83a 	callr	r3
 4012598:	a0800117 	ldw	r2,4(r20)
 401259c:	15bfbf1e 	bne	r2,r22,401249c <__alt_data_end+0xfc01249c>
 40125a0:	98800017 	ldw	r2,0(r19)
 40125a4:	153fcf26 	beq	r2,r20,40124e4 <__alt_data_end+0xfc0124e4>
 40125a8:	003fbc06 	br	401249c <__alt_data_end+0xfc01249c>
 40125ac:	183ee83a 	callr	r3
 40125b0:	003ff906 	br	4012598 <__alt_data_end+0xfc012598>
 40125b4:	a5c00115 	stw	r23,4(r20)
 40125b8:	003feb06 	br	4012568 <__alt_data_end+0xfc012568>
 40125bc:	89000017 	ldw	r4,0(r17)
 40125c0:	183ee83a 	callr	r3
 40125c4:	003ff406 	br	4012598 <__alt_data_end+0xfc012598>
 40125c8:	a0800017 	ldw	r2,0(r20)
 40125cc:	a027883a 	mov	r19,r20
 40125d0:	1029883a 	mov	r20,r2
 40125d4:	003fb606 	br	40124b0 <__alt_data_end+0xfc0124b0>
 40125d8:	0005883a 	mov	r2,zero
 40125dc:	003ffb06 	br	40125cc <__alt_data_end+0xfc0125cc>

040125e0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 40125e0:	defffd04 	addi	sp,sp,-12
 40125e4:	df000215 	stw	fp,8(sp)
 40125e8:	df000204 	addi	fp,sp,8
 40125ec:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 40125f0:	0001883a 	nop
 40125f4:	e0bfff17 	ldw	r2,-4(fp)
 40125f8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 40125fc:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 4012600:	10000226 	beq	r2,zero,401260c <_exit+0x2c>
    ALT_SIM_FAIL();
 4012604:	002af070 	cmpltui	zero,zero,43969
 4012608:	00000106 	br	4012610 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 401260c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 4012610:	003fff06 	br	4012610 <__alt_data_end+0xfc012610>
